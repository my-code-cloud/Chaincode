; ModuleID = 'gomodule'
source_filename = "gomodule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm "\09.section \22.go_export\22,\22e\22,@progbits"
module asm "\09.ascii \22v3;\\n\22"
module asm "\09.ascii \22package \22"
module asm "\09.ascii \22marbles_private\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22pkgpath \22"
module asm "\09.ascii \22command-line-arguments\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22import \22"
module asm "\09.ascii \22bytes\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22bytes\22"
module asm "\09.ascii \22 \\\22\22"
module asm "\09.ascii \22bytes\22"
module asm "\09.ascii \22\\\22\\n\22"
module asm "\09.ascii \22import \22"
module asm "\09.ascii \22json\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22encoding/json\22"
module asm "\09.ascii \22 \\\22\22"
module asm "\09.ascii \22encoding/json\22"
module asm "\09.ascii \22\\\22\\n\22"
module asm "\09.ascii \22import \22"
module asm "\09.ascii \22fmt\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22fmt\22"
module asm "\09.ascii \22 \\\22\22"
module asm "\09.ascii \22fmt\22"
module asm "\09.ascii \22\\\22\\n\22"
module asm "\09.ascii \22import \22"
module asm "\09.ascii \22shim\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22github.com/hyperledger/fabric-chaincode-go/shim\22"
module asm "\09.ascii \22 \\\22\22"
module asm "\09.ascii \22github.com/hyperledger/fabric-chaincode-go/shim\22"
module asm "\09.ascii \22\\\22\\n\22"
module asm "\09.ascii \22import \22"
module asm "\09.ascii \22peer\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22github.com/hyperledger/fabric-protos-go/peer\22"
module asm "\09.ascii \22 \\\22\22"
module asm "\09.ascii \22github.com/hyperledger/fabric-protos-go/peer\22"
module asm "\09.ascii \22\\\22\\n\22"
module asm "\09.ascii \22indirectimport \22"
module asm "\09.ascii \22errors\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22errors\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22indirectimport \22"
module asm "\09.ascii \22impl\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google.golang.org/protobuf/internal/impl\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22indirectimport \22"
module asm "\09.ascii \22os\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22os\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22indirectimport \22"
module asm "\09.ascii \22pragma\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google.golang.org/protobuf/internal/pragma\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22indirectimport \22"
module asm "\09.ascii \22proto\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22github.com/golang/protobuf/proto\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22indirectimport \22"
module asm "\09.ascii \22proto\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google.golang.org/protobuf/proto\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22indirectimport \22"
module asm "\09.ascii \22protoiface\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google.golang.org/protobuf/runtime/protoiface\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22indirectimport \22"
module asm "\09.ascii \22protoimpl\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google.golang.org/protobuf/runtime/protoimpl\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22indirectimport \22"
module asm "\09.ascii \22protoreflect\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google.golang.org/protobuf/reflect/protoreflect\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22indirectimport \22"
module asm "\09.ascii \22protowire\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google.golang.org/protobuf/encoding/protowire\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22indirectimport \22"
module asm "\09.ascii \22queryresult\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22github.com/hyperledger/fabric-protos-go/ledger/queryresult\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22indirectimport \22"
module asm "\09.ascii \22reflect\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22reflect\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22indirectimport \22"
module asm "\09.ascii \22sync\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22sync\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22indirectimport \22"
module asm "\09.ascii \22time\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22time\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22indirectimport \22"
module asm "\09.ascii \22timestamp\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22github.com/golang/protobuf/ptypes/timestamp\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22indirectimport \22"
module asm "\09.ascii \22timestamppb\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google.golang.org/protobuf/types/known/timestamppb\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22indirectimport \22"
module asm "\09.ascii \22unsafe\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22unsafe\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22init\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22marbles_private\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~command_x2dline_x2darguments\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22bufio\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22bufio..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22bytes\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22bytes..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22flate\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22compress_1flate..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22gzip\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22compress_1gzip..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22context\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22context..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22crypto\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22crypto..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22cipher\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22crypto_1cipher..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22dsa\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22crypto_1dsa..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22ecdsa\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22crypto_1ecdsa..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22edwards25519\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22crypto_1ed25519_1internal_1edwards25519..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22field\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22crypto_1ed25519_1internal_1edwards25519_1field..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22elliptic\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22crypto_1elliptic..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22fiat\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22crypto_1elliptic_1internal_1fiat..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22nistec\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22crypto_1elliptic_1internal_1nistec..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22randutil\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22crypto_1internal_1randutil..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22md5\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22crypto_1md5..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22rand\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22crypto_1rand..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22rsa\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22crypto_1rsa..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22sha1\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22crypto_1sha1..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22sha256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22crypto_1sha256..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22sha512\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22crypto_1sha512..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22tls\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22crypto_1tls..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22x509\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22crypto_1x509..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22pkix\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22crypto_1x509_1pkix..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22asn1\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22encoding_1asn1..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22base64\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22encoding_1base64..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22binary\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22encoding_1binary..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22hex\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22encoding_1hex..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22json\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22encoding_1json..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22pem\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22encoding_1pem..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22errors\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22errors..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22flag\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22flag..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22fmt\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22fmt..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22jsonpb\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22github_0com_1golang_1protobuf_1jsonpb..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22proto\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22github_0com_1golang_1protobuf_1proto..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22any\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22github_0com_1golang_1protobuf_1ptypes_1any..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22duration\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22github_0com_1golang_1protobuf_1ptypes_1duration..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22timestamp\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22github_0com_1golang_1protobuf_1ptypes_1timestamp..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22shim\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22common\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1common..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22queryresult\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1ledger_1queryresult..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22rwset\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1ledger_1rwset..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22msp\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1msp..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22peer\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22token\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22go_1token..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22chacha20\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22golang_0org_1x_1crypto_1chacha20..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22chacha20poly1305\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22golang_0org_1x_1crypto_1chacha20poly1305..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22cryptobyte\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22golang_0org_1x_1crypto_1cryptobyte..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22curve25519\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22golang_0org_1x_1crypto_1curve25519..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22field\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22golang_0org_1x_1crypto_1curve25519_1internal_1field..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22dnsmessage\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22golang_0org_1x_1net_1dns_1dnsmessage..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22http2\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22golang_0org_1x_1net_1http2..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22hpack\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22golang_0org_1x_1net_1http2_1hpack..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22httpguts\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22golang_0org_1x_1net_1http_1httpguts..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22httpproxy\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22golang_0org_1x_1net_1http_1httpproxy..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22idna\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22golang_0org_1x_1net_1idna..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22timeseries\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22golang_0org_1x_1net_1internal_1timeseries..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22trace\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22golang_0org_1x_1net_1trace..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22unix\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22golang_0org_1x_1sys_1unix..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22bidirule\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22golang_0org_1x_1text_1secure_1bidirule..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22transform\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22golang_0org_1x_1text_1transform..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22bidi\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22golang_0org_1x_1text_1unicode_1bidi..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22norm\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22golang_0org_1x_1text_1unicode_1norm..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22status\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1genproto_1googleapis_1rpc_1status..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22grpc\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22balancer\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1balancer..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22base\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1balancer_1base..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22roundrobin\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1balancer_1roundrobin..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22grpc_binarylog_v1\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1binarylog_1grpc__binarylog__v1..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22codes\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1codes..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22connectivity\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1connectivity..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22credentials\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1credentials..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22encoding\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1encoding..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22proto\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1encoding_1proto..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22grpclog\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1grpclog..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22internal\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1internal..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22backoff\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1internal_1backoff..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22gracefulswitch\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1internal_1balancer_1gracefulswitch..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22balancerload\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1internal_1balancerload..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22binarylog\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1internal_1binarylog..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22channelz\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1internal_1channelz..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22credentials\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1internal_1credentials..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22envconfig\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1internal_1envconfig..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22grpclog\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1internal_1grpclog..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22grpcrand\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1internal_1grpcrand..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22dns\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1internal_1resolver_1dns..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22passthrough\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1internal_1resolver_1passthrough..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22unix\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1internal_1resolver_1unix..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22serviceconfig\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1internal_1serviceconfig..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22syscall\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1internal_1syscall..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22transport\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1internal_1transport..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22resolver\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1grpc_1resolver..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22protojson\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1protobuf_1encoding_1protojson..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22protowire\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1protobuf_1encoding_1protowire..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22descfmt\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1protobuf_1internal_1descfmt..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22descopts\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1protobuf_1internal_1descopts..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22detrand\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1protobuf_1internal_1detrand..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22json\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1protobuf_1internal_1encoding_1json..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22tag\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1protobuf_1internal_1encoding_1tag..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22text\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1protobuf_1internal_1encoding_1text..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22errors\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1protobuf_1internal_1errors..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22filedesc\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1protobuf_1internal_1filedesc..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22filetype\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1protobuf_1internal_1filetype..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22impl\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1protobuf_1internal_1impl..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22order\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1protobuf_1internal_1order..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22proto\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1protobuf_1proto..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22protoreflect\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1protobuf_1reflect_1protoreflect..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22protoregistry\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1protobuf_1reflect_1protoregistry..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22descriptorpb\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1protobuf_1types_1descriptorpb..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22anypb\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1protobuf_1types_1known_1anypb..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22durationpb\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1protobuf_1types_1known_1durationpb..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22emptypb\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1protobuf_1types_1known_1emptypb..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22timestamppb\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22google_0golang_0org_1protobuf_1types_1known_1timestamppb..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22crc32\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22hash_1crc32..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22html\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22html..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22template\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22html_1template..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22cpu\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22internal_1cpu..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22intern\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22internal_1intern..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22oserror\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22internal_1oserror..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22poll\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22internal_1poll..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22reflectlite\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22internal_1reflectlite..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22testlog\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22internal_1testlog..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22io\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22io..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22fs\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22io_1fs..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22ioutil\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22io_1ioutil..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22log\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22log..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22math\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22math..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22big\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22math_1big..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22rand\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22math_1rand..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22mime\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22mime..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22multipart\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22mime_1multipart..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22quotedprintable\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22mime_1quotedprintable..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22net\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22net..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22http\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22net_1http..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22httputil\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22net_1http_1httputil..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22internal\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22net_1http_1internal..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22netip\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22net_1netip..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22textproto\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22net_1textproto..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22os\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22os..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22path\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22path..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22filepath\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22path_1filepath..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22reflect\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22reflect..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22regexp\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22regexp..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22syntax\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22regexp_1syntax..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22runtime\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22runtime..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22sort\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22sort..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22strconv\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22strconv..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22sync\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22sync..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22syscall\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22syscall..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22tabwriter\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22text_1tabwriter..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22template\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22text_1template..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22parse\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22text_1template_1parse..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22time\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22time..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22unicode\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22unicode..import\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22list\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~container_1list\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22aes\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~crypto_1aes\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22des\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~crypto_1des\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22ed25519\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~crypto_1ed25519\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22hmac\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~crypto_1hmac\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22subtle\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~crypto_1internal_1subtle\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22rc4\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~crypto_1rc4\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22subtle\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~crypto_1subtle\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22encoding\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~encoding\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22ptypes\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~github_0com_1golang_1protobuf_1ptypes\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22internal\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_1internal\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22asn1\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~golang_0org_1x_1crypto_1cryptobyte_1asn1\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22hkdf\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~golang_0org_1x_1crypto_1hkdf\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22poly1305\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~golang_0org_1x_1crypto_1internal_1poly1305\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22subtle\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~golang_0org_1x_1crypto_1internal_1subtle\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22attributes\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1grpc_1attributes\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22backoff\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1grpc_1backoff\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22state\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1grpc_1balancer_1grpclb_1state\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22channelz\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1grpc_1channelz\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22insecure\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1grpc_1credentials_1insecure\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22buffer\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1grpc_1internal_1buffer\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22grpcsync\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1grpc_1internal_1grpcsync\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22grpcutil\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1grpc_1internal_1grpcutil\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22metadata\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1grpc_1internal_1metadata\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22pretty\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1grpc_1internal_1pretty\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22resolver\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1grpc_1internal_1resolver\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22status\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1grpc_1internal_1status\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22networktype\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1grpc_1internal_1transport_1networktype\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22keepalive\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1grpc_1keepalive\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22metadata\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1grpc_1metadata\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22peer\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1grpc_1peer\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22serviceconfig\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1grpc_1serviceconfig\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22stats\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1grpc_1stats\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22status\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1grpc_1status\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22tap\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1grpc_1tap\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22prototext\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1protobuf_1encoding_1prototext\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22defval\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1protobuf_1internal_1encoding_1defval\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22messageset\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1protobuf_1internal_1encoding_1messageset\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22flags\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1protobuf_1internal_1flags\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22genid\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1protobuf_1internal_1genid\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22pragma\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1protobuf_1internal_1pragma\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22set\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1protobuf_1internal_1set\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22strs\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1protobuf_1internal_1strs\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22version\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1protobuf_1internal_1version\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22protodesc\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1protobuf_1reflect_1protodesc\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22protoiface\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1protobuf_1runtime_1protoiface\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22protoimpl\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~google_0golang_0org_1protobuf_1runtime_1protoimpl\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22hash\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~hash\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22fnv\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~hash_1fnv\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22abi\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~internal_1abi\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22bytealg\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~internal_1bytealg\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22fmtsort\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~internal_1fmtsort\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22goarch\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~internal_1goarch\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22godebug\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~internal_1godebug\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22goexperiment\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~internal_1goexperiment\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22goos\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~internal_1goos\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22itoa\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~internal_1itoa\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22nettrace\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~internal_1nettrace\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22race\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~internal_1race\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22singleflight\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~internal_1singleflight\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22execenv\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~internal_1syscall_1execenv\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22unix\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~internal_1syscall_1unix\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22unsafeheader\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~internal_1unsafeheader\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22bits\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~math_1bits\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22httptrace\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~net_1http_1httptrace\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22ascii\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~net_1http_1internal_1ascii\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22url\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~net_1url\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22atomic\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~runtime_1internal_1atomic\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22math\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~runtime_1internal_1math\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22sys\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~runtime_1internal_1sys\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22strings\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~strings\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22atomic\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~sync_1atomic\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22utf16\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~unicode_1utf16\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22utf8\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22~unicode_1utf8\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22init_graph\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2232\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2232\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2232\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2232\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2232\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2232\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2232\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2232\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2232\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2232\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2232\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2232\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2232\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2232\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2232\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2232\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2232\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2232\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2232\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2232\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2232\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2261\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2273\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2277\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2283\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2285\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22115\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22150\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2239\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2241\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2240\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2242\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2243\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2261\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2273\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2277\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2283\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2285\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22115\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22150\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2244\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2261\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2261\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2261\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2261\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2261\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22115\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22150\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2261\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2261\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2261\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2261\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2261\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2261\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2261\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2261\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2261\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2261\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2257\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2258\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2261\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2273\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2277\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2283\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2285\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22115\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22150\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2265\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2285\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2268\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2273\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2273\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2273\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2273\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2273\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2273\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2273\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2273\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2274\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2277\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2277\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2285\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2277\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2277\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2277\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2277\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2277\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2277\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2277\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2277\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2277\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2267\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2278\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2279\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2269\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2280\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2283\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2283\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2283\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2283\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2283\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2283\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2283\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2283\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2283\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2283\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2283\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2283\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2283\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2283\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2283\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2283\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2285\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2285\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2285\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2285\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2285\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2285\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2285\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2285\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2285\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2285\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2277\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2283\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2285\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2286\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2287\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2288\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2266\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2276\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2289\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2236\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2237\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2238\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2252\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2259\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2261\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2264\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2270\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2271\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2281\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2285\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2290\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2291\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2234\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2235\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2272\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2275\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2282\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2284\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2292\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2293\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2298\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22109\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22110\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22111\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22112\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2245\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2294\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2295\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2296\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2297\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2299\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22100\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22101\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22102\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22103\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22104\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22105\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22106\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22107\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22108\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22113\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22115\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22115\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22115\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22115\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22115\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22115\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22115\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22115\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22116\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2261\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \229\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2210\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2211\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2212\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2213\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2214\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2215\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2216\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2217\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2218\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2219\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2220\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2223\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2224\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2226\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2227\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2228\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2230\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2246\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2247\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2248\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2249\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2250\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2253\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2254\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2255\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2256\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2260\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2261\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2262\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2263\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22114\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22125\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22126\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22128\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22129\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22130\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22131\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22132\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22134\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22135\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22136\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \221\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \225\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2251\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22118\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22133\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22137\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22138\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22143\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22144\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22150\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22150\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22150\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22150\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22150\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22150\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22141\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22151\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \222\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2233\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22120\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22122\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22123\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22124\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22127\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22139\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22140\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22142\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22146\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22147\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22152\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22154\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \2231\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22117\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22119\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22121\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22145\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22148\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22153\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22149\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22types 418 2\22"
module asm "\09.ascii \22 1164\22"
module asm "\09.ascii \22 63\22"
module asm "\09.ascii \22 76\22"
module asm "\09.ascii \22 91\22"
module asm "\09.ascii \22 92\22"
module asm "\09.ascii \22 98\22"
module asm "\09.ascii \22 96\22"
module asm "\09.ascii \22 757\22"
module asm "\09.ascii \22 829\22"
module asm "\09.ascii \22 723\22"
module asm "\09.ascii \22 753\22"
module asm "\09.ascii \22 713\22"
module asm "\09.ascii \22 123\22"
module asm "\09.ascii \22 71\22"
module asm "\09.ascii \22 133\22"
module asm "\09.ascii \22 78\22"
module asm "\09.ascii \22 80\22"
module asm "\09.ascii \22 72\22"
module asm "\09.ascii \22 82\22"
module asm "\09.ascii \22 446\22"
module asm "\09.ascii \22 73\22"
module asm "\09.ascii \22 82\22"
module asm "\09.ascii \22 215\22"
module asm "\09.ascii \22 133\22"
module asm "\09.ascii \22 79\22"
module asm "\09.ascii \22 1259\22"
module asm "\09.ascii \22 122\22"
module asm "\09.ascii \22 73\22"
module asm "\09.ascii \22 2109\22"
module asm "\09.ascii \22 81\22"
module asm "\09.ascii \22 82\22"
module asm "\09.ascii \22 74\22"
module asm "\09.ascii \22 80\22"
module asm "\09.ascii \22 245\22"
module asm "\09.ascii \22 79\22"
module asm "\09.ascii \22 78\22"
module asm "\09.ascii \22 77\22"
module asm "\09.ascii \22 79\22"
module asm "\09.ascii \22 273\22"
module asm "\09.ascii \22 612\22"
module asm "\09.ascii \22 3003\22"
module asm "\09.ascii \22 75\22"
module asm "\09.ascii \22 73\22"
module asm "\09.ascii \22 77\22"
module asm "\09.ascii \22 120\22"
module asm "\09.ascii \22 75\22"
module asm "\09.ascii \22 77\22"
module asm "\09.ascii \22 74\22"
module asm "\09.ascii \22 79\22"
module asm "\09.ascii \22 82\22"
module asm "\09.ascii \22 1854\22"
module asm "\09.ascii \22 64\22"
module asm "\09.ascii \22 1189\22"
module asm "\09.ascii \22 81\22"
module asm "\09.ascii \22 81\22"
module asm "\09.ascii \22 94\22"
module asm "\09.ascii \22 95\22"
module asm "\09.ascii \22 84\22"
module asm "\09.ascii \22 87\22"
module asm "\09.ascii \22 92\22"
module asm "\09.ascii \22 88\22"
module asm "\09.ascii \22 87\22"
module asm "\09.ascii \22 90\22"
module asm "\09.ascii \22 89\22"
module asm "\09.ascii \22 88\22"
module asm "\09.ascii \22 90\22"
module asm "\09.ascii \22 74\22"
module asm "\09.ascii \22 85\22"
module asm "\09.ascii \22 86\22"
module asm "\09.ascii \22 83\22"
module asm "\09.ascii \22 84\22"
module asm "\09.ascii \22 80\22"
module asm "\09.ascii \22 82\22"
module asm "\09.ascii \22 83\22"
module asm "\09.ascii \22 84\22"
module asm "\09.ascii \22 76\22"
module asm "\09.ascii \22 87\22"
module asm "\09.ascii \22 88\22"
module asm "\09.ascii \22 76\22"
module asm "\09.ascii \22 206\22"
module asm "\09.ascii \22 80\22"
module asm "\09.ascii \22 74\22"
module asm "\09.ascii \22 84\22"
module asm "\09.ascii \22 85\22"
module asm "\09.ascii \22 79\22"
module asm "\09.ascii \22 80\22"
module asm "\09.ascii \22 78\22"
module asm "\09.ascii \22 89\22"
module asm "\09.ascii \22 90\22"
module asm "\09.ascii \22 90\22"
module asm "\09.ascii \22 90\22"
module asm "\09.ascii \22 83\22"
module asm "\09.ascii \22 93\22"
module asm "\09.ascii \22 85\22"
module asm "\09.ascii \22 86\22"
module asm "\09.ascii \22 82\22"
module asm "\09.ascii \22 82\22"
module asm "\09.ascii \22 81\22"
module asm "\09.ascii \22 84\22"
module asm "\09.ascii \22 81\22"
module asm "\09.ascii \22 82\22"
module asm "\09.ascii \22 329\22"
module asm "\09.ascii \22 203\22"
module asm "\09.ascii \22 75\22"
module asm "\09.ascii \22 74\22"
module asm "\09.ascii \22 394\22"
module asm "\09.ascii \22 78\22"
module asm "\09.ascii \22 88\22"
module asm "\09.ascii \22 89\22"
module asm "\09.ascii \22 82\22"
module asm "\09.ascii \22 87\22"
module asm "\09.ascii \22 88\22"
module asm "\09.ascii \22 136\22"
module asm "\09.ascii \22 76\22"
module asm "\09.ascii \22 86\22"
module asm "\09.ascii \22 87\22"
module asm "\09.ascii \22 83\22"
module asm "\09.ascii \22 133\22"
module asm "\09.ascii \22 88\22"
module asm "\09.ascii \22 89\22"
module asm "\09.ascii \22 85\22"
module asm "\09.ascii \22 86\22"
module asm "\09.ascii \22 2238\22"
module asm "\09.ascii \22 205\22"
module asm "\09.ascii \22 874\22"
module asm "\09.ascii \22 92\22"
module asm "\09.ascii \22 93\22"
module asm "\09.ascii \22 83\22"
module asm "\09.ascii \22 87\22"
module asm "\09.ascii \22 84\22"
module asm "\09.ascii \22 81\22"
module asm "\09.ascii \22 82\22"
module asm "\09.ascii \22 86\22"
module asm "\09.ascii \22 78\22"
module asm "\09.ascii \22 78\22"
module asm "\09.ascii \22 80\22"
module asm "\09.ascii \22 81\22"
module asm "\09.ascii \22 82\22"
module asm "\09.ascii \22 85\22"
module asm "\09.ascii \22 89\22"
module asm "\09.ascii \22 86\22"
module asm "\09.ascii \22 90\22"
module asm "\09.ascii \22 81\22"
module asm "\09.ascii \22 78\22"
module asm "\09.ascii \22 82\22"
module asm "\09.ascii \22 635\22"
module asm "\09.ascii \22 357\22"
module asm "\09.ascii \22 95\22"
module asm "\09.ascii \22 38\22"
module asm "\09.ascii \22 2245\22"
module asm "\09.ascii \22 36\22"
module asm "\09.ascii \22 266\22"
module asm "\09.ascii \22 80\22"
module asm "\09.ascii \22 77\22"
module asm "\09.ascii \22 252\22"
module asm "\09.ascii \22 93\22"
module asm "\09.ascii \22 98\22"
module asm "\09.ascii \22 218\22"
module asm "\09.ascii \22 35\22"
module asm "\09.ascii \22 4595\22"
module asm "\09.ascii \22 36\22"
module asm "\09.ascii \22 219\22"
module asm "\09.ascii \22 33\22"
module asm "\09.ascii \22 38\22"
module asm "\09.ascii \22 516\22"
module asm "\09.ascii \22 527\22"
module asm "\09.ascii \22 75\22"
module asm "\09.ascii \22 3552\22"
module asm "\09.ascii \22 77\22"
module asm "\09.ascii \22 37\22"
module asm "\09.ascii \22 49\22"
module asm "\09.ascii \22 93\22"
module asm "\09.ascii \22 105\22"
module asm "\09.ascii \22 119\22"
module asm "\09.ascii \22 93\22"
module asm "\09.ascii \22 34\22"
module asm "\09.ascii \22 12\22"
module asm "\09.ascii \22 23\22"
module asm "\09.ascii \22 23\22"
module asm "\09.ascii \22 61\22"
module asm "\09.ascii \22 48\22"
module asm "\09.ascii \22 63\22"
module asm "\09.ascii \22 37\22"
module asm "\09.ascii \22 37\22"
module asm "\09.ascii \22 34\22"
module asm "\09.ascii \22 23\22"
module asm "\09.ascii \22 34\22"
module asm "\09.ascii \22 33\22"
module asm "\09.ascii \22 34\22"
module asm "\09.ascii \22 34\22"
module asm "\09.ascii \22 48\22"
module asm "\09.ascii \22 49\22"
module asm "\09.ascii \22 62\22"
module asm "\09.ascii \22 62\22"
module asm "\09.ascii \22 35\22"
module asm "\09.ascii \22 49\22"
module asm "\09.ascii \22 35\22"
module asm "\09.ascii \22 35\22"
module asm "\09.ascii \22 35\22"
module asm "\09.ascii \22 53\22"
module asm "\09.ascii \22 51\22"
module asm "\09.ascii \22 51\22"
module asm "\09.ascii \22 53\22"
module asm "\09.ascii \22 51\22"
module asm "\09.ascii \22 53\22"
module asm "\09.ascii \22 33\22"
module asm "\09.ascii \22 35\22"
module asm "\09.ascii \22 35\22"
module asm "\09.ascii \22 33\22"
module asm "\09.ascii \22 49\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 19\22"
module asm "\09.ascii \22 20\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 20\22"
module asm "\09.ascii \22 19\22"
module asm "\09.ascii \22 19\22"
module asm "\09.ascii \22 20\22"
module asm "\09.ascii \22 20\22"
module asm "\09.ascii \22 20\22"
module asm "\09.ascii \22 20\22"
module asm "\09.ascii \22 20\22"
module asm "\09.ascii \22 20\22"
module asm "\09.ascii \22 20\22"
module asm "\09.ascii \22 20\22"
module asm "\09.ascii \22 20\22"
module asm "\09.ascii \22 20\22"
module asm "\09.ascii \22 20\22"
module asm "\09.ascii \22 20\22"
module asm "\09.ascii \22 20\22"
module asm "\09.ascii \22 20\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 19\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 20\22"
module asm "\09.ascii \22 20\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 20\22"
module asm "\09.ascii \22 20\22"
module asm "\09.ascii \22 21\22"
module asm "\09.ascii \22 14\22"
module asm "\09.ascii \22 402\22"
module asm "\09.ascii \22 258\22"
module asm "\09.ascii \22 109\22"
module asm "\09.ascii \22 149\22"
module asm "\09.ascii \22 416\22"
module asm "\09.ascii \22 235\22"
module asm "\09.ascii \22 379\22"
module asm "\09.ascii \22 425\22"
module asm "\09.ascii \22 545\22"
module asm "\09.ascii \22 20\22"
module asm "\09.ascii \22 371\22"
module asm "\09.ascii \22 507\22"
module asm "\09.ascii \22 599\22"
module asm "\09.ascii \22 80\22"
module asm "\09.ascii \22 203\22"
module asm "\09.ascii \22 626\22"
module asm "\09.ascii \22 773\22"
module asm "\09.ascii \22 383\22"
module asm "\09.ascii \22 321\22"
module asm "\09.ascii \22 142\22"
module asm "\09.ascii \22 144\22"
module asm "\09.ascii \22 132\22"
module asm "\09.ascii \22 76\22"
module asm "\09.ascii \22 326\22"
module asm "\09.ascii \22 840\22"
module asm "\09.ascii \22 196\22"
module asm "\09.ascii \22 340\22"
module asm "\09.ascii \22 227\22"
module asm "\09.ascii \22 33\22"
module asm "\09.ascii \22 110\22"
module asm "\09.ascii \22 49\22"
module asm "\09.ascii \22 156\22"
module asm "\09.ascii \22 157\22"
module asm "\09.ascii \22 51\22"
module asm "\09.ascii \22 51\22"
module asm "\09.ascii \22 50\22"
module asm "\09.ascii \22 151\22"
module asm "\09.ascii \22 53\22"
module asm "\09.ascii \22 87\22"
module asm "\09.ascii \22 86\22"
module asm "\09.ascii \22 125\22"
module asm "\09.ascii \22 126\22"
module asm "\09.ascii \22 71\22"
module asm "\09.ascii \22 70\22"
module asm "\09.ascii \22 50\22"
module asm "\09.ascii \22 76\22"
module asm "\09.ascii \22 131\22"
module asm "\09.ascii \22 73\22"
module asm "\09.ascii \22 424\22"
module asm "\09.ascii \22 420\22"
module asm "\09.ascii \22 70\22"
module asm "\09.ascii \22 104\22"
module asm "\09.ascii \22 151\22"
module asm "\09.ascii \22 337\22"
module asm "\09.ascii \22 84\22"
module asm "\09.ascii \22 65\22"
module asm "\09.ascii \22 92\22"
module asm "\09.ascii \22 194\22"
module asm "\09.ascii \22 85\22"
module asm "\09.ascii \22 113\22"
module asm "\09.ascii \22 25\22"
module asm "\09.ascii \22 25\22"
module asm "\09.ascii \22 24\22"
module asm "\09.ascii \22 24\22"
module asm "\09.ascii \22 25\22"
module asm "\09.ascii \22 23\22"
module asm "\09.ascii \22 23\22"
module asm "\09.ascii \22 23\22"
module asm "\09.ascii \22 23\22"
module asm "\09.ascii \22 22\22"
module asm "\09.ascii \22 23\22"
module asm "\09.ascii \22 22\22"
module asm "\09.ascii \22 23\22"
module asm "\09.ascii \22 23\22"
module asm "\09.ascii \22 22\22"
module asm "\09.ascii \22 22\22"
module asm "\09.ascii \22 23\22"
module asm "\09.ascii \22 23\22"
module asm "\09.ascii \22 23\22"
module asm "\09.ascii \22 23\22"
module asm "\09.ascii \22 23\22"
module asm "\09.ascii \22 23\22"
module asm "\09.ascii \22 22\22"
module asm "\09.ascii \22 22\22"
module asm "\09.ascii \22 23\22"
module asm "\09.ascii \22 23\22"
module asm "\09.ascii \22 36\22"
module asm "\09.ascii \22 36\22"
module asm "\09.ascii \22 36\22"
module asm "\09.ascii \22 36\22"
module asm "\09.ascii \22 36\22"
module asm "\09.ascii \22 37\22"
module asm "\09.ascii \22 37\22"
module asm "\09.ascii \22 35\22"
module asm "\09.ascii \22 36\22"
module asm "\09.ascii \22 36\22"
module asm "\09.ascii \22 37\22"
module asm "\09.ascii \22 992\22"
module asm "\09.ascii \22 233\22"
module asm "\09.ascii \22 165\22"
module asm "\09.ascii \22 226\22"
module asm "\09.ascii \22 118\22"
module asm "\09.ascii \22 152\22"
module asm "\09.ascii \22 118\22"
module asm "\09.ascii \22 120\22"
module asm "\09.ascii \22 120\22"
module asm "\09.ascii \22 120\22"
module asm "\09.ascii \22 120\22"
module asm "\09.ascii \22 80\22"
module asm "\09.ascii \22 598\22"
module asm "\09.ascii \22 459\22"
module asm "\09.ascii \22 264\22"
module asm "\09.ascii \22 67\22"
module asm "\09.ascii \22 73\22"
module asm "\09.ascii \22 73\22"
module asm "\09.ascii \22 2823\22"
module asm "\09.ascii \22 77\22"
module asm "\09.ascii \22 88\22"
module asm "\09.ascii \22 88\22"
module asm "\09.ascii \22 354\22"
module asm "\09.ascii \22 239\22"
module asm "\09.ascii \22 97\22"
module asm "\09.ascii \22 180\22"
module asm "\09.ascii \22 158\22"
module asm "\09.ascii \22 72\22"
module asm "\09.ascii \22 70\22"
module asm "\09.ascii \22 128\22"
module asm "\09.ascii \22 221\22"
module asm "\09.ascii \22 116\22"
module asm "\09.ascii \22 116\22"
module asm "\09.ascii \22 115\22"
module asm "\09.ascii \22 86\22"
module asm "\09.ascii \22 117\22"
module asm "\09.ascii \22 249\22"
module asm "\09.ascii \22 52\22"
module asm "\09.ascii \22 72\22"
module asm "\09.ascii \22 51\22"
module asm "\09.ascii \22 48\22"
module asm "\09.ascii \22 48\22"
module asm "\09.ascii \22 48\22"
module asm "\09.ascii \22 48\22"
module asm "\09.ascii \22 49\22"
module asm "\09.ascii \22 49\22"
module asm "\09.ascii \22 49\22"
module asm "\09.ascii \22 49\22"
module asm "\09.ascii \22 23\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22type 1 \\\22MarblesPrivateChaincode\\\22 <type 281>\\n func (t <esc:0x1> <type 212>) Init (stub <esc:0x1> <type 4>) ($ret0 <type 11>) <inl:82>\\n  // ./36.go:37\\n  { //38\\n   $ret0 = <p4>Success($nil) //38\\n   return //38\\n  } //0\\n func (t <esc:0x1> <type 212>) Invoke (stub <type 4>) <type 11>\\n func (t <esc:0x1> <type 212>) .initMarble (stub <type 4>, args <esc:0x1> <type 351>) <type 11>\\n func (t <esc:0x1> <type 212>) .readMarble (stub <type 4>, args <esc:0x9> <type 351>) <type 11>\\n func (t <esc:0x1> <type 212>) .readMarblePrivateDetails (stub <type 4>, args <esc:0x9> <type 351>) <type 11>\\n func (t <esc:0x1> <type 212>) .getMarbleHash (stub <type 4>, args <esc:0x9> <type 351>) <type 11>\\n func (t <esc:0x1> <type 212>) .getMarblePrivateDetailsHash (stub <type 4>, args <esc:0x9> <type 351>) <type 11>\\n func (t <esc:0x1> <type 212>) .delete (stub <type 4>, args <esc:0x1> <type 351>) <type 11>\\n func (t <esc:0x1> <type 212>) .transferMarble (stub <type 4>, args <esc:0x1> <type 351>) <type 11>\\n func (t <esc:0x1> <type 212>) .getMarblesByRange (stub <type 4>, args <esc:0x9> <type 351>) <type 11>\\n func (t <esc:0x1> <type 212>) .checkEndorsingOrg (stub <type 4>) <type 11>\\ntype 2 \\\22github.com/golang/protobuf/proto.Message\\\22 = <type 134>\\ntype 3 \\\22github.com/golang/protobuf/ptypes/timestamp.Timestamp\\\22 = <type 146>\\ntype 4 \\\22github.com/hyperledger/fabric-chaincode-go/shim.ChaincodeStubInterface\\\22 <type 387>\\ntype 5 \\\22github.com/hyperledger/fabric-chaincode-go/shim.CommonIteratorInterface\\\22 <type 384>\\ntype 6 \\\22github.com/hyperledger/fabric-chaincode-go/shim.HistoryQueryIteratorInterface\\\22 <type 386>\\ntype 7 \\\22github.com/hyperledger/fabric-chaincode-go/shim.StateQueryIteratorInterface\\\22 <type 385>\\ntype 8 \\\22github.com/hyperledger/fabric-protos-go/ledger/queryresult.KV\\\22 <type 276>\\n func (m <esc:0x1> <type 238>) Reset ()\\n func (? <esc:0x1> <type 238>) Descriptor () (? <type 356>, ? <type 344>)\\n func (m <type 238>) XXX_Size () <type -11>\\n func (m <type 238>) String () ($ret0 <type -16>)\\n func (? <esc:0x1> <type 238>) ProtoMessage ()\\n func (m <type 238>) XXX_Unmarshal (b <type 356>) <type -19>\\n func (m <esc:0x22> <type 238>) GetNamespace () <type -16>\\n func (m <type 238>) XXX_Marshal (b <type 356>, deterministic <type -15>) (? <type 356>, ? <type -19>)\\n func (m <type 238>) XXX_DiscardUnknown ()\\n func (m <type 238>) XXX_Merge (src <type 2>)\\n func (m <esc:0x22> <type 238>) GetKey () <type -16>\\n func (m <esc:0x22> <type 238>) GetValue () <type 356>\\ntype 9 \\\22github.com/hyperledger/fabric-protos-go/ledger/queryresult.KeyModification\\\22 <type 280>\\n func (m <esc:0x1> <type 239>) Reset ()\\n func (? <esc:0x1> <type 239>) Descriptor () (? <type 356>, ? <type 344>)\\n func (m <type 239>) XXX_Size () <type -11>\\n func (m <type 239>) String () ($ret10 <type -16>)\\n func (? <esc:0x1> <type 239>) ProtoMessage ()\\n func (m <type 239>) XXX_Unmarshal (b <type 356>) <type -19>\\n func (m <type 239>) XXX_Marshal (b <type 356>, deterministic <type -15>) (? <type 356>, ? <type -19>)\\n func (m <type 239>) XXX_DiscardUnknown ()\\n func (m <type 239>) XXX_Merge (src <type 2>)\\n func (m <esc:0x22> <type 239>) GetTxId () <type -16>\\n func (m <esc:0x22> <type 239>) GetValue () <type 356>\\n func (m <esc:0x22> <type 239>) GetTimestamp () <type 256>\\n func (m <esc:0x1> <type 239>) GetIsDelete () <type -15>\\ntype 10 \\\22github.com/hyperledger/fabric-protos-go/peer.QueryResponseMetadata\\\22 <type 272>\\n func (m <esc:0x1> <type 240>) Reset ()\\n func (? <esc:0x1> <type 240>) Descriptor () (? <type 356>, ? <type 344>)\\n func (m <type 240>) XXX_Size () <type -11>\\n func (m <type 240>) String () ($ret240 <type -16>)\\n func (? <esc:0x1> <type 240>) ProtoMessage ()\\n func (m <type 240>) XXX_Unmarshal (b <type 356>) <type -19>\\n func (m <type 240>) XXX_Marshal (b <type 356>, deterministic <type -15>) (? <type 356>, ? <type -19>)\\n func (m <type 240>) XXX_DiscardUnknown ()\\n func (m <type 240>) XXX_Merge (src <type 2>)\\n func (m <esc:0x1> <type 240>) GetFetchedRecordsCount () <type -3>\\n func (m <esc:0x22> <type 240>) GetBookmark () <type -16>\\ntype 11 \\\22github.com/hyperledger/fabric-protos-go/peer.Response\\\22 <type 279>\\n func (m <esc:0x1> <type 241>) Reset ()\\n func (? <esc:0x1> <type 241>) Descriptor () (? <type 356>, ? <type 344>)\\n func (m <type 241>) XXX_Size () <type -11>\\n func (m <type 241>) String () ($ret536 <type -16>)\\n func (? <esc:0x1> <type 241>) ProtoMessage ()\\n func (m <type 241>) XXX_Unmarshal (b <type 356>) <type -19>\\n func (m <esc:0x22> <type 241>) GetPayload () <type 356>\\n func (m <type 241>) XXX_Marshal (b <type 356>, deterministic <type -15>) (? <type 356>, ? <type -19>)\\n func (m <type 241>) XXX_DiscardUnknown ()\\n func (m <type 241>) XXX_Merge (src <type 2>)\\n func (m <esc:0x1> <type 241>) GetStatus () <type -3>\\n func (m <esc:0x22> <type 241>) GetMessage () <type -16>\\ntype 12 \\\22github.com/hyperledger/fabric-protos-go/peer.SignedProposal\\\22 <type 278>\\n func (m <esc:0x22> <type 242>) GetProposalBytes () <type 356>\\n func (m <esc:0x22> <type 242>) GetSignature () <type 356>\\n func (m <type 242>) XXX_Merge (src <type 2>)\\n func (m <type 242>) XXX_DiscardUnknown ()\\n func (m <type 242>) XXX_Marshal (b <type 356>, deterministic <type -15>) (? <type 356>, ? <type -19>)\\n func (m <type 242>) XXX_Unmarshal (b <type 356>) <type -19>\\n func (? <esc:0x1> <type 242>) ProtoMessage ()\\n func (m <type 242>) String () ($ret476 <type -16>)\\n func (m <type 242>) XXX_Size () <type -11>\\n func (? <esc:0x1> <type 242>) Descriptor () (? <type 356>, ? <type 344>)\\n func (m <esc:0x1> <type 242>) Reset ()\\ntype 13 \\\22google.golang.org/protobuf/encoding/protowire.Number\\\22 <type -3>\\n func (n <type 13>) IsValid () ($ret0 <type -15>)\\ntype 14 \\\22google.golang.org/protobuf/encoding/protowire.Type\\\22 <type -1>\\ntype 15 \\\22.google.golang.org/protobuf/internal/impl.atomicNilMessage\\\22 <type 294>\\n func (m <type 245>) Init (mi <type 244>) <type 251>\\ntype 16 \\\22.google.golang.org/protobuf/internal/impl.coderFieldInfo\\\22 <type 287>\\ntype 17 \\\22.google.golang.org/protobuf/internal/impl.coderMessageInfo\\\22 <type 288>\\ntype 18 \\\22.google.golang.org/protobuf/internal/impl.exporter\\\22 <type 196>\\ntype 19 \\\22.google.golang.org/protobuf/internal/impl.extensionFieldInfo\\\22 <type 298>\\ntype 20 \\\22.google.golang.org/protobuf/internal/impl.extensionMap\\\22 <type 365>\\n func (m <esc:0x1> <type 248>) Mutable (xt <type 92>) <type 125>\\n func (m <esc:0x1> <type 248>) Set (xt <type 92>, v <type 125>)\\n func (m <esc:0x1> <type 248>) Get (xt <type 92>) <type 125>\\n func (m <esc:0x1> <type 248>) Has (xt <type 92>) (ok <type -15>)\\n func (m <esc:0x1> <type 248>) Clear (xt <type 92>)\\n func (m <esc:0x1> <type 248>) Range (f <esc:0x1> <type 191>)\\ntype 21 \\\22.google.golang.org/protobuf/internal/impl.fieldInfo\\\22 <type 283>\\ntype 22 \\\22.google.golang.org/protobuf/internal/impl.lazyExtensionValue\\\22 <type 282>\\ntype 23 \\\22.google.golang.org/protobuf/internal/impl.marshalOptions\\\22 <type 285>\\n func (o <type 23>) UseCachedSize () <type -15>\\n func (o <type 23>) Deterministic () <type -15>\\n func (o <type 23>) Options () <type 51>\\ntype 24 \\\22.google.golang.org/protobuf/internal/impl.mergeOptions\\\22 <type 281>\\n func (o <type 24>) Merge (dst <type 52>, src <type 52>)\\ntype 25 \\\22.google.golang.org/protobuf/internal/impl.messageDataType\\\22 <type 293>\\ntype 26 \\\22.google.golang.org/protobuf/internal/impl.messageReflectWrapper\\\22 <type 25>\\n func (m <esc:0x9> <type 251>) Clear (fd <type 94>)\\n func (m <esc:0x2a> <type 251>) ProtoMethods () <type 236>\\n func (m <esc:0x9> <type 251>) WhichOneof (od <type 115>) <type 94>\\n func (m <esc:0x22> <type 251>) .pointer () <type 29>\\n func (m <esc:0x9> <type 251>) Set (fd <type 94>, v <type 125>)\\n func (m <esc:0x22> <type 251>) ProtoMessageInfo () <type 244>\\n func (m <esc:0x6a> <type 251>) Mutable (fd <type 94>) <type 125>\\n func (m <esc:0x32> <type 251>) Descriptor () <type 108>\\n func (m <esc:0x1> <type 251>) IsValid () <type -15>\\n func (m <esc:0x4a> <type 251>) GetUnknown () <type 118>\\n func (m <esc:0x9> <type 251>) Range (f <esc:0x1> <type 191>)\\n func (m <esc:0x6a> <type 251>) NewField (fd <type 94>) <type 125>\\n func (m <esc:0x9> <type 251>) New () <type 107>\\n func (m <esc:0x9> <type 251>) .protoUnwrap () <type 417>\\n func (m <esc:0x1a> <type 251>) Interface () <type 117>\\n func (m <esc:0x9> <type 251>) SetUnknown (b <type 118>)\\n func (m <esc:0x22> <type 251>) .messageInfo () <type 244>\\n func (m <esc:0x9> <type 251>) Has (fd <type 94>) <type -15>\\n func (m <esc:0x22> <type 251>) Type () <type 110>\\n func (m <esc:0x6a> <type 251>) Get (fd <type 94>) <type 125>\\ntype 27 \\\22.google.golang.org/protobuf/internal/impl.offset\\\22 <type -13>\\n func (f <type 27>) IsValid () ($ret784 <type -15>)\\ntype 28 \\\22.google.golang.org/protobuf/internal/impl.oneofInfo\\\22 <type 292>\\ntype 29 \\\22.google.golang.org/protobuf/internal/impl.pointer\\\22 <type 294>\\n func (p <esc:0x12> <type 29>) Int32 () <type 257>\\n func (p <esc:0x12> <type 29>) BytesPtr () <type 215>\\n func (p <esc:0x12> <type 29>) Uint32 () <type 268>\\n func (p <esc:0x1> <type 29>) IsNil () <type -15>\\n func (p <esc:0x12> <type 29>) Uint32Ptr () <type 222>\\n func (p <esc:0x12> <type 29>) BytesSlice () <type 224>\\n func (p <esc:0x12> <type 29>) Float64 () <type 214>\\n func (p <type 29>) AsIfaceOf (t <type 159>) <type 417>\\n func (p <esc:0x12> <type 29>) Uint32Slice () <type 231>\\n func (p <esc:0x12> <type 29>) Int64 () <type 258>\\n func (p <esc:0x22> <type 29>) PointerSlice () <type 343>\\n func (p <esc:0x12> <type 29>) StringPtr () <type 221>\\n func (p <esc:0x12> <type 29>) Uint64Slice () <type 232>\\n func (p <esc:0x12> <type 29>) String () <type 263>\\n func (p <esc:0x12> <type 29>) Bytes () <type 233>\\n func (p <esc:0x12> <type 29>) AsValueOf (t <type 159>) <type 160>\\n func (p <esc:0x12> <type 29>) Float32Ptr () <type 217>\\n func (p <esc:0x12> <type 29>) Float32Slice () <type 226>\\n func (p <esc:0x12> <type 29>) Uint64 () <type 269>\\n func (p <esc:0x12> <type 29>) Float64Slice () <type 227>\\n func (p <esc:0x12> <type 29>) WeakFields () <type 253>\\n func (p <esc:0x12> <type 29>) Float64Ptr () <type 218>\\n func (p <esc:0x1> <type 29>) SetPointer (v <type 29>)\\n func (p <esc:0x12> <type 29>) Bool () <type 211>\\n func (p <esc:0x22> <type 29>) Elem () <type 29>\\n func (p <esc:0x12> <type 29>) Extensions () <type 235>\\n func (p <esc:0x9> <type 29>) AppendPointerSlice (v <type 29>)\\n func (p <esc:0x12> <type 29>) Int32Slice () <type 228>\\n func (p <esc:0x12> <type 29>) Int64Ptr () <type 220>\\n func (p <esc:0x12> <type 29>) Int64Slice () <type 229>\\n func (p <esc:0x12> <type 29>) BoolSlice () <type 225>\\n func (p <esc:0x12> <type 29>) BoolPtr () <type 216>\\n func (p <esc:0x12> <type 29>) Uint64Ptr () <type 223>\\n func (p <esc:0x12> <type 29>) Float32 () <type 213>\\n func (p <esc:0x12> <type 29>) Int32Ptr () <type 219>\\n func (p <esc:0x12> <type 29>) StringSlice () <type 230>\\n func (p <esc:0x12> <type 29>) Apply (f <type 27>) <type 29>\\ntype 30 \\\22.google.golang.org/protobuf/internal/impl.pointerCoderFuncs\\\22 <type 289>\\ntype 31 \\\22.google.golang.org/protobuf/internal/impl.reflectMessageInfo\\\22 <type 284>\\ntype 32 \\\22.google.golang.org/protobuf/internal/impl.structInfo\\\22 <type 296>\\ntype 33 \\\22.google.golang.org/protobuf/internal/impl.unknownFieldsA\\\22 = <type 356>\\ntype 34 \\\22.google.golang.org/protobuf/internal/impl.unmarshalOptions\\\22 <type 286>\\n func (o <esc:0x1> <type 34>) IsDefault () <type -15>\\n func (o <esc:0x1> <type 34>) DiscardUnknown () <type -15>\\n func (o <esc:0x12> <type 34>) Options () <type 53>\\ntype 35 \\\22.google.golang.org/protobuf/internal/impl.unmarshalOutput\\\22 <type 291>\\ntype 36 \\\22.google.golang.org/protobuf/internal/impl.validationInfo\\\22 <type 290>\\ntype 37 \\\22.google.golang.org/protobuf/internal/impl.validationType\\\22 <type -5>\\ntype 38 \\\22.google.golang.org/protobuf/internal/impl.valueCoderFuncs\\\22 <type 295>\\ntype 39 \\\22.google.golang.org/protobuf/internal/impl.weakFields\\\22 <type 46>\\n func (w <esc:0x1> <type 253>) .clear (num <type 96>)\\n func (w <esc:0x1> <type 253>) .set (num <type 96>, m <type 117>)\\n func (w <esc:0x1> <type 39>) .get (num <type 96>) (? <type 117>, ? <type -15>)\\ntype 40 \\\22google.golang.org/protobuf/internal/impl.ExtensionField\\\22 <type 297>\\n func (f <esc:0x12> <type 40>) Type () <type 92>\\n func (f <esc:0x1> <type 243>) SetLazy (t <type 92>, fn <type 179>)\\n func (f <esc:0x2a> <type 243>) Value () <type 125>\\n func (f <esc:0x1> <type 243>) Set (t <type 92>, v <type 125>)\\n func (f <esc:0x1> <type 40>) IsSet () <type -15>\\n func (f <esc:0x9> <type 243>) .lazyInit ()\\n func (f <esc:0x9> <type 243>) .canLazy (xt <esc:0x1> <type 92>) <type -15>\\n func (f <esc:0x9> <type 243>) .appendLazyBytes (xt <type 92>, xi <type 247>, num <type 13>, wtyp <type 14>, b <esc:0x1> <type 356>)\\ntype 41 \\\22google.golang.org/protobuf/internal/impl.MessageInfo\\\22 <type 273>\\n func (mi <esc:0x9> <type 244>) .makeStructInfo (t <type 159>) <type 32>\\n func (mi <esc:0x1> <type 244>) .getPointer (m <type 107>) (p <type 29>, ok <type -15>)\\n func (mi <esc:0x1> <type 244>) .appendExtensions (b <type 356>, ext <esc:0x1> <type 235>, opts <type 23>) (? <type 356>, ? <type -19>)\\n func (mi <esc:0x9> <type 244>) .makeKnownFieldsFunc (si <type 32>)\\n func (mi <type 244>) .marshal (in <type 128>) (out <type 130>, err <type -19>)\\n func (mi <type 244>) Zero () <type 107>\\n func (mi <type 244>) .checkInitialized (in <type 126>) (? <type 127>, ? <type -19>)\\n func (mi <esc:0x1> <type 244>) .mutableUnknownBytes (p <esc:0x12> <type 29>) <type 233>\\n func (mi <type 244>) .marshalAppendPointer (b <type 356>, p <type 29>, opts <type 23>) (? <type 356>, ? <type -19>)\\n func (mi <esc:0x1> <type 244>) .isInitExtensions (ext <esc:0x1> <type 235>) <type -19>\\n func (mi <esc:0x1> <type 244>) .getUnknownBytes (p <esc:0x12> <type 29>) <type 233>\\n func (mi <type 244>) .init ()\\n func (mi <type 244>) .size (in <type 136>) <type 137>\\n func (mi <type 244>) Enum (i <type -11>) <type 87>\\n func (mi <esc:0x3a> <type 244>) .checkField (fd <type 94>) (? <type 249>, ? <type 92>)\\n func (mi <type 244>) .validate (b <type 356>, groupTag <type 13>, opts <type 34>) (out <type 35>, result <type 45>)\\n func (mi <type 244>) MessageOf (m <type 417>) <type 107>\\n func (mi <esc:0x1> <type 244>) .makeExtensionFieldsFunc (t <esc:0x1> <type 159>, si <type 32>)\\n func (mi <type 244>) New () <type 107>\\n func (mi <type 244>) .makeReflectFuncs (t <esc:0x1> <type 159>, si <type 32>)\\n func (mi <esc:0x9> <type 244>) .unmarshalExtension (b <type 356>, num <type 13>, wtyp <type 14>, exts <esc:0x1> <type 365>, opts <type 34>) (out <type 35>, err <type -19>)\\n func (mi <esc:0x9> <type 244>) .makeFieldTypes (si <esc:0x1> <type 32>)\\n func (mi <esc:0x9> <type 244>) .sizePointerSlow (p <type 29>, opts <type 23>) (size <type -11>)\\n func (mi <esc:0x1> <type 244>) .sizeExtensions (ext <esc:0x1> <type 235>, opts <type 23>) (n <type -11>)\\n func (mi <type 244>) .initOnce ()\\n func (mi <type 244>) .unmarshal (in <type 139>) (? <type 141>, ? <type -19>)\\n func (mi <type 244>) .checkInitializedPointer (p <type 29>) <type -19>\\n func (mi <type 244>) .makeCoderMethods (t <esc:0x1> <type 159>, si <type 32>)\\n func (mi <type 244>) .initOneofFieldCoders (od <type 115>, si <esc:0x1> <type 32>)\\n func (mi <type 244>) .makeUnknownFieldsFunc (t <esc:0x1> <type 159>, si <esc:0x1> <type 32>)\\n func (mi <type 244>) .sizePointer (p <type 29>, opts <type 23>) (size <type -11>)\\n func (mi <esc:0x22> <type 244>) Descriptor () <type 108>\\n func (mi <type 244>) Message (i <type -11>) <type 110>\\n func (mi <type 244>) .merge (in <type 131>) <type 132>\\n func (mi <type 244>) .unmarshalPointer (b <type 356>, p <type 29>, groupTag <type 13>, opts <type 34>) (out <type 35>, err <type -19>)\\n func (mi <type 244>) .mergePointer (dst <type 29>, src <type 29>, opts <type 24>)\\ntype 42 \\\22google.golang.org/protobuf/internal/impl.MessageState\\\22 <type 318>\\ntype 43 \\\22google.golang.org/protobuf/internal/impl.SizeCache\\\22 = <type -3>\\ntype 44 \\\22google.golang.org/protobuf/internal/impl.UnknownFields\\\22 = <type 33>\\ntype 45 \\\22google.golang.org/protobuf/internal/impl.ValidationStatus\\\22 <type -11>\\n func (v <type 45>) String () <type -16>\\ntype 46 \\\22google.golang.org/protobuf/internal/impl.WeakFields\\\22 = <type 366>\\ntype 47 \\\22google.golang.org/protobuf/internal/pragma.DoNotCompare\\\22 <type 332>\\ntype 48 \\\22google.golang.org/protobuf/internal/pragma.DoNotCopy\\\22 <type 333>\\ntype 49 \\\22google.golang.org/protobuf/internal/pragma.DoNotImplement\\\22 <type 406>\\ntype 50 \\\22google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals\\\22 <type 281>\\ntype 51 \\\22google.golang.org/protobuf/proto.MarshalOptions\\\22 <type 301>\\n func (o <type 51>) .sizeMessageSet (m <type 107>) (size <type -11>)\\n func (o <type 51>) MarshalAppend (b <type 356>, m <type 52>) (? <type 356>, ? <type -19>)\\n func (o <type 51>) .marshalMap (b <type 356>, fd <type 94>, mapv <type 105>) (? <type 356>, ? <type -19>)\\n func (o <type 51>) .marshalList (b <type 356>, fd <type 94>, list <type 104>) (? <type 356>, ? <type -19>)\\n func (o <type 51>) .sizeList (num <type 13>, fd <type 94>, list <type 104>) (size <type -11>)\\n func (o <type 51>) .sizeField (fd <type 94>, value <type 125>) (size <type -11>)\\n func (o <type 51>) .marshalMessageSlow (b <type 356>, m <type 107>) (? <type 356>, ? <type -19>)\\n func (o <type 51>) .marshal (b <type 356>, m <type 107>) (out <type 130>, err <type -19>)\\n func (o <type 51>) .sizeMap (num <type 13>, fd <type 94>, mapv <type 105>) (size <type -11>)\\n func (o <type 51>) .marshalField (b <type 356>, fd <type 94>, value <type 125>) (? <type 356>, ? <type -19>)\\n func (o <type 51>) .marshalSingular (b <type 356>, fd <type 94>, v <type 125>) (? <type 356>, ? <type -19>)\\n func (o <type 51>) .sizeSingular (num <type 13>, kind <type 103>, v <type 125>) <type -11>\\n func (o <type 51>) .size (m <type 107>) (size <type -11>)\\n func (o <type 51>) Size (m <type 52>) <type -11>\\n func (o <type 51>) .marshalMessageSet (b <type 356>, m <type 107>) (? <type 356>, ? <type -19>)\\n func (o <type 51>) .sizeMessageSlow (m <type 107>) (size <type -11>)\\n func (o <type 51>) MarshalState (in <type 128>) (? <type 130>, ? <type -19>)\\n func (o <type 51>) .marshalMessageSetField (b <type 356>, fd <type 94>, value <type 125>) (? <type 356>, ? <type -19>)\\n func (o <type 51>) Marshal (m <type 52>) (? <type 356>, ? <type -19>)\\n func (o <type 51>) .marshalMessage (b <type 356>, m <type 107>) (? <type 356>, ? <type -19>)\\ntype 52 \\\22google.golang.org/protobuf/proto.Message\\\22 = <type 117>\\ntype 53 \\\22google.golang.org/protobuf/proto.UnmarshalOptions\\\22 <type 308>\\n func (o <type 53>) Unmarshal (b <type 356>, m <type 52>) <type -19>\\n func (o <type 53>) UnmarshalState (in <type 139>) (? <type 141>, ? <type -19>)\\n func (o <type 53>) .unmarshalMap (b <type 356>, wtyp <type 14>, mapv <type 105>, fd <type 94>) (n <type -11>, err <type -19>)\\n func (o <type 53>) .unmarshal (b <type 356>, m <type 107>) (out <type 141>, err <type -19>)\\n func (o <type 53>) .unmarshalMessage (b <type 356>, m <type 107>) <type -19>\\n func (o <type 53>) .unmarshalMessageSetField (m <type 107>, num <type 13>, v <type 356>) <type -19>\\n func (o <type 53>) .unmarshalMessageSlow (b <type 356>, m <type 107>) <type -19>\\n func (o <type 53>) .unmarshalSingular (b <type 356>, wtyp <type 14>, m <type 107>, fd <type 94>) (n <type -11>, err <type -19>)\\n func (o <esc:0x1> <type 53>) .unmarshalScalar (b <esc:0x12> <type 356>, wtyp <type 14>, fd <type 94>) (val <type 125>, n <type -11>, err <type -19>)\\n func (o <type 53>) .unmarshalList (b <type 356>, wtyp <type 14>, list <type 104>, fd <type 94>) (n <type -11>, err <type -19>)\\n func (o <type 53>) .unmarshalMessageSet (b <type 356>, m <type 107>) <type -19>\\ntype 54 \\\22.google.golang.org/protobuf/reflect/protoreflect.appendFunc\\\22 <type 171>\\ntype 55 \\\22.google.golang.org/protobuf/reflect/protoreflect.cardinality\\\22 <type -1>\\ntype 56 \\\22.google.golang.org/protobuf/reflect/protoreflect.checkInitializedInput\\\22 = <type 309>\\ntype 57 \\\22.google.golang.org/protobuf/reflect/protoreflect.checkInitializedOutput\\\22 = <type 300>\\ntype 58 \\\22.google.golang.org/protobuf/reflect/protoreflect.doNotImplement\\\22 <type 49>\\ntype 59 \\\22.google.golang.org/protobuf/reflect/protoreflect.isEnumDescriptor\\\22 <type 409>\\ntype 60 \\\22.google.golang.org/protobuf/reflect/protoreflect.isEnumValueDescriptor\\\22 <type 410>\\ntype 61 \\\22.google.golang.org/protobuf/reflect/protoreflect.isFieldDescriptor\\\22 <type 411>\\ntype 62 \\\22.google.golang.org/protobuf/reflect/protoreflect.isFileDescriptor\\\22 <type 412>\\ntype 63 \\\22.google.golang.org/protobuf/reflect/protoreflect.isMessageDescriptor\\\22 <type 413>\\ntype 64 \\\22.google.golang.org/protobuf/reflect/protoreflect.isMethodDescriptor\\\22 <type 414>\\ntype 65 \\\22.google.golang.org/protobuf/reflect/protoreflect.isOneofDescriptor\\\22 <type 415>\\ntype 66 \\\22.google.golang.org/protobuf/reflect/protoreflect.isServiceDescriptor\\\22 <type 416>\\ntype 67 \\\22.google.golang.org/protobuf/reflect/protoreflect.kind\\\22 <type -1>\\ntype 68 \\\22.google.golang.org/protobuf/reflect/protoreflect.marshalInput\\\22 = <type 311>\\ntype 69 \\\22.google.golang.org/protobuf/reflect/protoreflect.marshalOutput\\\22 = <type 302>\\ntype 70 \\\22.google.golang.org/protobuf/reflect/protoreflect.mergeInput\\\22 = <type 317>\\ntype 71 \\\22.google.golang.org/protobuf/reflect/protoreflect.mergeOutput\\\22 = <type 307>\\ntype 72 \\\22.google.golang.org/protobuf/reflect/protoreflect.methods\\\22 = <type 303>\\ntype 73 \\\22.google.golang.org/protobuf/reflect/protoreflect.sizeInput\\\22 = <type 315>\\ntype 74 \\\22.google.golang.org/protobuf/reflect/protoreflect.sizeOutput\\\22 = <type 316>\\ntype 75 \\\22.google.golang.org/protobuf/reflect/protoreflect.supportFlags\\\22 = <type -8>\\ntype 76 \\\22.google.golang.org/protobuf/reflect/protoreflect.syntax\\\22 <type -1>\\ntype 77 \\\22.google.golang.org/protobuf/reflect/protoreflect.unmarshalInput\\\22 = <type 312>\\ntype 78 \\\22.google.golang.org/protobuf/reflect/protoreflect.unmarshalOutput\\\22 = <type 307>\\ntype 79 \\\22.google.golang.org/protobuf/reflect/protoreflect.value\\\22 <type 299>\\ntype 80 \\\22google.golang.org/protobuf/reflect/protoreflect.Cardinality\\\22 <type 55>\\n func (c <type 80>) GoString () <type -16>\\n func (c <type 80>) String () <type -16>\\n func (c <type 80>) IsValid () <type -15>\\ntype 81 \\\22google.golang.org/protobuf/reflect/protoreflect.Descriptor\\\22 <type 399>\\ntype 82 \\\22google.golang.org/protobuf/reflect/protoreflect.Enum\\\22 <type 389>\\ntype 83 \\\22google.golang.org/protobuf/reflect/protoreflect.EnumDescriptor\\\22 <type 398>\\ntype 84 \\\22google.golang.org/protobuf/reflect/protoreflect.EnumDescriptors\\\22 <type 373>\\ntype 85 \\\22google.golang.org/protobuf/reflect/protoreflect.EnumNumber\\\22 <type -3>\\ntype 86 \\\22google.golang.org/protobuf/reflect/protoreflect.EnumRanges\\\22 <type 401>\\ntype 87 \\\22google.golang.org/protobuf/reflect/protoreflect.EnumType\\\22 <type 388>\\ntype 88 \\\22google.golang.org/protobuf/reflect/protoreflect.EnumValueDescriptor\\\22 <type 397>\\ntype 89 \\\22google.golang.org/protobuf/reflect/protoreflect.EnumValueDescriptors\\\22 <type 374>\\ntype 90 \\\22google.golang.org/protobuf/reflect/protoreflect.ExtensionDescriptor\\\22 = <type 94>\\ntype 91 \\\22google.golang.org/protobuf/reflect/protoreflect.ExtensionDescriptors\\\22 <type 375>\\ntype 92 \\\22google.golang.org/protobuf/reflect/protoreflect.ExtensionType\\\22 <type 405>\\ntype 93 \\\22google.golang.org/protobuf/reflect/protoreflect.ExtensionTypeDescriptor\\\22 <type 380>\\ntype 94 \\\22google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor\\\22 <type 381>\\ntype 95 \\\22google.golang.org/protobuf/reflect/protoreflect.FieldDescriptors\\\22 <type 372>\\ntype 96 \\\22google.golang.org/protobuf/reflect/protoreflect.FieldNumber\\\22 = <type 13>\\ntype 97 \\\22google.golang.org/protobuf/reflect/protoreflect.FieldNumbers\\\22 <type 402>\\ntype 98 \\\22google.golang.org/protobuf/reflect/protoreflect.FieldRanges\\\22 <type 400>\\ntype 99 \\\22google.golang.org/protobuf/reflect/protoreflect.FileDescriptor\\\22 <type 392>\\ntype 100 \\\22google.golang.org/protobuf/reflect/protoreflect.FileImport\\\22 <type 319>\\ntype 101 \\\22google.golang.org/protobuf/reflect/protoreflect.FileImports\\\22 <type 403>\\ntype 102 \\\22google.golang.org/protobuf/reflect/protoreflect.FullName\\\22 <type -16>\\n func (n <esc:0x12> <type 102>) Parent () ($ret14 <type 102>)\\n func (n <esc:0x1> <type 102>) Append (s <esc:0x12> <type 113>) <type 102>\\n func (n <esc:0x12> <type 102>) Name () ($ret13 <type 113>)\\n func (s <esc:0x1> <type 102>) IsValid () <type -15>\\ntype 103 \\\22google.golang.org/protobuf/reflect/protoreflect.Kind\\\22 <type 67>\\n func (k <type 103>) GoString () <type -16>\\n func (k <type 103>) String () <type -16>\\n func (k <type 103>) IsValid () <type -15>\\ntype 104 \\\22google.golang.org/protobuf/reflect/protoreflect.List\\\22 <type 370>\\ntype 105 \\\22google.golang.org/protobuf/reflect/protoreflect.Map\\\22 <type 383>\\ntype 106 \\\22google.golang.org/protobuf/reflect/protoreflect.MapKey\\\22 <type 79>\\n func (k <esc:0x12> <type 106>) Value () ($ret80 <type 125>)\\n func (k <type 106>) String () <type -16>\\n func (k <type 106>) Uint () <type -8>\\n func (k <type 106>) Int () <type -4>\\n func (k <type 106>) Bool () <type -15>\\n func (k <type 106>) Interface () <type 417>\\n func (k <esc:0x1> <type 106>) IsValid () <type -15>\\ntype 107 \\\22google.golang.org/protobuf/reflect/protoreflect.Message\\\22 <type 382>\\ntype 108 \\\22google.golang.org/protobuf/reflect/protoreflect.MessageDescriptor\\\22 <type 391>\\ntype 109 \\\22google.golang.org/protobuf/reflect/protoreflect.MessageDescriptors\\\22 <type 376>\\ntype 110 \\\22google.golang.org/protobuf/reflect/protoreflect.MessageType\\\22 <type 390>\\ntype 111 \\\22google.golang.org/protobuf/reflect/protoreflect.MethodDescriptor\\\22 <type 395>\\ntype 112 \\\22google.golang.org/protobuf/reflect/protoreflect.MethodDescriptors\\\22 <type 377>\\ntype 113 \\\22google.golang.org/protobuf/reflect/protoreflect.Name\\\22 <type -16>\\n func (s <esc:0x1> <type 113>) IsValid () ($ret9 <type -15>)\\ntype 114 \\\22google.golang.org/protobuf/reflect/protoreflect.Names\\\22 <type 404>\\ntype 115 \\\22google.golang.org/protobuf/reflect/protoreflect.OneofDescriptor\\\22 <type 393>\\ntype 116 \\\22google.golang.org/protobuf/reflect/protoreflect.OneofDescriptors\\\22 <type 378>\\ntype 117 \\\22google.golang.org/protobuf/reflect/protoreflect.ProtoMessage\\\22 <type 408>\\ntype 118 \\\22google.golang.org/protobuf/reflect/protoreflect.RawFields\\\22 <type 356>\\n func (b <esc:0x1> <type 118>) IsValid () <type -15>\\ntype 119 \\\22google.golang.org/protobuf/reflect/protoreflect.ServiceDescriptor\\\22 <type 396>\\ntype 120 \\\22google.golang.org/protobuf/reflect/protoreflect.ServiceDescriptors\\\22 <type 379>\\ntype 121 \\\22google.golang.org/protobuf/reflect/protoreflect.SourceLocation\\\22 <type 277>\\ntype 122 \\\22google.golang.org/protobuf/reflect/protoreflect.SourceLocations\\\22 <type 371>\\ntype 123 \\\22google.golang.org/protobuf/reflect/protoreflect.SourcePath\\\22 <type 346>\\n func (p1 <esc:0x1> <type 123>) Equal (p2 <esc:0x1> <type 123>) ($ret16 <type -15>)\\n func (p <type 254>) .appendMessageOptions (b <type 356>) <type 356>\\n func (p <type 254>) .appendSourceCodeInfo_Location (b <type 356>) <type 356>\\n func (p <type 254>) .appendServiceOptions (b <type 356>) <type 356>\\n func (p <type 254>) .appendEnumValueDescriptorProto (b <type 356>) <type 356>\\n func (p <type 254>) .appendEnumDescriptorProto_EnumReservedRange (b <type 356>) <type 356>\\n func (p <type 254>) .appendFieldOptions (b <type 356>) <type 356>\\n func (p <type 254>) .appendSingularField (b <type 356>, name <esc:0x1> <type -16>, f <esc:0x2a> <type 54>) ($ret18 <type 356>)\\n func (p <type 254>) .appendEnumDescriptorProto (b <type 356>) <type 356>\\n func (p <type 254>) .appendRepeatedField (b <type 356>, name <esc:0x1> <type -16>, f <esc:0x2a> <type 54>) <type 356>\\n func (p <type 254>) .appendEnumOptions (b <type 356>) <type 356>\\n func (p <type 254>) .appendOneofOptions (b <type 356>) <type 356>\\n func (p <type 254>) .appendEnumValueOptions (b <type 356>) <type 356>\\n func (p <type 254>) .appendFileDescriptorProto (b <type 356>) <type 356>\\n func (p <type 254>) .appendDescriptorProto_ReservedRange (b <type 356>) <type 356>\\n func (p <type 254>) .appendOneofDescriptorProto (b <type 356>) <type 356>\\n func (p <type 254>) .appendFileOptions (b <type 356>) <type 356>\\n func (p <type 254>) .appendServiceDescriptorProto (b <type 356>) <type 356>\\n func (p <type 254>) .appendFieldDescriptorProto (b <type 356>) <type 356>\\n func (p <type 254>) .appendMethodDescriptorProto (b <type 356>) <type 356>\\n func (p <type 254>) .appendExtensionRangeOptions (b <type 356>) <type 356>\\n func (p <type 254>) .appendDescriptorProto_ExtensionRange (b <type 356>) <type 356>\\n func (p <type 254>) .appendSourceCodeInfo (b <type 356>) <type 356>\\n func (p <type 123>) String () <type -16>\\n func (p <type 254>) .appendUninterpretedOption (b <type 356>) <type 356>\\n func (p <type 254>) .appendMethodOptions (b <type 356>) <type 356>\\n func (p <type 254>) .appendDescriptorProto (b <type 356>) <type 356>\\n func (p <type 254>) .appendUninterpretedOption_NamePart (b <type 356>) <type 356>\\ntype 124 \\\22google.golang.org/protobuf/reflect/protoreflect.Syntax\\\22 <type 76>\\n func (s <type 124>) GoString () <type -16>\\n func (s <type 124>) String () <type -16>\\n func (s <type 124>) IsValid () <type -15>\\ntype 125 \\\22google.golang.org/protobuf/reflect/protoreflect.Value\\\22 <type 79>\\n func (v <type 125>) Bytes () <type 356>\\n func (v <type 125>) String () <type -16>\\n func (v <type 125>) Map () <type 105>\\n func (v <esc:0x1> <type 125>) IsValid () <type -15>\\n func (v <type 125>) List () <type 104>\\n func (v <type 125>) Uint () <type -8>\\n func (v <type 125>) Bool () <type -15>\\n func (v <type 125>) Int () <type -4>\\n func (v <type 125>) .getIface () (x <type 417>)\\n func (v <type 125>) MapKey () <type 106>\\n func (v <type 125>) .getBytes () (x <type 356>)\\n func (v <type 125>) .panicMessage (what <type -16>) <type -16>\\n func (v <type 125>) Enum () <type 85>\\n func (v <type 125>) .getString () (x <type -16>)\\n func (v <type 125>) Float () <type -10>\\n func (v <type 125>) Interface () <type 417>\\n func (v <type 125>) .typeName () <type -16>\\n func (v <type 125>) Message () <type 107>\\ntype 126 \\\22google.golang.org/protobuf/runtime/protoiface.CheckInitializedInput\\\22 = <type 309>\\ntype 127 \\\22google.golang.org/protobuf/runtime/protoiface.CheckInitializedOutput\\\22 = <type 300>\\ntype 128 \\\22google.golang.org/protobuf/runtime/protoiface.MarshalInput\\\22 = <type 310>\\ntype 129 \\\22google.golang.org/protobuf/runtime/protoiface.MarshalInputFlags\\\22 = <type -5>\\ntype 130 \\\22google.golang.org/protobuf/runtime/protoiface.MarshalOutput\\\22 = <type 302>\\ntype 131 \\\22google.golang.org/protobuf/runtime/protoiface.MergeInput\\\22 = <type 317>\\ntype 132 \\\22google.golang.org/protobuf/runtime/protoiface.MergeOutput\\\22 = <type 305>\\ntype 133 \\\22google.golang.org/protobuf/runtime/protoiface.MergeOutputFlags\\\22 = <type -5>\\ntype 134 \\\22google.golang.org/protobuf/runtime/protoiface.MessageV1\\\22 <type 407>\\ntype 135 \\\22google.golang.org/protobuf/runtime/protoiface.Methods\\\22 = <type 304>\\ntype 136 \\\22google.golang.org/protobuf/runtime/protoiface.SizeInput\\\22 = <type 314>\\ntype 137 \\\22google.golang.org/protobuf/runtime/protoiface.SizeOutput\\\22 = <type 316>\\ntype 138 \\\22google.golang.org/protobuf/runtime/protoiface.SupportFlags\\\22 = <type -8>\\ntype 139 \\\22google.golang.org/protobuf/runtime/protoiface.UnmarshalInput\\\22 = <type 313>\\ntype 140 \\\22google.golang.org/protobuf/runtime/protoiface.UnmarshalInputFlags\\\22 = <type -5>\\ntype 141 \\\22google.golang.org/protobuf/runtime/protoiface.UnmarshalOutput\\\22 = <type 306>\\ntype 142 \\\22google.golang.org/protobuf/runtime/protoiface.UnmarshalOutputFlags\\\22 = <type -5>\\ntype 143 \\\22google.golang.org/protobuf/runtime/protoimpl.MessageState\\\22 = <type 42>\\ntype 144 \\\22google.golang.org/protobuf/runtime/protoimpl.SizeCache\\\22 = <type 43>\\ntype 145 \\\22google.golang.org/protobuf/runtime/protoimpl.UnknownFields\\\22 = <type 44>\\ntype 146 \\\22google.golang.org/protobuf/types/known/timestamppb.Timestamp\\\22 <type 320>\\n func (x <esc:0x1> <type 256>) GetNanos () <type -3>\\n func (x <type 256>) ProtoReflect () <type 107>\\n func (? <esc:0x1> <type 256>) Descriptor () (? <type 356>, ? <type 344>)\\n func (x <type 256>) Reset ()\\n func (? <esc:0x1> <type 256>) ProtoMessage ()\\n func (x <type 256>) String () <type -16>\\n func (x <esc:0x1> <type 256>) .check () <type -12>\\n func (x <esc:0x1> <type 256>) GetSeconds () <type -4>\\n func (x <type 256>) CheckValid () <type -19>\\n func (x <esc:0x1> <type 256>) IsValid () <type -15>\\n func (x <esc:0x1> <type 256>) AsTime () <type 168>\\ntype 147 \\\22.reflect.flag\\\22 <type -13>\\n func (f <type 147>) .kind () ($ret98 <type 154>)\\n func (f <type 147>) .ro () ($ret99 <type 147>)\\n func (f <type 147>) .mustBe (expected <type 154>)\\n func (f <type 147>) .mustBeExported ()\\n func (f <type 147>) .mustBeAssignableSlow ()\\n func (f <type 147>) .mustBeExportedSlow ()\\n func (f <type 147>) .mustBeAssignable ()\\ntype 148 \\\22.reflect.hiter\\\22 <type 321>\\n func (h <esc:0x1> <type 260>) .initialized () <type -15>\\ntype 149 \\\22.reflect.method\\\22 <type 324>\\ntype 150 \\\22.reflect.rtype\\\22 <type 325>\\n func (t <esc:0x1> <type 261>) NumOut () <type -11>\\n func (t <esc:0x9> <type 261>) Implements (u <type 159>) <type -15>\\n func (t <esc:0x22> <type 261>) Key () <type 159>\\n func (t <esc:0x32> <type 261>) Field (i <type -11>) <type 157>\\n func (t <type 261>) FieldByNameFunc (match <esc:0x1> <type 197>) (? <type 157>, ? <type -15>)\\n func (t <esc:0x1> <type 261>) IsVariadic () <type -15>\\n func (t <esc:0x1> <type 261>) Align () <type -11>\\n func (t <esc:0x1> <type 261>) Kind () <type 154>\\n func (t <esc:0x22> <type 261>) Elem () <type 159>\\n func (t <esc:0x32> <type 261>) .rawString () <type -16>\\n func (t <type 261>) FieldByName (name <esc:0x1> <type -16>) (? <type 157>, ? <type -15>)\\n func (t <esc:0x9> <type 261>) NumMethod () <type -11>\\n func (t <esc:0x1> <type 261>) .pointers () <type -15>\\n func (t <esc:0x9> <type 261>) ConvertibleTo (u <esc:0x9> <type 159>) <type -15>\\n func (t <esc:0x32> <type 261>) Out (i <type -11>) <type 159>\\n func (t <esc:0x3a> <type 261>) Method (i <type -11>) (m <type 156>)\\n func (t <type 261>) FieldByIndex (index <esc:0x1> <type 344>) <type 157>\\n func (t <esc:0x3a> <type 261>) MethodByName (name <esc:0x1> <type -16>) (m <type 156>, ok <type -15>)\\n func (t <esc:0x1> <type 261>) NumIn () <type -11>\\n func (t <type 261>) .ptrTo () <type 261>\\n func (t <esc:0x9> <type 261>) AssignableTo (u <esc:0x9> <type 159>) <type -15>\\n func (t <esc:0x1> <type 261>) Comparable () <type -15>\\n func (t <esc:0x1> <type 261>) FieldAlign () <type -11>\\n func (t <esc:0x1> <type 261>) Size () <type -13>\\n func (t <esc:0x42> <type 261>) Name () <type -16>\\n func (t <esc:0x1> <type 261>) Bits () <type -11>\\n func (t <esc:0x9> <type 261>) .exportedMethods () <type 350>\\n func (t <esc:0x1> <type 261>) String () <type -16>\\n func (t <esc:0x12> <type 261>) .common () ($ret29 <type 261>)\\n func (t <esc:0x1> <type 261>) .hasName () <type -15>\\n func (t <esc:0x32> <type 261>) In (i <type -11>) <type 159>\\n func (t <esc:0x1> <type 261>) Len () <type -11>\\n func (t <esc:0x1> <type 261>) NumField () <type -11>\\n func (t <esc:0x22> <type 261>) .gcSlice (begin <type -13>, end <type -13>) <type 356>\\n func (t <esc:0x42> <type 261>) PkgPath () <type -16>\\n func (t <esc:0x1> <type 261>) ChanDir () <type 153>\\ntype 151 \\\22.reflect.tflag\\\22 <type -5>\\ntype 152 \\\22.reflect.uncommonType\\\22 <type 323>\\n func (t <esc:0x12> <type 262>) .uncommon () ($ret17 <type 262>)\\n func (t <type 262>) .exportedMethods () <type 350>\\n func (t <esc:0x32> <type 262>) PkgPath () <type -16>\\n func (t <esc:0x32> <type 262>) Name () <type -16>\\ntype 153 \\\22reflect.ChanDir\\\22 <type -11>\\n func (d <type 153>) String () <type -16>\\ntype 154 \\\22reflect.Kind\\\22 <type -12>\\n func (k <type 154>) String () <type -16>\\ntype 155 \\\22reflect.MapIter\\\22 <type 322>\\n func (iter <esc:0x9> <type 259>) Key () <type 160>\\n func (iter <esc:0x1> <type 259>) Next () <type -15>\\n func (iter <esc:0x9> <type 259>) Value () <type 160>\\n func (iter <esc:0x1> <type 259>) Reset (v <type 160>)\\ntype 156 \\\22reflect.Method\\\22 <type 274>\\n func (m <esc:0x1> <type 156>) IsExported () <type -15>\\ntype 157 \\\22reflect.StructField\\\22 <type 275>\\n func (f <esc:0x1> <type 157>) IsExported () <type -15>\\ntype 158 \\\22reflect.StructTag\\\22 <type -16>\\n func (tag <esc:0x12> <type 158>) Get (key <esc:0x1> <type -16>) <type -16>\\n func (tag <esc:0x12> <type 158>) Lookup (key <esc:0x1> <type -16>) (value <type -16>, ok <type -15>)\\ntype 159 \\\22reflect.Type\\\22 <type 369>\\ntype 160 \\\22reflect.Value\\\22 <type 326>\\n func (v <esc:0x1> <type 160>) SetBool (x <type -15>)\\n func (v <esc:0x1> <type 160>) SetComplex (x <type -18>)\\n func (v <esc:0x9> <type 160>) Send (x <type 160>)\\n func (v <type 160>) .call (op <esc:0x1> <type -16>, in <esc:0x9> <type 349>) <type 349>\\n func (v <type 160>) FieldByNameFunc (match <esc:0x1> <type 197>) <type 160>\\n func (v <type 160>) Recv () (x <type 160>, ok <type -15>)\\n func (v <type 160>) .recv (nb <type -15>) (val <type 160>, ok <type -15>)\\n func (v <esc:0x1> <type 160>) OverflowUint (x <type -8>) <type -15>\\n func (v <esc:0x9> <type 160>) .setRunes (x <type 345>)\\n func (v <esc:0x1> <type 160>) OverflowFloat (x <type -10>) <type -15>\\n func (v <esc:0x12> <type 160>) Pointer () <type -13>\\n func (v <esc:0x1> <type 160>) OverflowInt (x <type -4>) <type -15>\\n func (v <esc:0x1> <type 160>) NumField () <type -11>\\n func (v <esc:0x1a> <type 160>) MethodByName (name <esc:0x1> <type -16>) <type 160>\\n func (v <type 160>) MapRange () <type 259>\\n func (v <type 160>) SetIterValue (iter <esc:0x9> <type 259>)\\n func (v <type 160>) String () <type -16>\\n func (v <type 160>) FieldByName (name <esc:0x1> <type -16>) <type 160>\\n func (v <esc:0x12> <type 160>) Field (i <type -11>) <type 160>\\n func (v <esc:0x1> <type 160>) OverflowComplex (x <type -18>) <type -15>\\n func (v <esc:0x1a> <type 160>) FieldByIndexErr (index <esc:0x1> <type 344>) (? <type 160>, ? <type -19>)\\n func (v <type 160>) Slice (i <type -11>, j <type -11>) <type 160>\\n func (v <esc:0x1> <type 160>) CanFloat () <type -15>\\n func (v <esc:0x9> <type 160>) SetBytes (x <type 356>)\\n func (v <esc:0x1> <type 160>) CanInt () <type -15>\\n func (v <esc:0x1> <type 160>) CanAddr () <type -15>\\n func (v <esc:0x1> <type 160>) SetLen (n <type -11>)\\n func (v <esc:0x1> <type 160>) SetInt (x <type -4>)\\n func (v <esc:0x1> <type 160>) InterfaceData () <type 336>\\n func (v <type 160>) Convert (t <type 159>) <type 160>\\n func (v <esc:0x1a> <type 160>) Elem () <type 160>\\n func (v <esc:0x2a> <type 160>) Bytes () <type 356>\\n func (v <esc:0x9> <type 160>) MapIndex (key <type 160>) <type 160>\\n func (v <type 160>) .assignTo (context <esc:0x1> <type -16>, dst <type 261>, target <type 170>) <type 160>\\n func (v <esc:0x1> <type 160>) SetFloat (x <type -10>)\\n func (v <esc:0x12> <type 160>) Index (i <type -11>) <type 160>\\n func (v <esc:0x1> <type 160>) Int () <type -4>\\n func (v <type 160>) CanConvert (t <type 159>) <type -15>\\n func (v <esc:0x12> <type 160>) UnsafePointer () <type 170>\\n func (v <esc:0x9> <type 160>) SetMapIndex (key <type 160>, elem <type 160>)\\n func (v <esc:0x1> <type 160>) Uint () <type -8>\\n func (v <esc:0x1> <type 160>) SetCap (n <type -11>)\\n func (v <esc:0x1> <type 160>) IsNil () <type -15>\\n func (v <esc:0x12> <type 160>) UnsafeAddr () <type -13>\\n func (v <type 160>) Set (x <type 160>)\\n func (v <esc:0x1> <type 160>) IsValid () <type -15>\\n func (v <esc:0x1> <type 160>) SetUint (x <type -8>)\\n func (v <esc:0x1> <type 160>) CanUint () <type -15>\\n func (v <type 160>) Interface () (i <type 161>)\\n func (v <esc:0x9> <type 160>) MapKeys () <type 349>\\n func (v <esc:0x9> <type 160>) TrySend (x <type 160>) <type -15>\\n func (v <type 160>) Slice3 (i <type -11>, j <type -11>, k <type -11>) <type 160>\\n func (v <esc:0x1> <type 160>) Float () <type -10>\\n func (v <esc:0x1> <type 160>) Kind () <type 154>\\n func (v <esc:0x1> <type 160>) SetString (x <type -16>)\\n func (v <esc:0x1> <type 160>) Complex () <type -18>\\n func (v <esc:0x12> <type 160>) .pointer () <type 170>\\n func (v <esc:0x2a> <type 160>) .runes () <type 345>\\n func (v <type 160>) Close ()\\n func (v <esc:0x9> <type 160>) .send (x <type 160>, nb <type -15>) (selected <type -15>)\\n func (v <type 160>) Addr () <type 160>\\n func (v <type 160>) TryRecv () (x <type 160>, ok <type -15>)\\n func (v <esc:0x1> <type 160>) Bool () <type -15>\\n func (v <type 160>) Call (in <esc:0x9> <type 349>) <type 349>\\n func (v <esc:0x1> <type 160>) CanSet () <type -15>\\n func (v <esc:0x1> <type 160>) CanInterface () <type -15>\\n func (v <type 160>) Cap () <type -11>\\n func (v <esc:0x1a> <type 160>) FieldByIndex (index <esc:0x1> <type 344>) <type 160>\\n func (v <type 160>) CallSlice (in <esc:0x9> <type 349>) <type 349>\\n func (v <type 160>) Len () <type -11>\\n func (v <esc:0x1> <type 160>) SetPointer (x <type 170>)\\n func (v <esc:0x1> <type 160>) CanComplex () <type -15>\\n func (v <esc:0x1a> <type 160>) Method (i <type -11>) <type 160>\\n func (v <type 160>) IsZero () <type -15>\\n func (v <type 160>) SetIterKey (iter <esc:0x9> <type 259>)\\n func (v <esc:0x9> <type 160>) NumMethod () <type -11>\\n func (v <esc:0x1a> <type 160>) Type () <type 159>\\ntype 161 \\\22reflect.any\\\22 = <type 417>\\ntype 162 \\\22sync.Mutex\\\22 <type 327>\\n func (m <type 264>) Lock ()\\n func (m <type 264>) TryLock () <type -15>\\n func (m <type 264>) .lockSlow ()\\n func (m <type 264>) Unlock ()\\n func (m <type 264>) .unlockSlow (new <type -3>)\\ntype 163 \\\22.time.zone\\\22 <type 328>\\ntype 164 \\\22.time.zoneTrans\\\22 <type 331>\\ntype 165 \\\22time.Duration\\\22 <type -4>\\n func (d <type 165>) String () <type -16>\\n func (d <type 165>) Nanoseconds () ($ret73 <type -4>)\\n func (d <type 165>) Seconds () ($ret76 <type -10>)\\n func (d <type 165>) Microseconds () ($ret74 <type -4>)\\n func (d <type 165>) Milliseconds () ($ret75 <type -4>)\\n func (d <type 165>) Hours () ($ret78 <type -10>)\\n func (d <type 165>) Truncate (m <type 165>) ($ret79 <type 165>)\\n func (d <type 165>) Minutes () ($ret77 <type -10>)\\n func (d <type 165>) Round (m <type 165>) <type 165>\\ntype 166 \\\22time.Location\\\22 <type 329>\\n func (l <esc:0x12> <type 265>) .get () <type 265>\\n func (l <esc:0x22> <type 265>) String () <type -16>\\n func (l <esc:0x22> <type 265>) .lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>, isDST <type -15>)\\n func (l <esc:0x1> <type 265>) .lookupFirstZone () <type -11>\\n func (l <esc:0x1> <type 265>) .firstZoneUsed () <type -15>\\n func (l <esc:0x1> <type 265>) .lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)\\ntype 167 \\\22time.Month\\\22 <type -11>\\n func (m <type 167>) String () <type -16>\\ntype 168 \\\22time.Time\\\22 <type 330>\\n func (t <type 168>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 168>\\n func (t <esc:0x1> <type 168>) .date (full <type -15>) (year <type -11>, month <type 167>, day <type -11>, yday <type -11>)\\n func (t <esc:0x1> <type 168>) IsDST () <type -15>\\n func (t <esc:0x1> <type 168>) MarshalJSON () (? <type 356>, ? <type -19>)\\n func (t <esc:0x1> <type 168>) Format (layout <esc:0x1> <type -16>) <type -16>\\n func (t <esc:0x12> <type 168>) Add (d <type 165>) <type 168>\\n func (t <esc:0x1> <type 168>) Before (u <esc:0x1> <type 168>) <type -15>\\n func (t <esc:0x1> <type 168>) GoString () <type -16>\\n func (t <esc:0x1> <type 168>) String () <type -16>\\n func (t <esc:0x1> <type 168>) Sub (u <esc:0x1> <type 168>) <type 165>\\n func (t <esc:0x22> <type 168>) .locabs () (name <type -16>, offset <type -11>, abs <type -8>)\\n func (t <esc:0x1> <type 168>) Equal (u <esc:0x1> <type 168>) <type -15>\\n func (t <esc:0x1> <type 168>) Nanosecond () <type -11>\\n func (t <esc:0x12> <type 168>) In (loc <type 265>) <type 168>\\n func (t <esc:0x12> <type 168>) UTC () <type 168>\\n func (t <esc:0x1> <type 168>) IsZero () <type -15>\\n func (t <esc:0x1> <type 168>) Weekday () <type 169>\\n func (t <esc:0x1> <type 168>) Date () (year <type -11>, month <type 167>, day <type -11>)\\n func (t <esc:0x1> <type 168>) UnixMilli () <type -4>\\n func (t <esc:0x1> <type 168>) Year () <type -11>\\n func (t <esc:0x1> <type 266>) .addSec (d <type -4>)\\n func (t <esc:0x1> <type 266>) UnmarshalJSON (data <esc:0x1> <type 356>) <type -19>\\n func (t <esc:0x1> <type 168>) Second () <type -11>\\n func (t <esc:0x1> <type 266>) .nsec () <type -3>\\n func (t <esc:0x1> <type 266>) .unixSec () <type -4>\\n func (t <esc:0x1> <type 168>) MarshalBinary () (? <type 356>, ? <type -19>)\\n func (t <esc:0x1> <type 168>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)\\n func (t <esc:0x22> <type 168>) Zone () (name <type -16>, offset <type -11>)\\n func (t <esc:0x1> <type 266>) .setLoc (loc <type 265>)\\n func (t <esc:0x1> <type 168>) Day () <type -11>\\n func (t <esc:0x1> <type 266>) GobDecode (data <esc:0x1> <type 356>) <type -19>\\n func (t <esc:0x1> <type 168>) After (u <esc:0x1> <type 168>) <type -15>\\n func (t <esc:0x1> <type 168>) UnixNano () <type -4>\\n func (t <esc:0x1> <type 266>) .setMono (m <type -4>)\\n func (t <esc:0x1> <type 168>) Minute () <type -11>\\n func (t <esc:0x1> <type 168>) AppendFormat (b <esc:0x12> <type 356>, layout <esc:0x1> <type -16>) <type 356>\\n func (t <esc:0x1> <type 168>) MarshalText () (? <type 356>, ? <type -19>)\\n func (t <esc:0x1> <type 266>) .stripMono ()\\n func (t <esc:0x12> <type 168>) Round (d <type 165>) <type 168>\\n func (t <esc:0x12> <type 168>) Truncate (d <type 165>) <type 168>\\n func (t <esc:0x1> <type 266>) UnmarshalText (data <esc:0x1> <type 356>) <type -19>\\n func (t <esc:0x1> <type 266>) UnmarshalBinary (data <esc:0x1> <type 356>) <type -19>\\n func (t <esc:0x1> <type 168>) Unix () <type -4>\\n func (t <esc:0x1> <type 168>) YearDay () <type -11>\\n func (t <esc:0x1> <type 266>) .mono () <type -4>\\n func (t <esc:0x1> <type 168>) UnixMicro () <type -4>\\n func (t <esc:0x12> <type 168>) Local () <type 168>\\n func (t <esc:0x1> <type 266>) .sec () <type -4>\\n func (t <esc:0x1> <type 168>) Hour () <type -11>\\n func (t <esc:0x1> <type 168>) .abs () <type -8>\\n func (t <esc:0x1> <type 168>) ISOWeek () (year <type -11>, week <type -11>)\\n func (t <esc:0x1> <type 168>) GobEncode () (? <type 356>, ? <type -19>)\\n func (t <esc:0x1> <type 168>) Month () <type 167>\\n func (t <esc:0x12> <type 168>) Location () <type 265>\\ntype 169 \\\22time.Weekday\\\22 <type -11>\\n func (d <type 169>) String () <type -16>\\ntype 170 \\\22unsafe.Pointer\\\22 <type 271>\\ntype 171 (? <type 254>, ? <type 356>) <type 356>\\ntype 172 (? <type 356>, ? <type 29>, ? <type 246>, ? <type 23>) (? <type 356>, ? <type -19>)\\ntype 173 (? <type 356>, ? <type 29>, ? <type 14>, ? <type 246>, ? <type 34>) (? <type 35>, ? <type -19>)\\ntype 174 (? <type 356>, ? <type 125>, ? <type 13>, ? <type 14>, ? <type 34>) (? <type 125>, ? <type 35>, ? <type -19>)\\ntype 175 (? <type 356>, ? <type 125>, ? <type -8>, ? <type 23>) (? <type 356>, ? <type -19>)\\ntype 176 (? <type 356>) <type 11>\\ntype 177 ()\\ntype 178 () <type 107>\\ntype 179 () <type 125>\\ntype 180 (? <type 29>, ? <type 246>, ? <type 23>) <type -11>\\ntype 181 (? <type 29>, ? <type 246>) <type -19>\\ntype 182 (? <type 29>, ? <type 29>, ? <type 246>, ? <type 24>)\\ntype 183 (? <type 29>, ? <type 118>)\\ntype 184 (? <type 29>, ? <type 125>)\\ntype 185 (? <type 29>) <type 248>\\ntype 186 (? <type 29>)\\ntype 187 (? <type 29>) <type -15>\\ntype 188 (? <type 29>) <type 96>\\ntype 189 (? <type 29>) <type 118>\\ntype 190 (? <type 29>) <type 125>\\ntype 191 (? <type 94>, ? <type 125>) <type -15>\\ntype 192 (? <type 106>, ? <type 125>) <type -15>\\ntype 193 (? <type 125>, ? <type 125>, ? <type 24>) <type 125>\\ntype 194 (? <type 125>, ? <type -11>, ? <type 23>) <type -11>\\ntype 195 (? <type 125>) <type -19>\\ntype 196 (? <type 417>, ? <type -11>) <type 417>\\ntype 197 (? <type -16>) <type -15>\\ntype 198 (? <type -16>) <type -19>\\ntype 199 (? <type -16>) <type -16>\\ntype 200 (? <type 126>) (? <type 127>, ? <type -19>)\\ntype 201 (? <type 56>) (? <type 57>, ? <type -19>)\\ntype 202 (? <type 68>) (? <type 69>, ? <type -19>)\\ntype 203 (? <type 128>) (? <type 130>, ? <type -19>)\\ntype 204 (? <type 77>) (? <type 78>, ? <type -19>)\\ntype 205 (? <type 139>) (? <type 141>, ? <type -19>)\\ntype 206 (? <type 73>) <type 74>\\ntype 207 (? <type 136>) <type 137>\\ntype 208 (? <type 131>) <type 132>\\ntype 209 (? <type 70>) <type 71>\\ntype 210 (? <type 170>, ? <type 170>) <type -15>\\ntype 211 *<type -15>\\ntype 212 *<type 1>\\ntype 213 *<type -9>\\ntype 214 *<type -10>\\ntype 215 *<type 233>\\ntype 216 *<type 211>\\ntype 217 *<type 213>\\ntype 218 *<type 214>\\ntype 219 *<type 257>\\ntype 220 *<type 258>\\ntype 221 *<type 263>\\ntype 222 *<type 268>\\ntype 223 *<type 269>\\ntype 224 *<type 339>\\ntype 225 *<type 340>\\ntype 226 *<type 341>\\ntype 227 *<type 342>\\ntype 228 *<type 346>\\ntype 229 *<type 347>\\ntype 230 *<type 351>\\ntype 231 *<type 354>\\ntype 232 *<type 355>\\ntype 233 *<type 356>\\ntype 234 *<type 357>\\ntype 235 *<type 365>\\ntype 236 *<type 135>\\ntype 237 *<type 72>\\ntype 238 *<type 8>\\ntype 239 *<type 9>\\ntype 240 *<type 10>\\ntype 241 *<type 11>\\ntype 242 *<type 12>\\ntype 243 *<type 40>\\ntype 244 *<type 41>\\ntype 245 *<type 15>\\ntype 246 *<type 16>\\ntype 247 *<type 19>\\ntype 248 *<type 20>\\ntype 249 *<type 21>\\ntype 250 *<type 22>\\ntype 251 *<type 26>\\ntype 252 *<type 28>\\ntype 253 *<type 39>\\ntype 254 *<type 123>\\ntype 255 *<type 3>\\ntype 256 *<type 146>\\ntype 257 *<type -3>\\ntype 258 *<type -4>\\ntype 259 *<type 155>\\ntype 260 *<type 148>\\ntype 261 *<type 150>\\ntype 262 *<type 152>\\ntype 263 *<type -16>\\ntype 264 *<type 162>\\ntype 265 *<type 166>\\ntype 266 *<type 168>\\ntype 267 *<type 163>\\ntype 268 *<type -7>\\ntype 269 *<type -8>\\ntype 270 *<type -20>\\ntype 271 *any\\ntype 272 struct { FetchedRecordsCount <type -3> \\\22protobuf:\\\\\\\22varint,1,opt,name=fetched_records_count,json=fetchedRecordsCount,proto3\\\\\\\22 json:\\\\\\\22fetched_records_count,omitempty\\\\\\\22\\\22; Bookmark <type -16> \\\22protobuf:\\\\\\\22bytes,2,opt,name=bookmark,proto3\\\\\\\22 json:\\\\\\\22bookmark,omitempty\\\\\\\22\\\22; XXX_NoUnkeyedLiteral <type 281> \\\22json:\\\\\\\22-\\\\\\\22\\\22; XXX_unrecognized <type 356> \\\22json:\\\\\\\22-\\\\\\\22\\\22; XXX_sizecache <type -3> \\\22json:\\\\\\\22-\\\\\\\22\\\22; }\\ntype 273 struct { GoReflectType <type 159>; Desc <type 108>; Exporter <type 18>; OneofWrappers <type 348>; .google.golang.org/protobuf/internal/impl.initMu <type 162>; .google.golang.org/protobuf/internal/impl.initDone <type -7>; ? <type 31>; ? <type 17>; }\\ntype 274 struct { Name <type -16>; PkgPath <type -16>; Type <type 159>; Func <type 160>; Index <type -11>; }\\ntype 275 struct { Name <type -16>; PkgPath <type -16>; Type <type 159>; Tag <type 158>; Offset <type -13>; Index <type 344>; Anonymous <type -15>; }\\ntype 276 struct { Namespace <type -16> \\\22protobuf:\\\\\\\22bytes,1,opt,name=namespace,proto3\\\\\\\22 json:\\\\\\\22namespace,omitempty\\\\\\\22\\\22; Key <type -16> \\\22protobuf:\\\\\\\22bytes,2,opt,name=key,proto3\\\\\\\22 json:\\\\\\\22key,omitempty\\\\\\\22\\\22; Value <type 356> \\\22protobuf:\\\\\\\22bytes,3,opt,name=value,proto3\\\\\\\22 json:\\\\\\\22value,omitempty\\\\\\\22\\\22; XXX_NoUnkeyedLiteral <type 281> \\\22json:\\\\\\\22-\\\\\\\22\\\22; XXX_unrecognized <type 356> \\\22json:\\\\\\\22-\\\\\\\22\\\22; XXX_sizecache <type -3> \\\22json:\\\\\\\22-\\\\\\\22\\\22; }\\ntype 277 struct { Path <type 123>; StartLine <type -11>; StartColumn <type -11>; EndLine <type -11>; EndColumn <type -11>; LeadingDetachedComments <type 351>; LeadingComments <type -16>; TrailingComments <type -16>; Next <type -11>; }\\ntype 278 struct { ProposalBytes <type 356> \\\22protobuf:\\\\\\\22bytes,1,opt,name=proposal_bytes,json=proposalBytes,proto3\\\\\\\22 json:\\\\\\\22proposal_bytes,omitempty\\\\\\\22\\\22; Signature <type 356> \\\22protobuf:\\\\\\\22bytes,2,opt,name=signature,proto3\\\\\\\22 json:\\\\\\\22signature,omitempty\\\\\\\22\\\22; XXX_NoUnkeyedLiteral <type 281> \\\22json:\\\\\\\22-\\\\\\\22\\\22; XXX_unrecognized <type 356> \\\22json:\\\\\\\22-\\\\\\\22\\\22; XXX_sizecache <type -3> \\\22json:\\\\\\\22-\\\\\\\22\\\22; }\\ntype 279 struct { Status <type -3> \\\22protobuf:\\\\\\\22varint,1,opt,name=status,proto3\\\\\\\22 json:\\\\\\\22status,omitempty\\\\\\\22\\\22; Message <type -16> \\\22protobuf:\\\\\\\22bytes,2,opt,name=message,proto3\\\\\\\22 json:\\\\\\\22message,omitempty\\\\\\\22\\\22; Payload <type 356> \\\22protobuf:\\\\\\\22bytes,3,opt,name=payload,proto3\\\\\\\22 json:\\\\\\\22payload,omitempty\\\\\\\22\\\22; XXX_NoUnkeyedLiteral <type 281> \\\22json:\\\\\\\22-\\\\\\\22\\\22; XXX_unrecognized <type 356> \\\22json:\\\\\\\22-\\\\\\\22\\\22; XXX_sizecache <type -3> \\\22json:\\\\\\\22-\\\\\\\22\\\22; }\\ntype 280 struct { TxId <type -16> \\\22protobuf:\\\\\\\22bytes,1,opt,name=tx_id,json=txId,proto3\\\\\\\22 json:\\\\\\\22tx_id,omitempty\\\\\\\22\\\22; Value <type 356> \\\22protobuf:\\\\\\\22bytes,2,opt,name=value,proto3\\\\\\\22 json:\\\\\\\22value,omitempty\\\\\\\22\\\22; Timestamp <type 256> \\\22protobuf:\\\\\\\22bytes,3,opt,name=timestamp,proto3\\\\\\\22 json:\\\\\\\22timestamp,omitempty\\\\\\\22\\\22; IsDelete <type -15> \\\22protobuf:\\\\\\\22varint,4,opt,name=is_delete,json=isDelete,proto3\\\\\\\22 json:\\\\\\\22is_delete,omitempty\\\\\\\22\\\22; XXX_NoUnkeyedLiteral <type 281> \\\22json:\\\\\\\22-\\\\\\\22\\\22; XXX_unrecognized <type 356> \\\22json:\\\\\\\22-\\\\\\\22\\\22; XXX_sizecache <type -3> \\\22json:\\\\\\\22-\\\\\\\22\\\22; }\\ntype 281 struct { }\\ntype 282 struct { .google.golang.org/protobuf/internal/impl.atomicOnce <type -7>; .google.golang.org/protobuf/internal/impl.mu <type 162>; .google.golang.org/protobuf/internal/impl.xi <type 247>; .google.golang.org/protobuf/internal/impl.value <type 125>; .google.golang.org/protobuf/internal/impl.b <type 356>; .google.golang.org/protobuf/internal/impl.fn <type 179>; }\\ntype 283 struct { .google.golang.org/protobuf/internal/impl.fieldDesc <type 94>; .google.golang.org/protobuf/internal/impl.has <type 187>; .google.golang.org/protobuf/internal/impl.clear <type 186>; .google.golang.org/protobuf/internal/impl.get <type 190>; .google.golang.org/protobuf/internal/impl.set <type 184>; .google.golang.org/protobuf/internal/impl.mutable <type 190>; .google.golang.org/protobuf/internal/impl.newMessage <type 178>; .google.golang.org/protobuf/internal/impl.newField <type 179>; }\\ntype 284 struct { .google.golang.org/protobuf/internal/impl.fields <type 359>; .google.golang.org/protobuf/internal/impl.oneofs <type 363>; .google.golang.org/protobuf/internal/impl.fieldTypes <type 360>; .google.golang.org/protobuf/internal/impl.denseFields <type 338>; .google.golang.org/protobuf/internal/impl.rangeInfos <type 348>; .google.golang.org/protobuf/internal/impl.getUnknown <type 189>; .google.golang.org/protobuf/internal/impl.setUnknown <type 183>; .google.golang.org/protobuf/internal/impl.extensionMap <type 185>; .google.golang.org/protobuf/internal/impl.nilMessage <type 15>; }\\ntype 285 struct { .google.golang.org/protobuf/internal/impl.flags <type 129>; }\\ntype 286 struct { .google.golang.org/protobuf/internal/impl.flags <type 140>; .google.golang.org/protobuf/internal/impl.resolver <type 394>; .google.golang.org/protobuf/internal/impl.depth <type -11>; }\\ntype 287 struct { .google.golang.org/protobuf/internal/impl.funcs <type 30>; .google.golang.org/protobuf/internal/impl.mi <type 244>; .google.golang.org/protobuf/internal/impl.ft <type 159>; .google.golang.org/protobuf/internal/impl.validation <type 36>; .google.golang.org/protobuf/internal/impl.num <type 96>; .google.golang.org/protobuf/internal/impl.offset <type 27>; .google.golang.org/protobuf/internal/impl.wiretag <type -8>; .google.golang.org/protobuf/internal/impl.tagsize <type -11>; .google.golang.org/protobuf/internal/impl.isPointer <type -15>; .google.golang.org/protobuf/internal/impl.isRequired <type -15>; }\\ntype 288 struct { .google.golang.org/protobuf/internal/impl.methods <type 135>; .google.golang.org/protobuf/internal/impl.orderedCoderFields <type 337>; .google.golang.org/protobuf/internal/impl.denseCoderFields <type 337>; .google.golang.org/protobuf/internal/impl.coderFields <type 358>; .google.golang.org/protobuf/internal/impl.sizecacheOffset <type 27>; .google.golang.org/protobuf/internal/impl.unknownOffset <type 27>; .google.golang.org/protobuf/internal/impl.unknownPtrKind <type -15>; .google.golang.org/protobuf/internal/impl.extensionOffset <type 27>; .google.golang.org/protobuf/internal/impl.needsInitCheck <type -15>; .google.golang.org/protobuf/internal/impl.isMessageSet <type -15>; .google.golang.org/protobuf/internal/impl.numRequiredFields <type -5>; }\\ntype 289 struct { .google.golang.org/protobuf/internal/impl.mi <type 244>; .google.golang.org/protobuf/internal/impl.size <type 180>; .google.golang.org/protobuf/internal/impl.marshal <type 172>; .google.golang.org/protobuf/internal/impl.unmarshal <type 173>; .google.golang.org/protobuf/internal/impl.isInit <type 181>; .google.golang.org/protobuf/internal/impl.merge <type 182>; }\\ntype 290 struct { .google.golang.org/protobuf/internal/impl.mi <type 244>; .google.golang.org/protobuf/internal/impl.typ <type 37>; .google.golang.org/protobuf/internal/impl.keyType <type 37>; .google.golang.org/protobuf/internal/impl.valType <type 37>; .google.golang.org/protobuf/internal/impl.requiredBit <type -8>; }\\ntype 291 struct { .google.golang.org/protobuf/internal/impl.n <type -11>; .google.golang.org/protobuf/internal/impl.initialized <type -15>; }\\ntype 292 struct { .google.golang.org/protobuf/internal/impl.oneofDesc <type 115>; .google.golang.org/protobuf/internal/impl.which <type 188>; }\\ntype 293 struct { .google.golang.org/protobuf/internal/impl.p <type 29>; .google.golang.org/protobuf/internal/impl.mi <type 244>; }\\ntype 294 struct { .google.golang.org/protobuf/internal/impl.p <type 170>; }\\ntype 295 struct { .google.golang.org/protobuf/internal/impl.size <type 194>; .google.golang.org/protobuf/internal/impl.marshal <type 175>; .google.golang.org/protobuf/internal/impl.unmarshal <type 174>; .google.golang.org/protobuf/internal/impl.isInit <type 195>; .google.golang.org/protobuf/internal/impl.merge <type 193>; }\\ntype 296 struct { .google.golang.org/protobuf/internal/impl.sizecacheOffset <type 27>; .google.golang.org/protobuf/internal/impl.sizecacheType <type 159>; .google.golang.org/protobuf/internal/impl.weakOffset <type 27>; .google.golang.org/protobuf/internal/impl.weakType <type 159>; .google.golang.org/protobuf/internal/impl.unknownOffset <type 27>; .google.golang.org/protobuf/internal/impl.unknownType <type 159>; .google.golang.org/protobuf/internal/impl.extensionOffset <type 27>; .google.golang.org/protobuf/internal/impl.extensionType <type 159>; .google.golang.org/protobuf/internal/impl.fieldsByNumber <type 361>; .google.golang.org/protobuf/internal/impl.oneofsByName <type 364>; .google.golang.org/protobuf/internal/impl.oneofWrappersByType <type 367>; .google.golang.org/protobuf/internal/impl.oneofWrappersByNumber <type 362>; }\\ntype 297 struct { .google.golang.org/protobuf/internal/impl.typ <type 92>; .google.golang.org/protobuf/internal/impl.value <type 125>; .google.golang.org/protobuf/internal/impl.lazy <type 250>; }\\ntype 298 struct { .google.golang.org/protobuf/internal/impl.wiretag <type -8>; .google.golang.org/protobuf/internal/impl.tagsize <type -11>; .google.golang.org/protobuf/internal/impl.unmarshalNeedsValue <type -15>; .google.golang.org/protobuf/internal/impl.funcs <type 38>; .google.golang.org/protobuf/internal/impl.validation <type 36>; }\\ntype 299 struct { ? <type 47>; .google.golang.org/protobuf/reflect/protoreflect.typ <type 170>; .google.golang.org/protobuf/reflect/protoreflect.ptr <type 170>; .google.golang.org/protobuf/reflect/protoreflect.num <type -8>; }\\ntype 300 struct { ? <type 50>; }\\ntype 301 struct { ? <type 50>; AllowPartial <type -15>; Deterministic <type -15>; UseCachedSize <type -15>; }\\ntype 302 struct { ? <type 50>; Buf <type 356>; }\\ntype 303 struct { ? <type 50>; Flags <type 75>; Size <type 206>; Marshal <type 202>; Unmarshal <type 204>; Merge <type 209>; CheckInitialized <type 201>; }\\ntype 304 struct { ? <type 50>; Flags <type 138>; Size <type 207>; Marshal <type 203>; Unmarshal <type 205>; Merge <type 208>; CheckInitialized <type 200>; }\\ntype 305 struct { ? <type 50>; Flags <type 133>; }\\ntype 306 struct { ? <type 50>; Flags <type 142>; }\\ntype 307 struct { ? <type 50>; Flags <type -5>; }\\ntype 308 struct { ? <type 50>; Merge <type -15>; AllowPartial <type -15>; DiscardUnknown <type -15>; Resolver <type 394>; RecursionLimit <type -11>; }\\ntype 309 struct { ? <type 50>; Message <type 107>; }\\ntype 310 struct { ? <type 50>; Message <type 107>; Buf <type 356>; Flags <type 129>; }\\ntype 311 struct { ? <type 50>; Message <type 107>; Buf <type 356>; Flags <type -5>; }\\ntype 312 struct { ? <type 50>; Message <type 107>; Buf <type 356>; Flags <type -5>; Resolver <type 394>; Depth <type -11>; }\\ntype 313 struct { ? <type 50>; Message <type 107>; Buf <type 356>; Flags <type 140>; Resolver <type 394>; Depth <type -11>; }\\ntype 314 struct { ? <type 50>; Message <type 107>; Flags <type 129>; }\\ntype 315 struct { ? <type 50>; Message <type 107>; Flags <type -5>; }\\ntype 316 struct { ? <type 50>; Size <type -11>; }\\ntype 317 struct { ? <type 50>; Source <type 107>; Destination <type 107>; }\\ntype 318 struct { ? <type 50>; ? <type 47>; ? <type 48>; .google.golang.org/protobuf/internal/impl.atomicMessageInfo <type 244>; }\\ntype 319 struct { ? <type 99>; IsPublic <type -15>; IsWeak <type -15>; }\\ntype 320 struct { .google.golang.org/protobuf/types/known/timestamppb.state <type 143>; .google.golang.org/protobuf/types/known/timestamppb.sizeCache <type 144>; .google.golang.org/protobuf/types/known/timestamppb.unknownFields <type 145>; Seconds <type -4> \\\22protobuf:\\\\\\\22varint,1,opt,name=seconds,proto3\\\\\\\22 json:\\\\\\\22seconds,omitempty\\\\\\\22\\\22; Nanos <type -3> \\\22protobuf:\\\\\\\22varint,2,opt,name=nanos,proto3\\\\\\\22 json:\\\\\\\22nanos,omitempty\\\\\\\22\\\22; }\\ntype 321 struct { .reflect.key <type 170>; .reflect.elem <type 170>; .reflect.t <type 170>; .reflect.h <type 170>; .reflect.buckets <type 170>; .reflect.bptr <type 170>; .reflect.overflow <type 234>; .reflect.oldoverflow <type 234>; .reflect.startBucket <type -13>; .reflect.offset <type -5>; .reflect.wrapped <type -15>; B <type -5>; .reflect.i <type -5>; .reflect.bucket <type -13>; .reflect.checkBucket <type -13>; }\\ntype 322 struct { .reflect.m <type 160>; .reflect.hiter <type 148>; }\\ntype 323 struct { .reflect.name <type 263>; .reflect.pkgPath <type 263>; .reflect.methods <type 350>; }\\ntype 324 struct { .reflect.name <type 263>; .reflect.pkgPath <type 263>; .reflect.mtyp <type 261>; .reflect.typ <type 261>; .reflect.tfn <type 170>; }\\ntype 325 struct { .reflect.size <type -13>; .reflect.ptrdata <type -13>; .reflect.hash <type -7>; .reflect.tflag <type 151>; .reflect.align <type -5>; .reflect.fieldAlign <type -5>; .reflect.kind <type -5>; .reflect.equal <type 210>; .reflect.gcdata <type 270>; .reflect.string <type 263>; ? <type 262>; .reflect.ptrToThis <type 261>; }\\ntype 326 struct { .reflect.typ <type 261>; .reflect.ptr <type 170>; ? <type 147>; }\\ntype 327 struct { .sync.state <type -3>; .sync.sema <type -7>; }\\ntype 328 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }\\ntype 329 struct { .time.name <type -16>; .time.zone <type 352>; .time.tx <type 353>; .time.extend <type -16>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 267>; }\\ntype 330 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 265>; }\\ntype 331 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }\\ntype 332 [0 ] <type 177>\\ntype 333 [0 ] <type 162>\\ntype 334 [2 ] <type 96>\\ntype 335 [2 ] <type 85>\\ntype 336 [2 ] <type -13>\\ntype 337 [] <type 246>\\ntype 338 [] <type 249>\\ntype 339 [] <type 356>\\ntype 340 [] <type -15>\\ntype 341 [] <type -9>\\ntype 342 [] <type -10>\\ntype 343 [] <type 29>\\ntype 344 [] <type -11>\\ntype 345 [] <type -21>\\ntype 346 [] <type -3>\\ntype 347 [] <type -4>\\ntype 348 [] <type 417>\\ntype 349 [] <type 160>\\ntype 350 [] <type 149>\\ntype 351 [] <type -16>\\ntype 352 [] <type 163>\\ntype 353 [] <type 164>\\ntype 354 [] <type -7>\\ntype 355 [] <type -8>\\ntype 356 [] <type -20>\\ntype 357 [] <type 170>\\ntype 358 map [<type 13>] <type 246>\\ntype 359 map [<type 96>] <type 249>\\ntype 360 map [<type 96>] <type 417>\\ntype 361 map [<type 96>] <type 157>\\ntype 362 map [<type 96>] <type 159>\\ntype 363 map [<type 113>] <type 252>\\ntype 364 map [<type 113>] <type 157>\\ntype 365 map [<type -3>] <type 40>\\ntype 366 map [<type -3>] <type 117>\\ntype 367 map [<type 159>] <type 96>\\ntype 368 map [<type -16>] <type 356>\\ntype 369 interface { Align () <type -11>; AssignableTo (u <type 159>) <type -15>; Bits () <type -11>; ChanDir () <type 153>; Comparable () <type -15>; ConvertibleTo (u <type 159>) <type -15>; Elem () <type 159>; Field (i <type -11>) <type 157>; FieldAlign () <type -11>; FieldByIndex (index <type 344>) <type 157>; FieldByName (name <type -16>) (? <type 157>, ? <type -15>); FieldByNameFunc (match <type 197>) (? <type 157>, ? <type -15>); Implements (u <type 159>) <type -15>; In (i <type -11>) <type 159>; IsVariadic () <type -15>; Key () <type 159>; Kind () <type 154>; Len () <type -11>; Method (? <type -11>) <type 156>; MethodByName (? <type -16>) (? <type 156>, ? <type -15>); Name () <type -16>; NumField () <type -11>; NumIn () <type -11>; NumMethod () <type -11>; NumOut () <type -11>; Out (i <type -11>) <type 159>; PkgPath () <type -16>; Size () <type -13>; String () <type -16>; .reflect.common () <type 261>; .reflect.rawString () <type -16>; .reflect.uncommon () <type 262>; }\\ntype 370 interface { Append (? <type 125>); AppendMutable () <type 125>; Get (? <type -11>) <type 125>; IsValid () <type -15>; Len () <type -11>; NewElement () <type 125>; Set (? <type -11>, ? <type 125>); Truncate (? <type -11>); }\\ntype 371 interface { ? <type 58>; ByDescriptor (desc <type 81>) <type 121>; ByPath (path <type 123>) <type 121>; Get (? <type -11>) <type 121>; Len () <type -11>; }\\ntype 372 interface { ? <type 58>; ByJSONName (s <type -16>) <type 94>; ByName (s <type 113>) <type 94>; ByNumber (n <type 96>) <type 94>; ByTextName (s <type -16>) <type 94>; Get (i <type -11>) <type 94>; Len () <type -11>; }\\ntype 373 interface { ? <type 58>; ByName (s <type 113>) <type 83>; Get (i <type -11>) <type 83>; Len () <type -11>; }\\ntype 374 interface { ? <type 58>; ByName (s <type 113>) <type 88>; ByNumber (n <type 85>) <type 88>; Get (i <type -11>) <type 88>; Len () <type -11>; }\\ntype 375 interface { ? <type 58>; ByName (s <type 113>) <type 90>; Get (i <type -11>) <type 90>; Len () <type -11>; }\\ntype 376 interface { ? <type 58>; ByName (s <type 113>) <type 108>; Get (i <type -11>) <type 108>; Len () <type -11>; }\\ntype 377 interface { ? <type 58>; ByName (s <type 113>) <type 111>; Get (i <type -11>) <type 111>; Len () <type -11>; }\\ntype 378 interface { ? <type 58>; ByName (s <type 113>) <type 115>; Get (i <type -11>) <type 115>; Len () <type -11>; }\\ntype 379 interface { ? <type 58>; ByName (s <type 113>) <type 119>; Get (i <type -11>) <type 119>; Len () <type -11>; }\\ntype 380 interface { ? <type 90>; Descriptor () <type 90>; Type () <type 92>; }\\ntype 381 interface { ? <type 81>; ? <type 61>; Cardinality () <type 80>; ContainingMessage () <type 108>; ContainingOneof () <type 115>; Default () <type 125>; DefaultEnumValue () <type 88>; Enum () <type 83>; HasDefault () <type -15>; HasJSONName () <type -15>; HasOptionalKeyword () <type -15>; HasPresence () <type -15>; IsExtension () <type -15>; IsList () <type -15>; IsMap () <type -15>; IsPacked () <type -15>; IsWeak () <type -15>; JSONName () <type -16>; Kind () <type 103>; MapKey () <type 94>; MapValue () <type 94>; Message () <type 108>; Number () <type 96>; TextName () <type -16>; }\\ntype 382 interface { Clear (? <type 94>); Descriptor () <type 108>; Get (? <type 94>) <type 125>; GetUnknown () <type 118>; Has (? <type 94>) <type -15>; Interface () <type 117>; IsValid () <type -15>; Mutable (? <type 94>) <type 125>; New () <type 107>; NewField (? <type 94>) <type 125>; ProtoMethods () <type 237>; Range (f <type 191>); Set (? <type 94>, ? <type 125>); SetUnknown (? <type 118>); Type () <type 110>; WhichOneof (? <type 115>) <type 94>; }\\ntype 383 interface { Clear (? <type 106>); Get (? <type 106>) <type 125>; Has (? <type 106>) <type -15>; IsValid () <type -15>; Len () <type -11>; Mutable (? <type 106>) <type 125>; NewValue () <type 125>; Range (f <type 192>); Set (? <type 106>, ? <type 125>); }\\ntype 384 interface { Close () <type -19>; HasNext () <type -15>; }\\ntype 385 interface { ? <type 5>; Next () (? <type 238>, ? <type -19>); }\\ntype 386 interface { ? <type 5>; Next () (? <type 239>, ? <type -19>); }\\ntype 387 interface { CreateCompositeKey (objectType <type -16>, attributes <type 351>) (? <type -16>, ? <type -19>); DelPrivateData (collection <type -16>, key <type -16>) <type -19>; DelState (key <type -16>) <type -19>; GetArgs () <type 339>; GetArgsSlice () (? <type 356>, ? <type -19>); GetBinding () (? <type 356>, ? <type -19>); GetChannelID () <type -16>; GetCreator () (? <type 356>, ? <type -19>); GetDecorations () <type 368>; GetFunctionAndParameters () (? <type -16>, ? <type 351>); GetHistoryForKey (key <type -16>) (? <type 6>, ? <type -19>); GetPrivateData (collection <type -16>, key <type -16>) (? <type 356>, ? <type -19>); GetPrivateDataByPartialCompositeKey (collection <type -16>, objectType <type -16>, keys <type 351>) (? <type 7>, ? <type -19>); GetPrivateDataByRange (collection <type -16>, startKey <type -16>, endKey <type -16>) (? <type 7>, ? <type -19>); GetPrivateDataHash (collection <type -16>, key <type -16>) (? <type 356>, ? <type -19>); GetPrivateDataQueryResult (collection <type -16>, query <type -16>) (? <type 7>, ? <type -19>); GetPrivateDataValidationParameter (collection <type -16>, key <type -16>) (? <type 356>, ? <type -19>); GetQueryResult (query <type -16>) (? <type 7>, ? <type -19>); GetQueryResultWithPagination (query <type -16>, pageSize <type -3>, bookmark <type -16>) (? <type 7>, ? <type 240>, ? <type -19>); GetSignedProposal () (? <type 242>, ? <type -19>); GetState (key <type -16>) (? <type 356>, ? <type -19>); GetStateByPartialCompositeKey (objectType <type -16>, keys <type 351>) (? <type 7>, ? <type -19>); GetStateByPartialCompositeKeyWithPagination (objectType <type -16>, keys <type 351>, pageSize <type -3>, bookmark <type -16>) (? <type 7>, ? <type 240>, ? <type -19>); GetStateByRange (startKey <type -16>, endKey <type -16>) (? <type 7>, ? <type -19>); GetStateByRangeWithPagination (startKey <type -16>, endKey <type -16>, pageSize <type -3>, bookmark <type -16>) (? <type 7>, ? <type 240>, ? <type -19>); GetStateValidationParameter (key <type -16>) (? <type 356>, ? <type -19>); GetStringArgs () <type 351>; GetTransient () (? <type 368>, ? <type -19>); GetTxID () <type -16>; GetTxTimestamp () (? <type 255>, ? <type -19>); InvokeChaincode (chaincodeName <type -16>, args <type 339>, channel <type -16>) <type 11>; PurgePrivateData (collection <type -16>, key <type -16>) <type -19>; PutPrivateData (collection <type -16>, key <type -16>, value <type 356>) <type -19>; PutState (key <type -16>, value <type 356>) <type -19>; SetEvent (name <type -16>, payload <type 356>) <type -19>; SetPrivateDataValidationParameter (collection <type -16>, key <type -16>, ep <type 356>) <type -19>; SetStateValidationParameter (key <type -16>, ep <type 356>) <type -19>; SplitCompositeKey (compositeKey <type -16>) (? <type -16>, ? <type 351>, ? <type -19>); }\\ntype 388 interface { Descriptor () <type 83>; New (n <type 85>) <type 82>; }\\ntype 389 interface { Descriptor () <type 83>; Number () <type 85>; Type () <type 87>; }\\ntype 390 interface { Descriptor () <type 108>; New () <type 107>; Zero () <type 107>; }\\ntype 391 interface { ? <type 81>; ? <type 63>; Enums () <type 84>; ExtensionRangeOptions (i <type -11>) <type 117>; ExtensionRanges () <type 98>; Extensions () <type 91>; Fields () <type 95>; IsMapEntry () <type -15>; Messages () <type 109>; Oneofs () <type 116>; RequiredNumbers () <type 97>; ReservedNames () <type 114>; ReservedRanges () <type 98>; }\\ntype 392 interface { ? <type 81>; ? <type 62>; Enums () <type 84>; Extensions () <type 91>; Imports () <type 101>; Messages () <type 109>; Package () <type 102>; Path () <type -16>; Services () <type 120>; SourceLocations () <type 122>; }\\ntype 393 interface { ? <type 81>; ? <type 65>; Fields () <type 95>; IsSynthetic () <type -15>; }\\ntype 394 interface { FindExtensionByName (field <type 102>) (? <type 92>, ? <type -19>); FindExtensionByNumber (message <type 102>, field <type 96>) (? <type 92>, ? <type -19>); }\\ntype 395 interface { ? <type 81>; ? <type 64>; Input () <type 108>; IsStreamingClient () <type -15>; IsStreamingServer () <type -15>; Output () <type 108>; }\\ntype 396 interface { ? <type 81>; ? <type 66>; Methods () <type 112>; }\\ntype 397 interface { ? <type 81>; ? <type 60>; Number () <type 85>; }\\ntype 398 interface { ? <type 81>; ? <type 59>; ReservedNames () <type 114>; ReservedRanges () <type 86>; Values () <type 89>; }\\ntype 399 interface { ? <type 58>; FullName () <type 102>; Index () <type -11>; IsPlaceholder () <type -15>; Name () <type 113>; Options () <type 117>; Parent () <type 81>; ParentFile () <type 99>; Syntax () <type 124>; }\\ntype 400 interface { ? <type 58>; Get (i <type -11>) <type 334>; Has (n <type 96>) <type -15>; Len () <type -11>; }\\ntype 401 interface { ? <type 58>; Get (i <type -11>) <type 335>; Has (n <type 85>) <type -15>; Len () <type -11>; }\\ntype 402 interface { ? <type 58>; Get (i <type -11>) <type 96>; Has (n <type 96>) <type -15>; Len () <type -11>; }\\ntype 403 interface { ? <type 58>; Get (i <type -11>) <type 100>; Len () <type -11>; }\\ntype 404 interface { ? <type 58>; Get (i <type -11>) <type 113>; Has (s <type 113>) <type -15>; Len () <type -11>; }\\ntype 405 interface { InterfaceOf (? <type 125>) <type 417>; IsValidInterface (? <type 417>) <type -15>; IsValidValue (? <type 125>) <type -15>; New () <type 125>; TypeDescriptor () <type 93>; ValueOf (? <type 417>) <type 125>; Zero () <type 125>; }\\ntype 406 interface { ProtoInternal (? <type 49>); }\\ntype 407 interface { ProtoMessage (); Reset (); String () <type -16>; }\\ntype 408 interface { ProtoReflect () <type 107>; }\\ntype 409 interface { ProtoType (? <type 83>); }\\ntype 410 interface { ProtoType (? <type 88>); }\\ntype 411 interface { ProtoType (? <type 94>); }\\ntype 412 interface { ProtoType (? <type 99>); }\\ntype 413 interface { ProtoType (? <type 108>); }\\ntype 414 interface { ProtoType (? <type 111>); }\\ntype 415 interface { ProtoType (? <type 115>); }\\ntype 416 interface { ProtoType (? <type 119>); }\\ntype 417 interface { }\\n\22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22<p6>\22"
module asm "\09.ascii \22New\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22text\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -19>\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22<p4>\22"
module asm "\09.ascii \22Success\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22payload\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<esc:0x12>\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 356>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type 11>\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22func \22"
module asm "\09.ascii \22<p8>\22"
module asm "\09.ascii \22Getenv\22"
module asm "\09.ascii \22 (\22"
module asm "\09.ascii \22key\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22)\22"
module asm "\09.ascii \22 \22"
module asm "\09.ascii \22<type -16>\22"
module asm "\09.ascii \22\\n\22"
module asm "\09.ascii \22checksum 9CAD959B62F3BA7F69B40A67528DD46B5A482A67\\n\22"
module asm "\09.text"

%StructType.0 = type { %_type.0, %IPST.69 }
%_type.0 = type { i64, i64, i32, i8, i8, i8, i8, %__go_descriptor.275*, i8*, { i8*, i64 }*, %uncommonType.0*, %_type.0* }
%__go_descriptor.275 = type { i8 (i8*, i8*, i8*)* }
%uncommonType.0 = type { { i8*, i64 }*, { i8*, i64 }*, %IPST.67 }
%IPST.67 = type { %method.0*, i64, i64 }
%method.0 = type { { i8*, i64 }*, { i8*, i64 }*, %_type.0*, %_type.0*, i8* }
%IPST.69 = type { %structField.0*, i64, i64 }
%structField.0 = type { { i8*, i64 }*, { i8*, i64 }*, %_type.0*, { i8*, i64 }*, i64 }
%StructField.0 = type { { i8*, i64 }, { i8*, i64 }, %Type.0, { i8*, i64 }, i64, %IPST.17, i8 }
%Type.0 = type { { %_type.0*, i64 (i8*, i8*)*, i8 (i8*, i8*, i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*, i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, void (%StructField.0*, i8*, i8*, i64)*, i64 (i8*, i8*)*, void (%StructField.0*, i8*, i8*, %IPST.17*)*, void ({ %StructField.0, i8 }*, i8*, i8*, i8*, i64)*, void ({ %StructField.0, i8 }*, i8*, i8*, %__go_descriptor.14*)*, i8 (i8*, i8*, i8*, i8*)*, { i8*, i8* } (i8*, i8*, i64)*, i8 (i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, void (%Method.0*, i8*, i8*, i64)*, void ({ %Method.0, i8 }*, i8*, i8*, i8*, i64)*, { i8*, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, i64 (i8*, i8*)*, { i8*, i8* } (i8*, i8*, i64)*, { i8*, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, %.reflect.rtype.0* (i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, %.reflect.uncommonType.0* (i8*, i8*)* }*, i8* }
%__go_descriptor.14 = type { i8 (i8*, i8*, i64)* }
%Method.0 = type { { i8*, i64 }, { i8*, i64 }, %Type.0, %Value.0, i64 }
%Value.0 = type { %.reflect.rtype.0*, i8*, i64 }
%.reflect.uncommonType.0 = type { { i8*, i64 }*, { i8*, i64 }*, %IPST.61 }
%IPST.61 = type { %.reflect.method.0*, i64, i64 }
%.reflect.method.0 = type { { i8*, i64 }*, { i8*, i64 }*, %.reflect.rtype.0*, %.reflect.rtype.0*, i8* }
%IPST.17 = type { i64*, i64, i64 }
%.reflect.rtype.0 = type { i64, i64, i32, i8, i8, i8, i8, %__go_descriptor.18*, i8*, { i8*, i64 }*, %.reflect.uncommonType.0*, %.reflect.rtype.0* }
%__go_descriptor.18 = type { i8 (i8*, i8*, i8*)* }
%PtrType.0 = type { %_type.0, %_type.0* }
%ServiceConfig.0 = type { %Config.1, { i8*, i64 }*, %".google.golang.org/grpc.lbConfig.0"*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %".google.golang.org/grpc.retryThrottlingPolicy.0"*, %".google.golang.org/grpc.healthCheckConfig.0"*, { i8*, i64 } }
%Config.1 = type { { %_type.0*, void (i8*, i8*)* }*, i8* }
%".google.golang.org/grpc.lbConfig.0" = type { { i8*, i64 }, %LoadBalancingConfig.0 }
%LoadBalancingConfig.0 = type { { %_type.0*, void (i8*, i8*)* }*, i8* }
%".google.golang.org/grpc.retryThrottlingPolicy.0" = type { double, double }
%".google.golang.org/grpc.healthCheckConfig.0" = type { { i8*, i64 } }
%FrameHeader.0 = type { i8, i8, i8, i32, i32 }
%DataFrame.0 = type { %FrameHeader.0, %IPST.0 }
%IPST.0 = type { i8*, i64, i64 }
%".google.golang.org/grpc/internal/transport.goAway.0" = type { i32, %IPST.0, i8, i8 }
%HeadersFrame.0 = type { %FrameHeader.0, %PriorityParam.0, %IPST.0 }
%PriorityParam.0 = type { i32, i8, i8 }
%MetaHeadersFrame.0 = type { %HeadersFrame.0*, %IPST.35, i8 }
%IPST.35 = type { %HeaderField.0*, i64, i64 }
%HeaderField.0 = type { { i8*, i64 }, { i8*, i64 }, i8 }
%SettingsFrame.0 = type { %FrameHeader.0, %IPST.0 }
%WindowUpdateFrame.0 = type { %FrameHeader.0, i32 }
%RSTStreamFrame.0 = type { %FrameHeader.0, i32 }
%PingFrame.0 = type { %FrameHeader.0, [8 x i8] }
%GoAwayFrame.0 = type { %FrameHeader.0, i32, i32, %IPST.0 }
%".google.golang.org/grpc/internal/transport.cleanupStream.0" = type { i32, i8, i32, %__go_descriptor.23* }
%__go_descriptor.23 = type { void (i8*)* }
%".google.golang.org/grpc/internal/transport.outFlowControlSizeRequest.0" = type { {}* }
%".google.golang.org/grpc/internal/transport.ping.0" = type { i8, [8 x i8] }
%".google.golang.org/grpc/internal/transport.dataFrame.0" = type { i32, i8, %IPST.0, %IPST.0, %__go_descriptor.23* }
%".google.golang.org/grpc/internal/transport.incomingSettings.0" = type { %IPST.53 }
%IPST.53 = type { %Setting.0*, i64, i64 }
%Setting.0 = type { i16, i32 }
%".google.golang.org/grpc/internal/transport.registerStream.0" = type { i32, %".google.golang.org/grpc/internal/transport.writeQuota.0"* }
%".google.golang.org/grpc/internal/transport.writeQuota.0" = type { i32, {}*, {}*, %__go_descriptor.211* }
%__go_descriptor.211 = type { void (i8*, i64)* }
%".google.golang.org/grpc/internal/transport.incomingGoAway.0" = type {}
%".google.golang.org/grpc/internal/transport.earlyAbortStream.0" = type { i32, i32, { i8*, i64 }, %Status.1*, i8 }
%Status.1 = type { %Status.0* }
%Status.0 = type { %MessageState.1, i32, %IPST.0, i32, { i8*, i64 }, %IPST.36 }
%MessageState.1 = type { %NoUnkeyedLiterals.0, [0 x %__go_descriptor.23*], [0 x %Mutex.0], %MessageInfo.0* }
%NoUnkeyedLiterals.0 = type {}
%Mutex.0 = type { i32, i32 }
%MessageInfo.0 = type { %Type.0, %MessageDescriptor.0, %__go_descriptor.123*, %IPST.52, %Mutex.0, i32, %".google.golang.org/protobuf/internal/impl.reflectMessageInfo.0", %".google.golang.org/protobuf/internal/impl.coderMessageInfo.0" }
%MessageDescriptor.0 = type { { %_type.0*, { i8*, i8* } (i8*, i8*)*, { i8*, i8* } (i8*, i8*, i64)*, { i8*, i8* } (i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, void (i8*, i8*, i8*, i8*)*, void (i8*, i8*, i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, i8 (i8*, i8*)* }*, i8* }
%__go_descriptor.123 = type { { i8*, i8* } (i8*, i8*, i8*, i64)* }
%IPST.52 = type { %IPST.3*, i64, i64 }
%IPST.3 = type { %_type.0*, i8* }
%".google.golang.org/protobuf/internal/impl.reflectMessageInfo.0" = type { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %IPST.56, %IPST.52, %__go_descriptor.128*, %__go_descriptor.129*, %__go_descriptor.130*, %".google.golang.org/protobuf/internal/impl.atomicNilMessage.0" }
%IPST.56 = type { %".google.golang.org/protobuf/internal/impl.fieldInfo.0"**, i64, i64 }
%".google.golang.org/protobuf/internal/impl.fieldInfo.0" = type { %FieldDescriptor.0, %__go_descriptor.124*, %__go_descriptor.125*, %__go_descriptor.126*, %__go_descriptor.127*, %__go_descriptor.126*, %__go_descriptor.80*, %__go_descriptor.68* }
%FieldDescriptor.0 = type { { %_type.0*, i8 (i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, void (%Value.2*, i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*)*, i64 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*)*, i8 (i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, i8 (i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, i32 (i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, void (i8*, i8*, i8*, i8*)*, void (i8*, i8*, i8*, i8*)*, i8 (i8*, i8*)*, { i8*, i64 } (i8*, i8*)* }*, i8* }
%Value.2 = type { [0 x %__go_descriptor.23*], i8*, i8*, i64 }
%__go_descriptor.124 = type { i8 (i8*, i8*)* }
%__go_descriptor.125 = type { void (i8*, i8*)* }
%__go_descriptor.127 = type { void (i8*, i8*, %Value.2*)* }
%__go_descriptor.126 = type { void (%Value.2*, i8*, i8*)* }
%__go_descriptor.80 = type { { i8*, i8* } (i8*)* }
%__go_descriptor.68 = type { void (%Value.2*, i8*)* }
%__go_descriptor.128 = type { void (%RawFields.0*, i8*, i8*)* }
%RawFields.0 = type { i8*, i64, i64 }
%__go_descriptor.129 = type { void (i8*, i8*, %RawFields.0*)* }
%__go_descriptor.130 = type { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** (i8*, i8*)* }
%".google.golang.org/protobuf/internal/impl.atomicNilMessage.0" = type { i8* }
%".google.golang.org/protobuf/internal/impl.coderMessageInfo.0" = type { %IPST.57, %IPST.58, %IPST.58, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, i64, i64, i8, i64, i8, i8, i8 }
%IPST.57 = type { %NoUnkeyedLiterals.0, i64, %__go_descriptor.82*, %__go_descriptor.83*, %__go_descriptor.84*, %__go_descriptor.93*, %__go_descriptor.94* }
%__go_descriptor.82 = type { i64 (i8*, { %NoUnkeyedLiterals.0, %Message.3, i8 }*)* }
%Message.3 = type { { %_type.0*, void (i8*, i8*, i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, void (%Value.2*, i8*, i8*, i8*, i8*)*, void (%RawFields.0*, i8*, i8*)*, i8 (i8*, i8*, i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, i8 (i8*, i8*)*, void (%Value.2*, i8*, i8*, i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, void (%Value.2*, i8*, i8*, i8*, i8*)*, %IPST.57* (i8*, i8*)*, void (i8*, i8*, %__go_descriptor.96*)*, void (i8*, i8*, i8*, i8*, %Value.2*)*, void (i8*, i8*, %RawFields.0*)*, { i8*, i8* } (i8*, i8*)*, { i8*, i8* } (i8*, i8*, i8*, i8*)* }*, i8* }
%__go_descriptor.96 = type { i8 (i8*, i8*, i8*, %Value.2*)* }
%__go_descriptor.83 = type { void ({ { %NoUnkeyedLiterals.0, %IPST.0 }, %error.0 }*, i8*, { %NoUnkeyedLiterals.0, %Message.3, %IPST.0, i8 }*)* }
%error.0 = type { { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, i8* }
%__go_descriptor.84 = type { void ({ { %NoUnkeyedLiterals.0, i8 }, %error.0 }*, i8*, { %NoUnkeyedLiterals.0, %Message.3, %IPST.0, i8, %IPST.55, i64 }*)* }
%IPST.55 = type { { %_type.0*, void ({ %ExtensionType.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %ExtensionType.0, %error.0 }*, i8*, i8*, i8*, i64, i32)* }*, i8* }
%ExtensionType.0 = type { { %_type.0*, { i8*, i8* } (i8*, i8*, %Value.2*)*, i8 (i8*, i8*, i8*, i8*)*, i8 (i8*, i8*, %Value.2*)*, void (%Value.2*, i8*, i8*)*, { i8*, i8* } (i8*, i8*)*, void (%Value.2*, i8*, i8*, i8*, i8*)*, void (%Value.2*, i8*, i8*)* }*, i8* }
%__go_descriptor.93 = type { i8 (i8*, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }*)* }
%__go_descriptor.94 = type { { i8*, i8* } (i8*, i8*, i8*)* }
%IPST.58 = type { %".google.golang.org/protobuf/internal/impl.coderFieldInfo.0"**, i64, i64 }
%".google.golang.org/protobuf/internal/impl.coderFieldInfo.0" = type { %".google.golang.org/protobuf/internal/impl.pointerCoderFuncs.0", %MessageInfo.0*, %Type.0, %".google.golang.org/protobuf/internal/impl.validationInfo.0", i32, i64, i64, i64, i8, i8 }
%".google.golang.org/protobuf/internal/impl.pointerCoderFuncs.0" = type { %MessageInfo.0*, %__go_descriptor.131*, %__go_descriptor.132*, %__go_descriptor.133*, %__go_descriptor.134*, %__go_descriptor.135* }
%__go_descriptor.131 = type { i64 (i8*, i8*, %".google.golang.org/protobuf/internal/impl.coderFieldInfo.0"*, i8)* }
%__go_descriptor.132 = type { void ({ %IPST.0, %error.0 }*, i8*, %IPST.0*, i8*, %".google.golang.org/protobuf/internal/impl.coderFieldInfo.0"*, i8)* }
%__go_descriptor.133 = type { void ({ %".google.golang.org/protobuf/internal/impl.unmarshalOutput.0", %error.0 }*, i8*, %IPST.0*, i8*, i8, %".google.golang.org/protobuf/internal/impl.coderFieldInfo.0"*, %".google.golang.org/protobuf/internal/impl.unmarshalOptions.0"*)* }
%".google.golang.org/protobuf/internal/impl.unmarshalOutput.0" = type { i64, i8 }
%".google.golang.org/protobuf/internal/impl.unmarshalOptions.0" = type { i8, %IPST.55, i64 }
%__go_descriptor.134 = type { { i8*, i8* } (i8*, i8*, %".google.golang.org/protobuf/internal/impl.coderFieldInfo.0"*)* }
%__go_descriptor.135 = type { void (i8*, i8*, i8*, %".google.golang.org/protobuf/internal/impl.coderFieldInfo.0"*)* }
%".google.golang.org/protobuf/internal/impl.validationInfo.0" = type { %MessageInfo.0*, i8, i8, i8, i64 }
%IPST.36 = type { %Any.0**, i64, i64 }
%Any.0 = type { %MessageState.1, i32, %IPST.0, { i8*, i64 }, %IPST.0 }
%".google.golang.org/grpc/internal/transport.incomingWindowUpdate.0" = type { i32, i32 }
%".google.golang.org/grpc/internal/transport.outgoingSettings.0" = type { %IPST.53 }
%".google.golang.org/grpc/internal/transport.headerFrame.0" = type { i32, %IPST.35, i8, %__go_descriptor.258*, %__go_descriptor.23*, %".google.golang.org/grpc/internal/transport.writeQuota.0"*, %".google.golang.org/grpc/internal/transport.cleanupStream.0"*, %__go_descriptor.203* }
%__go_descriptor.258 = type { { i8*, i8* } (i8*, i32)* }
%__go_descriptor.203 = type { void (i8*, i8*, i8*)* }
%".google.golang.org/grpc/internal/transport.outgoingWindowUpdate.0" = type { i32, i32 }
%IPAddr.0 = type { %IP.0, { i8*, i64 } }
%IP.0 = type { i8*, i64, i64 }
%Sockaddr.0 = type { { %_type.0*, void ({ %RawSockaddrAny.0*, i32, %error.0 }*, i8*, i8*)* }*, i8* }
%RawSockaddrAny.0 = type { %RawSockaddr.0, [96 x i8] }
%RawSockaddr.0 = type { i16, [14 x i8] }
%functionDescriptor.0 = type { i64 }
%FuncType.0 = type { %_type.0, i8, %IPST.68, %IPST.68 }
%IPST.68 = type { %_type.0**, i64, i64 }
%InterfaceType.0 = type { %_type.0, %IPST.70 }
%IPST.70 = type { %imethod.0*, i64, i64 }
%imethod.0 = type { { i8*, i64 }*, { i8*, i64 }*, %_type.0* }
%SliceType.0 = type { %_type.0, %_type.0* }
%Response.0 = type { i32, { i8*, i64 }, %IPST.0, {}, %IPST.0, i32 }
%MapType.0 = type { %_type.0, %_type.0*, %_type.0*, %_type.0*, %__go_descriptor.276*, i8, i8, i16, i32 }
%__go_descriptor.276 = type { i64 (i8*, i8*, i64)* }
%ArrayType.0 = type { %_type.0, %_type.0*, %_type.0*, i64 }
%.command-line-arguments.marble.0 = type { { i8*, i64 }, { i8*, i64 }, { i8*, i64 }, i64, { i8*, i64 } }
%StateQueryIteratorInterface.0 = type { { %_type.0*, { i8*, i8* } (i8*, i8*)*, i8 (i8*, i8*)*, void ({ %KV.0*, %error.0 }*, i8*, i8*)* }*, i8* }
%KV.0 = type { { i8*, i64 }, { i8*, i64 }, %IPST.0, {}, %IPST.0, i32 }
%Buffer.0 = type { %IPST.0, i64, i8 }
%MarblesPrivateChaincode.0 = type {}
%ChaincodeStubInterface.0 = type { { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, i8* }
%IPST.7 = type { { i8*, i64 }*, i64, i64 }
%IPST.6 = type { %IPST.0*, i64, i64 }
%HistoryQueryIteratorInterface.0 = type { { %_type.0*, { i8*, i8* } (i8*, i8*)*, i8 (i8*, i8*)*, void ({ %KeyModification.0*, %error.0 }*, i8*, i8*)* }*, i8* }
%KeyModification.0 = type { { i8*, i64 }, %IPST.0, %Timestamp.1*, i8, {}, %IPST.0, i32 }
%Timestamp.1 = type { %MessageState.1, i32, %IPST.0, i64, i32 }
%QueryResponseMetadata.0 = type { i32, { i8*, i64 }, {}, %IPST.0, i32 }
%SignedProposal.0 = type { %IPST.0, %IPST.0, {}, %IPST.0, i32 }
%IPST.2 = type { { i8*, i64 }*, %IPST.0*, i8*, { i64, i8, i8, i16, i32, %IPST.1*, %IPST.1*, i64, i8* }*, %IPST.1*, %IPST.1*, i8*, i8*, i64, i8, i8, i8, i8, i64, i64 }
%IPST.1 = type { [8 x i8], [8 x { i8*, i64 }], [8 x %IPST.0], i8* }
%.command-line-arguments.marbleDeleteTransientInput.0 = type { { i8*, i64 } }
%.command-line-arguments.marbleTransientInput.0 = type { { i8*, i64 }, { i8*, i64 }, i64, { i8*, i64 }, i64 }
%.command-line-arguments.marblePrivateDetails.0 = type { { i8*, i64 }, { i8*, i64 }, i64 }
%.command-line-arguments.marbleTransferTransientInput.0 = type { { i8*, i64 }, { i8*, i64 } }
%.1 = type { { %_type.0*, void (i8*, i8*)* }*, i8* }

$command_x2dline_x2darguments.MarblesPrivateChaincode..p = comdat any

$gcbits..ba = comdat any

$type..func_8github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9 = comdat any

$type..func_8_2command_x2dline_x2darguments_0MarblesPrivateChaincode_3github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9 = comdat any

$type..func_8github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_3_6_7string_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9 = comdat any

$type.._6_7string = comdat any

$string..d = comdat any

$string..p = comdat any

$type..func_8_2command_x2dline_x2darguments_0MarblesPrivateChaincode_3github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_3_6_7string_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9 = comdat any

$type.._2_2command_x2dline_x2darguments_0MarblesPrivateChaincode = comdat any

$gcbits..ve = comdat any

$command_x2dline_x2darguments.marble..p = comdat any

$int..d = comdat any

$int..p = comdat any

$gcbits..fa = comdat any

$command_x2dline_x2darguments.marblePrivateDetails..p = comdat any

$type..map_6string_7_6_7uint8 = comdat any

$type.._6_7uint8 = comdat any

$uint8..d = comdat any

$uint8..p = comdat any

$type..struct_4_4x_5topbits_b_68x_7uint8_ckeys_b_68x_7string_cvalues_b_68x_7_6_7uint8_coverflow_b_2_4void_5_5 = comdat any

$gcbits..kvkfjsejca = comdat any

$type.._68x_7uint8 = comdat any

$type.._68x_7string = comdat any

$gcbits..vkva = comdat any

$type.._68x_7_6_7uint8 = comdat any

$gcbits..jsejc = comdat any

$type.._6_7_6_7uint8 = comdat any

$gcbits..fb = comdat any

$command_x2dline_x2darguments_0MarblesPrivateChaincode_0initMarble_0marbleTransientInput..p = comdat any

$type.._62x_7string = comdat any

$type.._61x_7uint8 = comdat any

$command_x2dline_x2darguments_0MarblesPrivateChaincode_0delete_0marbleDeleteTransientInput..p = comdat any

$command_x2dline_x2darguments_0MarblesPrivateChaincode_0transferMarble_0marbleTransferTransientInput..p = comdat any

@reflect.rtype..d = external constant %StructType.0
@imt..interface_4Align_bfunc_8_9_8int_9_cAssignableTo_bfunc_8reflect_0Type_9_8bool_9_cBits_bfunc_8_9_8int_9_cChanDir_bfunc_8_9_8reflect_0ChanDir_9_cComparable_bfunc_8_9_8bool_9_cConvertibleTo_bfunc_8reflect_0Type_9_8bool_9_cElem_bfunc_8_9_8reflect_0Type_9_cField_bfunc_8int_9_8reflect_0StructField_9_cFieldAlign_bfunc_8_9_8int_9_cFieldByIndex_bfunc_8_6_7int_9_8reflect_0StructField_9_cFieldByName_bfunc_8string_9_8reflect_0StructField_3bool_9_cFieldByNameFunc_bfunc_8func_8string_9_8bool_9_9_8reflect_0StructField_3bool_9_cImplements_bfunc_8reflect_0Type_9_8bool_9_cIn_bfunc_8int_9_8reflect_0Type_9_cIsVariadic_bfunc_8_9_8bool_9_cKey_bfunc_8_9_8reflect_0Type_9_cKind_bfunc_8_9_8reflect_0Kind_9_cLen_bfunc_8_9_8int_9_cMethod_bfunc_8int_9_8reflect_0Method_9_cMethodByName_bfunc_8string_9_8reflect_0Method_3bool_9_cName_bfunc_8_9_8string_9_cNumField_bfunc_8_9_8int_9_cNumIn_bfunc_8_9_8int_9_cNumMethod_bfunc_8_9_8int_9_cNumOut_bfunc_8_9_8int_9_cOut_bfunc_8int_9_8reflect_0Type_9_cPkgPath_bfunc_8_9_8string_9_cSize_bfunc_8_9_8uintptr_9_cString_bfunc_8_9_8string_9_creflect_0common_bfunc_8_9_8_2reflect_0rtype_9_creflect_0rawString_bfunc_8_9_8string_9_creflect_0uncommon_bfunc_8_9_8_2reflect_0uncommonType_9_5..reflect.rtype = internal constant { %_type.0*, i64 (i8*, %.reflect.rtype.0*)*, i8 (i8*, %.reflect.rtype.0*, i8*, i8*)*, i64 (i8*, %.reflect.rtype.0*)*, i64 (i8*, %.reflect.rtype.0*)*, i8 (i8*, %.reflect.rtype.0*)*, i8 (i8*, %.reflect.rtype.0*, i8*, i8*)*, { i8*, i8* } (i8*, %.reflect.rtype.0*)*, void (%StructField.0*, i8*, %.reflect.rtype.0*, i64)*, i64 (i8*, %.reflect.rtype.0*)*, void (%StructField.0*, i8*, %.reflect.rtype.0*, %IPST.17*)*, void ({ %StructField.0, i8 }*, i8*, %.reflect.rtype.0*, i8*, i64)*, void ({ %StructField.0, i8 }*, i8*, %.reflect.rtype.0*, %__go_descriptor.14*)*, i8 (i8*, %.reflect.rtype.0*, i8*, i8*)*, { i8*, i8* } (i8*, %.reflect.rtype.0*, i64)*, i8 (i8*, %.reflect.rtype.0*)*, { i8*, i8* } (i8*, %.reflect.rtype.0*)*, i64 (i8*, %.reflect.rtype.0*)*, i64 (i8*, %.reflect.rtype.0*)*, void (%Method.0*, i8*, %.reflect.rtype.0*, i64)*, void ({ %Method.0, i8 }*, i8*, %.reflect.rtype.0*, i8*, i64)*, { i8*, i64 } (i8*, %.reflect.rtype.0*)*, i64 (i8*, %.reflect.rtype.0*)*, i64 (i8*, %.reflect.rtype.0*)*, i64 (i8*, %.reflect.rtype.0*)*, i64 (i8*, %.reflect.rtype.0*)*, { i8*, i8* } (i8*, %.reflect.rtype.0*, i64)*, { i8*, i64 } (i8*, %.reflect.rtype.0*)*, i64 (i8*, %.reflect.rtype.0*)*, { i8*, i64 } (i8*, %.reflect.rtype.0*)*, %.reflect.rtype.0* (i8*, %.reflect.rtype.0*)*, { i8*, i64 } (i8*, %.reflect.rtype.0*)*, %.reflect.uncommonType.0* (i8*, %.reflect.rtype.0*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @reflect.rtype..d, i32 0, i32 0), i64 (i8*, %.reflect.rtype.0*)* @reflect.rtype.Align, i8 (i8*, %.reflect.rtype.0*, i8*, i8*)* @reflect.rtype.AssignableTo, i64 (i8*, %.reflect.rtype.0*)* @reflect.rtype.Bits, i64 (i8*, %.reflect.rtype.0*)* @reflect.rtype.ChanDir, i8 (i8*, %.reflect.rtype.0*)* @reflect.rtype.Comparable, i8 (i8*, %.reflect.rtype.0*, i8*, i8*)* @reflect.rtype.ConvertibleTo, { i8*, i8* } (i8*, %.reflect.rtype.0*)* @reflect.rtype.Elem, void (%StructField.0*, i8*, %.reflect.rtype.0*, i64)* @reflect.rtype.Field, i64 (i8*, %.reflect.rtype.0*)* @reflect.rtype.FieldAlign, void (%StructField.0*, i8*, %.reflect.rtype.0*, %IPST.17*)* @reflect.rtype.FieldByIndex, void ({ %StructField.0, i8 }*, i8*, %.reflect.rtype.0*, i8*, i64)* @reflect.rtype.FieldByName, void ({ %StructField.0, i8 }*, i8*, %.reflect.rtype.0*, %__go_descriptor.14*)* @reflect.rtype.FieldByNameFunc, i8 (i8*, %.reflect.rtype.0*, i8*, i8*)* @reflect.rtype.Implements, { i8*, i8* } (i8*, %.reflect.rtype.0*, i64)* @reflect.rtype.In, i8 (i8*, %.reflect.rtype.0*)* @reflect.rtype.IsVariadic, { i8*, i8* } (i8*, %.reflect.rtype.0*)* @reflect.rtype.Key, i64 (i8*, %.reflect.rtype.0*)* @reflect.rtype.Kind, i64 (i8*, %.reflect.rtype.0*)* @reflect.rtype.Len, void (%Method.0*, i8*, %.reflect.rtype.0*, i64)* @reflect.rtype.Method, void ({ %Method.0, i8 }*, i8*, %.reflect.rtype.0*, i8*, i64)* @reflect.rtype.MethodByName, { i8*, i64 } (i8*, %.reflect.rtype.0*)* @reflect.rtype.Name, i64 (i8*, %.reflect.rtype.0*)* @reflect.rtype.NumField, i64 (i8*, %.reflect.rtype.0*)* @reflect.rtype.NumIn, i64 (i8*, %.reflect.rtype.0*)* @reflect.rtype.NumMethod, i64 (i8*, %.reflect.rtype.0*)* @reflect.rtype.NumOut, { i8*, i8* } (i8*, %.reflect.rtype.0*, i64)* @reflect.rtype.Out, { i8*, i64 } (i8*, %.reflect.rtype.0*)* @reflect.rtype.PkgPath, i64 (i8*, %.reflect.rtype.0*)* @reflect.rtype.Size, { i8*, i64 } (i8*, %.reflect.rtype.0*)* @reflect.rtype.String, %.reflect.rtype.0* (i8*, %.reflect.rtype.0*)* @reflect.rtype.common, { i8*, i64 } (i8*, %.reflect.rtype.0*)* @reflect.rtype.rawString, %.reflect.uncommonType.0* (i8*, %.reflect.rtype.0*)* @reflect.rtype.uncommon..stub }
@reflect.rtype..p = external constant %PtrType.0
@pimt..interface_4Align_bfunc_8_9_8int_9_cAssignableTo_bfunc_8reflect_0Type_9_8bool_9_cBits_bfunc_8_9_8int_9_cChanDir_bfunc_8_9_8reflect_0ChanDir_9_cComparable_bfunc_8_9_8bool_9_cConvertibleTo_bfunc_8reflect_0Type_9_8bool_9_cElem_bfunc_8_9_8reflect_0Type_9_cField_bfunc_8int_9_8reflect_0StructField_9_cFieldAlign_bfunc_8_9_8int_9_cFieldByIndex_bfunc_8_6_7int_9_8reflect_0StructField_9_cFieldByName_bfunc_8string_9_8reflect_0StructField_3bool_9_cFieldByNameFunc_bfunc_8func_8string_9_8bool_9_9_8reflect_0StructField_3bool_9_cImplements_bfunc_8reflect_0Type_9_8bool_9_cIn_bfunc_8int_9_8reflect_0Type_9_cIsVariadic_bfunc_8_9_8bool_9_cKey_bfunc_8_9_8reflect_0Type_9_cKind_bfunc_8_9_8reflect_0Kind_9_cLen_bfunc_8_9_8int_9_cMethod_bfunc_8int_9_8reflect_0Method_9_cMethodByName_bfunc_8string_9_8reflect_0Method_3bool_9_cName_bfunc_8_9_8string_9_cNumField_bfunc_8_9_8int_9_cNumIn_bfunc_8_9_8int_9_cNumMethod_bfunc_8_9_8int_9_cNumOut_bfunc_8_9_8int_9_cOut_bfunc_8int_9_8reflect_0Type_9_cPkgPath_bfunc_8_9_8string_9_cSize_bfunc_8_9_8uintptr_9_cString_bfunc_8_9_8string_9_creflect_0common_bfunc_8_9_8_2reflect_0rtype_9_creflect_0rawString_bfunc_8_9_8string_9_creflect_0uncommon_bfunc_8_9_8_2reflect_0uncommonType_9_5..reflect.rtype = internal constant { %_type.0*, i64 (i8*, %.reflect.rtype.0*)*, i8 (i8*, %.reflect.rtype.0*, i8*, i8*)*, i64 (i8*, %.reflect.rtype.0*)*, i64 (i8*, %.reflect.rtype.0*)*, i8 (i8*, %.reflect.rtype.0*)*, i8 (i8*, %.reflect.rtype.0*, i8*, i8*)*, { i8*, i8* } (i8*, %.reflect.rtype.0*)*, void (%StructField.0*, i8*, %.reflect.rtype.0*, i64)*, i64 (i8*, %.reflect.rtype.0*)*, void (%StructField.0*, i8*, %.reflect.rtype.0*, %IPST.17*)*, void ({ %StructField.0, i8 }*, i8*, %.reflect.rtype.0*, i8*, i64)*, void ({ %StructField.0, i8 }*, i8*, %.reflect.rtype.0*, %__go_descriptor.14*)*, i8 (i8*, %.reflect.rtype.0*, i8*, i8*)*, { i8*, i8* } (i8*, %.reflect.rtype.0*, i64)*, i8 (i8*, %.reflect.rtype.0*)*, { i8*, i8* } (i8*, %.reflect.rtype.0*)*, i64 (i8*, %.reflect.rtype.0*)*, i64 (i8*, %.reflect.rtype.0*)*, void (%Method.0*, i8*, %.reflect.rtype.0*, i64)*, void ({ %Method.0, i8 }*, i8*, %.reflect.rtype.0*, i8*, i64)*, { i8*, i64 } (i8*, %.reflect.rtype.0*)*, i64 (i8*, %.reflect.rtype.0*)*, i64 (i8*, %.reflect.rtype.0*)*, i64 (i8*, %.reflect.rtype.0*)*, i64 (i8*, %.reflect.rtype.0*)*, { i8*, i8* } (i8*, %.reflect.rtype.0*, i64)*, { i8*, i64 } (i8*, %.reflect.rtype.0*)*, i64 (i8*, %.reflect.rtype.0*)*, { i8*, i64 } (i8*, %.reflect.rtype.0*)*, %.reflect.rtype.0* (i8*, %.reflect.rtype.0*)*, { i8*, i64 } (i8*, %.reflect.rtype.0*)*, %.reflect.uncommonType.0* (i8*, %.reflect.rtype.0*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @reflect.rtype..p, i32 0, i32 0), i64 (i8*, %.reflect.rtype.0*)* @reflect.rtype.Align, i8 (i8*, %.reflect.rtype.0*, i8*, i8*)* @reflect.rtype.AssignableTo, i64 (i8*, %.reflect.rtype.0*)* @reflect.rtype.Bits, i64 (i8*, %.reflect.rtype.0*)* @reflect.rtype.ChanDir, i8 (i8*, %.reflect.rtype.0*)* @reflect.rtype.Comparable, i8 (i8*, %.reflect.rtype.0*, i8*, i8*)* @reflect.rtype.ConvertibleTo, { i8*, i8* } (i8*, %.reflect.rtype.0*)* @reflect.rtype.Elem, void (%StructField.0*, i8*, %.reflect.rtype.0*, i64)* @reflect.rtype.Field, i64 (i8*, %.reflect.rtype.0*)* @reflect.rtype.FieldAlign, void (%StructField.0*, i8*, %.reflect.rtype.0*, %IPST.17*)* @reflect.rtype.FieldByIndex, void ({ %StructField.0, i8 }*, i8*, %.reflect.rtype.0*, i8*, i64)* @reflect.rtype.FieldByName, void ({ %StructField.0, i8 }*, i8*, %.reflect.rtype.0*, %__go_descriptor.14*)* @reflect.rtype.FieldByNameFunc, i8 (i8*, %.reflect.rtype.0*, i8*, i8*)* @reflect.rtype.Implements, { i8*, i8* } (i8*, %.reflect.rtype.0*, i64)* @reflect.rtype.In, i8 (i8*, %.reflect.rtype.0*)* @reflect.rtype.IsVariadic, { i8*, i8* } (i8*, %.reflect.rtype.0*)* @reflect.rtype.Key, i64 (i8*, %.reflect.rtype.0*)* @reflect.rtype.Kind, i64 (i8*, %.reflect.rtype.0*)* @reflect.rtype.Len, void (%Method.0*, i8*, %.reflect.rtype.0*, i64)* @reflect.rtype.Method, void ({ %Method.0, i8 }*, i8*, %.reflect.rtype.0*, i8*, i64)* @reflect.rtype.MethodByName, { i8*, i64 } (i8*, %.reflect.rtype.0*)* @reflect.rtype.Name, i64 (i8*, %.reflect.rtype.0*)* @reflect.rtype.NumField, i64 (i8*, %.reflect.rtype.0*)* @reflect.rtype.NumIn, i64 (i8*, %.reflect.rtype.0*)* @reflect.rtype.NumMethod, i64 (i8*, %.reflect.rtype.0*)* @reflect.rtype.NumOut, { i8*, i8* } (i8*, %.reflect.rtype.0*, i64)* @reflect.rtype.Out, { i8*, i64 } (i8*, %.reflect.rtype.0*)* @reflect.rtype.PkgPath, i64 (i8*, %.reflect.rtype.0*)* @reflect.rtype.Size, { i8*, i64 } (i8*, %.reflect.rtype.0*)* @reflect.rtype.String, %.reflect.rtype.0* (i8*, %.reflect.rtype.0*)* @reflect.rtype.common, { i8*, i64 } (i8*, %.reflect.rtype.0*)* @reflect.rtype.rawString, %.reflect.uncommonType.0* (i8*, %.reflect.rtype.0*)* @reflect.rtype.uncommon..stub }
@imt..interface_4github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0isApplicationPolicy__Type_bfunc_8_9_8_9_5..github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.ApplicationPolicy__ChannelConfigPolicyReference = external constant { %_type.0*, i8* }
@pimt..interface_4github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0isApplicationPolicy__Type_bfunc_8_9_8_9_5..github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.ApplicationPolicy__ChannelConfigPolicyReference = external constant { %_type.0*, i8* }
@imt..interface_4github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0isApplicationPolicy__Type_bfunc_8_9_8_9_5..github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.ApplicationPolicy__SignaturePolicy = external constant { %_type.0*, i8* }
@pimt..interface_4github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0isApplicationPolicy__Type_bfunc_8_9_8_9_5..github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.ApplicationPolicy__SignaturePolicy = external constant { %_type.0*, i8* }
@google_0golang_0org_1grpc.ServiceConfig..d = external constant %StructType.0
@imt..interface_4google_0golang_0org_1grpc_1serviceconfig_0isServiceConfig_bfunc_8_9_8_9_5..google_0golang_0org_1grpc.ServiceConfig = internal constant { %_type.0*, void (i8*, %ServiceConfig.0*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @google_0golang_0org_1grpc.ServiceConfig..d, i32 0, i32 0), void (i8*, %ServiceConfig.0*)* @google_0golang_0org_1grpc.ServiceConfig.google_0golang_0org_1grpc_1serviceconfig_0isServiceConfig..stub }
@google_0golang_0org_1grpc.ServiceConfig..p = external constant %PtrType.0
@pimt..interface_4google_0golang_0org_1grpc_1serviceconfig_0isServiceConfig_bfunc_8_9_8_9_5..google_0golang_0org_1grpc.ServiceConfig = internal constant { %_type.0*, void (i8*, %ServiceConfig.0*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @google_0golang_0org_1grpc.ServiceConfig..p, i32 0, i32 0), void (i8*, %ServiceConfig.0*)* @google_0golang_0org_1grpc.ServiceConfig.google_0golang_0org_1grpc_1serviceconfig_0isServiceConfig..stub }
@golang_0org_1x_1net_1http2.FrameHeader..d = external constant %StructType.0
@imt..interface_4Header_bfunc_8_9_8golang_0org_1x_1net_1http2_0FrameHeader_9_cgolang_0org_1x_1net_1http2_0invalidate_bfunc_8_9_8_9_5..golang_0org_1x_1net_1http2.FrameHeader = internal constant { %_type.0*, { i64, i32 } (i8*, %FrameHeader.0*)*, void (i8*, %FrameHeader.0*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @golang_0org_1x_1net_1http2.FrameHeader..d, i32 0, i32 0), { i64, i32 } (i8*, %FrameHeader.0*)* @golang_0org_1x_1net_1http2.FrameHeader.Header, void (i8*, %FrameHeader.0*)* @golang_0org_1x_1net_1http2.FrameHeader.invalidate }
@golang_0org_1x_1net_1http2.FrameHeader..p = external constant %PtrType.0
@pimt..interface_4Header_bfunc_8_9_8golang_0org_1x_1net_1http2_0FrameHeader_9_cgolang_0org_1x_1net_1http2_0invalidate_bfunc_8_9_8_9_5..golang_0org_1x_1net_1http2.FrameHeader = internal constant { %_type.0*, { i64, i32 } (i8*, %FrameHeader.0*)*, void (i8*, %FrameHeader.0*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @golang_0org_1x_1net_1http2.FrameHeader..p, i32 0, i32 0), { i64, i32 } (i8*, %FrameHeader.0*)* @golang_0org_1x_1net_1http2.FrameHeader.Header, void (i8*, %FrameHeader.0*)* @golang_0org_1x_1net_1http2.FrameHeader.invalidate }
@golang_0org_1x_1net_1http2.DataFrame..d = external constant %StructType.0
@imt..interface_4Header_bfunc_8_9_8golang_0org_1x_1net_1http2_0FrameHeader_9_cgolang_0org_1x_1net_1http2_0invalidate_bfunc_8_9_8_9_5..golang_0org_1x_1net_1http2.DataFrame = internal constant { %_type.0*, { i64, i32 } (i8*, %DataFrame.0*)*, void (i8*, %DataFrame.0*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @golang_0org_1x_1net_1http2.DataFrame..d, i32 0, i32 0), { i64, i32 } (i8*, %DataFrame.0*)* @golang_0org_1x_1net_1http2.DataFrame.Header..stub, void (i8*, %DataFrame.0*)* @golang_0org_1x_1net_1http2.DataFrame.invalidate..stub }
@golang_0org_1x_1net_1http2.DataFrame..p = external constant %PtrType.0
@pimt..interface_4Header_bfunc_8_9_8golang_0org_1x_1net_1http2_0FrameHeader_9_cgolang_0org_1x_1net_1http2_0invalidate_bfunc_8_9_8_9_5..golang_0org_1x_1net_1http2.DataFrame = internal constant { %_type.0*, { i64, i32 } (i8*, %DataFrame.0*)*, void (i8*, %DataFrame.0*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @golang_0org_1x_1net_1http2.DataFrame..p, i32 0, i32 0), { i64, i32 } (i8*, %DataFrame.0*)* @golang_0org_1x_1net_1http2.DataFrame.Header..stub, void (i8*, %DataFrame.0*)* @golang_0org_1x_1net_1http2.DataFrame.invalidate..stub }
@google_0golang_0org_1grpc_1internal_1transport.goAway..d = external constant %StructType.0
@imt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.goAway = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.goAway.0"*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @google_0golang_0org_1grpc_1internal_1transport.goAway..d, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.goAway.0"*)* @google_0golang_0org_1grpc_1internal_1transport.goAway.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.goAway..p = external constant %PtrType.0
@pimt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.goAway = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.goAway.0"*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @google_0golang_0org_1grpc_1internal_1transport.goAway..p, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.goAway.0"*)* @google_0golang_0org_1grpc_1internal_1transport.goAway.isTransportResponseFrame }
@imt..interface_4github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0isCollectionConfig__Payload_bfunc_8_9_8_9_5..github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.CollectionConfig__StaticCollectionConfig = external constant { %_type.0*, i8* }
@pimt..interface_4github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0isCollectionConfig__Payload_bfunc_8_9_8_9_5..github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.CollectionConfig__StaticCollectionConfig = external constant { %_type.0*, i8* }
@imt..interface_4github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0isCollectionPolicyConfig__Payload_bfunc_8_9_8_9_5..github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.CollectionPolicyConfig__SignaturePolicy = external constant { %_type.0*, i8* }
@pimt..interface_4github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0isCollectionPolicyConfig__Payload_bfunc_8_9_8_9_5..github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.CollectionPolicyConfig__SignaturePolicy = external constant { %_type.0*, i8* }
@imt..interface_4github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0isDeliverResponse__Type_bfunc_8_9_8_9_5..github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.DeliverResponse__Block = external constant { %_type.0*, i8* }
@pimt..interface_4github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0isDeliverResponse__Type_bfunc_8_9_8_9_5..github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.DeliverResponse__Block = external constant { %_type.0*, i8* }
@imt..interface_4github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0isDeliverResponse__Type_bfunc_8_9_8_9_5..github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.DeliverResponse__BlockAndPrivateData = external constant { %_type.0*, i8* }
@pimt..interface_4github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0isDeliverResponse__Type_bfunc_8_9_8_9_5..github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.DeliverResponse__BlockAndPrivateData = external constant { %_type.0*, i8* }
@imt..interface_4github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0isDeliverResponse__Type_bfunc_8_9_8_9_5..github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.DeliverResponse__FilteredBlock = external constant { %_type.0*, i8* }
@pimt..interface_4github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0isDeliverResponse__Type_bfunc_8_9_8_9_5..github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.DeliverResponse__FilteredBlock = external constant { %_type.0*, i8* }
@imt..interface_4github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0isDeliverResponse__Type_bfunc_8_9_8_9_5..github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.DeliverResponse__Status = external constant { %_type.0*, i8* }
@pimt..interface_4github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0isDeliverResponse__Type_bfunc_8_9_8_9_5..github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.DeliverResponse__Status = external constant { %_type.0*, i8* }
@imt..interface_4github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0isFilteredTransaction__Data_bfunc_8_9_8_9_5..github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.FilteredTransaction__TransactionActions = external constant { %_type.0*, i8* }
@pimt..interface_4github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0isFilteredTransaction__Data_bfunc_8_9_8_9_5..github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.FilteredTransaction__TransactionActions = external constant { %_type.0*, i8* }
@golang_0org_1x_1net_1http2.HeadersFrame..d = external constant %StructType.0
@imt..interface_4Header_bfunc_8_9_8golang_0org_1x_1net_1http2_0FrameHeader_9_cgolang_0org_1x_1net_1http2_0invalidate_bfunc_8_9_8_9_5..golang_0org_1x_1net_1http2.HeadersFrame = internal constant { %_type.0*, { i64, i32 } (i8*, %HeadersFrame.0*)*, void (i8*, %HeadersFrame.0*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @golang_0org_1x_1net_1http2.HeadersFrame..d, i32 0, i32 0), { i64, i32 } (i8*, %HeadersFrame.0*)* @golang_0org_1x_1net_1http2.HeadersFrame.Header..stub, void (i8*, %HeadersFrame.0*)* @golang_0org_1x_1net_1http2.HeadersFrame.invalidate..stub }
@golang_0org_1x_1net_1http2.HeadersFrame..p = external constant %PtrType.0
@pimt..interface_4Header_bfunc_8_9_8golang_0org_1x_1net_1http2_0FrameHeader_9_cgolang_0org_1x_1net_1http2_0invalidate_bfunc_8_9_8_9_5..golang_0org_1x_1net_1http2.HeadersFrame = internal constant { %_type.0*, { i64, i32 } (i8*, %HeadersFrame.0*)*, void (i8*, %HeadersFrame.0*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @golang_0org_1x_1net_1http2.HeadersFrame..p, i32 0, i32 0), { i64, i32 } (i8*, %HeadersFrame.0*)* @golang_0org_1x_1net_1http2.HeadersFrame.Header..stub, void (i8*, %HeadersFrame.0*)* @golang_0org_1x_1net_1http2.HeadersFrame.invalidate..stub }
@golang_0org_1x_1net_1http2.MetaHeadersFrame..d = external constant %StructType.0
@imt..interface_4Header_bfunc_8_9_8golang_0org_1x_1net_1http2_0FrameHeader_9_cgolang_0org_1x_1net_1http2_0invalidate_bfunc_8_9_8_9_5..golang_0org_1x_1net_1http2.MetaHeadersFrame = internal constant { %_type.0*, { i64, i32 } (i8*, %MetaHeadersFrame.0*)*, void (i8*, %MetaHeadersFrame.0*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @golang_0org_1x_1net_1http2.MetaHeadersFrame..d, i32 0, i32 0), { i64, i32 } (i8*, %MetaHeadersFrame.0*)* @golang_0org_1x_1net_1http2.MetaHeadersFrame.Header..stub, void (i8*, %MetaHeadersFrame.0*)* @golang_0org_1x_1net_1http2.MetaHeadersFrame.invalidate..stub }
@golang_0org_1x_1net_1http2.MetaHeadersFrame..p = external constant %PtrType.0
@pimt..interface_4Header_bfunc_8_9_8golang_0org_1x_1net_1http2_0FrameHeader_9_cgolang_0org_1x_1net_1http2_0invalidate_bfunc_8_9_8_9_5..golang_0org_1x_1net_1http2.MetaHeadersFrame = internal constant { %_type.0*, { i64, i32 } (i8*, %MetaHeadersFrame.0*)*, void (i8*, %MetaHeadersFrame.0*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @golang_0org_1x_1net_1http2.MetaHeadersFrame..p, i32 0, i32 0), { i64, i32 } (i8*, %MetaHeadersFrame.0*)* @golang_0org_1x_1net_1http2.MetaHeadersFrame.Header..stub, void (i8*, %MetaHeadersFrame.0*)* @golang_0org_1x_1net_1http2.MetaHeadersFrame.invalidate..stub }
@golang_0org_1x_1net_1http2.SettingsFrame..d = external constant %StructType.0
@imt..interface_4Header_bfunc_8_9_8golang_0org_1x_1net_1http2_0FrameHeader_9_cgolang_0org_1x_1net_1http2_0invalidate_bfunc_8_9_8_9_5..golang_0org_1x_1net_1http2.SettingsFrame = internal constant { %_type.0*, { i64, i32 } (i8*, %SettingsFrame.0*)*, void (i8*, %SettingsFrame.0*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @golang_0org_1x_1net_1http2.SettingsFrame..d, i32 0, i32 0), { i64, i32 } (i8*, %SettingsFrame.0*)* @golang_0org_1x_1net_1http2.SettingsFrame.Header..stub, void (i8*, %SettingsFrame.0*)* @golang_0org_1x_1net_1http2.SettingsFrame.invalidate..stub }
@golang_0org_1x_1net_1http2.SettingsFrame..p = external constant %PtrType.0
@pimt..interface_4Header_bfunc_8_9_8golang_0org_1x_1net_1http2_0FrameHeader_9_cgolang_0org_1x_1net_1http2_0invalidate_bfunc_8_9_8_9_5..golang_0org_1x_1net_1http2.SettingsFrame = internal constant { %_type.0*, { i64, i32 } (i8*, %SettingsFrame.0*)*, void (i8*, %SettingsFrame.0*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @golang_0org_1x_1net_1http2.SettingsFrame..p, i32 0, i32 0), { i64, i32 } (i8*, %SettingsFrame.0*)* @golang_0org_1x_1net_1http2.SettingsFrame.Header..stub, void (i8*, %SettingsFrame.0*)* @golang_0org_1x_1net_1http2.SettingsFrame.invalidate..stub }
@golang_0org_1x_1net_1http2.WindowUpdateFrame..d = external constant %StructType.0
@imt..interface_4Header_bfunc_8_9_8golang_0org_1x_1net_1http2_0FrameHeader_9_cgolang_0org_1x_1net_1http2_0invalidate_bfunc_8_9_8_9_5..golang_0org_1x_1net_1http2.WindowUpdateFrame = internal constant { %_type.0*, { i64, i32 } (i8*, %WindowUpdateFrame.0*)*, void (i8*, %WindowUpdateFrame.0*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @golang_0org_1x_1net_1http2.WindowUpdateFrame..d, i32 0, i32 0), { i64, i32 } (i8*, %WindowUpdateFrame.0*)* @golang_0org_1x_1net_1http2.WindowUpdateFrame.Header..stub, void (i8*, %WindowUpdateFrame.0*)* @golang_0org_1x_1net_1http2.WindowUpdateFrame.invalidate..stub }
@golang_0org_1x_1net_1http2.WindowUpdateFrame..p = external constant %PtrType.0
@pimt..interface_4Header_bfunc_8_9_8golang_0org_1x_1net_1http2_0FrameHeader_9_cgolang_0org_1x_1net_1http2_0invalidate_bfunc_8_9_8_9_5..golang_0org_1x_1net_1http2.WindowUpdateFrame = internal constant { %_type.0*, { i64, i32 } (i8*, %WindowUpdateFrame.0*)*, void (i8*, %WindowUpdateFrame.0*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @golang_0org_1x_1net_1http2.WindowUpdateFrame..p, i32 0, i32 0), { i64, i32 } (i8*, %WindowUpdateFrame.0*)* @golang_0org_1x_1net_1http2.WindowUpdateFrame.Header..stub, void (i8*, %WindowUpdateFrame.0*)* @golang_0org_1x_1net_1http2.WindowUpdateFrame.invalidate..stub }
@golang_0org_1x_1net_1http2.RSTStreamFrame..d = external constant %StructType.0
@imt..interface_4Header_bfunc_8_9_8golang_0org_1x_1net_1http2_0FrameHeader_9_cgolang_0org_1x_1net_1http2_0invalidate_bfunc_8_9_8_9_5..golang_0org_1x_1net_1http2.RSTStreamFrame = internal constant { %_type.0*, { i64, i32 } (i8*, %RSTStreamFrame.0*)*, void (i8*, %RSTStreamFrame.0*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @golang_0org_1x_1net_1http2.RSTStreamFrame..d, i32 0, i32 0), { i64, i32 } (i8*, %RSTStreamFrame.0*)* @golang_0org_1x_1net_1http2.RSTStreamFrame.Header..stub, void (i8*, %RSTStreamFrame.0*)* @golang_0org_1x_1net_1http2.RSTStreamFrame.invalidate..stub }
@golang_0org_1x_1net_1http2.RSTStreamFrame..p = external constant %PtrType.0
@pimt..interface_4Header_bfunc_8_9_8golang_0org_1x_1net_1http2_0FrameHeader_9_cgolang_0org_1x_1net_1http2_0invalidate_bfunc_8_9_8_9_5..golang_0org_1x_1net_1http2.RSTStreamFrame = internal constant { %_type.0*, { i64, i32 } (i8*, %RSTStreamFrame.0*)*, void (i8*, %RSTStreamFrame.0*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @golang_0org_1x_1net_1http2.RSTStreamFrame..p, i32 0, i32 0), { i64, i32 } (i8*, %RSTStreamFrame.0*)* @golang_0org_1x_1net_1http2.RSTStreamFrame.Header..stub, void (i8*, %RSTStreamFrame.0*)* @golang_0org_1x_1net_1http2.RSTStreamFrame.invalidate..stub }
@golang_0org_1x_1net_1http2.PingFrame..d = external constant %StructType.0
@imt..interface_4Header_bfunc_8_9_8golang_0org_1x_1net_1http2_0FrameHeader_9_cgolang_0org_1x_1net_1http2_0invalidate_bfunc_8_9_8_9_5..golang_0org_1x_1net_1http2.PingFrame = internal constant { %_type.0*, { i64, i32 } (i8*, %PingFrame.0*)*, void (i8*, %PingFrame.0*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @golang_0org_1x_1net_1http2.PingFrame..d, i32 0, i32 0), { i64, i32 } (i8*, %PingFrame.0*)* @golang_0org_1x_1net_1http2.PingFrame.Header..stub, void (i8*, %PingFrame.0*)* @golang_0org_1x_1net_1http2.PingFrame.invalidate..stub }
@golang_0org_1x_1net_1http2.PingFrame..p = external constant %PtrType.0
@pimt..interface_4Header_bfunc_8_9_8golang_0org_1x_1net_1http2_0FrameHeader_9_cgolang_0org_1x_1net_1http2_0invalidate_bfunc_8_9_8_9_5..golang_0org_1x_1net_1http2.PingFrame = internal constant { %_type.0*, { i64, i32 } (i8*, %PingFrame.0*)*, void (i8*, %PingFrame.0*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @golang_0org_1x_1net_1http2.PingFrame..p, i32 0, i32 0), { i64, i32 } (i8*, %PingFrame.0*)* @golang_0org_1x_1net_1http2.PingFrame.Header..stub, void (i8*, %PingFrame.0*)* @golang_0org_1x_1net_1http2.PingFrame.invalidate..stub }
@golang_0org_1x_1net_1http2.GoAwayFrame..d = external constant %StructType.0
@imt..interface_4Header_bfunc_8_9_8golang_0org_1x_1net_1http2_0FrameHeader_9_cgolang_0org_1x_1net_1http2_0invalidate_bfunc_8_9_8_9_5..golang_0org_1x_1net_1http2.GoAwayFrame = internal constant { %_type.0*, { i64, i32 } (i8*, %GoAwayFrame.0*)*, void (i8*, %GoAwayFrame.0*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @golang_0org_1x_1net_1http2.GoAwayFrame..d, i32 0, i32 0), { i64, i32 } (i8*, %GoAwayFrame.0*)* @golang_0org_1x_1net_1http2.GoAwayFrame.Header..stub, void (i8*, %GoAwayFrame.0*)* @golang_0org_1x_1net_1http2.GoAwayFrame.invalidate..stub }
@golang_0org_1x_1net_1http2.GoAwayFrame..p = external constant %PtrType.0
@pimt..interface_4Header_bfunc_8_9_8golang_0org_1x_1net_1http2_0FrameHeader_9_cgolang_0org_1x_1net_1http2_0invalidate_bfunc_8_9_8_9_5..golang_0org_1x_1net_1http2.GoAwayFrame = internal constant { %_type.0*, { i64, i32 } (i8*, %GoAwayFrame.0*)*, void (i8*, %GoAwayFrame.0*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @golang_0org_1x_1net_1http2.GoAwayFrame..p, i32 0, i32 0), { i64, i32 } (i8*, %GoAwayFrame.0*)* @golang_0org_1x_1net_1http2.GoAwayFrame.Header..stub, void (i8*, %GoAwayFrame.0*)* @golang_0org_1x_1net_1http2.GoAwayFrame.invalidate..stub }
@google_0golang_0org_1grpc_1internal_1transport.cleanupStream..d = external constant %StructType.0
@imt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.cleanupStream = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.cleanupStream.0"*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @google_0golang_0org_1grpc_1internal_1transport.cleanupStream..d, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.cleanupStream.0"*)* @google_0golang_0org_1grpc_1internal_1transport.cleanupStream.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.cleanupStream..p = external constant %PtrType.0
@pimt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.cleanupStream = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.cleanupStream.0"*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @google_0golang_0org_1grpc_1internal_1transport.cleanupStream..p, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.cleanupStream.0"*)* @google_0golang_0org_1grpc_1internal_1transport.cleanupStream.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.outFlowControlSizeRequest..d = external constant %StructType.0
@imt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.outFlowControlSizeRequest = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.outFlowControlSizeRequest.0"*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @google_0golang_0org_1grpc_1internal_1transport.outFlowControlSizeRequest..d, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.outFlowControlSizeRequest.0"*)* @google_0golang_0org_1grpc_1internal_1transport.outFlowControlSizeRequest.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.outFlowControlSizeRequest..p = external constant %PtrType.0
@pimt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.outFlowControlSizeRequest = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.outFlowControlSizeRequest.0"*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @google_0golang_0org_1grpc_1internal_1transport.outFlowControlSizeRequest..p, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.outFlowControlSizeRequest.0"*)* @google_0golang_0org_1grpc_1internal_1transport.outFlowControlSizeRequest.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.ping..d = external constant %StructType.0
@imt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.ping = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.ping.0"*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @google_0golang_0org_1grpc_1internal_1transport.ping..d, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.ping.0"*)* @google_0golang_0org_1grpc_1internal_1transport.ping.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.ping..p = external constant %PtrType.0
@pimt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.ping = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.ping.0"*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @google_0golang_0org_1grpc_1internal_1transport.ping..p, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.ping.0"*)* @google_0golang_0org_1grpc_1internal_1transport.ping.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.dataFrame..d = external constant %StructType.0
@imt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.dataFrame = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.dataFrame.0"*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @google_0golang_0org_1grpc_1internal_1transport.dataFrame..d, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.dataFrame.0"*)* @google_0golang_0org_1grpc_1internal_1transport.dataFrame.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.dataFrame..p = external constant %PtrType.0
@pimt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.dataFrame = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.dataFrame.0"*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @google_0golang_0org_1grpc_1internal_1transport.dataFrame..p, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.dataFrame.0"*)* @google_0golang_0org_1grpc_1internal_1transport.dataFrame.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.incomingSettings..d = external constant %StructType.0
@imt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.incomingSettings = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.incomingSettings.0"*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @google_0golang_0org_1grpc_1internal_1transport.incomingSettings..d, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.incomingSettings.0"*)* @google_0golang_0org_1grpc_1internal_1transport.incomingSettings.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.incomingSettings..p = external constant %PtrType.0
@pimt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.incomingSettings = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.incomingSettings.0"*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @google_0golang_0org_1grpc_1internal_1transport.incomingSettings..p, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.incomingSettings.0"*)* @google_0golang_0org_1grpc_1internal_1transport.incomingSettings.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.registerStream..d = external constant %StructType.0
@imt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.registerStream = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.registerStream.0"*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @google_0golang_0org_1grpc_1internal_1transport.registerStream..d, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.registerStream.0"*)* @google_0golang_0org_1grpc_1internal_1transport.registerStream.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.registerStream..p = external constant %PtrType.0
@pimt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.registerStream = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.registerStream.0"*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @google_0golang_0org_1grpc_1internal_1transport.registerStream..p, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.registerStream.0"*)* @google_0golang_0org_1grpc_1internal_1transport.registerStream.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.incomingGoAway..d = external constant %StructType.0
@imt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.incomingGoAway = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.incomingGoAway.0"*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @google_0golang_0org_1grpc_1internal_1transport.incomingGoAway..d, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.incomingGoAway.0"*)* @google_0golang_0org_1grpc_1internal_1transport.incomingGoAway.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.incomingGoAway..p = external constant %PtrType.0
@pimt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.incomingGoAway = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.incomingGoAway.0"*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @google_0golang_0org_1grpc_1internal_1transport.incomingGoAway..p, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.incomingGoAway.0"*)* @google_0golang_0org_1grpc_1internal_1transport.incomingGoAway.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.earlyAbortStream..d = external constant %StructType.0
@imt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.earlyAbortStream = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.earlyAbortStream.0"*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @google_0golang_0org_1grpc_1internal_1transport.earlyAbortStream..d, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.earlyAbortStream.0"*)* @google_0golang_0org_1grpc_1internal_1transport.earlyAbortStream.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.earlyAbortStream..p = external constant %PtrType.0
@pimt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.earlyAbortStream = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.earlyAbortStream.0"*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @google_0golang_0org_1grpc_1internal_1transport.earlyAbortStream..p, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.earlyAbortStream.0"*)* @google_0golang_0org_1grpc_1internal_1transport.earlyAbortStream.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.incomingWindowUpdate..d = external constant %StructType.0
@imt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.incomingWindowUpdate = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.incomingWindowUpdate.0"*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @google_0golang_0org_1grpc_1internal_1transport.incomingWindowUpdate..d, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.incomingWindowUpdate.0"*)* @google_0golang_0org_1grpc_1internal_1transport.incomingWindowUpdate.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.incomingWindowUpdate..p = external constant %PtrType.0
@pimt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.incomingWindowUpdate = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.incomingWindowUpdate.0"*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @google_0golang_0org_1grpc_1internal_1transport.incomingWindowUpdate..p, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.incomingWindowUpdate.0"*)* @google_0golang_0org_1grpc_1internal_1transport.incomingWindowUpdate.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.outgoingSettings..d = external constant %StructType.0
@imt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.outgoingSettings = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.outgoingSettings.0"*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @google_0golang_0org_1grpc_1internal_1transport.outgoingSettings..d, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.outgoingSettings.0"*)* @google_0golang_0org_1grpc_1internal_1transport.outgoingSettings.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.outgoingSettings..p = external constant %PtrType.0
@pimt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.outgoingSettings = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.outgoingSettings.0"*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @google_0golang_0org_1grpc_1internal_1transport.outgoingSettings..p, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.outgoingSettings.0"*)* @google_0golang_0org_1grpc_1internal_1transport.outgoingSettings.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.headerFrame..d = external constant %StructType.0
@imt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.headerFrame = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.headerFrame.0"*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @google_0golang_0org_1grpc_1internal_1transport.headerFrame..d, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.headerFrame.0"*)* @google_0golang_0org_1grpc_1internal_1transport.headerFrame.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.headerFrame..p = external constant %PtrType.0
@pimt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.headerFrame = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.headerFrame.0"*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @google_0golang_0org_1grpc_1internal_1transport.headerFrame..p, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.headerFrame.0"*)* @google_0golang_0org_1grpc_1internal_1transport.headerFrame.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.outgoingWindowUpdate..d = external constant %StructType.0
@imt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.outgoingWindowUpdate = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.outgoingWindowUpdate.0"*)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @google_0golang_0org_1grpc_1internal_1transport.outgoingWindowUpdate..d, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.outgoingWindowUpdate.0"*)* @google_0golang_0org_1grpc_1internal_1transport.outgoingWindowUpdate.isTransportResponseFrame }
@google_0golang_0org_1grpc_1internal_1transport.outgoingWindowUpdate..p = external constant %PtrType.0
@pimt..interface_4google_0golang_0org_1grpc_1internal_1transport_0isTransportResponseFrame_bfunc_8_9_8bool_9_5..google_0golang_0org_1grpc_1internal_1transport.outgoingWindowUpdate = internal constant { %_type.0*, i8 (i8*, %".google.golang.org/grpc/internal/transport.outgoingWindowUpdate.0"*)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @google_0golang_0org_1grpc_1internal_1transport.outgoingWindowUpdate..p, i32 0, i32 0), i8 (i8*, %".google.golang.org/grpc/internal/transport.outgoingWindowUpdate.0"*)* @google_0golang_0org_1grpc_1internal_1transport.outgoingWindowUpdate.isTransportResponseFrame }
@net.IPAddr..d = external constant %StructType.0
@imt..interface_4Network_bfunc_8_9_8string_9_cString_bfunc_8_9_8string_9_cnet_0family_bfunc_8_9_8int_9_cnet_0isWildcard_bfunc_8_9_8bool_9_cnet_0sockaddr_bfunc_8int_9_8syscall_0Sockaddr_3error_9_cnet_0toLocal_bfunc_8string_9_8net_0sockaddr_9_5..net.IPAddr = internal constant { %_type.0*, { i8*, i64 } (i8*, %IPAddr.0*)*, { i8*, i64 } (i8*, %IPAddr.0*)*, i64 (i8*, %IPAddr.0*)*, i8 (i8*, %IPAddr.0*)*, void ({ %Sockaddr.0, %error.0 }*, i8*, %IPAddr.0*, i64)*, { i8*, i8* } (i8*, %IPAddr.0*, i8*, i64)* } { %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @net.IPAddr..d, i32 0, i32 0), { i8*, i64 } (i8*, %IPAddr.0*)* @net.IPAddr.Network, { i8*, i64 } (i8*, %IPAddr.0*)* @net.IPAddr.String, i64 (i8*, %IPAddr.0*)* @net.IPAddr.family, i8 (i8*, %IPAddr.0*)* @net.IPAddr.isWildcard, void ({ %Sockaddr.0, %error.0 }*, i8*, %IPAddr.0*, i64)* @net.IPAddr.sockaddr, { i8*, i8* } (i8*, %IPAddr.0*, i8*, i64)* @net.IPAddr.toLocal }
@net.IPAddr..p = external constant %PtrType.0
@pimt..interface_4Network_bfunc_8_9_8string_9_cString_bfunc_8_9_8string_9_cnet_0family_bfunc_8_9_8int_9_cnet_0isWildcard_bfunc_8_9_8bool_9_cnet_0sockaddr_bfunc_8int_9_8syscall_0Sockaddr_3error_9_cnet_0toLocal_bfunc_8string_9_8net_0sockaddr_9_5..net.IPAddr = internal constant { %_type.0*, { i8*, i64 } (i8*, %IPAddr.0*)*, { i8*, i64 } (i8*, %IPAddr.0*)*, i64 (i8*, %IPAddr.0*)*, i8 (i8*, %IPAddr.0*)*, void ({ %Sockaddr.0, %error.0 }*, i8*, %IPAddr.0*, i64)*, { i8*, i8* } (i8*, %IPAddr.0*, i8*, i64)* } { %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @net.IPAddr..p, i32 0, i32 0), { i8*, i64 } (i8*, %IPAddr.0*)* @net.IPAddr.Network, { i8*, i64 } (i8*, %IPAddr.0*)* @net.IPAddr.String, i64 (i8*, %IPAddr.0*)* @net.IPAddr.family, i8 (i8*, %IPAddr.0*)* @net.IPAddr.isWildcard, void ({ %Sockaddr.0, %error.0 }*, i8*, %IPAddr.0*, i64)* @net.IPAddr.sockaddr, { i8*, i8* } (i8*, %IPAddr.0*, i8*, i64)* @net.IPAddr.toLocal }
@command_x2dline_x2darguments.MarblesPrivateChaincode..d = constant %StructType.0 { %_type.0 { i64 0, i64 0, i32 1745805173, i8 8, i8 1, i8 1, i8 -103, %__go_descriptor.275* bitcast (%functionDescriptor.0* @runtime.memequal0..f to %__go_descriptor.275*), i8* null, { i8*, i64 }* @go..C1, %uncommonType.0* @go..C5, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @command_x2dline_x2darguments.MarblesPrivateChaincode..p, i32 0, i32 0) }, %IPST.69 { %structField.0* getelementptr inbounds ([1 x %structField.0], [1 x %structField.0]* @go..C48, i32 0, i32 0), i64 0, i64 0 } }
@runtime.memequal0..f = external constant %functionDescriptor.0
@const.0 = private constant [70 x i8] c"\09command_x2dline_x2darguments\09marbles_private.MarblesPrivateChaincode\00", align 1
@go..C1 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @const.0, i32 0, i32 0), i64 69 }
@const.1 = private constant [24 x i8] c"MarblesPrivateChaincode\00", align 1
@go..C2 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @const.1, i32 0, i32 0), i64 23 }
@const.2 = private constant [23 x i8] c"command-line-arguments\00", align 1
@go..C3 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.2, i32 0, i32 0), i64 22 }
@go..C4 = internal constant [1 x %method.0] zeroinitializer
@go..C5 = internal constant %uncommonType.0 { { i8*, i64 }* @go..C2, { i8*, i64 }* @go..C3, %IPST.67 { %method.0* getelementptr inbounds ([1 x %method.0], [1 x %method.0]* @go..C4, i32 0, i32 0), i64 0, i64 0 } }
@command_x2dline_x2darguments.MarblesPrivateChaincode..p = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 -2131888295, i8 8, i8 8, i8 8, i8 54, %__go_descriptor.275* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.275*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C6, %uncommonType.0* @go..C46, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @type.._2_2command_x2dline_x2darguments_0MarblesPrivateChaincode, i32 0, i32 0) }, %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @command_x2dline_x2darguments.MarblesPrivateChaincode..d, i32 0, i32 0) }, comdat
@runtime.memequal64..f = external constant %functionDescriptor.0
@gcbits..ba = weak constant [1 x i8] c"\01", comdat
@const.3 = private constant [71 x i8] c"*\09command_x2dline_x2darguments\09marbles_private.MarblesPrivateChaincode\00", align 1
@go..C6 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([71 x i8], [71 x i8]* @const.3, i32 0, i32 0), i64 70 }
@const.4 = private constant [5 x i8] c"Init\00", align 1
@go..C7 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @const.4, i32 0, i32 0), i64 4 }
@type..func_8github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9 = weak constant %FuncType.0 { %_type.0 { i64 8, i64 8, i32 -1765740280, i8 0, i8 8, i8 8, i8 51, %__go_descriptor.275* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C8, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.68 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C9, i32 0, i32 0), i64 1, i64 1 }, %IPST.68 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C10, i32 0, i32 0), i64 1, i64 1 } }, comdat
@const.5 = private constant [163 x i8] c"func(\09github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim\09shim.ChaincodeStubInterface) \09github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer\09peer.Response\00", align 1
@go..C8 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([163 x i8], [163 x i8]* @const.5, i32 0, i32 0), i64 162 }
@github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.ChaincodeStubInterface..d = external constant %InterfaceType.0
@go..C9 = internal constant [1 x %_type.0*] [%_type.0* getelementptr inbounds (%InterfaceType.0, %InterfaceType.0* @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.ChaincodeStubInterface..d, i32 0, i32 0)]
@github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.Response..d = external constant %StructType.0
@go..C10 = internal constant [1 x %_type.0*] [%_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.Response..d, i32 0, i32 0)]
@type..func_8_2command_x2dline_x2darguments_0MarblesPrivateChaincode_3github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9 = weak constant %FuncType.0 { %_type.0 { i64 8, i64 8, i32 -255268952, i8 0, i8 8, i8 8, i8 51, %__go_descriptor.275* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C11, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.68 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C12, i32 0, i32 0), i64 2, i64 2 }, %IPST.68 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C13, i32 0, i32 0), i64 1, i64 1 } }, comdat
@const.6 = private constant [235 x i8] c"func(*\09command_x2dline_x2darguments\09marbles_private.MarblesPrivateChaincode, \09github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim\09shim.ChaincodeStubInterface) \09github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer\09peer.Response\00", align 1
@go..C11 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([235 x i8], [235 x i8]* @const.6, i32 0, i32 0), i64 234 }
@go..C12 = internal constant [2 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @command_x2dline_x2darguments.MarblesPrivateChaincode..p, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.0, %InterfaceType.0* @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.ChaincodeStubInterface..d, i32 0, i32 0)]
@go..C13 = internal constant [1 x %_type.0*] [%_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.Response..d, i32 0, i32 0)]
@const.7 = private constant [7 x i8] c"Invoke\00", align 1
@go..C14 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @const.7, i32 0, i32 0), i64 6 }
@const.8 = private constant [18 x i8] c"checkEndorsingOrg\00", align 1
@go..C15 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @const.8, i32 0, i32 0), i64 17 }
@go..C16 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.2, i32 0, i32 0), i64 22 }
@const.9 = private constant [7 x i8] c"delete\00", align 1
@go..C17 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @const.9, i32 0, i32 0), i64 6 }
@go..C18 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.2, i32 0, i32 0), i64 22 }
@type..func_8github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_3_6_7string_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9 = weak constant %FuncType.0 { %_type.0 { i64 8, i64 8, i32 -849700088, i8 0, i8 8, i8 8, i8 51, %__go_descriptor.275* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C19, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.68 { %_type.0** getelementptr inbounds ([2 x %_type.0*], [2 x %_type.0*]* @go..C26, i32 0, i32 0), i64 2, i64 2 }, %IPST.68 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C27, i32 0, i32 0), i64 1, i64 1 } }, comdat
@const.10 = private constant [173 x i8] c"func(\09github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim\09shim.ChaincodeStubInterface, []string) \09github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer\09peer.Response\00", align 1
@go..C19 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([173 x i8], [173 x i8]* @const.10, i32 0, i32 0), i64 172 }
@type.._6_7string = weak constant %SliceType.0 { %_type.0 { i64 24, i64 8, i32 -1998952792, i8 0, i8 8, i8 8, i8 23, %__go_descriptor.275* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C20, %uncommonType.0* null, %_type.0* null }, %_type.0* @string..d }, comdat
@const.11 = private constant [9 x i8] c"[]string\00", align 1
@go..C20 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @const.11, i32 0, i32 0), i64 8 }
@string..d = weak constant %_type.0 { i64 16, i64 8, i32 -1998952806, i8 0, i8 8, i8 8, i8 24, %__go_descriptor.275* bitcast (%functionDescriptor.0* @runtime.strequal..f to %__go_descriptor.275*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C21, %uncommonType.0* @go..C24, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @string..p, i32 0, i32 0) }, comdat
@runtime.strequal..f = external constant %functionDescriptor.0
@const.12 = private constant [7 x i8] c"string\00", align 1
@go..C21 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @const.12, i32 0, i32 0), i64 6 }
@go..C22 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @const.12, i32 0, i32 0), i64 6 }
@go..C23 = internal constant [1 x %method.0] zeroinitializer
@go..C24 = internal constant %uncommonType.0 { { i8*, i64 }* @go..C22, { i8*, i64 }* null, %IPST.67 { %method.0* getelementptr inbounds ([1 x %method.0], [1 x %method.0]* @go..C23, i32 0, i32 0), i64 0, i64 0 } }
@string..p = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 -1918473815, i8 8, i8 8, i8 8, i8 54, %__go_descriptor.275* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.275*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C25, %uncommonType.0* null, %_type.0* null }, %_type.0* @string..d }, comdat
@const.13 = private constant [8 x i8] c"*string\00", align 1
@go..C25 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @const.13, i32 0, i32 0), i64 7 }
@go..C26 = internal constant [2 x %_type.0*] [%_type.0* getelementptr inbounds (%InterfaceType.0, %InterfaceType.0* @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.ChaincodeStubInterface..d, i32 0, i32 0), %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type.._6_7string, i32 0, i32 0)]
@go..C27 = internal constant [1 x %_type.0*] [%_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.Response..d, i32 0, i32 0)]
@type..func_8_2command_x2dline_x2darguments_0MarblesPrivateChaincode_3github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_3_6_7string_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9 = weak constant %FuncType.0 { %_type.0 { i64 8, i64 8, i32 1576811432, i8 0, i8 8, i8 8, i8 51, %__go_descriptor.275* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C28, %uncommonType.0* null, %_type.0* null }, i8 0, %IPST.68 { %_type.0** getelementptr inbounds ([3 x %_type.0*], [3 x %_type.0*]* @go..C29, i32 0, i32 0), i64 3, i64 3 }, %IPST.68 { %_type.0** getelementptr inbounds ([1 x %_type.0*], [1 x %_type.0*]* @go..C30, i32 0, i32 0), i64 1, i64 1 } }, comdat
@const.14 = private constant [245 x i8] c"func(*\09command_x2dline_x2darguments\09marbles_private.MarblesPrivateChaincode, \09github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim\09shim.ChaincodeStubInterface, []string) \09github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer\09peer.Response\00", align 1
@go..C28 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([245 x i8], [245 x i8]* @const.14, i32 0, i32 0), i64 244 }
@go..C29 = internal constant [3 x %_type.0*] [%_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @command_x2dline_x2darguments.MarblesPrivateChaincode..p, i32 0, i32 0), %_type.0* getelementptr inbounds (%InterfaceType.0, %InterfaceType.0* @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.ChaincodeStubInterface..d, i32 0, i32 0), %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type.._6_7string, i32 0, i32 0)]
@go..C30 = internal constant [1 x %_type.0*] [%_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer.Response..d, i32 0, i32 0)]
@const.15 = private constant [14 x i8] c"getMarbleHash\00", align 1
@go..C31 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @const.15, i32 0, i32 0), i64 13 }
@go..C32 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.2, i32 0, i32 0), i64 22 }
@const.16 = private constant [28 x i8] c"getMarblePrivateDetailsHash\00", align 1
@go..C33 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([28 x i8], [28 x i8]* @const.16, i32 0, i32 0), i64 27 }
@go..C34 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.2, i32 0, i32 0), i64 22 }
@const.17 = private constant [18 x i8] c"getMarblesByRange\00", align 1
@go..C35 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @const.17, i32 0, i32 0), i64 17 }
@go..C36 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.2, i32 0, i32 0), i64 22 }
@const.18 = private constant [11 x i8] c"initMarble\00", align 1
@go..C37 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @const.18, i32 0, i32 0), i64 10 }
@go..C38 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.2, i32 0, i32 0), i64 22 }
@const.19 = private constant [11 x i8] c"readMarble\00", align 1
@go..C39 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @const.19, i32 0, i32 0), i64 10 }
@go..C40 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.2, i32 0, i32 0), i64 22 }
@const.20 = private constant [25 x i8] c"readMarblePrivateDetails\00", align 1
@go..C41 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @const.20, i32 0, i32 0), i64 24 }
@go..C42 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.2, i32 0, i32 0), i64 22 }
@const.21 = private constant [15 x i8] c"transferMarble\00", align 1
@go..C43 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @const.21, i32 0, i32 0), i64 14 }
@go..C44 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.2, i32 0, i32 0), i64 22 }
@go..C45 = internal constant [11 x %method.0] [%method.0 { { i8*, i64 }* @go..C7, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%FuncType.0, %FuncType.0* @type..func_8github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.0, %FuncType.0* @type..func_8_2command_x2dline_x2darguments_0MarblesPrivateChaincode_3github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9, i32 0, i32 0), i8* bitcast (void (%Response.0*, i8*, %MarblesPrivateChaincode.0*, i8*, i8*)* @command_x2dline_x2darguments.MarblesPrivateChaincode.Init to i8*) }, %method.0 { { i8*, i64 }* @go..C14, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%FuncType.0, %FuncType.0* @type..func_8github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.0, %FuncType.0* @type..func_8_2command_x2dline_x2darguments_0MarblesPrivateChaincode_3github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9, i32 0, i32 0), i8* bitcast (void (%Response.0*, i8*, %MarblesPrivateChaincode.0*, i8*, i8*)* @command_x2dline_x2darguments.MarblesPrivateChaincode.Invoke to i8*) }, %method.0 { { i8*, i64 }* @go..C15, { i8*, i64 }* @go..C16, %_type.0* getelementptr inbounds (%FuncType.0, %FuncType.0* @type..func_8github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.0, %FuncType.0* @type..func_8_2command_x2dline_x2darguments_0MarblesPrivateChaincode_3github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9, i32 0, i32 0), i8* bitcast (void (%Response.0*, i8*, %MarblesPrivateChaincode.0*, i8*, i8*)* @command_x2dline_x2darguments.MarblesPrivateChaincode.checkEndorsingOrg to i8*) }, %method.0 { { i8*, i64 }* @go..C17, { i8*, i64 }* @go..C18, %_type.0* getelementptr inbounds (%FuncType.0, %FuncType.0* @type..func_8github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_3_6_7string_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.0, %FuncType.0* @type..func_8_2command_x2dline_x2darguments_0MarblesPrivateChaincode_3github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_3_6_7string_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9, i32 0, i32 0), i8* bitcast (void (%Response.0*, i8*, %MarblesPrivateChaincode.0*, i8*, i8*, %IPST.7*)* @command_x2dline_x2darguments.MarblesPrivateChaincode.delete to i8*) }, %method.0 { { i8*, i64 }* @go..C31, { i8*, i64 }* @go..C32, %_type.0* getelementptr inbounds (%FuncType.0, %FuncType.0* @type..func_8github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_3_6_7string_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.0, %FuncType.0* @type..func_8_2command_x2dline_x2darguments_0MarblesPrivateChaincode_3github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_3_6_7string_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9, i32 0, i32 0), i8* bitcast (void (%Response.0*, i8*, %MarblesPrivateChaincode.0*, i8*, i8*, %IPST.7*)* @command_x2dline_x2darguments.MarblesPrivateChaincode.getMarbleHash to i8*) }, %method.0 { { i8*, i64 }* @go..C33, { i8*, i64 }* @go..C34, %_type.0* getelementptr inbounds (%FuncType.0, %FuncType.0* @type..func_8github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_3_6_7string_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.0, %FuncType.0* @type..func_8_2command_x2dline_x2darguments_0MarblesPrivateChaincode_3github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_3_6_7string_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9, i32 0, i32 0), i8* bitcast (void (%Response.0*, i8*, %MarblesPrivateChaincode.0*, i8*, i8*, %IPST.7*)* @command_x2dline_x2darguments.MarblesPrivateChaincode.getMarblePrivateDetailsHash to i8*) }, %method.0 { { i8*, i64 }* @go..C35, { i8*, i64 }* @go..C36, %_type.0* getelementptr inbounds (%FuncType.0, %FuncType.0* @type..func_8github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_3_6_7string_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.0, %FuncType.0* @type..func_8_2command_x2dline_x2darguments_0MarblesPrivateChaincode_3github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_3_6_7string_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9, i32 0, i32 0), i8* bitcast (void (%Response.0*, i8*, %MarblesPrivateChaincode.0*, i8*, i8*, %IPST.7*)* @command_x2dline_x2darguments.MarblesPrivateChaincode.getMarblesByRange to i8*) }, %method.0 { { i8*, i64 }* @go..C37, { i8*, i64 }* @go..C38, %_type.0* getelementptr inbounds (%FuncType.0, %FuncType.0* @type..func_8github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_3_6_7string_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.0, %FuncType.0* @type..func_8_2command_x2dline_x2darguments_0MarblesPrivateChaincode_3github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_3_6_7string_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9, i32 0, i32 0), i8* bitcast (void (%Response.0*, i8*, %MarblesPrivateChaincode.0*, i8*, i8*, %IPST.7*)* @command_x2dline_x2darguments.MarblesPrivateChaincode.initMarble to i8*) }, %method.0 { { i8*, i64 }* @go..C39, { i8*, i64 }* @go..C40, %_type.0* getelementptr inbounds (%FuncType.0, %FuncType.0* @type..func_8github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_3_6_7string_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.0, %FuncType.0* @type..func_8_2command_x2dline_x2darguments_0MarblesPrivateChaincode_3github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_3_6_7string_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9, i32 0, i32 0), i8* bitcast (void (%Response.0*, i8*, %MarblesPrivateChaincode.0*, i8*, i8*, %IPST.7*)* @command_x2dline_x2darguments.MarblesPrivateChaincode.readMarble to i8*) }, %method.0 { { i8*, i64 }* @go..C41, { i8*, i64 }* @go..C42, %_type.0* getelementptr inbounds (%FuncType.0, %FuncType.0* @type..func_8github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_3_6_7string_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.0, %FuncType.0* @type..func_8_2command_x2dline_x2darguments_0MarblesPrivateChaincode_3github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_3_6_7string_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9, i32 0, i32 0), i8* bitcast (void (%Response.0*, i8*, %MarblesPrivateChaincode.0*, i8*, i8*, %IPST.7*)* @command_x2dline_x2darguments.MarblesPrivateChaincode.readMarblePrivateDetails to i8*) }, %method.0 { { i8*, i64 }* @go..C43, { i8*, i64 }* @go..C44, %_type.0* getelementptr inbounds (%FuncType.0, %FuncType.0* @type..func_8github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_3_6_7string_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9, i32 0, i32 0), %_type.0* getelementptr inbounds (%FuncType.0, %FuncType.0* @type..func_8_2command_x2dline_x2darguments_0MarblesPrivateChaincode_3github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_3_6_7string_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9, i32 0, i32 0), i8* bitcast (void (%Response.0*, i8*, %MarblesPrivateChaincode.0*, i8*, i8*, %IPST.7*)* @command_x2dline_x2darguments.MarblesPrivateChaincode.transferMarble to i8*) }]
@go..C46 = internal constant %uncommonType.0 { { i8*, i64 }* null, { i8*, i64 }* null, %IPST.67 { %method.0* getelementptr inbounds ([11 x %method.0], [11 x %method.0]* @go..C45, i32 0, i32 0), i64 11, i64 11 } }
@type.._2_2command_x2dline_x2darguments_0MarblesPrivateChaincode = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 249525657, i8 8, i8 8, i8 8, i8 54, %__go_descriptor.275* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.275*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C47, %uncommonType.0* null, %_type.0* null }, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @command_x2dline_x2darguments.MarblesPrivateChaincode..p, i32 0, i32 0) }, comdat
@const.22 = private constant [72 x i8] c"**\09command_x2dline_x2darguments\09marbles_private.MarblesPrivateChaincode\00", align 1
@go..C47 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([72 x i8], [72 x i8]* @const.22, i32 0, i32 0), i64 71 }
@go..C48 = internal constant [1 x %structField.0] zeroinitializer
@command_x2dline_x2darguments.marble..d = constant %StructType.0 { %_type.0 { i64 72, i64 64, i32 37389989, i8 0, i8 8, i8 8, i8 25, %__go_descriptor.275* bitcast (%functionDescriptor.0* @command_x2dline_x2darguments.marble..eq..f to %__go_descriptor.275*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ve, i32 0, i32 0), { i8*, i64 }* @go..C49, %uncommonType.0* @go..C53, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @command_x2dline_x2darguments.marble..p, i32 0, i32 0) }, %IPST.69 { %structField.0* getelementptr inbounds ([5 x %structField.0], [5 x %structField.0]* @go..C70, i32 0, i32 0), i64 5, i64 5 } }
@command_x2dline_x2darguments.marble..eq..f = constant %functionDescriptor.0 { i64 ptrtoint (i8 (i8*, i8*, i8*)* @command_x2dline_x2darguments.marble..eq to i64) }
@gcbits..ve = weak constant [1 x i8] c"\95", comdat
@const.23 = private constant [53 x i8] c"\09command_x2dline_x2darguments\09marbles_private.marble\00", align 1
@go..C49 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([53 x i8], [53 x i8]* @const.23, i32 0, i32 0), i64 52 }
@const.24 = private constant [7 x i8] c"marble\00", align 1
@go..C50 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @const.24, i32 0, i32 0), i64 6 }
@go..C51 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.2, i32 0, i32 0), i64 22 }
@go..C52 = internal constant [1 x %method.0] zeroinitializer
@go..C53 = internal constant %uncommonType.0 { { i8*, i64 }* @go..C50, { i8*, i64 }* @go..C51, %IPST.67 { %method.0* getelementptr inbounds ([1 x %method.0], [1 x %method.0]* @go..C52, i32 0, i32 0), i64 0, i64 0 } }
@command_x2dline_x2darguments.marble..p = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 598239833, i8 8, i8 8, i8 8, i8 54, %__go_descriptor.275* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.275*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C54, %uncommonType.0* null, %_type.0* null }, %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @command_x2dline_x2darguments.marble..d, i32 0, i32 0) }, comdat
@const.25 = private constant [54 x i8] c"*\09command_x2dline_x2darguments\09marbles_private.marble\00", align 1
@go..C54 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @const.25, i32 0, i32 0), i64 53 }
@const.26 = private constant [11 x i8] c"ObjectType\00", align 1
@go..C55 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @const.26, i32 0, i32 0), i64 10 }
@const.27 = private constant [15 x i8] c"json:\22docType\22\00", align 1
@go..C56 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @const.27, i32 0, i32 0), i64 14 }
@const.28 = private constant [5 x i8] c"Name\00", align 1
@go..C57 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @const.28, i32 0, i32 0), i64 4 }
@const.29 = private constant [12 x i8] c"json:\22name\22\00", align 1
@go..C58 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @const.29, i32 0, i32 0), i64 11 }
@const.30 = private constant [6 x i8] c"Color\00", align 1
@go..C59 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.30, i32 0, i32 0), i64 5 }
@const.31 = private constant [13 x i8] c"json:\22color\22\00", align 1
@go..C60 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @const.31, i32 0, i32 0), i64 12 }
@const.32 = private constant [5 x i8] c"Size\00", align 1
@go..C61 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @const.32, i32 0, i32 0), i64 4 }
@int..d = weak constant %_type.0 { i64 8, i64 0, i32 876704034, i8 8, i8 8, i8 8, i8 -126, %__go_descriptor.275* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.275*), i8* null, { i8*, i64 }* @go..C62, %uncommonType.0* @go..C65, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @int..p, i32 0, i32 0) }, comdat
@const.33 = private constant [4 x i8] c"int\00", align 1
@go..C62 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @const.33, i32 0, i32 0), i64 3 }
@go..C63 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @const.33, i32 0, i32 0), i64 3 }
@go..C64 = internal constant [1 x %method.0] zeroinitializer
@go..C65 = internal constant %uncommonType.0 { { i8*, i64 }* @go..C63, { i8*, i64 }* null, %IPST.67 { %method.0* getelementptr inbounds ([1 x %method.0], [1 x %method.0]* @go..C64, i32 0, i32 0), i64 0, i64 0 } }
@int..p = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 1142362665, i8 8, i8 8, i8 8, i8 54, %__go_descriptor.275* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.275*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C66, %uncommonType.0* null, %_type.0* null }, %_type.0* @int..d }, comdat
@const.34 = private constant [5 x i8] c"*int\00", align 1
@go..C66 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @const.34, i32 0, i32 0), i64 4 }
@const.35 = private constant [12 x i8] c"json:\22size\22\00", align 1
@go..C67 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @const.35, i32 0, i32 0), i64 11 }
@const.36 = private constant [6 x i8] c"Owner\00", align 1
@go..C68 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.36, i32 0, i32 0), i64 5 }
@const.37 = private constant [13 x i8] c"json:\22owner\22\00", align 1
@go..C69 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @const.37, i32 0, i32 0), i64 12 }
@go..C70 = internal constant [5 x %structField.0] [%structField.0 { { i8*, i64 }* @go..C55, { i8*, i64 }* null, %_type.0* @string..d, { i8*, i64 }* @go..C56, i64 0 }, %structField.0 { { i8*, i64 }* @go..C57, { i8*, i64 }* null, %_type.0* @string..d, { i8*, i64 }* @go..C58, i64 32 }, %structField.0 { { i8*, i64 }* @go..C59, { i8*, i64 }* null, %_type.0* @string..d, { i8*, i64 }* @go..C60, i64 64 }, %structField.0 { { i8*, i64 }* @go..C61, { i8*, i64 }* null, %_type.0* @int..d, { i8*, i64 }* @go..C67, i64 96 }, %structField.0 { { i8*, i64 }* @go..C68, { i8*, i64 }* null, %_type.0* @string..d, { i8*, i64 }* @go..C69, i64 112 }]
@command_x2dline_x2darguments.marblePrivateDetails..d = constant %StructType.0 { %_type.0 { i64 40, i64 24, i32 -1215066440, i8 0, i8 8, i8 8, i8 25, %__go_descriptor.275* bitcast (%functionDescriptor.0* @command_x2dline_x2darguments.marblePrivateDetails..eq..f to %__go_descriptor.275*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..fa, i32 0, i32 0), { i8*, i64 }* @go..C71, %uncommonType.0* @go..C75, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @command_x2dline_x2darguments.marblePrivateDetails..p, i32 0, i32 0) }, %IPST.69 { %structField.0* getelementptr inbounds ([3 x %structField.0], [3 x %structField.0]* @go..C83, i32 0, i32 0), i64 3, i64 3 } }
@command_x2dline_x2darguments.marblePrivateDetails..eq..f = constant %functionDescriptor.0 { i64 ptrtoint (i8 (i8*, i8*, i8*)* @command_x2dline_x2darguments.marblePrivateDetails..eq to i64) }
@gcbits..fa = weak constant [1 x i8] c"\05", comdat
@const.38 = private constant [67 x i8] c"\09command_x2dline_x2darguments\09marbles_private.marblePrivateDetails\00", align 1
@go..C71 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([67 x i8], [67 x i8]* @const.38, i32 0, i32 0), i64 66 }
@const.39 = private constant [21 x i8] c"marblePrivateDetails\00", align 1
@go..C72 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @const.39, i32 0, i32 0), i64 20 }
@go..C73 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.2, i32 0, i32 0), i64 22 }
@go..C74 = internal constant [1 x %method.0] zeroinitializer
@go..C75 = internal constant %uncommonType.0 { { i8*, i64 }* @go..C72, { i8*, i64 }* @go..C73, %IPST.67 { %method.0* getelementptr inbounds ([1 x %method.0], [1 x %method.0]* @go..C74, i32 0, i32 0), i64 0, i64 0 } }
@command_x2dline_x2darguments.marblePrivateDetails..p = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 2033773449, i8 8, i8 8, i8 8, i8 54, %__go_descriptor.275* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.275*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C76, %uncommonType.0* null, %_type.0* null }, %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @command_x2dline_x2darguments.marblePrivateDetails..d, i32 0, i32 0) }, comdat
@const.40 = private constant [68 x i8] c"*\09command_x2dline_x2darguments\09marbles_private.marblePrivateDetails\00", align 1
@go..C76 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([68 x i8], [68 x i8]* @const.40, i32 0, i32 0), i64 67 }
@go..C77 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @const.26, i32 0, i32 0), i64 10 }
@go..C78 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @const.27, i32 0, i32 0), i64 14 }
@go..C79 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @const.28, i32 0, i32 0), i64 4 }
@go..C80 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @const.29, i32 0, i32 0), i64 11 }
@const.41 = private constant [6 x i8] c"Price\00", align 1
@go..C81 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.41, i32 0, i32 0), i64 5 }
@const.42 = private constant [13 x i8] c"json:\22price\22\00", align 1
@go..C82 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @const.42, i32 0, i32 0), i64 12 }
@go..C83 = internal constant [3 x %structField.0] [%structField.0 { { i8*, i64 }* @go..C77, { i8*, i64 }* null, %_type.0* @string..d, { i8*, i64 }* @go..C78, i64 0 }, %structField.0 { { i8*, i64 }* @go..C79, { i8*, i64 }* null, %_type.0* @string..d, { i8*, i64 }* @go..C80, i64 32 }, %structField.0 { { i8*, i64 }* @go..C81, { i8*, i64 }* null, %_type.0* @int..d, { i8*, i64 }* @go..C82, i64 64 }]
@const.43 = private constant %IPST.0 zeroinitializer
@const.44 = private constant %Response.0 zeroinitializer
@const.45 = private constant [19 x i8] c"invoke is running \00", align 1
@const.46 = private constant { i8*, i64 } { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @const.45, i32 0, i32 0), i64 18 }
@runtime.writeBarrier = external externally_initialized global { i8, [3 x i8], i8, i8, i64 }
@const.47 = private constant { i8*, i64 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @const.18, i32 0, i32 0), i64 10 }
@const.48 = private constant { i8*, i64 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @const.19, i32 0, i32 0), i64 10 }
@const.49 = private constant { i8*, i64 } { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @const.20, i32 0, i32 0), i64 24 }
@const.50 = private constant { i8*, i64 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @const.21, i32 0, i32 0), i64 14 }
@const.51 = private constant { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @const.9, i32 0, i32 0), i64 6 }
@const.52 = private constant { i8*, i64 } { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @const.17, i32 0, i32 0), i64 17 }
@const.53 = private constant { i8*, i64 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @const.15, i32 0, i32 0), i64 13 }
@const.54 = private constant { i8*, i64 } { i8* getelementptr inbounds ([28 x i8], [28 x i8]* @const.16, i32 0, i32 0), i64 27 }
@const.55 = private constant { i8*, i64 } { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @const.8, i32 0, i32 0), i64 17 }
@const.56 = private constant [27 x i8] c"invoke did not find func: \00", align 1
@const.57 = private constant { i8*, i64 } { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @const.56, i32 0, i32 0), i64 26 }
@const.58 = private constant [37 x i8] c"Received unknown function invocation\00", align 1
@const.59 = private constant { i8*, i64 } { i8* getelementptr inbounds ([37 x i8], [37 x i8]* @const.58, i32 0, i32 0), i64 36 }
@const.60 = private constant %error.0 zeroinitializer
@const.61 = private constant [20 x i8] c"- start init marble\00", align 1
@go..C84 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @const.61, i32 0, i32 0), i64 19 }
@const.62 = private constant [1 x %IPST.3] [%IPST.3 { %_type.0* @string..d, i8* bitcast ({ i8*, i64 }* @go..C84 to i8*) }]
@const.63 = private constant [84 x i8] c"Incorrect number of arguments. Private marble data must be passed in transient map.\00", align 1
@const.64 = private constant { i8*, i64 } { i8* getelementptr inbounds ([84 x i8], [84 x i8]* @const.63, i32 0, i32 0), i64 83 }
@const.65 = private constant [26 x i8] c"Error getting transient: \00", align 1
@const.66 = private constant { i8*, i64 } { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @const.65, i32 0, i32 0), i64 25 }
@const.67 = private constant { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @const.24, i32 0, i32 0), i64 6 }
@type..map_6string_7_6_7uint8 = weak constant %MapType.0 { %_type.0 { i64 8, i64 8, i32 -1734320687, i8 0, i8 8, i8 8, i8 53, %__go_descriptor.275* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C85, %uncommonType.0* null, %_type.0* null }, %_type.0* @string..d, %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type.._6_7uint8, i32 0, i32 0), %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @type..struct_4_4x_5topbits_b_68x_7uint8_ckeys_b_68x_7string_cvalues_b_68x_7_6_7uint8_coverflow_b_2_4void_5_5, i32 0, i32 0), %__go_descriptor.276* bitcast (%functionDescriptor.0* @runtime.strhash..f to %__go_descriptor.276*), i8 16, i8 24, i16 336, i32 12 }, comdat
@const.68 = private constant [19 x i8] c"map[string][]uint8\00", align 1
@go..C85 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @const.68, i32 0, i32 0), i64 18 }
@type.._6_7uint8 = weak constant %SliceType.0 { %_type.0 { i64 24, i64 8, i32 264632103, i8 0, i8 8, i8 8, i8 23, %__go_descriptor.275* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C86, %uncommonType.0* null, %_type.0* null }, %_type.0* @uint8..d }, comdat
@const.69 = private constant [8 x i8] c"[]uint8\00", align 1
@go..C86 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @const.69, i32 0, i32 0), i64 7 }
@uint8..d = weak constant %_type.0 { i64 1, i64 0, i32 264632089, i8 8, i8 1, i8 1, i8 -120, %__go_descriptor.275* bitcast (%functionDescriptor.0* @runtime.memequal8..f to %__go_descriptor.275*), i8* null, { i8*, i64 }* @go..C87, %uncommonType.0* @go..C90, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @uint8..p, i32 0, i32 0) }, comdat
@runtime.memequal8..f = external constant %functionDescriptor.0
@const.70 = private constant [6 x i8] c"uint8\00", align 1
@go..C87 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.70, i32 0, i32 0), i64 5 }
@go..C88 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.70, i32 0, i32 0), i64 5 }
@go..C89 = internal constant [1 x %method.0] zeroinitializer
@go..C90 = internal constant %uncommonType.0 { { i8*, i64 }* @go..C88, { i8*, i64 }* null, %IPST.67 { %method.0* getelementptr inbounds ([1 x %method.0], [1 x %method.0]* @go..C89, i32 0, i32 0), i64 0, i64 0 } }
@uint8..p = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 -60853863, i8 8, i8 8, i8 8, i8 54, %__go_descriptor.275* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.275*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C91, %uncommonType.0* null, %_type.0* null }, %_type.0* @uint8..d }, comdat
@const.71 = private constant [7 x i8] c"*uint8\00", align 1
@go..C91 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @const.71, i32 0, i32 0), i64 6 }
@type..struct_4_4x_5topbits_b_68x_7uint8_ckeys_b_68x_7string_cvalues_b_68x_7_6_7uint8_coverflow_b_2_4void_5_5 = weak constant %StructType.0 { %_type.0 { i64 336, i64 336, i32 307502916, i8 0, i8 8, i8 8, i8 25, %__go_descriptor.275* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @gcbits..kvkfjsejca, i32 0, i32 0), { i8*, i64 }* @go..C92, %uncommonType.0* null, %_type.0* null }, %IPST.69 { %structField.0* getelementptr inbounds ([4 x %structField.0], [4 x %structField.0]* @go..C101, i32 0, i32 0), i64 4, i64 4 } }, comdat
@gcbits..kvkfjsejca = weak constant [6 x i8] c"\AA\AA\92$I\02", comdat
@const.72 = private constant [75 x i8] c"struct { topbits [8]uint8; keys [8]string; values [8][]uint8; overflow * }\00", align 1
@go..C92 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([75 x i8], [75 x i8]* @const.72, i32 0, i32 0), i64 74 }
@const.73 = private constant [8 x i8] c"topbits\00", align 1
@go..C93 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @const.73, i32 0, i32 0), i64 7 }
@type.._68x_7uint8 = weak constant %ArrayType.0 { %_type.0 { i64 8, i64 0, i32 529264193, i8 8, i8 1, i8 1, i8 -111, %__go_descriptor.275* null, i8* null, { i8*, i64 }* @go..C94, %uncommonType.0* null, %_type.0* null }, %_type.0* @uint8..d, %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type.._6_7uint8, i32 0, i32 0), i64 8 }, comdat
@const.74 = private constant [9 x i8] c"[8]uint8\00", align 1
@go..C94 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @const.74, i32 0, i32 0), i64 8 }
@const.75 = private constant [5 x i8] c"keys\00", align 1
@go..C95 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @const.75, i32 0, i32 0), i64 4 }
@type.._68x_7string = weak constant %ArrayType.0 { %_type.0 { i64 128, i64 120, i32 297061699, i8 0, i8 8, i8 8, i8 17, %__go_descriptor.275* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @gcbits..vkva, i32 0, i32 0), { i8*, i64 }* @go..C96, %uncommonType.0* null, %_type.0* null }, %_type.0* @string..d, %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type.._6_7string, i32 0, i32 0), i64 8 }, comdat
@gcbits..vkva = weak constant [2 x i8] c"UU", comdat
@const.76 = private constant [10 x i8] c"[8]string\00", align 1
@go..C96 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @const.76, i32 0, i32 0), i64 9 }
@const.77 = private constant [7 x i8] c"values\00", align 1
@go..C97 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @const.77, i32 0, i32 0), i64 6 }
@type.._68x_7_6_7uint8 = weak constant %ArrayType.0 { %_type.0 { i64 192, i64 176, i32 529264221, i8 0, i8 8, i8 8, i8 17, %__go_descriptor.275* null, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @gcbits..jsejc, i32 0, i32 0), { i8*, i64 }* @go..C98, %uncommonType.0* null, %_type.0* null }, %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type.._6_7uint8, i32 0, i32 0), %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type.._6_7_6_7uint8, i32 0, i32 0), i64 8 }, comdat
@gcbits..jsejc = weak constant [3 x i8] c"I\92$", comdat
@const.78 = private constant [11 x i8] c"[8][]uint8\00", align 1
@go..C98 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @const.78, i32 0, i32 0), i64 10 }
@type.._6_7_6_7uint8 = weak constant %SliceType.0 { %_type.0 { i64 24, i64 8, i32 264632117, i8 0, i8 8, i8 8, i8 23, %__go_descriptor.275* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C99, %uncommonType.0* null, %_type.0* null }, %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type.._6_7uint8, i32 0, i32 0) }, comdat
@const.79 = private constant [10 x i8] c"[][]uint8\00", align 1
@go..C99 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @const.79, i32 0, i32 0), i64 9 }
@const.80 = private constant [9 x i8] c"overflow\00", align 1
@go..C100 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @const.80, i32 0, i32 0), i64 8 }
@unsafe.Pointer..d = external constant %_type.0
@go..C101 = internal constant [4 x %structField.0] [%structField.0 { { i8*, i64 }* @go..C93, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%ArrayType.0, %ArrayType.0* @type.._68x_7uint8, i32 0, i32 0), { i8*, i64 }* null, i64 0 }, %structField.0 { { i8*, i64 }* @go..C95, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%ArrayType.0, %ArrayType.0* @type.._68x_7string, i32 0, i32 0), { i8*, i64 }* null, i64 16 }, %structField.0 { { i8*, i64 }* @go..C97, { i8*, i64 }* null, %_type.0* getelementptr inbounds (%ArrayType.0, %ArrayType.0* @type.._68x_7_6_7uint8, i32 0, i32 0), { i8*, i64 }* null, i64 272 }, %structField.0 { { i8*, i64 }* @go..C100, { i8*, i64 }* null, %_type.0* @unsafe.Pointer..d, { i8*, i64 }* null, i64 656 }]
@runtime.strhash..f = external constant %functionDescriptor.0
@const.81 = private constant [42 x i8] c"marble must be a key in the transient map\00", align 1
@const.82 = private constant { i8*, i64 } { i8* getelementptr inbounds ([42 x i8], [42 x i8]* @const.81, i32 0, i32 0), i64 41 }
@const.83 = private constant [66 x i8] c"marble value in the transient map must be a non-empty JSON string\00", align 1
@const.84 = private constant { i8*, i64 } { i8* getelementptr inbounds ([66 x i8], [66 x i8]* @const.83, i32 0, i32 0), i64 65 }
@command_x2dline_x2darguments_0MarblesPrivateChaincode_0initMarble_0marbleTransientInput..d = constant %StructType.0 { %_type.0 { i64 64, i64 48, i32 -1881439497, i8 0, i8 8, i8 8, i8 25, %__go_descriptor.275* bitcast (%functionDescriptor.0* @command_x2dline_x2darguments_0MarblesPrivateChaincode_0initMarble_0marbleTransientInput..eq..f to %__go_descriptor.275*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..fb, i32 0, i32 0), { i8*, i64 }* @go..C102, %uncommonType.0* @go..C106, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @command_x2dline_x2darguments_0MarblesPrivateChaincode_0initMarble_0marbleTransientInput..p, i32 0, i32 0) }, %IPST.69 { %structField.0* getelementptr inbounds ([5 x %structField.0], [5 x %structField.0]* @go..C118, i32 0, i32 0), i64 5, i64 5 } }
@command_x2dline_x2darguments_0MarblesPrivateChaincode_0initMarble_0marbleTransientInput..eq..f = constant %functionDescriptor.0 { i64 ptrtoint (i8 (i8*, i8*, i8*)* @command_x2dline_x2darguments_0MarblesPrivateChaincode_0initMarble_0marbleTransientInput..eq to i64) }
@gcbits..fb = weak constant [1 x i8] c"%", comdat
@const.85 = private constant [104 x i8] c"\09command_x2dline_x2darguments\09marbles_private.\09MarblesPrivateChaincode.initMarble$\09marbleTransientInput\00", align 1
@go..C102 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([104 x i8], [104 x i8]* @const.85, i32 0, i32 0), i64 103 }
@const.86 = private constant [21 x i8] c"marbleTransientInput\00", align 1
@go..C103 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @const.86, i32 0, i32 0), i64 20 }
@go..C104 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.2, i32 0, i32 0), i64 22 }
@go..C105 = internal constant [1 x %method.0] zeroinitializer
@go..C106 = internal constant %uncommonType.0 { { i8*, i64 }* @go..C103, { i8*, i64 }* @go..C104, %IPST.67 { %method.0* getelementptr inbounds ([1 x %method.0], [1 x %method.0]* @go..C105, i32 0, i32 0), i64 0, i64 0 } }
@command_x2dline_x2darguments_0MarblesPrivateChaincode_0initMarble_0marbleTransientInput..p = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 -38260871, i8 8, i8 8, i8 8, i8 54, %__go_descriptor.275* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.275*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C107, %uncommonType.0* null, %_type.0* null }, %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @command_x2dline_x2darguments_0MarblesPrivateChaincode_0initMarble_0marbleTransientInput..d, i32 0, i32 0) }, comdat
@const.87 = private constant [105 x i8] c"*\09command_x2dline_x2darguments\09marbles_private.\09MarblesPrivateChaincode.initMarble$\09marbleTransientInput\00", align 1
@go..C107 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([105 x i8], [105 x i8]* @const.87, i32 0, i32 0), i64 104 }
@go..C108 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @const.28, i32 0, i32 0), i64 4 }
@go..C109 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @const.29, i32 0, i32 0), i64 11 }
@go..C110 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.30, i32 0, i32 0), i64 5 }
@go..C111 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @const.31, i32 0, i32 0), i64 12 }
@go..C112 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @const.32, i32 0, i32 0), i64 4 }
@go..C113 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @const.35, i32 0, i32 0), i64 11 }
@go..C114 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.36, i32 0, i32 0), i64 5 }
@go..C115 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @const.37, i32 0, i32 0), i64 12 }
@go..C116 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.41, i32 0, i32 0), i64 5 }
@go..C117 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @const.42, i32 0, i32 0), i64 12 }
@go..C118 = internal constant [5 x %structField.0] [%structField.0 { { i8*, i64 }* @go..C108, { i8*, i64 }* null, %_type.0* @string..d, { i8*, i64 }* @go..C109, i64 0 }, %structField.0 { { i8*, i64 }* @go..C110, { i8*, i64 }* null, %_type.0* @string..d, { i8*, i64 }* @go..C111, i64 32 }, %structField.0 { { i8*, i64 }* @go..C112, { i8*, i64 }* null, %_type.0* @int..d, { i8*, i64 }* @go..C113, i64 64 }, %structField.0 { { i8*, i64 }* @go..C114, { i8*, i64 }* null, %_type.0* @string..d, { i8*, i64 }* @go..C115, i64 80 }, %structField.0 { { i8*, i64 }* @go..C116, { i8*, i64 }* null, %_type.0* @int..d, { i8*, i64 }* @go..C117, i64 112 }]
@const.88 = private constant [27 x i8] c"Failed to decode JSON of: \00", align 1
@const.89 = private constant { i8*, i64 } { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @const.88, i32 0, i32 0), i64 26 }
@const.90 = private constant [38 x i8] c"name field must be a non-empty string\00", align 1
@const.91 = private constant { i8*, i64 } { i8* getelementptr inbounds ([38 x i8], [38 x i8]* @const.90, i32 0, i32 0), i64 37 }
@const.92 = private constant [39 x i8] c"color field must be a non-empty string\00", align 1
@const.93 = private constant { i8*, i64 } { i8* getelementptr inbounds ([39 x i8], [39 x i8]* @const.92, i32 0, i32 0), i64 38 }
@const.94 = private constant [38 x i8] c"size field must be a positive integer\00", align 1
@const.95 = private constant { i8*, i64 } { i8* getelementptr inbounds ([38 x i8], [38 x i8]* @const.94, i32 0, i32 0), i64 37 }
@const.96 = private constant [39 x i8] c"owner field must be a non-empty string\00", align 1
@const.97 = private constant { i8*, i64 } { i8* getelementptr inbounds ([39 x i8], [39 x i8]* @const.96, i32 0, i32 0), i64 38 }
@const.98 = private constant [39 x i8] c"price field must be a positive integer\00", align 1
@const.99 = private constant { i8*, i64 } { i8* getelementptr inbounds ([39 x i8], [39 x i8]* @const.98, i32 0, i32 0), i64 38 }
@const.100 = private constant [18 x i8] c"collectionMarbles\00", align 1
@const.101 = private constant { i8*, i64 } { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @const.100, i32 0, i32 0), i64 17 }
@const.102 = private constant [23 x i8] c"Failed to get marble: \00", align 1
@const.103 = private constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.102, i32 0, i32 0), i64 22 }
@const.104 = private constant [29 x i8] c"This marble already exists: \00", align 1
@const.105 = private constant { i8*, i64 } { i8* getelementptr inbounds ([29 x i8], [29 x i8]* @const.104, i32 0, i32 0), i64 28 }
@const.106 = private constant { i8*, i64 } { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @const.39, i32 0, i32 0), i64 20 }
@const.107 = private constant [31 x i8] c"collectionMarblePrivateDetails\00", align 1
@const.108 = private constant { i8*, i64 } { i8* getelementptr inbounds ([31 x i8], [31 x i8]* @const.107, i32 0, i32 0), i64 30 }
@const.109 = private constant [11 x i8] c"color~name\00", align 1
@const.110 = private constant { i8*, i64 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @const.109, i32 0, i32 0), i64 10 }
@type.._62x_7string = weak constant %ArrayType.0 { %_type.0 { i64 32, i64 24, i32 297061699, i8 0, i8 8, i8 8, i8 17, %__go_descriptor.275* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..fa, i32 0, i32 0), { i8*, i64 }* @go..C119, %uncommonType.0* null, %_type.0* null }, %_type.0* @string..d, %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type.._6_7string, i32 0, i32 0), i64 2 }, comdat
@const.111 = private constant [10 x i8] c"[2]string\00", align 1
@go..C119 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @const.111, i32 0, i32 0), i64 9 }
@type.._61x_7uint8 = weak constant %ArrayType.0 { %_type.0 { i64 1, i64 0, i32 529264193, i8 8, i8 1, i8 1, i8 -111, %__go_descriptor.275* null, i8* null, { i8*, i64 }* @go..C120, %uncommonType.0* null, %_type.0* null }, %_type.0* @uint8..d, %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type.._6_7uint8, i32 0, i32 0), i64 1 }, comdat
@const.112 = private constant [9 x i8] c"[1]uint8\00", align 1
@go..C120 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @const.112, i32 0, i32 0), i64 8 }
@const.113 = private constant [1 x i8] zeroinitializer
@const.114 = private constant [18 x i8] c"- end init marble\00", align 1
@go..C121 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @const.114, i32 0, i32 0), i64 17 }
@const.115 = private constant [1 x %IPST.3] [%IPST.3 { %_type.0* @string..d, i8* bitcast ({ i8*, i64 }* @go..C121 to i8*) }]
@const.116 = private constant { i8*, i64 } zeroinitializer
@const.117 = private constant [69 x i8] c"Incorrect number of arguments. Expecting name of the marble to query\00", align 1
@const.118 = private constant { i8*, i64 } { i8* getelementptr inbounds ([69 x i8], [69 x i8]* @const.117, i32 0, i32 0), i64 68 }
@const.119 = private constant [35 x i8] c"{\22Error\22:\22Failed to get state for \00", align 1
@const.120 = private constant [3 x i8] c": \00", align 1
@const.121 = private constant [3 x i8] c"\22}\00", align 1
@const.122 = private constant { i8*, i64 } { i8* getelementptr inbounds ([35 x i8], [35 x i8]* @const.119, i32 0, i32 0), i64 34 }
@const.123 = private constant { i8*, i64 } { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @const.120, i32 0, i32 0), i64 2 }
@const.124 = private constant { i8*, i64 } { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @const.121, i32 0, i32 0), i64 2 }
@const.125 = private constant [34 x i8] c"{\22Error\22:\22Marble does not exist: \00", align 1
@const.126 = private constant { i8*, i64 } { i8* getelementptr inbounds ([34 x i8], [34 x i8]* @const.125, i32 0, i32 0), i64 33 }
@const.127 = private constant [45 x i8] c"{\22Error\22:\22Failed to get private details for \00", align 1
@const.128 = private constant { i8*, i64 } { i8* getelementptr inbounds ([45 x i8], [45 x i8]* @const.127, i32 0, i32 0), i64 44 }
@const.129 = private constant [50 x i8] c"{\22Error\22:\22Marble private details does not exist: \00", align 1
@const.130 = private constant { i8*, i64 } { i8* getelementptr inbounds ([50 x i8], [50 x i8]* @const.129, i32 0, i32 0), i64 49 }
@const.131 = private constant [54 x i8] c"{\22Error\22:\22Failed to get marble private data hash for \00", align 1
@const.132 = private constant { i8*, i64 } { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @const.131, i32 0, i32 0), i64 53 }
@const.133 = private constant [59 x i8] c"{\22Error\22:\22Marble private marble data hash does not exist: \00", align 1
@const.134 = private constant { i8*, i64 } { i8* getelementptr inbounds ([59 x i8], [59 x i8]* @const.133, i32 0, i32 0), i64 58 }
@const.135 = private constant [57 x i8] c"{\22Error\22:\22Failed to get marble private details hash for \00", align 1
@const.136 = private constant { i8*, i64 } { i8* getelementptr inbounds ([57 x i8], [57 x i8]* @const.135, i32 0, i32 0), i64 56 }
@const.137 = private constant [55 x i8] c"{\22Error\22:\22Marble private details hash does not exist: \00", align 1
@const.138 = private constant { i8*, i64 } { i8* getelementptr inbounds ([55 x i8], [55 x i8]* @const.137, i32 0, i32 0), i64 54 }
@const.139 = private constant [22 x i8] c"- start delete marble\00", align 1
@go..C122 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @const.139, i32 0, i32 0), i64 21 }
@const.140 = private constant [1 x %IPST.3] [%IPST.3 { %_type.0* @string..d, i8* bitcast ({ i8*, i64 }* @go..C122 to i8*) }]
@const.141 = private constant [84 x i8] c"Incorrect number of arguments. Private marble name must be passed in transient map.\00", align 1
@const.142 = private constant { i8*, i64 } { i8* getelementptr inbounds ([84 x i8], [84 x i8]* @const.141, i32 0, i32 0), i64 83 }
@const.143 = private constant [14 x i8] c"marble_delete\00", align 1
@const.144 = private constant { i8*, i64 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @const.143, i32 0, i32 0), i64 13 }
@const.145 = private constant [49 x i8] c"marble_delete must be a key in the transient map\00", align 1
@const.146 = private constant { i8*, i64 } { i8* getelementptr inbounds ([49 x i8], [49 x i8]* @const.145, i32 0, i32 0), i64 48 }
@const.147 = private constant [73 x i8] c"marble_delete value in the transient map must be a non-empty JSON string\00", align 1
@const.148 = private constant { i8*, i64 } { i8* getelementptr inbounds ([73 x i8], [73 x i8]* @const.147, i32 0, i32 0), i64 72 }
@command_x2dline_x2darguments_0MarblesPrivateChaincode_0delete_0marbleDeleteTransientInput..d = constant %StructType.0 { %_type.0 { i64 16, i64 8, i32 -752489318, i8 0, i8 8, i8 8, i8 25, %__go_descriptor.275* bitcast (%functionDescriptor.0* @command_x2dline_x2darguments_0MarblesPrivateChaincode_0delete_0marbleDeleteTransientInput..eq..f to %__go_descriptor.275*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C123, %uncommonType.0* @go..C127, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @command_x2dline_x2darguments_0MarblesPrivateChaincode_0delete_0marbleDeleteTransientInput..p, i32 0, i32 0) }, %IPST.69 { %structField.0* getelementptr inbounds ([1 x %structField.0], [1 x %structField.0]* @go..C131, i32 0, i32 0), i64 1, i64 1 } }
@command_x2dline_x2darguments_0MarblesPrivateChaincode_0delete_0marbleDeleteTransientInput..eq..f = constant %functionDescriptor.0 { i64 ptrtoint (i8 (i8*, i8*, i8*)* @command_x2dline_x2darguments_0MarblesPrivateChaincode_0delete_0marbleDeleteTransientInput..eq to i64) }
@const.149 = private constant [106 x i8] c"\09command_x2dline_x2darguments\09marbles_private.\09MarblesPrivateChaincode.delete$\09marbleDeleteTransientInput\00", align 1
@go..C123 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([106 x i8], [106 x i8]* @const.149, i32 0, i32 0), i64 105 }
@const.150 = private constant [27 x i8] c"marbleDeleteTransientInput\00", align 1
@go..C124 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @const.150, i32 0, i32 0), i64 26 }
@go..C125 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.2, i32 0, i32 0), i64 22 }
@go..C126 = internal constant [1 x %method.0] zeroinitializer
@go..C127 = internal constant %uncommonType.0 { { i8*, i64 }* @go..C124, { i8*, i64 }* @go..C125, %IPST.67 { %method.0* getelementptr inbounds ([1 x %method.0], [1 x %method.0]* @go..C126, i32 0, i32 0), i64 0, i64 0 } }
@command_x2dline_x2darguments_0MarblesPrivateChaincode_0delete_0marbleDeleteTransientInput..p = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 845072809, i8 8, i8 8, i8 8, i8 54, %__go_descriptor.275* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.275*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C128, %uncommonType.0* null, %_type.0* null }, %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @command_x2dline_x2darguments_0MarblesPrivateChaincode_0delete_0marbleDeleteTransientInput..d, i32 0, i32 0) }, comdat
@const.151 = private constant [107 x i8] c"*\09command_x2dline_x2darguments\09marbles_private.\09MarblesPrivateChaincode.delete$\09marbleDeleteTransientInput\00", align 1
@go..C128 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([107 x i8], [107 x i8]* @const.151, i32 0, i32 0), i64 106 }
@go..C129 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @const.28, i32 0, i32 0), i64 4 }
@go..C130 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @const.29, i32 0, i32 0), i64 11 }
@go..C131 = internal constant [1 x %structField.0] [%structField.0 { { i8*, i64 }* @go..C129, { i8*, i64 }* null, %_type.0* @string..d, { i8*, i64 }* @go..C130, i64 0 }]
@const.152 = private constant [25 x i8] c"Failed to get state for \00", align 1
@const.153 = private constant { i8*, i64 } { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @const.152, i32 0, i32 0), i64 24 }
@const.154 = private constant [24 x i8] c"Marble does not exist: \00", align 1
@const.155 = private constant { i8*, i64 } { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @const.154, i32 0, i32 0), i64 23 }
@const.156 = private constant [24 x i8] c"Failed to delete state:\00", align 1
@const.157 = private constant { i8*, i64 } { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @const.156, i32 0, i32 0), i64 23 }
@const.158 = private constant [24 x i8] c"- start transfer marble\00", align 1
@go..C132 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @const.158, i32 0, i32 0), i64 23 }
@const.159 = private constant [1 x %IPST.3] [%IPST.3 { %_type.0* @string..d, i8* bitcast ({ i8*, i64 }* @go..C132 to i8*) }]
@const.160 = private constant [13 x i8] c"marble_owner\00", align 1
@const.161 = private constant { i8*, i64 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @const.160, i32 0, i32 0), i64 12 }
@const.162 = private constant [48 x i8] c"marble_owner must be a key in the transient map\00", align 1
@const.163 = private constant { i8*, i64 } { i8* getelementptr inbounds ([48 x i8], [48 x i8]* @const.162, i32 0, i32 0), i64 47 }
@const.164 = private constant [72 x i8] c"marble_owner value in the transient map must be a non-empty JSON string\00", align 1
@const.165 = private constant { i8*, i64 } { i8* getelementptr inbounds ([72 x i8], [72 x i8]* @const.164, i32 0, i32 0), i64 71 }
@command_x2dline_x2darguments_0MarblesPrivateChaincode_0transferMarble_0marbleTransferTransientInput..d = constant %StructType.0 { %_type.0 { i64 32, i64 24, i32 -645158574, i8 0, i8 8, i8 8, i8 25, %__go_descriptor.275* bitcast (%functionDescriptor.0* @command_x2dline_x2darguments_0MarblesPrivateChaincode_0transferMarble_0marbleTransferTransientInput..eq..f to %__go_descriptor.275*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..fa, i32 0, i32 0), { i8*, i64 }* @go..C133, %uncommonType.0* @go..C137, %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @command_x2dline_x2darguments_0MarblesPrivateChaincode_0transferMarble_0marbleTransferTransientInput..p, i32 0, i32 0) }, %IPST.69 { %structField.0* getelementptr inbounds ([2 x %structField.0], [2 x %structField.0]* @go..C143, i32 0, i32 0), i64 2, i64 2 } }
@command_x2dline_x2darguments_0MarblesPrivateChaincode_0transferMarble_0marbleTransferTransientInput..eq..f = constant %functionDescriptor.0 { i64 ptrtoint (i8 (i8*, i8*, i8*)* @command_x2dline_x2darguments_0MarblesPrivateChaincode_0transferMarble_0marbleTransferTransientInput..eq to i64) }
@const.166 = private constant [116 x i8] c"\09command_x2dline_x2darguments\09marbles_private.\09MarblesPrivateChaincode.transferMarble$\09marbleTransferTransientInput\00", align 1
@go..C133 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([116 x i8], [116 x i8]* @const.166, i32 0, i32 0), i64 115 }
@const.167 = private constant [29 x i8] c"marbleTransferTransientInput\00", align 1
@go..C134 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([29 x i8], [29 x i8]* @const.167, i32 0, i32 0), i64 28 }
@go..C135 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @const.2, i32 0, i32 0), i64 22 }
@go..C136 = internal constant [1 x %method.0] zeroinitializer
@go..C137 = internal constant %uncommonType.0 { { i8*, i64 }* @go..C134, { i8*, i64 }* @go..C135, %IPST.67 { %method.0* getelementptr inbounds ([1 x %method.0], [1 x %method.0]* @go..C136, i32 0, i32 0), i64 0, i64 0 } }
@command_x2dline_x2darguments_0MarblesPrivateChaincode_0transferMarble_0marbleTransferTransientInput..p = weak constant %PtrType.0 { %_type.0 { i64 8, i64 8, i32 -1732602583, i8 8, i8 8, i8 8, i8 54, %__go_descriptor.275* bitcast (%functionDescriptor.0* @runtime.memequal64..f to %__go_descriptor.275*), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @gcbits..ba, i32 0, i32 0), { i8*, i64 }* @go..C138, %uncommonType.0* null, %_type.0* null }, %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @command_x2dline_x2darguments_0MarblesPrivateChaincode_0transferMarble_0marbleTransferTransientInput..d, i32 0, i32 0) }, comdat
@const.168 = private constant [117 x i8] c"*\09command_x2dline_x2darguments\09marbles_private.\09MarblesPrivateChaincode.transferMarble$\09marbleTransferTransientInput\00", align 1
@go..C138 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([117 x i8], [117 x i8]* @const.168, i32 0, i32 0), i64 116 }
@go..C139 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @const.28, i32 0, i32 0), i64 4 }
@go..C140 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @const.29, i32 0, i32 0), i64 11 }
@go..C141 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @const.36, i32 0, i32 0), i64 5 }
@go..C142 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @const.37, i32 0, i32 0), i64 12 }
@go..C143 = internal constant [2 x %structField.0] [%structField.0 { { i8*, i64 }* @go..C139, { i8*, i64 }* null, %_type.0* @string..d, { i8*, i64 }* @go..C140, i64 0 }, %structField.0 { { i8*, i64 }* @go..C141, { i8*, i64 }* null, %_type.0* @string..d, { i8*, i64 }* @go..C142, i64 32 }]
@const.169 = private constant [22 x i8] c"Failed to get marble:\00", align 1
@const.170 = private constant { i8*, i64 } { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @const.169, i32 0, i32 0), i64 21 }
@const.171 = private constant %.command-line-arguments.marble.0 zeroinitializer
@const.172 = private constant [31 x i8] c"- end transferMarble (success)\00", align 1
@go..C144 = internal constant { i8*, i64 } { i8* getelementptr inbounds ([31 x i8], [31 x i8]* @const.172, i32 0, i32 0), i64 30 }
@const.173 = private constant [1 x %IPST.3] [%IPST.3 { %_type.0* @string..d, i8* bitcast ({ i8*, i64 }* @go..C144 to i8*) }]
@const.174 = private constant [43 x i8] c"Incorrect number of arguments. Expecting 2\00", align 1
@const.175 = private constant { i8*, i64 } { i8* getelementptr inbounds ([43 x i8], [43 x i8]* @const.174, i32 0, i32 0), i64 42 }
@const.176 = private constant { %StateQueryIteratorInterface.0 } zeroinitializer
@const.177 = private constant %Buffer.0 zeroinitializer
@const.178 = private constant [2 x i8] c"[\00", align 1
@const.179 = private constant { i8*, i64 } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @const.178, i32 0, i32 0), i64 1 }
@const.180 = private constant [2 x i8] c",\00", align 1
@const.181 = private constant { i8*, i64 } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @const.180, i32 0, i32 0), i64 1 }
@const.182 = private constant [26 x i8] c"{\22Key\22:\22%s\22, \22Record\22:%s}\00", align 1
@const.183 = private constant { i8*, i64 } { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @const.182, i32 0, i32 0), i64 25 }
@const.184 = private constant [2 x i8] c"]\00", align 1
@const.185 = private constant { i8*, i64 } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @const.184, i32 0, i32 0), i64 1 }
@const.186 = private constant [37 x i8] c"- getMarblesByRange queryResult:\0A%s\0A\00", align 1
@const.187 = private constant { i8*, i64 } { i8* getelementptr inbounds ([37 x i8], [37 x i8]* @const.186, i32 0, i32 0), i64 36 }
@const.188 = private constant [33 x i8] c"failed to get transient data: %v\00", align 1
@const.189 = private constant { i8*, i64 } { i8* getelementptr inbounds ([33 x i8], [33 x i8]* @const.188, i32 0, i32 0), i64 32 }
@const.190 = private constant [34 x i8] c"failed getting client's orgID: %v\00", align 1
@const.191 = private constant { i8*, i64 } { i8* getelementptr inbounds ([34 x i8], [34 x i8]* @const.190, i32 0, i32 0), i64 33 }
@const.192 = private constant [14 x i8] c"Peer mspid OK\00", align 1
@const.193 = private constant { i8*, i64 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @const.192, i32 0, i32 0), i64 13 }
@const.194 = private constant [62 x i8] c"Unexpected peer mspid! Expected MSP IDs: %s Actual MSP ID: %s\00", align 1
@const.195 = private constant { i8*, i64 } { i8* getelementptr inbounds ([62 x i8], [62 x i8]* @const.194, i32 0, i32 0), i64 61 }
@command_x2dline_x2darguments._63_7int32..eq..f = constant %functionDescriptor.0 { i64 ptrtoint (i8 (i8*, i8*, i8*)* @command_x2dline_x2darguments._63_7int32..eq to i64) }
@command_x2dline_x2darguments._628_7uint8..eq..f = constant %functionDescriptor.0 { i64 ptrtoint (i8 (i8*, i8*, i8*)* @command_x2dline_x2darguments._628_7uint8..eq to i64) }
@command_x2dline_x2darguments._62_7google_0golang_0org_1protobuf_1reflect_1protoreflect_0EnumNumber..eq..f = constant %functionDescriptor.0 { i64 ptrtoint (i8 (i8*, i8*, i8*)* @command_x2dline_x2darguments._62_7google_0golang_0org_1protobuf_1reflect_1protoreflect_0EnumNumber..eq to i64) }
@command_x2dline_x2darguments._62_7google_0golang_0org_1protobuf_1encoding_1protowire_0Number..eq..f = constant %functionDescriptor.0 { i64 ptrtoint (i8 (i8*, i8*, i8*)* @command_x2dline_x2darguments._62_7google_0golang_0org_1protobuf_1encoding_1protowire_0Number..eq to i64) }
@command_x2dline_x2darguments.struct_4google_0golang_0org_1protobuf_1internal_1pragma_0NoUnkeyedLiterals_cMessage_bgoogle_0golang_0org_1protobuf_1reflect_1protoreflect_0Message_cFlags_buint8_5..eq..f = constant %functionDescriptor.0 { i64 ptrtoint (i8 (i8*, i8*, i8*)* @command_x2dline_x2darguments.struct_4google_0golang_0org_1protobuf_1internal_1pragma_0NoUnkeyedLiterals_cMessage_bgoogle_0golang_0org_1protobuf_1reflect_1protoreflect_0Message_cFlags_buint8_5..eq to i64) }
@command_x2dline_x2darguments.struct_4google_0golang_0org_1protobuf_1internal_1pragma_0NoUnkeyedLiterals_cSource_bgoogle_0golang_0org_1protobuf_1reflect_1protoreflect_0Message_cDestination_bgoogle_0golang_0org_1protobuf_1reflect_1protoreflect_0Message_5..eq..f = constant %functionDescriptor.0 { i64 ptrtoint (i8 (i8*, i8*, i8*)* @command_x2dline_x2darguments.struct_4google_0golang_0org_1protobuf_1internal_1pragma_0NoUnkeyedLiterals_cSource_bgoogle_0golang_0org_1protobuf_1reflect_1protoreflect_0Message_cDestination_bgoogle_0golang_0org_1protobuf_1reflect_1protoreflect_0Message_5..eq to i64) }
@command_x2dline_x2darguments.struct_4google_0golang_0org_1protobuf_1internal_1pragma_0NoUnkeyedLiterals_cMessage_bgoogle_0golang_0org_1protobuf_1reflect_1protoreflect_0Message_5..eq..f = constant %functionDescriptor.0 { i64 ptrtoint (i8 (i8*, i8*, i8*)* @command_x2dline_x2darguments.struct_4google_0golang_0org_1protobuf_1internal_1pragma_0NoUnkeyedLiterals_cMessage_bgoogle_0golang_0org_1protobuf_1reflect_1protoreflect_0Message_5..eq to i64) }
@command_x2dline_x2darguments._68_7uint8..eq..f = constant %functionDescriptor.0 { i64 ptrtoint (i8 (i8*, i8*, i8*)* @command_x2dline_x2darguments._68_7uint8..eq to i64) }
@command_x2dline_x2darguments._614_7int8..eq..f = constant %functionDescriptor.0 { i64 ptrtoint (i8 (i8*, i8*, i8*)* @command_x2dline_x2darguments._614_7int8..eq to i64) }
@command_x2dline_x2darguments._696_7int8..eq..f = constant %functionDescriptor.0 { i64 ptrtoint (i8 (i8*, i8*, i8*)* @command_x2dline_x2darguments._696_7int8..eq to i64) }
@command_x2dline_x2darguments._6256_7uint8..eq..f = constant %functionDescriptor.0 { i64 ptrtoint (i8 (i8*, i8*, i8*)* @command_x2dline_x2darguments._6256_7uint8..eq to i64) }
@const.196 = private constant [21 x i8] c"CORE_PEER_LOCALMSPID\00", align 1
@const.197 = private constant { i8*, i64 } { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @const.196, i32 0, i32 0), i64 20 }
@const.198 = private constant [34 x i8] c"'CORE_PEER_LOCALMSPID' is not set\00", align 1
@const.199 = private constant { i8*, i64 } { i8* getelementptr inbounds ([34 x i8], [34 x i8]* @const.198, i32 0, i32 0), i64 33 }
@github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.GetMSPID..f = external constant %functionDescriptor.0
@command_x2dline_x2darguments..types = constant { i64, [18 x i8*] } { i64 18, [18 x i8*] [i8* bitcast (%FuncType.0* @type..func_8github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9 to i8*), i8* bitcast (%FuncType.0* @type..func_8_2command_x2dline_x2darguments_0MarblesPrivateChaincode_3github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9 to i8*), i8* bitcast (%PtrType.0* @string..p to i8*), i8* bitcast (%SliceType.0* @type.._6_7string to i8*), i8* bitcast (%FuncType.0* @type..func_8github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_3_6_7string_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9 to i8*), i8* bitcast (%FuncType.0* @type..func_8_2command_x2dline_x2darguments_0MarblesPrivateChaincode_3github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim_0ChaincodeStubInterface_3_6_7string_9_8github_0com_1hyperledger_1fabric_x2dprotos_x2dgo_1peer_0Response_9 to i8*), i8* bitcast (%PtrType.0* @type.._2_2command_x2dline_x2darguments_0MarblesPrivateChaincode to i8*), i8* bitcast (%PtrType.0* @command_x2dline_x2darguments.MarblesPrivateChaincode..p to i8*), i8* bitcast (%PtrType.0* @command_x2dline_x2darguments.marble..p to i8*), i8* bitcast (%PtrType.0* @int..p to i8*), i8* bitcast (%PtrType.0* @command_x2dline_x2darguments.marblePrivateDetails..p to i8*), i8* bitcast (%PtrType.0* @uint8..p to i8*), i8* bitcast (%SliceType.0* @type.._6_7uint8 to i8*), i8* bitcast (%SliceType.0* @type.._6_7_6_7uint8 to i8*), i8* bitcast (%MapType.0* @type..map_6string_7_6_7uint8 to i8*), i8* bitcast (%PtrType.0* @command_x2dline_x2darguments_0MarblesPrivateChaincode_0initMarble_0marbleTransientInput..p to i8*), i8* bitcast (%PtrType.0* @command_x2dline_x2darguments_0MarblesPrivateChaincode_0delete_0marbleDeleteTransientInput..p to i8*), i8* bitcast (%PtrType.0* @command_x2dline_x2darguments_0MarblesPrivateChaincode_0transferMarble_0marbleTransferTransientInput..p to i8*)] }

declare void @0(i8*, ...)

declare i64 @reflect.rtype.Align(i8*, %.reflect.rtype.0*) #0

declare i8 @reflect.rtype.AssignableTo(i8*, %.reflect.rtype.0*, i8*, i8*) #0

declare i64 @reflect.rtype.Bits(i8*, %.reflect.rtype.0*) #0

declare i64 @reflect.rtype.ChanDir(i8*, %.reflect.rtype.0*) #0

declare i8 @reflect.rtype.Comparable(i8*, %.reflect.rtype.0*) #0

declare i8 @reflect.rtype.ConvertibleTo(i8*, %.reflect.rtype.0*, i8*, i8*) #0

declare { i8*, i8* } @reflect.rtype.Elem(i8*, %.reflect.rtype.0*) #0

declare void @reflect.rtype.Field(%StructField.0*, i8*, %.reflect.rtype.0*, i64) #0

declare i64 @reflect.rtype.FieldAlign(i8*, %.reflect.rtype.0*) #0

declare void @reflect.rtype.FieldByIndex(%StructField.0*, i8*, %.reflect.rtype.0*, %IPST.17*) #0

declare void @reflect.rtype.FieldByName({ %StructField.0, i8 }*, i8*, %.reflect.rtype.0*, i8*, i64) #0

declare void @reflect.rtype.FieldByNameFunc({ %StructField.0, i8 }*, i8*, %.reflect.rtype.0*, %__go_descriptor.14*) #0

declare i8 @reflect.rtype.Implements(i8*, %.reflect.rtype.0*, i8*, i8*) #0

declare { i8*, i8* } @reflect.rtype.In(i8*, %.reflect.rtype.0*, i64) #0

declare i8 @reflect.rtype.IsVariadic(i8*, %.reflect.rtype.0*) #0

declare { i8*, i8* } @reflect.rtype.Key(i8*, %.reflect.rtype.0*) #0

declare i64 @reflect.rtype.Kind(i8*, %.reflect.rtype.0*) #0

declare i64 @reflect.rtype.Len(i8*, %.reflect.rtype.0*) #0

declare void @reflect.rtype.Method(%Method.0*, i8*, %.reflect.rtype.0*, i64) #0

declare void @reflect.rtype.MethodByName({ %Method.0, i8 }*, i8*, %.reflect.rtype.0*, i8*, i64) #0

declare { i8*, i64 } @reflect.rtype.Name(i8*, %.reflect.rtype.0*) #0

declare i64 @reflect.rtype.NumField(i8*, %.reflect.rtype.0*) #0

declare i64 @reflect.rtype.NumIn(i8*, %.reflect.rtype.0*) #0

declare i64 @reflect.rtype.NumMethod(i8*, %.reflect.rtype.0*) #0

declare i64 @reflect.rtype.NumOut(i8*, %.reflect.rtype.0*) #0

declare { i8*, i8* } @reflect.rtype.Out(i8*, %.reflect.rtype.0*, i64) #0

declare { i8*, i64 } @reflect.rtype.PkgPath(i8*, %.reflect.rtype.0*) #0

declare i64 @reflect.rtype.Size(i8*, %.reflect.rtype.0*) #0

declare { i8*, i64 } @reflect.rtype.String(i8*, %.reflect.rtype.0*) #0

declare %.reflect.rtype.0* @reflect.rtype.common(i8*, %.reflect.rtype.0*) #0

declare { i8*, i64 } @reflect.rtype.rawString(i8*, %.reflect.rtype.0*) #0

declare %.reflect.uncommonType.0* @reflect.rtype.uncommon..stub(i8*, %.reflect.rtype.0*) #0

declare void @google_0golang_0org_1grpc.ServiceConfig.google_0golang_0org_1grpc_1serviceconfig_0isServiceConfig..stub(i8*, %ServiceConfig.0*) #0

declare { i64, i32 } @golang_0org_1x_1net_1http2.FrameHeader.Header(i8*, %FrameHeader.0*) #0

declare void @golang_0org_1x_1net_1http2.FrameHeader.invalidate(i8*, %FrameHeader.0*) #0

declare { i64, i32 } @golang_0org_1x_1net_1http2.DataFrame.Header..stub(i8*, %DataFrame.0*) #0

declare void @golang_0org_1x_1net_1http2.DataFrame.invalidate..stub(i8*, %DataFrame.0*) #0

declare i8 @google_0golang_0org_1grpc_1internal_1transport.goAway.isTransportResponseFrame(i8*, %".google.golang.org/grpc/internal/transport.goAway.0"*) #0

declare { i64, i32 } @golang_0org_1x_1net_1http2.HeadersFrame.Header..stub(i8*, %HeadersFrame.0*) #0

declare void @golang_0org_1x_1net_1http2.HeadersFrame.invalidate..stub(i8*, %HeadersFrame.0*) #0

declare { i64, i32 } @golang_0org_1x_1net_1http2.MetaHeadersFrame.Header..stub(i8*, %MetaHeadersFrame.0*) #0

declare void @golang_0org_1x_1net_1http2.MetaHeadersFrame.invalidate..stub(i8*, %MetaHeadersFrame.0*) #0

declare { i64, i32 } @golang_0org_1x_1net_1http2.SettingsFrame.Header..stub(i8*, %SettingsFrame.0*) #0

declare void @golang_0org_1x_1net_1http2.SettingsFrame.invalidate..stub(i8*, %SettingsFrame.0*) #0

declare { i64, i32 } @golang_0org_1x_1net_1http2.WindowUpdateFrame.Header..stub(i8*, %WindowUpdateFrame.0*) #0

declare void @golang_0org_1x_1net_1http2.WindowUpdateFrame.invalidate..stub(i8*, %WindowUpdateFrame.0*) #0

declare { i64, i32 } @golang_0org_1x_1net_1http2.RSTStreamFrame.Header..stub(i8*, %RSTStreamFrame.0*) #0

declare void @golang_0org_1x_1net_1http2.RSTStreamFrame.invalidate..stub(i8*, %RSTStreamFrame.0*) #0

declare { i64, i32 } @golang_0org_1x_1net_1http2.PingFrame.Header..stub(i8*, %PingFrame.0*) #0

declare void @golang_0org_1x_1net_1http2.PingFrame.invalidate..stub(i8*, %PingFrame.0*) #0

declare { i64, i32 } @golang_0org_1x_1net_1http2.GoAwayFrame.Header..stub(i8*, %GoAwayFrame.0*) #0

declare void @golang_0org_1x_1net_1http2.GoAwayFrame.invalidate..stub(i8*, %GoAwayFrame.0*) #0

declare i8 @google_0golang_0org_1grpc_1internal_1transport.cleanupStream.isTransportResponseFrame(i8*, %".google.golang.org/grpc/internal/transport.cleanupStream.0"*) #0

declare i8 @google_0golang_0org_1grpc_1internal_1transport.outFlowControlSizeRequest.isTransportResponseFrame(i8*, %".google.golang.org/grpc/internal/transport.outFlowControlSizeRequest.0"*) #0

declare i8 @google_0golang_0org_1grpc_1internal_1transport.ping.isTransportResponseFrame(i8*, %".google.golang.org/grpc/internal/transport.ping.0"*) #0

declare i8 @google_0golang_0org_1grpc_1internal_1transport.dataFrame.isTransportResponseFrame(i8*, %".google.golang.org/grpc/internal/transport.dataFrame.0"*) #0

declare i8 @google_0golang_0org_1grpc_1internal_1transport.incomingSettings.isTransportResponseFrame(i8*, %".google.golang.org/grpc/internal/transport.incomingSettings.0"*) #0

declare i8 @google_0golang_0org_1grpc_1internal_1transport.registerStream.isTransportResponseFrame(i8*, %".google.golang.org/grpc/internal/transport.registerStream.0"*) #0

declare i8 @google_0golang_0org_1grpc_1internal_1transport.incomingGoAway.isTransportResponseFrame(i8*, %".google.golang.org/grpc/internal/transport.incomingGoAway.0"*) #0

declare i8 @google_0golang_0org_1grpc_1internal_1transport.earlyAbortStream.isTransportResponseFrame(i8*, %".google.golang.org/grpc/internal/transport.earlyAbortStream.0"*) #0

declare i8 @google_0golang_0org_1grpc_1internal_1transport.incomingWindowUpdate.isTransportResponseFrame(i8*, %".google.golang.org/grpc/internal/transport.incomingWindowUpdate.0"*) #0

declare i8 @google_0golang_0org_1grpc_1internal_1transport.outgoingSettings.isTransportResponseFrame(i8*, %".google.golang.org/grpc/internal/transport.outgoingSettings.0"*) #0

declare i8 @google_0golang_0org_1grpc_1internal_1transport.headerFrame.isTransportResponseFrame(i8*, %".google.golang.org/grpc/internal/transport.headerFrame.0"*) #0

declare i8 @google_0golang_0org_1grpc_1internal_1transport.outgoingWindowUpdate.isTransportResponseFrame(i8*, %".google.golang.org/grpc/internal/transport.outgoingWindowUpdate.0"*) #0

declare { i8*, i64 } @net.IPAddr.Network(i8*, %IPAddr.0*) #0

declare { i8*, i64 } @net.IPAddr.String(i8*, %IPAddr.0*) #0

declare i64 @net.IPAddr.family(i8*, %IPAddr.0*) #0

declare i8 @net.IPAddr.isWildcard(i8*, %IPAddr.0*) #0

declare void @net.IPAddr.sockaddr({ %Sockaddr.0, %error.0 }*, i8*, %IPAddr.0*, i64) #0

declare { i8*, i8* } @net.IPAddr.toLocal(i8*, %IPAddr.0*, i8*, i64) #0

define void @command_x2dline_x2darguments.MarblesPrivateChaincode.Init(%Response.0* sret(%Response.0) %sret.formal.0, i8* nest %nest.0, %MarblesPrivateChaincode.0* %t, i8* %stub.chunk0, i8* %stub.chunk1) #0 !dbg !23 {
entry:
  %t.addr = alloca %MarblesPrivateChaincode.0*, align 8
  %stub.addr = alloca %ChaincodeStubInterface.0, align 8
  %"$ret0" = alloca %Response.0, align 8
  %tmpv.0 = alloca i8*, align 8
  %tmpv.1 = alloca %Response.0, align 8
  %sret.actual.0 = alloca %Response.0, align 8
  store %MarblesPrivateChaincode.0* %t, %MarblesPrivateChaincode.0** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %MarblesPrivateChaincode.0** %t.addr, metadata !1550, metadata !DIExpression()), !dbg !1551
  %cast.135 = bitcast %ChaincodeStubInterface.0* %stub.addr to { i8*, i8* }*
  %field0.0 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.135, i32 0, i32 0
  store i8* %stub.chunk0, i8** %field0.0, align 8
  %field1.0 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.135, i32 0, i32 1
  store i8* %stub.chunk1, i8** %field1.0, align 8
  call void @llvm.dbg.declare(metadata %ChaincodeStubInterface.0* %stub.addr, metadata !1552, metadata !DIExpression()), !dbg !1553
  %0 = bitcast %Response.0* %"$ret0" to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* %0)
  %cast.134 = bitcast %Response.0* %"$ret0" to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.134, i8* align 8 bitcast (%Response.0* @const.44 to i8*), i64 80, i1 false)
  call void @llvm.dbg.declare(metadata %Response.0* %"$ret0", metadata !1554, metadata !DIExpression()), !dbg !1555
  store i8* null, i8** %tmpv.0, align 8
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Success(%Response.0* sret(%Response.0) "go_sret" %sret.actual.0, i8* nest undef, %IPST.0* byval(%IPST.0) @const.43), !dbg !1556
  %cast.128 = bitcast %Response.0* %tmpv.1 to i8*
  %cast.129 = bitcast %Response.0* %sret.actual.0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.128, i8* align 8 %cast.129, i64 80, i1 false)
  %cast.130 = bitcast %Response.0* %"$ret0" to i8*, !dbg !1557
  %cast.131 = bitcast %Response.0* %tmpv.1 to i8*, !dbg !1557
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.130, i8* align 8 %cast.131, i64 80, i1 false), !dbg !1557
  %cast.132 = bitcast %Response.0* %sret.formal.0 to i8*, !dbg !1557
  %cast.133 = bitcast %Response.0* %"$ret0" to i8*, !dbg !1557
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.132, i8* align 8 %cast.133, i64 80, i1 false), !dbg !1557
  %1 = bitcast %Response.0* %"$ret0" to i8*, !dbg !1557
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %1), !dbg !1557
  ret void, !dbg !1557
}

define void @command_x2dline_x2darguments.MarblesPrivateChaincode.Invoke(%Response.0* sret(%Response.0) %sret.formal.1, i8* nest %nest.1, %MarblesPrivateChaincode.0* %t, i8* %stub.chunk0, i8* %stub.chunk1) #0 !dbg !1558 {
entry:
  %tmp.3 = alloca %IPST.52, align 8
  %tmp.2 = alloca %IPST.3, align 8
  %tmp.1 = alloca %IPST.52, align 8
  %tmp.0 = alloca %IPST.3, align 8
  %t.addr = alloca %MarblesPrivateChaincode.0*, align 8
  %stub.addr = alloca %ChaincodeStubInterface.0, align 8
  %"$ret1" = alloca %Response.0, align 8
  %function = alloca { i8*, i64 }, align 8
  %args = alloca %IPST.7, align 8
  %tmpv.2 = alloca { { i8*, i64 }, %IPST.7 }, align 8
  %sret.actual.1 = alloca { { i8*, i64 }, %IPST.7 }, align 8
  %tmpv.3 = alloca { i8*, i64 }, align 8
  %tmpv.4 = alloca %IPST.7, align 8
  %tmpv.5 = alloca { i64, %error.0 }, align 8
  %tmpv.6 = alloca [2 x { i8*, i64 }], align 8
  %tmpv.7 = alloca { i8*, i64 }*, align 8, !go_addrtaken !46
  %tmpv.8 = alloca { i8*, i64 }, align 8, !go_addrtaken !46
  %sret.actual.2 = alloca { i8*, i64 }, align 8
  %tmpv.9 = alloca [1 x %IPST.3], align 8
  %sret.actual.3 = alloca { i64, %error.0 }, align 8
  %tmpv.10 = alloca { i8*, i64 }, align 8
  %tmpv.11 = alloca { i8*, i64 }, align 8
  %tmpv.12 = alloca i8, align 1
  %tmpv.13 = alloca i8, align 1
  %tmpv.14 = alloca %Response.0, align 8
  %sret.actual.4 = alloca %Response.0, align 8
  %tmpv.15 = alloca { i8*, i64 }, align 8
  %tmpv.16 = alloca i8, align 1
  %tmpv.17 = alloca i8, align 1
  %tmpv.18 = alloca %Response.0, align 8
  %sret.actual.5 = alloca %Response.0, align 8
  %tmpv.19 = alloca { i8*, i64 }, align 8
  %tmpv.20 = alloca i8, align 1
  %tmpv.21 = alloca i8, align 1
  %tmpv.22 = alloca %Response.0, align 8
  %sret.actual.6 = alloca %Response.0, align 8
  %tmpv.23 = alloca { i8*, i64 }, align 8
  %tmpv.24 = alloca i8, align 1
  %tmpv.25 = alloca i8, align 1
  %tmpv.26 = alloca %Response.0, align 8
  %sret.actual.7 = alloca %Response.0, align 8
  %tmpv.27 = alloca { i8*, i64 }, align 8
  %tmpv.28 = alloca i8, align 1
  %tmpv.29 = alloca i8, align 1
  %tmpv.30 = alloca %Response.0, align 8
  %sret.actual.8 = alloca %Response.0, align 8
  %tmpv.31 = alloca { i8*, i64 }, align 8
  %tmpv.32 = alloca i8, align 1
  %tmpv.33 = alloca i8, align 1
  %tmpv.34 = alloca %Response.0, align 8
  %sret.actual.9 = alloca %Response.0, align 8
  %tmpv.35 = alloca { i8*, i64 }, align 8
  %tmpv.36 = alloca i8, align 1
  %tmpv.37 = alloca i8, align 1
  %tmpv.38 = alloca %Response.0, align 8
  %sret.actual.10 = alloca %Response.0, align 8
  %tmpv.39 = alloca { i8*, i64 }, align 8
  %tmpv.40 = alloca i8, align 1
  %tmpv.41 = alloca i8, align 1
  %tmpv.42 = alloca %Response.0, align 8
  %sret.actual.11 = alloca %Response.0, align 8
  %tmpv.43 = alloca { i8*, i64 }, align 8
  %tmpv.44 = alloca i8, align 1
  %tmpv.45 = alloca i8, align 1
  %tmpv.46 = alloca %Response.0, align 8
  %sret.actual.12 = alloca %Response.0, align 8
  %tmpv.47 = alloca { i64, %error.0 }, align 8
  %tmpv.48 = alloca [2 x { i8*, i64 }], align 8
  %tmpv.49 = alloca { i8*, i64 }*, align 8, !go_addrtaken !46
  %tmpv.50 = alloca { i8*, i64 }, align 8, !go_addrtaken !46
  %sret.actual.13 = alloca { i8*, i64 }, align 8
  %tmpv.51 = alloca [1 x %IPST.3], align 8
  %sret.actual.14 = alloca { i64, %error.0 }, align 8
  %tmpv.52 = alloca %Response.0, align 8
  %sret.actual.15 = alloca %Response.0, align 8
  store %MarblesPrivateChaincode.0* %t, %MarblesPrivateChaincode.0** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %MarblesPrivateChaincode.0** %t.addr, metadata !1559, metadata !DIExpression()), !dbg !1560
  %cast.270 = bitcast %ChaincodeStubInterface.0* %stub.addr to { i8*, i8* }*
  %field0.11 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.270, i32 0, i32 0
  store i8* %stub.chunk0, i8** %field0.11, align 8
  %field1.11 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.270, i32 0, i32 1
  store i8* %stub.chunk1, i8** %field1.11, align 8
  call void @llvm.dbg.declare(metadata %ChaincodeStubInterface.0* %stub.addr, metadata !1561, metadata !DIExpression()), !dbg !1562
  %0 = bitcast %Response.0* %"$ret1" to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* %0)
  %cast.269 = bitcast %Response.0* %"$ret1" to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.269, i8* align 8 bitcast (%Response.0* @const.44 to i8*), i64 80, i1 false)
  call void @llvm.dbg.declare(metadata %Response.0* %"$ret1", metadata !1563, metadata !DIExpression()), !dbg !1564
  %1 = bitcast { i8*, i64 }* %function to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %1)
  %2 = bitcast %IPST.7* %args to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %2)
  %field.0 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 0, !dbg !1565
  %stub.field.ld.0 = load { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }** %field.0, align 8, !dbg !1565
  %field.1 = getelementptr inbounds { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }* %stub.field.ld.0, i32 0, i32 10, !dbg !1565
  %.field.ld.0 = load void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)** %field.1, align 8, !dbg !1565
  %field.2 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 1, !dbg !1565
  %stub.field.ld.1 = load i8*, i8** %field.2, align 8, !dbg !1565
  call void %.field.ld.0({ { i8*, i64 }, %IPST.7 }* sret({ { i8*, i64 }, %IPST.7 }) "go_sret" %sret.actual.1, i8* nest undef, i8* %stub.field.ld.1), !dbg !1565
  %cast.136 = bitcast { { i8*, i64 }, %IPST.7 }* %tmpv.2 to i8*, !dbg !1565
  %cast.137 = bitcast { { i8*, i64 }, %IPST.7 }* %sret.actual.1 to i8*, !dbg !1565
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.136, i8* align 8 %cast.137, i64 40, i1 false), !dbg !1565
  %field.3 = getelementptr inbounds { { i8*, i64 }, %IPST.7 }, { { i8*, i64 }, %IPST.7 }* %tmpv.2, i32 0, i32 0, !dbg !1565
  %cast.138 = bitcast { i8*, i64 }* %tmpv.3 to i8*
  %cast.139 = bitcast { i8*, i64 }* %field.3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.138, i8* align 8 %cast.139, i64 16, i1 false)
  %cast.140 = bitcast { i8*, i64 }* %function to i8*
  %cast.141 = bitcast { i8*, i64 }* %tmpv.3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.140, i8* align 8 %cast.141, i64 16, i1 false)
  call void @llvm.dbg.declare(metadata { i8*, i64 }* %function, metadata !1567, metadata !DIExpression()), !dbg !1568
  %field.4 = getelementptr inbounds { { i8*, i64 }, %IPST.7 }, { { i8*, i64 }, %IPST.7 }* %tmpv.2, i32 0, i32 1, !dbg !1565
  %cast.142 = bitcast %IPST.7* %tmpv.4 to i8*
  %cast.143 = bitcast %IPST.7* %field.4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.142, i8* align 8 %cast.143, i64 24, i1 false)
  %cast.144 = bitcast %IPST.7* %args to i8*
  %cast.145 = bitcast %IPST.7* %tmpv.4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.144, i8* align 8 %cast.145, i64 24, i1 false)
  call void @llvm.dbg.declare(metadata %IPST.7* %args, metadata !1569, metadata !DIExpression()), !dbg !1568
  %index.0 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.6, i32 0, i32 0, !dbg !1570
  %cast.146 = bitcast { i8*, i64 }* %index.0 to i8*, !dbg !1570
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.146, i8* align 8 bitcast ({ i8*, i64 }* @const.46 to i8*), i64 16, i1 false), !dbg !1570
  %index.1 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.6, i32 0, i32 1, !dbg !1570
  %cast.147 = bitcast { i8*, i64 }* %index.1 to i8*, !dbg !1570
  %cast.148 = bitcast { i8*, i64 }* %function to i8*, !dbg !1570
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.147, i8* align 8 %cast.148, i64 16, i1 false), !dbg !1570
  %call.0 = call i8* @runtime.newobject(i8* nest undef, %_type.0* @string..d), !dbg !1571
  %cast.149 = bitcast i8* %call.0 to { i8*, i64 }*, !dbg !1571
  store { i8*, i64 }* %cast.149, { i8*, i64 }** %tmpv.7, align 8
  %cast.150 = bitcast [2 x { i8*, i64 }]* %tmpv.6 to i8*, !dbg !1570
  %call.1 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.150, i64 2), !dbg !1570
  store { i8*, i64 } %call.1, { i8*, i64 }* %sret.actual.2, align 8, !dbg !1570
  %cast.153 = bitcast { i8*, i64 }* %tmpv.8 to i8*
  %cast.154 = bitcast { i8*, i64 }* %sret.actual.2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.153, i8* align 8 %cast.154, i64 16, i1 false)
  %deref.ld.0 = load i32, i32* bitcast ({ i8, [3 x i8], i8, i8, i64 }* @runtime.writeBarrier to i32*), align 4, !dbg !1571
  %icmp.0 = icmp eq i32 %deref.ld.0, 0, !dbg !1571
  %zext.0 = zext i1 %icmp.0 to i8, !dbg !1571
  %trunc.0 = trunc i8 %zext.0 to i1, !dbg !1571
  br i1 %trunc.0, label %then.0, label %else.0

then.0:                                           ; preds = %entry
  %tmpv.7.ld.0 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.7, align 8, !dbg !1571
  %cast.155 = bitcast { i8*, i64 }* %tmpv.7.ld.0 to i8*, !dbg !1571
  %cast.156 = bitcast { i8*, i64 }* %tmpv.8 to i8*, !dbg !1571
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.155, i8* align 8 %cast.156, i64 16, i1 false), !dbg !1571
  br label %fallthrough.0

fallthrough.0:                                    ; preds = %else.0, %then.0
  %tmpv.7.ld.2 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.7, align 8, !dbg !1571
  %field.5 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.0, i32 0, i32 0, !dbg !1571
  store %_type.0* @string..d, %_type.0** %field.5, align 8, !dbg !1571
  %field.6 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.0, i32 0, i32 1, !dbg !1571
  %cast.161 = bitcast { i8*, i64 }* %tmpv.7.ld.2 to i8*, !dbg !1571
  store i8* %cast.161, i8** %field.6, align 8, !dbg !1571
  %index.2 = getelementptr [1 x %IPST.3], [1 x %IPST.3]* %tmpv.9, i32 0, i32 0, !dbg !1571
  %cast.162 = bitcast %IPST.3* %index.2 to i8*, !dbg !1571
  %cast.163 = bitcast %IPST.3* %tmp.0 to i8*, !dbg !1571
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.162, i8* align 8 %cast.163, i64 16, i1 false), !dbg !1571
  %cast.164 = bitcast [1 x %IPST.3]* %tmpv.9 to %IPST.3*, !dbg !1571
  %field.7 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.1, i32 0, i32 0, !dbg !1571
  store %IPST.3* %cast.164, %IPST.3** %field.7, align 8, !dbg !1571
  %field.8 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.1, i32 0, i32 1, !dbg !1571
  store i64 1, i64* %field.8, align 8, !dbg !1571
  %field.9 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.1, i32 0, i32 2, !dbg !1571
  store i64 1, i64* %field.9, align 8, !dbg !1571
  call void @fmt.Println({ i64, %error.0 }* sret({ i64, %error.0 }) "go_sret" %sret.actual.3, i8* nest undef, %IPST.52* byval(%IPST.52) %tmp.1), !dbg !1571
  %cast.165 = bitcast { i64, %error.0 }* %tmpv.5 to i8*, !dbg !1571
  %cast.166 = bitcast { i64, %error.0 }* %sret.actual.3 to i8*, !dbg !1571
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.165, i8* align 8 %cast.166, i64 24, i1 false), !dbg !1571
  %cast.167 = bitcast { i8*, i64 }* %tmpv.10 to i8*
  %cast.168 = bitcast { i8*, i64 }* %function to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.167, i8* align 8 %cast.168, i64 16, i1 false)
  %cast.169 = bitcast { i8*, i64 }* %tmpv.11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.169, i8* align 8 bitcast ({ i8*, i64 }* @const.47 to i8*), i64 16, i1 false)
  %field.10 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 1, !dbg !1572
  %tmpv.10.field.ld.0 = load i64, i64* %field.10, align 8, !dbg !1572
  %field.11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.11, i32 0, i32 1, !dbg !1572
  %tmpv.11.field.ld.0 = load i64, i64* %field.11, align 8, !dbg !1572
  %icmp.1 = icmp eq i64 %tmpv.10.field.ld.0, %tmpv.11.field.ld.0, !dbg !1572
  %zext.1 = zext i1 %icmp.1 to i8, !dbg !1572
  %trunc.2 = trunc i8 %zext.1 to i1, !dbg !1572
  br i1 %trunc.2, label %then.1, label %else.1

else.0:                                           ; preds = %entry
  %tmpv.7.ld.1 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.7, align 8, !dbg !1571
  %cast.157 = bitcast { i8*, i64 }* %tmpv.7.ld.1 to i8*, !dbg !1571
  %cast.158 = bitcast { i8*, i64 }* %tmpv.8 to i8*, !dbg !1571
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* @string..d, i8* %cast.157, i8* %cast.158), !dbg !1571
  br label %fallthrough.0

then.1:                                           ; preds = %fallthrough.0
  %field.12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 0, !dbg !1572
  %tmpv.10.field.ld.1 = load i8*, i8** %field.12, align 8, !dbg !1572
  %field.13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.11, i32 0, i32 0, !dbg !1572
  %tmpv.11.field.ld.1 = load i8*, i8** %field.13, align 8, !dbg !1572
  %icmp.2 = icmp eq i8* %tmpv.10.field.ld.1, %tmpv.11.field.ld.1, !dbg !1572
  %zext.2 = zext i1 %icmp.2 to i8, !dbg !1572
  %trunc.1 = trunc i8 %zext.2 to i1, !dbg !1572
  br i1 %trunc.1, label %then.2, label %else.2

fallthrough.1:                                    ; preds = %else.1, %fallthrough.2
  %tmpv.13.ld.0 = load i8, i8* %tmpv.13, align 1, !dbg !1572
  %icmp.4 = icmp eq i8 %tmpv.13.ld.0, 1, !dbg !1572
  %zext.4 = zext i1 %icmp.4 to i8, !dbg !1572
  %icmp.5 = icmp ne i8 %zext.4, 0, !dbg !1572
  %xor.0 = xor i1 %icmp.5, true, !dbg !1572
  %zext.5 = zext i1 %xor.0 to i8, !dbg !1572
  %trunc.3 = trunc i8 %zext.5 to i1, !dbg !1572
  br i1 %trunc.3, label %then.3, label %else.3

else.1:                                           ; preds = %fallthrough.0
  store i8 0, i8* %tmpv.13, align 1, !dbg !1572
  br label %fallthrough.1

then.2:                                           ; preds = %then.1
  store i8 1, i8* %tmpv.12, align 1
  br label %fallthrough.2

fallthrough.2:                                    ; preds = %else.2, %then.2
  %tmpv.12.ld.0 = load i8, i8* %tmpv.12, align 1, !dbg !1572
  store i8 %tmpv.12.ld.0, i8* %tmpv.13, align 1
  br label %fallthrough.1

else.2:                                           ; preds = %then.1
  %field.14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 0, !dbg !1572
  %tmpv.10.field.ld.2 = load i8*, i8** %field.14, align 8, !dbg !1572
  %field.15 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.11, i32 0, i32 0, !dbg !1572
  %tmpv.11.field.ld.2 = load i8*, i8** %field.15, align 8, !dbg !1572
  %field.16 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.11, i32 0, i32 1, !dbg !1572
  %tmpv.11.field.ld.3 = load i64, i64* %field.16, align 8, !dbg !1572
  %call.2 = call i32 @memcmp(i8* %tmpv.10.field.ld.2, i8* %tmpv.11.field.ld.2, i64 %tmpv.11.field.ld.3), !dbg !1572
  %icmp.3 = icmp eq i32 %call.2, 0, !dbg !1572
  %zext.3 = zext i1 %icmp.3 to i8, !dbg !1572
  store i8 %zext.3, i8* %tmpv.12, align 1, !dbg !1572
  br label %fallthrough.2

then.3:                                           ; preds = %fallthrough.1
  br label %label.0

fallthrough.3:                                    ; preds = %else.3
  %t.ld.0 = load %MarblesPrivateChaincode.0*, %MarblesPrivateChaincode.0** %t.addr, align 8, !dbg !1573
  %cast.170 = bitcast %ChaincodeStubInterface.0* %stub.addr to { i8*, i8* }*, !dbg !1574
  %field0.1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.170, i32 0, i32 0, !dbg !1574
  %ld.0 = load i8*, i8** %field0.1, align 8, !dbg !1574
  %field1.1 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.170, i32 0, i32 1, !dbg !1574
  %ld.1 = load i8*, i8** %field1.1, align 8, !dbg !1574
  call void @command_x2dline_x2darguments.MarblesPrivateChaincode.initMarble(%Response.0* sret(%Response.0) "go_sret" %sret.actual.4, i8* nest undef, %MarblesPrivateChaincode.0* %t.ld.0, i8* %ld.0, i8* %ld.1, %IPST.7* byval(%IPST.7) %args), !dbg !1574
  %cast.171 = bitcast %Response.0* %tmpv.14 to i8*
  %cast.172 = bitcast %Response.0* %sret.actual.4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.171, i8* align 8 %cast.172, i64 80, i1 false)
  %cast.173 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1575
  %cast.174 = bitcast %Response.0* %tmpv.14 to i8*, !dbg !1575
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.173, i8* align 8 %cast.174, i64 80, i1 false), !dbg !1575
  %cast.175 = bitcast %Response.0* %sret.formal.1 to i8*, !dbg !1575
  %cast.176 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1575
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.175, i8* align 8 %cast.176, i64 80, i1 false), !dbg !1575
  %3 = bitcast { i8*, i64 }* %function to i8*, !dbg !1575
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %3), !dbg !1575
  %4 = bitcast %IPST.7* %args to i8*, !dbg !1575
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %4), !dbg !1575
  %5 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1575
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %5), !dbg !1575
  ret void, !dbg !1575

else.3:                                           ; preds = %fallthrough.1
  br label %fallthrough.3

label.0:                                          ; preds = %then.3
  %cast.177 = bitcast { i8*, i64 }* %tmpv.15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.177, i8* align 8 bitcast ({ i8*, i64 }* @const.48 to i8*), i64 16, i1 false)
  %field.17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 1, !dbg !1576
  %tmpv.10.field.ld.3 = load i64, i64* %field.17, align 8, !dbg !1576
  %field.18 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.15, i32 0, i32 1, !dbg !1576
  %tmpv.15.field.ld.0 = load i64, i64* %field.18, align 8, !dbg !1576
  %icmp.6 = icmp eq i64 %tmpv.10.field.ld.3, %tmpv.15.field.ld.0, !dbg !1576
  %zext.6 = zext i1 %icmp.6 to i8, !dbg !1576
  %trunc.5 = trunc i8 %zext.6 to i1, !dbg !1576
  br i1 %trunc.5, label %then.4, label %else.4

label.1:                                          ; No predecessors!
  %6 = bitcast { i8*, i64 }* %function to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %6)
  %7 = bitcast %IPST.7* %args to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %7)
  %8 = bitcast %Response.0* %"$ret1" to i8*
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %8)
  ret void

then.4:                                           ; preds = %label.0
  %field.19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 0, !dbg !1576
  %tmpv.10.field.ld.4 = load i8*, i8** %field.19, align 8, !dbg !1576
  %field.20 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.15, i32 0, i32 0, !dbg !1576
  %tmpv.15.field.ld.1 = load i8*, i8** %field.20, align 8, !dbg !1576
  %icmp.7 = icmp eq i8* %tmpv.10.field.ld.4, %tmpv.15.field.ld.1, !dbg !1576
  %zext.7 = zext i1 %icmp.7 to i8, !dbg !1576
  %trunc.4 = trunc i8 %zext.7 to i1, !dbg !1576
  br i1 %trunc.4, label %then.5, label %else.5

fallthrough.4:                                    ; preds = %else.4, %fallthrough.5
  %tmpv.17.ld.0 = load i8, i8* %tmpv.17, align 1, !dbg !1576
  %icmp.9 = icmp eq i8 %tmpv.17.ld.0, 1, !dbg !1576
  %zext.9 = zext i1 %icmp.9 to i8, !dbg !1576
  %icmp.10 = icmp ne i8 %zext.9, 0, !dbg !1576
  %xor.1 = xor i1 %icmp.10, true, !dbg !1576
  %zext.10 = zext i1 %xor.1 to i8, !dbg !1576
  %trunc.6 = trunc i8 %zext.10 to i1, !dbg !1576
  br i1 %trunc.6, label %then.6, label %else.6

else.4:                                           ; preds = %label.0
  store i8 0, i8* %tmpv.17, align 1, !dbg !1576
  br label %fallthrough.4

then.5:                                           ; preds = %then.4
  store i8 1, i8* %tmpv.16, align 1
  br label %fallthrough.5

fallthrough.5:                                    ; preds = %else.5, %then.5
  %tmpv.16.ld.0 = load i8, i8* %tmpv.16, align 1, !dbg !1576
  store i8 %tmpv.16.ld.0, i8* %tmpv.17, align 1
  br label %fallthrough.4

else.5:                                           ; preds = %then.4
  %field.21 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 0, !dbg !1576
  %tmpv.10.field.ld.5 = load i8*, i8** %field.21, align 8, !dbg !1576
  %field.22 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.15, i32 0, i32 0, !dbg !1576
  %tmpv.15.field.ld.2 = load i8*, i8** %field.22, align 8, !dbg !1576
  %field.23 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.15, i32 0, i32 1, !dbg !1576
  %tmpv.15.field.ld.3 = load i64, i64* %field.23, align 8, !dbg !1576
  %call.3 = call i32 @memcmp(i8* %tmpv.10.field.ld.5, i8* %tmpv.15.field.ld.2, i64 %tmpv.15.field.ld.3), !dbg !1576
  %icmp.8 = icmp eq i32 %call.3, 0, !dbg !1576
  %zext.8 = zext i1 %icmp.8 to i8, !dbg !1576
  store i8 %zext.8, i8* %tmpv.16, align 1, !dbg !1576
  br label %fallthrough.5

then.6:                                           ; preds = %fallthrough.4
  br label %label.2

fallthrough.6:                                    ; preds = %else.6
  %t.ld.1 = load %MarblesPrivateChaincode.0*, %MarblesPrivateChaincode.0** %t.addr, align 8, !dbg !1577
  %cast.178 = bitcast %ChaincodeStubInterface.0* %stub.addr to { i8*, i8* }*, !dbg !1578
  %field0.2 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.178, i32 0, i32 0, !dbg !1578
  %ld.2 = load i8*, i8** %field0.2, align 8, !dbg !1578
  %field1.2 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.178, i32 0, i32 1, !dbg !1578
  %ld.3 = load i8*, i8** %field1.2, align 8, !dbg !1578
  call void @command_x2dline_x2darguments.MarblesPrivateChaincode.readMarble(%Response.0* sret(%Response.0) "go_sret" %sret.actual.5, i8* nest undef, %MarblesPrivateChaincode.0* %t.ld.1, i8* %ld.2, i8* %ld.3, %IPST.7* byval(%IPST.7) %args), !dbg !1578
  %cast.179 = bitcast %Response.0* %tmpv.18 to i8*
  %cast.180 = bitcast %Response.0* %sret.actual.5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.179, i8* align 8 %cast.180, i64 80, i1 false)
  %cast.181 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1579
  %cast.182 = bitcast %Response.0* %tmpv.18 to i8*, !dbg !1579
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.181, i8* align 8 %cast.182, i64 80, i1 false), !dbg !1579
  %cast.183 = bitcast %Response.0* %sret.formal.1 to i8*, !dbg !1579
  %cast.184 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1579
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.183, i8* align 8 %cast.184, i64 80, i1 false), !dbg !1579
  %9 = bitcast { i8*, i64 }* %function to i8*, !dbg !1579
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %9), !dbg !1579
  %10 = bitcast %IPST.7* %args to i8*, !dbg !1579
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %10), !dbg !1579
  %11 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1579
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %11), !dbg !1579
  ret void, !dbg !1579

else.6:                                           ; preds = %fallthrough.4
  br label %fallthrough.6

label.2:                                          ; preds = %then.6
  %cast.185 = bitcast { i8*, i64 }* %tmpv.19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.185, i8* align 8 bitcast ({ i8*, i64 }* @const.49 to i8*), i64 16, i1 false)
  %field.24 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 1, !dbg !1580
  %tmpv.10.field.ld.6 = load i64, i64* %field.24, align 8, !dbg !1580
  %field.25 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.19, i32 0, i32 1, !dbg !1580
  %tmpv.19.field.ld.0 = load i64, i64* %field.25, align 8, !dbg !1580
  %icmp.11 = icmp eq i64 %tmpv.10.field.ld.6, %tmpv.19.field.ld.0, !dbg !1580
  %zext.11 = zext i1 %icmp.11 to i8, !dbg !1580
  %trunc.8 = trunc i8 %zext.11 to i1, !dbg !1580
  br i1 %trunc.8, label %then.7, label %else.7

then.7:                                           ; preds = %label.2
  %field.26 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 0, !dbg !1580
  %tmpv.10.field.ld.7 = load i8*, i8** %field.26, align 8, !dbg !1580
  %field.27 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.19, i32 0, i32 0, !dbg !1580
  %tmpv.19.field.ld.1 = load i8*, i8** %field.27, align 8, !dbg !1580
  %icmp.12 = icmp eq i8* %tmpv.10.field.ld.7, %tmpv.19.field.ld.1, !dbg !1580
  %zext.12 = zext i1 %icmp.12 to i8, !dbg !1580
  %trunc.7 = trunc i8 %zext.12 to i1, !dbg !1580
  br i1 %trunc.7, label %then.8, label %else.8

fallthrough.7:                                    ; preds = %else.7, %fallthrough.8
  %tmpv.21.ld.0 = load i8, i8* %tmpv.21, align 1, !dbg !1580
  %icmp.14 = icmp eq i8 %tmpv.21.ld.0, 1, !dbg !1580
  %zext.14 = zext i1 %icmp.14 to i8, !dbg !1580
  %icmp.15 = icmp ne i8 %zext.14, 0, !dbg !1580
  %xor.2 = xor i1 %icmp.15, true, !dbg !1580
  %zext.15 = zext i1 %xor.2 to i8, !dbg !1580
  %trunc.9 = trunc i8 %zext.15 to i1, !dbg !1580
  br i1 %trunc.9, label %then.9, label %else.9

else.7:                                           ; preds = %label.2
  store i8 0, i8* %tmpv.21, align 1, !dbg !1580
  br label %fallthrough.7

then.8:                                           ; preds = %then.7
  store i8 1, i8* %tmpv.20, align 1
  br label %fallthrough.8

fallthrough.8:                                    ; preds = %else.8, %then.8
  %tmpv.20.ld.0 = load i8, i8* %tmpv.20, align 1, !dbg !1580
  store i8 %tmpv.20.ld.0, i8* %tmpv.21, align 1
  br label %fallthrough.7

else.8:                                           ; preds = %then.7
  %field.28 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 0, !dbg !1580
  %tmpv.10.field.ld.8 = load i8*, i8** %field.28, align 8, !dbg !1580
  %field.29 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.19, i32 0, i32 0, !dbg !1580
  %tmpv.19.field.ld.2 = load i8*, i8** %field.29, align 8, !dbg !1580
  %field.30 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.19, i32 0, i32 1, !dbg !1580
  %tmpv.19.field.ld.3 = load i64, i64* %field.30, align 8, !dbg !1580
  %call.4 = call i32 @memcmp(i8* %tmpv.10.field.ld.8, i8* %tmpv.19.field.ld.2, i64 %tmpv.19.field.ld.3), !dbg !1580
  %icmp.13 = icmp eq i32 %call.4, 0, !dbg !1580
  %zext.13 = zext i1 %icmp.13 to i8, !dbg !1580
  store i8 %zext.13, i8* %tmpv.20, align 1, !dbg !1580
  br label %fallthrough.8

then.9:                                           ; preds = %fallthrough.7
  br label %label.3

fallthrough.9:                                    ; preds = %else.9
  %t.ld.2 = load %MarblesPrivateChaincode.0*, %MarblesPrivateChaincode.0** %t.addr, align 8, !dbg !1581
  %cast.186 = bitcast %ChaincodeStubInterface.0* %stub.addr to { i8*, i8* }*, !dbg !1582
  %field0.3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.186, i32 0, i32 0, !dbg !1582
  %ld.4 = load i8*, i8** %field0.3, align 8, !dbg !1582
  %field1.3 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.186, i32 0, i32 1, !dbg !1582
  %ld.5 = load i8*, i8** %field1.3, align 8, !dbg !1582
  call void @command_x2dline_x2darguments.MarblesPrivateChaincode.readMarblePrivateDetails(%Response.0* sret(%Response.0) "go_sret" %sret.actual.6, i8* nest undef, %MarblesPrivateChaincode.0* %t.ld.2, i8* %ld.4, i8* %ld.5, %IPST.7* byval(%IPST.7) %args), !dbg !1582
  %cast.187 = bitcast %Response.0* %tmpv.22 to i8*
  %cast.188 = bitcast %Response.0* %sret.actual.6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.187, i8* align 8 %cast.188, i64 80, i1 false)
  %cast.189 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1583
  %cast.190 = bitcast %Response.0* %tmpv.22 to i8*, !dbg !1583
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.189, i8* align 8 %cast.190, i64 80, i1 false), !dbg !1583
  %cast.191 = bitcast %Response.0* %sret.formal.1 to i8*, !dbg !1583
  %cast.192 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1583
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.191, i8* align 8 %cast.192, i64 80, i1 false), !dbg !1583
  %12 = bitcast { i8*, i64 }* %function to i8*, !dbg !1583
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %12), !dbg !1583
  %13 = bitcast %IPST.7* %args to i8*, !dbg !1583
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %13), !dbg !1583
  %14 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1583
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %14), !dbg !1583
  ret void, !dbg !1583

else.9:                                           ; preds = %fallthrough.7
  br label %fallthrough.9

label.3:                                          ; preds = %then.9
  %cast.193 = bitcast { i8*, i64 }* %tmpv.23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.193, i8* align 8 bitcast ({ i8*, i64 }* @const.50 to i8*), i64 16, i1 false)
  %field.31 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 1, !dbg !1584
  %tmpv.10.field.ld.9 = load i64, i64* %field.31, align 8, !dbg !1584
  %field.32 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.23, i32 0, i32 1, !dbg !1584
  %tmpv.23.field.ld.0 = load i64, i64* %field.32, align 8, !dbg !1584
  %icmp.16 = icmp eq i64 %tmpv.10.field.ld.9, %tmpv.23.field.ld.0, !dbg !1584
  %zext.16 = zext i1 %icmp.16 to i8, !dbg !1584
  %trunc.11 = trunc i8 %zext.16 to i1, !dbg !1584
  br i1 %trunc.11, label %then.10, label %else.10

then.10:                                          ; preds = %label.3
  %field.33 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 0, !dbg !1584
  %tmpv.10.field.ld.10 = load i8*, i8** %field.33, align 8, !dbg !1584
  %field.34 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.23, i32 0, i32 0, !dbg !1584
  %tmpv.23.field.ld.1 = load i8*, i8** %field.34, align 8, !dbg !1584
  %icmp.17 = icmp eq i8* %tmpv.10.field.ld.10, %tmpv.23.field.ld.1, !dbg !1584
  %zext.17 = zext i1 %icmp.17 to i8, !dbg !1584
  %trunc.10 = trunc i8 %zext.17 to i1, !dbg !1584
  br i1 %trunc.10, label %then.11, label %else.11

fallthrough.10:                                   ; preds = %else.10, %fallthrough.11
  %tmpv.25.ld.0 = load i8, i8* %tmpv.25, align 1, !dbg !1584
  %icmp.19 = icmp eq i8 %tmpv.25.ld.0, 1, !dbg !1584
  %zext.19 = zext i1 %icmp.19 to i8, !dbg !1584
  %icmp.20 = icmp ne i8 %zext.19, 0, !dbg !1584
  %xor.3 = xor i1 %icmp.20, true, !dbg !1584
  %zext.20 = zext i1 %xor.3 to i8, !dbg !1584
  %trunc.12 = trunc i8 %zext.20 to i1, !dbg !1584
  br i1 %trunc.12, label %then.12, label %else.12

else.10:                                          ; preds = %label.3
  store i8 0, i8* %tmpv.25, align 1, !dbg !1584
  br label %fallthrough.10

then.11:                                          ; preds = %then.10
  store i8 1, i8* %tmpv.24, align 1
  br label %fallthrough.11

fallthrough.11:                                   ; preds = %else.11, %then.11
  %tmpv.24.ld.0 = load i8, i8* %tmpv.24, align 1, !dbg !1584
  store i8 %tmpv.24.ld.0, i8* %tmpv.25, align 1
  br label %fallthrough.10

else.11:                                          ; preds = %then.10
  %field.35 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 0, !dbg !1584
  %tmpv.10.field.ld.11 = load i8*, i8** %field.35, align 8, !dbg !1584
  %field.36 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.23, i32 0, i32 0, !dbg !1584
  %tmpv.23.field.ld.2 = load i8*, i8** %field.36, align 8, !dbg !1584
  %field.37 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.23, i32 0, i32 1, !dbg !1584
  %tmpv.23.field.ld.3 = load i64, i64* %field.37, align 8, !dbg !1584
  %call.5 = call i32 @memcmp(i8* %tmpv.10.field.ld.11, i8* %tmpv.23.field.ld.2, i64 %tmpv.23.field.ld.3), !dbg !1584
  %icmp.18 = icmp eq i32 %call.5, 0, !dbg !1584
  %zext.18 = zext i1 %icmp.18 to i8, !dbg !1584
  store i8 %zext.18, i8* %tmpv.24, align 1, !dbg !1584
  br label %fallthrough.11

then.12:                                          ; preds = %fallthrough.10
  br label %label.4

fallthrough.12:                                   ; preds = %else.12
  %t.ld.3 = load %MarblesPrivateChaincode.0*, %MarblesPrivateChaincode.0** %t.addr, align 8, !dbg !1585
  %cast.194 = bitcast %ChaincodeStubInterface.0* %stub.addr to { i8*, i8* }*, !dbg !1586
  %field0.4 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.194, i32 0, i32 0, !dbg !1586
  %ld.6 = load i8*, i8** %field0.4, align 8, !dbg !1586
  %field1.4 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.194, i32 0, i32 1, !dbg !1586
  %ld.7 = load i8*, i8** %field1.4, align 8, !dbg !1586
  call void @command_x2dline_x2darguments.MarblesPrivateChaincode.transferMarble(%Response.0* sret(%Response.0) "go_sret" %sret.actual.7, i8* nest undef, %MarblesPrivateChaincode.0* %t.ld.3, i8* %ld.6, i8* %ld.7, %IPST.7* byval(%IPST.7) %args), !dbg !1586
  %cast.195 = bitcast %Response.0* %tmpv.26 to i8*
  %cast.196 = bitcast %Response.0* %sret.actual.7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.195, i8* align 8 %cast.196, i64 80, i1 false)
  %cast.197 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1587
  %cast.198 = bitcast %Response.0* %tmpv.26 to i8*, !dbg !1587
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.197, i8* align 8 %cast.198, i64 80, i1 false), !dbg !1587
  %cast.199 = bitcast %Response.0* %sret.formal.1 to i8*, !dbg !1587
  %cast.200 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1587
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.199, i8* align 8 %cast.200, i64 80, i1 false), !dbg !1587
  %15 = bitcast { i8*, i64 }* %function to i8*, !dbg !1587
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %15), !dbg !1587
  %16 = bitcast %IPST.7* %args to i8*, !dbg !1587
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %16), !dbg !1587
  %17 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1587
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %17), !dbg !1587
  ret void, !dbg !1587

else.12:                                          ; preds = %fallthrough.10
  br label %fallthrough.12

label.4:                                          ; preds = %then.12
  %cast.201 = bitcast { i8*, i64 }* %tmpv.27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.201, i8* align 8 bitcast ({ i8*, i64 }* @const.51 to i8*), i64 16, i1 false)
  %field.38 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 1, !dbg !1588
  %tmpv.10.field.ld.12 = load i64, i64* %field.38, align 8, !dbg !1588
  %field.39 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.27, i32 0, i32 1, !dbg !1588
  %tmpv.27.field.ld.0 = load i64, i64* %field.39, align 8, !dbg !1588
  %icmp.21 = icmp eq i64 %tmpv.10.field.ld.12, %tmpv.27.field.ld.0, !dbg !1588
  %zext.21 = zext i1 %icmp.21 to i8, !dbg !1588
  %trunc.14 = trunc i8 %zext.21 to i1, !dbg !1588
  br i1 %trunc.14, label %then.13, label %else.13

then.13:                                          ; preds = %label.4
  %field.40 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 0, !dbg !1588
  %tmpv.10.field.ld.13 = load i8*, i8** %field.40, align 8, !dbg !1588
  %field.41 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.27, i32 0, i32 0, !dbg !1588
  %tmpv.27.field.ld.1 = load i8*, i8** %field.41, align 8, !dbg !1588
  %icmp.22 = icmp eq i8* %tmpv.10.field.ld.13, %tmpv.27.field.ld.1, !dbg !1588
  %zext.22 = zext i1 %icmp.22 to i8, !dbg !1588
  %trunc.13 = trunc i8 %zext.22 to i1, !dbg !1588
  br i1 %trunc.13, label %then.14, label %else.14

fallthrough.13:                                   ; preds = %else.13, %fallthrough.14
  %tmpv.29.ld.0 = load i8, i8* %tmpv.29, align 1, !dbg !1588
  %icmp.24 = icmp eq i8 %tmpv.29.ld.0, 1, !dbg !1588
  %zext.24 = zext i1 %icmp.24 to i8, !dbg !1588
  %icmp.25 = icmp ne i8 %zext.24, 0, !dbg !1588
  %xor.4 = xor i1 %icmp.25, true, !dbg !1588
  %zext.25 = zext i1 %xor.4 to i8, !dbg !1588
  %trunc.15 = trunc i8 %zext.25 to i1, !dbg !1588
  br i1 %trunc.15, label %then.15, label %else.15

else.13:                                          ; preds = %label.4
  store i8 0, i8* %tmpv.29, align 1, !dbg !1588
  br label %fallthrough.13

then.14:                                          ; preds = %then.13
  store i8 1, i8* %tmpv.28, align 1
  br label %fallthrough.14

fallthrough.14:                                   ; preds = %else.14, %then.14
  %tmpv.28.ld.0 = load i8, i8* %tmpv.28, align 1, !dbg !1588
  store i8 %tmpv.28.ld.0, i8* %tmpv.29, align 1
  br label %fallthrough.13

else.14:                                          ; preds = %then.13
  %field.42 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 0, !dbg !1588
  %tmpv.10.field.ld.14 = load i8*, i8** %field.42, align 8, !dbg !1588
  %field.43 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.27, i32 0, i32 0, !dbg !1588
  %tmpv.27.field.ld.2 = load i8*, i8** %field.43, align 8, !dbg !1588
  %field.44 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.27, i32 0, i32 1, !dbg !1588
  %tmpv.27.field.ld.3 = load i64, i64* %field.44, align 8, !dbg !1588
  %call.6 = call i32 @memcmp(i8* %tmpv.10.field.ld.14, i8* %tmpv.27.field.ld.2, i64 %tmpv.27.field.ld.3), !dbg !1588
  %icmp.23 = icmp eq i32 %call.6, 0, !dbg !1588
  %zext.23 = zext i1 %icmp.23 to i8, !dbg !1588
  store i8 %zext.23, i8* %tmpv.28, align 1, !dbg !1588
  br label %fallthrough.14

then.15:                                          ; preds = %fallthrough.13
  br label %label.5

fallthrough.15:                                   ; preds = %else.15
  %t.ld.4 = load %MarblesPrivateChaincode.0*, %MarblesPrivateChaincode.0** %t.addr, align 8, !dbg !1589
  %cast.202 = bitcast %ChaincodeStubInterface.0* %stub.addr to { i8*, i8* }*, !dbg !1590
  %field0.5 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.202, i32 0, i32 0, !dbg !1590
  %ld.8 = load i8*, i8** %field0.5, align 8, !dbg !1590
  %field1.5 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.202, i32 0, i32 1, !dbg !1590
  %ld.9 = load i8*, i8** %field1.5, align 8, !dbg !1590
  call void @command_x2dline_x2darguments.MarblesPrivateChaincode.delete(%Response.0* sret(%Response.0) "go_sret" %sret.actual.8, i8* nest undef, %MarblesPrivateChaincode.0* %t.ld.4, i8* %ld.8, i8* %ld.9, %IPST.7* byval(%IPST.7) %args), !dbg !1590
  %cast.203 = bitcast %Response.0* %tmpv.30 to i8*
  %cast.204 = bitcast %Response.0* %sret.actual.8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.203, i8* align 8 %cast.204, i64 80, i1 false)
  %cast.205 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1591
  %cast.206 = bitcast %Response.0* %tmpv.30 to i8*, !dbg !1591
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.205, i8* align 8 %cast.206, i64 80, i1 false), !dbg !1591
  %cast.207 = bitcast %Response.0* %sret.formal.1 to i8*, !dbg !1591
  %cast.208 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1591
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.207, i8* align 8 %cast.208, i64 80, i1 false), !dbg !1591
  %18 = bitcast { i8*, i64 }* %function to i8*, !dbg !1591
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %18), !dbg !1591
  %19 = bitcast %IPST.7* %args to i8*, !dbg !1591
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %19), !dbg !1591
  %20 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1591
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %20), !dbg !1591
  ret void, !dbg !1591

else.15:                                          ; preds = %fallthrough.13
  br label %fallthrough.15

label.5:                                          ; preds = %then.15
  %cast.209 = bitcast { i8*, i64 }* %tmpv.31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.209, i8* align 8 bitcast ({ i8*, i64 }* @const.52 to i8*), i64 16, i1 false)
  %field.45 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 1, !dbg !1592
  %tmpv.10.field.ld.15 = load i64, i64* %field.45, align 8, !dbg !1592
  %field.46 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.31, i32 0, i32 1, !dbg !1592
  %tmpv.31.field.ld.0 = load i64, i64* %field.46, align 8, !dbg !1592
  %icmp.26 = icmp eq i64 %tmpv.10.field.ld.15, %tmpv.31.field.ld.0, !dbg !1592
  %zext.26 = zext i1 %icmp.26 to i8, !dbg !1592
  %trunc.17 = trunc i8 %zext.26 to i1, !dbg !1592
  br i1 %trunc.17, label %then.16, label %else.16

then.16:                                          ; preds = %label.5
  %field.47 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 0, !dbg !1592
  %tmpv.10.field.ld.16 = load i8*, i8** %field.47, align 8, !dbg !1592
  %field.48 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.31, i32 0, i32 0, !dbg !1592
  %tmpv.31.field.ld.1 = load i8*, i8** %field.48, align 8, !dbg !1592
  %icmp.27 = icmp eq i8* %tmpv.10.field.ld.16, %tmpv.31.field.ld.1, !dbg !1592
  %zext.27 = zext i1 %icmp.27 to i8, !dbg !1592
  %trunc.16 = trunc i8 %zext.27 to i1, !dbg !1592
  br i1 %trunc.16, label %then.17, label %else.17

fallthrough.16:                                   ; preds = %else.16, %fallthrough.17
  %tmpv.33.ld.0 = load i8, i8* %tmpv.33, align 1, !dbg !1592
  %icmp.29 = icmp eq i8 %tmpv.33.ld.0, 1, !dbg !1592
  %zext.29 = zext i1 %icmp.29 to i8, !dbg !1592
  %icmp.30 = icmp ne i8 %zext.29, 0, !dbg !1592
  %xor.5 = xor i1 %icmp.30, true, !dbg !1592
  %zext.30 = zext i1 %xor.5 to i8, !dbg !1592
  %trunc.18 = trunc i8 %zext.30 to i1, !dbg !1592
  br i1 %trunc.18, label %then.18, label %else.18

else.16:                                          ; preds = %label.5
  store i8 0, i8* %tmpv.33, align 1, !dbg !1592
  br label %fallthrough.16

then.17:                                          ; preds = %then.16
  store i8 1, i8* %tmpv.32, align 1
  br label %fallthrough.17

fallthrough.17:                                   ; preds = %else.17, %then.17
  %tmpv.32.ld.0 = load i8, i8* %tmpv.32, align 1, !dbg !1592
  store i8 %tmpv.32.ld.0, i8* %tmpv.33, align 1
  br label %fallthrough.16

else.17:                                          ; preds = %then.16
  %field.49 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 0, !dbg !1592
  %tmpv.10.field.ld.17 = load i8*, i8** %field.49, align 8, !dbg !1592
  %field.50 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.31, i32 0, i32 0, !dbg !1592
  %tmpv.31.field.ld.2 = load i8*, i8** %field.50, align 8, !dbg !1592
  %field.51 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.31, i32 0, i32 1, !dbg !1592
  %tmpv.31.field.ld.3 = load i64, i64* %field.51, align 8, !dbg !1592
  %call.7 = call i32 @memcmp(i8* %tmpv.10.field.ld.17, i8* %tmpv.31.field.ld.2, i64 %tmpv.31.field.ld.3), !dbg !1592
  %icmp.28 = icmp eq i32 %call.7, 0, !dbg !1592
  %zext.28 = zext i1 %icmp.28 to i8, !dbg !1592
  store i8 %zext.28, i8* %tmpv.32, align 1, !dbg !1592
  br label %fallthrough.17

then.18:                                          ; preds = %fallthrough.16
  br label %label.6

fallthrough.18:                                   ; preds = %else.18
  %t.ld.5 = load %MarblesPrivateChaincode.0*, %MarblesPrivateChaincode.0** %t.addr, align 8, !dbg !1593
  %cast.210 = bitcast %ChaincodeStubInterface.0* %stub.addr to { i8*, i8* }*, !dbg !1594
  %field0.6 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.210, i32 0, i32 0, !dbg !1594
  %ld.10 = load i8*, i8** %field0.6, align 8, !dbg !1594
  %field1.6 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.210, i32 0, i32 1, !dbg !1594
  %ld.11 = load i8*, i8** %field1.6, align 8, !dbg !1594
  call void @command_x2dline_x2darguments.MarblesPrivateChaincode.getMarblesByRange(%Response.0* sret(%Response.0) "go_sret" %sret.actual.9, i8* nest undef, %MarblesPrivateChaincode.0* %t.ld.5, i8* %ld.10, i8* %ld.11, %IPST.7* byval(%IPST.7) %args), !dbg !1594
  %cast.211 = bitcast %Response.0* %tmpv.34 to i8*
  %cast.212 = bitcast %Response.0* %sret.actual.9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.211, i8* align 8 %cast.212, i64 80, i1 false)
  %cast.213 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1595
  %cast.214 = bitcast %Response.0* %tmpv.34 to i8*, !dbg !1595
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.213, i8* align 8 %cast.214, i64 80, i1 false), !dbg !1595
  %cast.215 = bitcast %Response.0* %sret.formal.1 to i8*, !dbg !1595
  %cast.216 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1595
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.215, i8* align 8 %cast.216, i64 80, i1 false), !dbg !1595
  %21 = bitcast { i8*, i64 }* %function to i8*, !dbg !1595
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %21), !dbg !1595
  %22 = bitcast %IPST.7* %args to i8*, !dbg !1595
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %22), !dbg !1595
  %23 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1595
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %23), !dbg !1595
  ret void, !dbg !1595

else.18:                                          ; preds = %fallthrough.16
  br label %fallthrough.18

label.6:                                          ; preds = %then.18
  %cast.217 = bitcast { i8*, i64 }* %tmpv.35 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.217, i8* align 8 bitcast ({ i8*, i64 }* @const.53 to i8*), i64 16, i1 false)
  %field.52 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 1, !dbg !1596
  %tmpv.10.field.ld.18 = load i64, i64* %field.52, align 8, !dbg !1596
  %field.53 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.35, i32 0, i32 1, !dbg !1596
  %tmpv.35.field.ld.0 = load i64, i64* %field.53, align 8, !dbg !1596
  %icmp.31 = icmp eq i64 %tmpv.10.field.ld.18, %tmpv.35.field.ld.0, !dbg !1596
  %zext.31 = zext i1 %icmp.31 to i8, !dbg !1596
  %trunc.20 = trunc i8 %zext.31 to i1, !dbg !1596
  br i1 %trunc.20, label %then.19, label %else.19

then.19:                                          ; preds = %label.6
  %field.54 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 0, !dbg !1596
  %tmpv.10.field.ld.19 = load i8*, i8** %field.54, align 8, !dbg !1596
  %field.55 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.35, i32 0, i32 0, !dbg !1596
  %tmpv.35.field.ld.1 = load i8*, i8** %field.55, align 8, !dbg !1596
  %icmp.32 = icmp eq i8* %tmpv.10.field.ld.19, %tmpv.35.field.ld.1, !dbg !1596
  %zext.32 = zext i1 %icmp.32 to i8, !dbg !1596
  %trunc.19 = trunc i8 %zext.32 to i1, !dbg !1596
  br i1 %trunc.19, label %then.20, label %else.20

fallthrough.19:                                   ; preds = %else.19, %fallthrough.20
  %tmpv.37.ld.0 = load i8, i8* %tmpv.37, align 1, !dbg !1596
  %icmp.34 = icmp eq i8 %tmpv.37.ld.0, 1, !dbg !1596
  %zext.34 = zext i1 %icmp.34 to i8, !dbg !1596
  %icmp.35 = icmp ne i8 %zext.34, 0, !dbg !1596
  %xor.6 = xor i1 %icmp.35, true, !dbg !1596
  %zext.35 = zext i1 %xor.6 to i8, !dbg !1596
  %trunc.21 = trunc i8 %zext.35 to i1, !dbg !1596
  br i1 %trunc.21, label %then.21, label %else.21

else.19:                                          ; preds = %label.6
  store i8 0, i8* %tmpv.37, align 1, !dbg !1596
  br label %fallthrough.19

then.20:                                          ; preds = %then.19
  store i8 1, i8* %tmpv.36, align 1
  br label %fallthrough.20

fallthrough.20:                                   ; preds = %else.20, %then.20
  %tmpv.36.ld.0 = load i8, i8* %tmpv.36, align 1, !dbg !1596
  store i8 %tmpv.36.ld.0, i8* %tmpv.37, align 1
  br label %fallthrough.19

else.20:                                          ; preds = %then.19
  %field.56 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 0, !dbg !1596
  %tmpv.10.field.ld.20 = load i8*, i8** %field.56, align 8, !dbg !1596
  %field.57 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.35, i32 0, i32 0, !dbg !1596
  %tmpv.35.field.ld.2 = load i8*, i8** %field.57, align 8, !dbg !1596
  %field.58 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.35, i32 0, i32 1, !dbg !1596
  %tmpv.35.field.ld.3 = load i64, i64* %field.58, align 8, !dbg !1596
  %call.8 = call i32 @memcmp(i8* %tmpv.10.field.ld.20, i8* %tmpv.35.field.ld.2, i64 %tmpv.35.field.ld.3), !dbg !1596
  %icmp.33 = icmp eq i32 %call.8, 0, !dbg !1596
  %zext.33 = zext i1 %icmp.33 to i8, !dbg !1596
  store i8 %zext.33, i8* %tmpv.36, align 1, !dbg !1596
  br label %fallthrough.20

then.21:                                          ; preds = %fallthrough.19
  br label %label.7

fallthrough.21:                                   ; preds = %else.21
  %t.ld.6 = load %MarblesPrivateChaincode.0*, %MarblesPrivateChaincode.0** %t.addr, align 8, !dbg !1597
  %cast.218 = bitcast %ChaincodeStubInterface.0* %stub.addr to { i8*, i8* }*, !dbg !1598
  %field0.7 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.218, i32 0, i32 0, !dbg !1598
  %ld.12 = load i8*, i8** %field0.7, align 8, !dbg !1598
  %field1.7 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.218, i32 0, i32 1, !dbg !1598
  %ld.13 = load i8*, i8** %field1.7, align 8, !dbg !1598
  call void @command_x2dline_x2darguments.MarblesPrivateChaincode.getMarbleHash(%Response.0* sret(%Response.0) "go_sret" %sret.actual.10, i8* nest undef, %MarblesPrivateChaincode.0* %t.ld.6, i8* %ld.12, i8* %ld.13, %IPST.7* byval(%IPST.7) %args), !dbg !1598
  %cast.219 = bitcast %Response.0* %tmpv.38 to i8*
  %cast.220 = bitcast %Response.0* %sret.actual.10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.219, i8* align 8 %cast.220, i64 80, i1 false)
  %cast.221 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1599
  %cast.222 = bitcast %Response.0* %tmpv.38 to i8*, !dbg !1599
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.221, i8* align 8 %cast.222, i64 80, i1 false), !dbg !1599
  %cast.223 = bitcast %Response.0* %sret.formal.1 to i8*, !dbg !1599
  %cast.224 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1599
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.223, i8* align 8 %cast.224, i64 80, i1 false), !dbg !1599
  %24 = bitcast { i8*, i64 }* %function to i8*, !dbg !1599
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %24), !dbg !1599
  %25 = bitcast %IPST.7* %args to i8*, !dbg !1599
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %25), !dbg !1599
  %26 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1599
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %26), !dbg !1599
  ret void, !dbg !1599

else.21:                                          ; preds = %fallthrough.19
  br label %fallthrough.21

label.7:                                          ; preds = %then.21
  %cast.225 = bitcast { i8*, i64 }* %tmpv.39 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.225, i8* align 8 bitcast ({ i8*, i64 }* @const.54 to i8*), i64 16, i1 false)
  %field.59 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 1, !dbg !1600
  %tmpv.10.field.ld.21 = load i64, i64* %field.59, align 8, !dbg !1600
  %field.60 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.39, i32 0, i32 1, !dbg !1600
  %tmpv.39.field.ld.0 = load i64, i64* %field.60, align 8, !dbg !1600
  %icmp.36 = icmp eq i64 %tmpv.10.field.ld.21, %tmpv.39.field.ld.0, !dbg !1600
  %zext.36 = zext i1 %icmp.36 to i8, !dbg !1600
  %trunc.23 = trunc i8 %zext.36 to i1, !dbg !1600
  br i1 %trunc.23, label %then.22, label %else.22

then.22:                                          ; preds = %label.7
  %field.61 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 0, !dbg !1600
  %tmpv.10.field.ld.22 = load i8*, i8** %field.61, align 8, !dbg !1600
  %field.62 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.39, i32 0, i32 0, !dbg !1600
  %tmpv.39.field.ld.1 = load i8*, i8** %field.62, align 8, !dbg !1600
  %icmp.37 = icmp eq i8* %tmpv.10.field.ld.22, %tmpv.39.field.ld.1, !dbg !1600
  %zext.37 = zext i1 %icmp.37 to i8, !dbg !1600
  %trunc.22 = trunc i8 %zext.37 to i1, !dbg !1600
  br i1 %trunc.22, label %then.23, label %else.23

fallthrough.22:                                   ; preds = %else.22, %fallthrough.23
  %tmpv.41.ld.0 = load i8, i8* %tmpv.41, align 1, !dbg !1600
  %icmp.39 = icmp eq i8 %tmpv.41.ld.0, 1, !dbg !1600
  %zext.39 = zext i1 %icmp.39 to i8, !dbg !1600
  %icmp.40 = icmp ne i8 %zext.39, 0, !dbg !1600
  %xor.7 = xor i1 %icmp.40, true, !dbg !1600
  %zext.40 = zext i1 %xor.7 to i8, !dbg !1600
  %trunc.24 = trunc i8 %zext.40 to i1, !dbg !1600
  br i1 %trunc.24, label %then.24, label %else.24

else.22:                                          ; preds = %label.7
  store i8 0, i8* %tmpv.41, align 1, !dbg !1600
  br label %fallthrough.22

then.23:                                          ; preds = %then.22
  store i8 1, i8* %tmpv.40, align 1
  br label %fallthrough.23

fallthrough.23:                                   ; preds = %else.23, %then.23
  %tmpv.40.ld.0 = load i8, i8* %tmpv.40, align 1, !dbg !1600
  store i8 %tmpv.40.ld.0, i8* %tmpv.41, align 1
  br label %fallthrough.22

else.23:                                          ; preds = %then.22
  %field.63 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 0, !dbg !1600
  %tmpv.10.field.ld.23 = load i8*, i8** %field.63, align 8, !dbg !1600
  %field.64 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.39, i32 0, i32 0, !dbg !1600
  %tmpv.39.field.ld.2 = load i8*, i8** %field.64, align 8, !dbg !1600
  %field.65 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.39, i32 0, i32 1, !dbg !1600
  %tmpv.39.field.ld.3 = load i64, i64* %field.65, align 8, !dbg !1600
  %call.9 = call i32 @memcmp(i8* %tmpv.10.field.ld.23, i8* %tmpv.39.field.ld.2, i64 %tmpv.39.field.ld.3), !dbg !1600
  %icmp.38 = icmp eq i32 %call.9, 0, !dbg !1600
  %zext.38 = zext i1 %icmp.38 to i8, !dbg !1600
  store i8 %zext.38, i8* %tmpv.40, align 1, !dbg !1600
  br label %fallthrough.23

then.24:                                          ; preds = %fallthrough.22
  br label %label.8

fallthrough.24:                                   ; preds = %else.24
  %t.ld.7 = load %MarblesPrivateChaincode.0*, %MarblesPrivateChaincode.0** %t.addr, align 8, !dbg !1601
  %cast.226 = bitcast %ChaincodeStubInterface.0* %stub.addr to { i8*, i8* }*, !dbg !1602
  %field0.8 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.226, i32 0, i32 0, !dbg !1602
  %ld.14 = load i8*, i8** %field0.8, align 8, !dbg !1602
  %field1.8 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.226, i32 0, i32 1, !dbg !1602
  %ld.15 = load i8*, i8** %field1.8, align 8, !dbg !1602
  call void @command_x2dline_x2darguments.MarblesPrivateChaincode.getMarblePrivateDetailsHash(%Response.0* sret(%Response.0) "go_sret" %sret.actual.11, i8* nest undef, %MarblesPrivateChaincode.0* %t.ld.7, i8* %ld.14, i8* %ld.15, %IPST.7* byval(%IPST.7) %args), !dbg !1602
  %cast.227 = bitcast %Response.0* %tmpv.42 to i8*
  %cast.228 = bitcast %Response.0* %sret.actual.11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.227, i8* align 8 %cast.228, i64 80, i1 false)
  %cast.229 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1603
  %cast.230 = bitcast %Response.0* %tmpv.42 to i8*, !dbg !1603
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.229, i8* align 8 %cast.230, i64 80, i1 false), !dbg !1603
  %cast.231 = bitcast %Response.0* %sret.formal.1 to i8*, !dbg !1603
  %cast.232 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1603
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.231, i8* align 8 %cast.232, i64 80, i1 false), !dbg !1603
  %27 = bitcast { i8*, i64 }* %function to i8*, !dbg !1603
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %27), !dbg !1603
  %28 = bitcast %IPST.7* %args to i8*, !dbg !1603
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %28), !dbg !1603
  %29 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1603
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %29), !dbg !1603
  ret void, !dbg !1603

else.24:                                          ; preds = %fallthrough.22
  br label %fallthrough.24

label.8:                                          ; preds = %then.24
  %cast.233 = bitcast { i8*, i64 }* %tmpv.43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.233, i8* align 8 bitcast ({ i8*, i64 }* @const.55 to i8*), i64 16, i1 false)
  %field.66 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 1, !dbg !1604
  %tmpv.10.field.ld.24 = load i64, i64* %field.66, align 8, !dbg !1604
  %field.67 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.43, i32 0, i32 1, !dbg !1604
  %tmpv.43.field.ld.0 = load i64, i64* %field.67, align 8, !dbg !1604
  %icmp.41 = icmp eq i64 %tmpv.10.field.ld.24, %tmpv.43.field.ld.0, !dbg !1604
  %zext.41 = zext i1 %icmp.41 to i8, !dbg !1604
  %trunc.26 = trunc i8 %zext.41 to i1, !dbg !1604
  br i1 %trunc.26, label %then.25, label %else.25

then.25:                                          ; preds = %label.8
  %field.68 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 0, !dbg !1604
  %tmpv.10.field.ld.25 = load i8*, i8** %field.68, align 8, !dbg !1604
  %field.69 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.43, i32 0, i32 0, !dbg !1604
  %tmpv.43.field.ld.1 = load i8*, i8** %field.69, align 8, !dbg !1604
  %icmp.42 = icmp eq i8* %tmpv.10.field.ld.25, %tmpv.43.field.ld.1, !dbg !1604
  %zext.42 = zext i1 %icmp.42 to i8, !dbg !1604
  %trunc.25 = trunc i8 %zext.42 to i1, !dbg !1604
  br i1 %trunc.25, label %then.26, label %else.26

fallthrough.25:                                   ; preds = %else.25, %fallthrough.26
  %tmpv.45.ld.0 = load i8, i8* %tmpv.45, align 1, !dbg !1604
  %icmp.44 = icmp eq i8 %tmpv.45.ld.0, 1, !dbg !1604
  %zext.44 = zext i1 %icmp.44 to i8, !dbg !1604
  %icmp.45 = icmp ne i8 %zext.44, 0, !dbg !1604
  %xor.8 = xor i1 %icmp.45, true, !dbg !1604
  %zext.45 = zext i1 %xor.8 to i8, !dbg !1604
  %trunc.27 = trunc i8 %zext.45 to i1, !dbg !1604
  br i1 %trunc.27, label %then.27, label %else.27

else.25:                                          ; preds = %label.8
  store i8 0, i8* %tmpv.45, align 1, !dbg !1604
  br label %fallthrough.25

then.26:                                          ; preds = %then.25
  store i8 1, i8* %tmpv.44, align 1
  br label %fallthrough.26

fallthrough.26:                                   ; preds = %else.26, %then.26
  %tmpv.44.ld.0 = load i8, i8* %tmpv.44, align 1, !dbg !1604
  store i8 %tmpv.44.ld.0, i8* %tmpv.45, align 1
  br label %fallthrough.25

else.26:                                          ; preds = %then.25
  %field.70 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.10, i32 0, i32 0, !dbg !1604
  %tmpv.10.field.ld.26 = load i8*, i8** %field.70, align 8, !dbg !1604
  %field.71 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.43, i32 0, i32 0, !dbg !1604
  %tmpv.43.field.ld.2 = load i8*, i8** %field.71, align 8, !dbg !1604
  %field.72 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.43, i32 0, i32 1, !dbg !1604
  %tmpv.43.field.ld.3 = load i64, i64* %field.72, align 8, !dbg !1604
  %call.10 = call i32 @memcmp(i8* %tmpv.10.field.ld.26, i8* %tmpv.43.field.ld.2, i64 %tmpv.43.field.ld.3), !dbg !1604
  %icmp.43 = icmp eq i32 %call.10, 0, !dbg !1604
  %zext.43 = zext i1 %icmp.43 to i8, !dbg !1604
  store i8 %zext.43, i8* %tmpv.44, align 1, !dbg !1604
  br label %fallthrough.26

then.27:                                          ; preds = %fallthrough.25
  br label %label.9

fallthrough.27:                                   ; preds = %else.27
  %t.ld.8 = load %MarblesPrivateChaincode.0*, %MarblesPrivateChaincode.0** %t.addr, align 8, !dbg !1605
  %cast.234 = bitcast %ChaincodeStubInterface.0* %stub.addr to { i8*, i8* }*, !dbg !1606
  %field0.9 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.234, i32 0, i32 0, !dbg !1606
  %ld.16 = load i8*, i8** %field0.9, align 8, !dbg !1606
  %field1.9 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.234, i32 0, i32 1, !dbg !1606
  %ld.17 = load i8*, i8** %field1.9, align 8, !dbg !1606
  call void @command_x2dline_x2darguments.MarblesPrivateChaincode.checkEndorsingOrg(%Response.0* sret(%Response.0) "go_sret" %sret.actual.12, i8* nest undef, %MarblesPrivateChaincode.0* %t.ld.8, i8* %ld.16, i8* %ld.17), !dbg !1606
  %cast.235 = bitcast %Response.0* %tmpv.46 to i8*
  %cast.236 = bitcast %Response.0* %sret.actual.12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.235, i8* align 8 %cast.236, i64 80, i1 false)
  %cast.237 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1607
  %cast.238 = bitcast %Response.0* %tmpv.46 to i8*, !dbg !1607
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.237, i8* align 8 %cast.238, i64 80, i1 false), !dbg !1607
  %cast.239 = bitcast %Response.0* %sret.formal.1 to i8*, !dbg !1607
  %cast.240 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1607
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.239, i8* align 8 %cast.240, i64 80, i1 false), !dbg !1607
  %30 = bitcast { i8*, i64 }* %function to i8*, !dbg !1607
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %30), !dbg !1607
  %31 = bitcast %IPST.7* %args to i8*, !dbg !1607
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %31), !dbg !1607
  %32 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1607
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %32), !dbg !1607
  ret void, !dbg !1607

else.27:                                          ; preds = %fallthrough.25
  br label %fallthrough.27

label.9:                                          ; preds = %then.27
  %index.3 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.48, i32 0, i32 0, !dbg !1608
  %cast.241 = bitcast { i8*, i64 }* %index.3 to i8*, !dbg !1608
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.241, i8* align 8 bitcast ({ i8*, i64 }* @const.57 to i8*), i64 16, i1 false), !dbg !1608
  %index.4 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.48, i32 0, i32 1, !dbg !1608
  %cast.242 = bitcast { i8*, i64 }* %index.4 to i8*, !dbg !1608
  %cast.243 = bitcast { i8*, i64 }* %function to i8*, !dbg !1608
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.242, i8* align 8 %cast.243, i64 16, i1 false), !dbg !1608
  %call.11 = call i8* @runtime.newobject(i8* nest undef, %_type.0* @string..d), !dbg !1609
  %cast.244 = bitcast i8* %call.11 to { i8*, i64 }*, !dbg !1609
  store { i8*, i64 }* %cast.244, { i8*, i64 }** %tmpv.49, align 8
  %cast.245 = bitcast [2 x { i8*, i64 }]* %tmpv.48 to i8*, !dbg !1608
  %call.12 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.245, i64 2), !dbg !1608
  store { i8*, i64 } %call.12, { i8*, i64 }* %sret.actual.13, align 8, !dbg !1608
  %cast.248 = bitcast { i8*, i64 }* %tmpv.50 to i8*
  %cast.249 = bitcast { i8*, i64 }* %sret.actual.13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.248, i8* align 8 %cast.249, i64 16, i1 false)
  %deref.ld.1 = load i32, i32* bitcast ({ i8, [3 x i8], i8, i8, i64 }* @runtime.writeBarrier to i32*), align 4, !dbg !1609
  %icmp.46 = icmp eq i32 %deref.ld.1, 0, !dbg !1609
  %zext.46 = zext i1 %icmp.46 to i8, !dbg !1609
  %trunc.28 = trunc i8 %zext.46 to i1, !dbg !1609
  br i1 %trunc.28, label %then.28, label %else.28

then.28:                                          ; preds = %label.9
  %tmpv.49.ld.0 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.49, align 8, !dbg !1609
  %cast.250 = bitcast { i8*, i64 }* %tmpv.49.ld.0 to i8*, !dbg !1609
  %cast.251 = bitcast { i8*, i64 }* %tmpv.50 to i8*, !dbg !1609
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.250, i8* align 8 %cast.251, i64 16, i1 false), !dbg !1609
  br label %fallthrough.28

fallthrough.28:                                   ; preds = %else.28, %then.28
  %tmpv.49.ld.2 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.49, align 8, !dbg !1609
  %field.73 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.2, i32 0, i32 0, !dbg !1609
  store %_type.0* @string..d, %_type.0** %field.73, align 8, !dbg !1609
  %field.74 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.2, i32 0, i32 1, !dbg !1609
  %cast.256 = bitcast { i8*, i64 }* %tmpv.49.ld.2 to i8*, !dbg !1609
  store i8* %cast.256, i8** %field.74, align 8, !dbg !1609
  %index.5 = getelementptr [1 x %IPST.3], [1 x %IPST.3]* %tmpv.51, i32 0, i32 0, !dbg !1609
  %cast.257 = bitcast %IPST.3* %index.5 to i8*, !dbg !1609
  %cast.258 = bitcast %IPST.3* %tmp.2 to i8*, !dbg !1609
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.257, i8* align 8 %cast.258, i64 16, i1 false), !dbg !1609
  %cast.259 = bitcast [1 x %IPST.3]* %tmpv.51 to %IPST.3*, !dbg !1609
  %field.75 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.3, i32 0, i32 0, !dbg !1609
  store %IPST.3* %cast.259, %IPST.3** %field.75, align 8, !dbg !1609
  %field.76 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.3, i32 0, i32 1, !dbg !1609
  store i64 1, i64* %field.76, align 8, !dbg !1609
  %field.77 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.3, i32 0, i32 2, !dbg !1609
  store i64 1, i64* %field.77, align 8, !dbg !1609
  call void @fmt.Println({ i64, %error.0 }* sret({ i64, %error.0 }) "go_sret" %sret.actual.14, i8* nest undef, %IPST.52* byval(%IPST.52) %tmp.3), !dbg !1609
  %cast.260 = bitcast { i64, %error.0 }* %tmpv.47 to i8*, !dbg !1609
  %cast.261 = bitcast { i64, %error.0 }* %sret.actual.14 to i8*, !dbg !1609
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.260, i8* align 8 %cast.261, i64 24, i1 false), !dbg !1609
  %ld.18 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.59, i32 0, i32 0), align 8, !dbg !1610
  %ld.19 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.59, i32 0, i32 1), align 8, !dbg !1610
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.15, i8* nest undef, i8* %ld.18, i64 %ld.19), !dbg !1610
  %cast.263 = bitcast %Response.0* %tmpv.52 to i8*
  %cast.264 = bitcast %Response.0* %sret.actual.15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.263, i8* align 8 %cast.264, i64 80, i1 false)
  %cast.265 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1611
  %cast.266 = bitcast %Response.0* %tmpv.52 to i8*, !dbg !1611
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.265, i8* align 8 %cast.266, i64 80, i1 false), !dbg !1611
  %cast.267 = bitcast %Response.0* %sret.formal.1 to i8*, !dbg !1611
  %cast.268 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1611
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.267, i8* align 8 %cast.268, i64 80, i1 false), !dbg !1611
  %33 = bitcast { i8*, i64 }* %function to i8*, !dbg !1611
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %33), !dbg !1611
  %34 = bitcast %IPST.7* %args to i8*, !dbg !1611
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %34), !dbg !1611
  %35 = bitcast %Response.0* %"$ret1" to i8*, !dbg !1611
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %35), !dbg !1611
  ret void, !dbg !1611

else.28:                                          ; preds = %label.9
  %tmpv.49.ld.1 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.49, align 8, !dbg !1609
  %cast.252 = bitcast { i8*, i64 }* %tmpv.49.ld.1 to i8*, !dbg !1609
  %cast.253 = bitcast { i8*, i64 }* %tmpv.50 to i8*, !dbg !1609
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* @string..d, i8* %cast.252, i8* %cast.253), !dbg !1609
  br label %fallthrough.28
}

define void @command_x2dline_x2darguments.MarblesPrivateChaincode.checkEndorsingOrg(%Response.0* sret(%Response.0) %sret.formal.10, i8* nest %nest.10, %MarblesPrivateChaincode.0* %t, i8* %stub.chunk0, i8* %stub.chunk1) #0 !dbg !1612 {
entry:
  %tmp.36 = alloca %IPST.52, align 8
  %tmp.35 = alloca %IPST.3, align 8
  %tmp.34 = alloca %IPST.3, align 8
  %tmp.33 = alloca %IPST.52, align 8
  %tmp.32 = alloca %IPST.3, align 8
  %tmp.31 = alloca %IPST.52, align 8
  %tmp.30 = alloca %IPST.3, align 8
  %t.addr = alloca %MarblesPrivateChaincode.0*, align 8
  %stub.addr = alloca %ChaincodeStubInterface.0, align 8
  %"$ret10" = alloca %Response.0, align 8
  %transient = alloca { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, align 8
  %err = alloca %error.0, align 8
  %peerOrgMSP = alloca { i8*, i64 }, align 8
  %result = alloca { i8*, i64 }, align 8
  %tmpv.323 = alloca { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }, align 8
  %sret.actual.173 = alloca { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }, align 8
  %tmpv.324 = alloca { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, align 8
  %tmpv.325 = alloca %error.0, align 8
  %tmpv.326 = alloca [1 x %IPST.3], align 8
  %tmpv.327 = alloca %_type.0*, align 8
  %tmpv.328 = alloca { i8*, i64 }, align 8
  %sret.actual.174 = alloca { i8*, i64 }, align 8
  %tmpv.329 = alloca %Response.0, align 8
  %sret.actual.175 = alloca %Response.0, align 8
  %tmpv.330 = alloca { { i8*, i64 }, %error.0 }, align 8
  %sret.actual.176 = alloca { { i8*, i64 }, %error.0 }, align 8
  %tmpv.331 = alloca { i8*, i64 }, align 8
  %tmpv.332 = alloca %error.0, align 8
  %tmpv.333 = alloca [1 x %IPST.3], align 8
  %tmpv.334 = alloca %_type.0*, align 8
  %tmpv.335 = alloca { i8*, i64 }, align 8
  %sret.actual.177 = alloca { i8*, i64 }, align 8
  %tmpv.336 = alloca %Response.0, align 8
  %sret.actual.178 = alloca %Response.0, align 8
  %ok = alloca i8, align 1
  %tmpv.337 = alloca { i8*, i64 }, align 8
  %tmpv.338 = alloca %IPST.0*, align 8
  %tmpv.339 = alloca i8, align 1
  %tmpv.340 = alloca { i8*, i8 }, align 8
  %sret.actual.179 = alloca { i8*, i8 }, align 8
  %tmpv.341 = alloca i8*, align 8
  %tmpv.342 = alloca i8, align 1
  %expectedMSPs = alloca %IPST.7, align 8
  call void @llvm.dbg.declare(metadata %IPST.7* %expectedMSPs, metadata !1613, metadata !DIExpression()), !dbg !1617
  %tmpv.343 = alloca i64, align 8
  %tmpv.344 = alloca i64, align 8
  %k = alloca { i8*, i64 }, align 8
  %tmpv.345 = alloca { i8*, i64 }, align 8
  %tmpv.346 = alloca %IPST.2, align 8, !go_addrtaken !46
  %tmpv.347 = alloca %IPST.7, align 8
  %tmpv.348 = alloca i64, align 8
  %tmpv.349 = alloca i64, align 8
  %tmpv.350 = alloca i64, align 8
  %sret.actual.180 = alloca { i8**, i64, i64 }, align 8
  %tmpv.351 = alloca i64, align 8
  %tmpv.352 = alloca i64, align 8
  %tmpv.353 = alloca { i8*, i64 }*, align 8
  %tmpv.354 = alloca { i8*, i64 }*, align 8
  %tmpv.355 = alloca { i8*, i64 }*, align 8
  %tmpv.356 = alloca { i8*, i64 }*, align 8
  %tmpv.357 = alloca %IPST.7*, align 8, !go_addrtaken !46
  %tmpv.358 = alloca %IPST.7, align 8, !go_addrtaken !46
  %tmpv.359 = alloca { i8*, i64 }*, align 8, !go_addrtaken !46
  %tmpv.360 = alloca { i8*, i64 }, align 8, !go_addrtaken !46
  %tmpv.361 = alloca [2 x %IPST.3], align 8
  %tmpv.362 = alloca { i8*, i64 }, align 8
  %sret.actual.181 = alloca { i8*, i64 }, align 8
  %tmpv.363 = alloca %Response.0, align 8
  %sret.actual.182 = alloca { i8**, i64, i64 }, align 8
  %sret.actual.183 = alloca %Response.0, align 8
  store %MarblesPrivateChaincode.0* %t, %MarblesPrivateChaincode.0** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %MarblesPrivateChaincode.0** %t.addr, metadata !1618, metadata !DIExpression()), !dbg !1619
  %cast.1726 = bitcast %ChaincodeStubInterface.0* %stub.addr to { i8*, i8* }*
  %field0.133 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1726, i32 0, i32 0
  store i8* %stub.chunk0, i8** %field0.133, align 8
  %field1.133 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1726, i32 0, i32 1
  store i8* %stub.chunk1, i8** %field1.133, align 8
  call void @llvm.dbg.declare(metadata %ChaincodeStubInterface.0* %stub.addr, metadata !1620, metadata !DIExpression()), !dbg !1621
  %0 = bitcast %Response.0* %"$ret10" to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* %0)
  %cast.1725 = bitcast %Response.0* %"$ret10" to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1725, i8* align 8 bitcast (%Response.0* @const.44 to i8*), i64 80, i1 false)
  call void @llvm.dbg.declare(metadata %Response.0* %"$ret10", metadata !1622, metadata !DIExpression()), !dbg !1623
  %1 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transient to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1)
  %2 = bitcast %error.0* %err to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %2)
  %3 = bitcast { i8*, i64 }* %peerOrgMSP to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %3)
  %4 = bitcast { i8*, i64 }* %result to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %4)
  %field.443 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 0, !dbg !1624
  %stub.field.ld.42 = load { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }** %field.443, align 8, !dbg !1624
  %field.444 = getelementptr inbounds { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }* %stub.field.ld.42, i32 0, i32 28, !dbg !1624
  %.field.ld.49 = load void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)** %field.444, align 8, !dbg !1624
  %field.445 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 1, !dbg !1624
  %stub.field.ld.43 = load i8*, i8** %field.445, align 8, !dbg !1624
  call void %.field.ld.49({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }* sret({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }) "go_sret" %sret.actual.173, i8* nest undef, i8* %stub.field.ld.43), !dbg !1624
  %cast.1596 = bitcast { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }* %tmpv.323 to i8*, !dbg !1624
  %cast.1597 = bitcast { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }* %sret.actual.173 to i8*, !dbg !1624
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1596, i8* align 8 %cast.1597, i64 24, i1 false), !dbg !1624
  %field.446 = getelementptr inbounds { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }, { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }* %tmpv.323, i32 0, i32 0, !dbg !1624
  %tmpv.323.field.ld.0 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %field.446, align 8, !dbg !1624
  store { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %tmpv.323.field.ld.0, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %tmpv.324, align 8
  %tmpv.324.ld.0 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %tmpv.324, align 8, !dbg !1624
  store { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %tmpv.324.ld.0, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transient, align 8
  call void @llvm.dbg.declare(metadata { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transient, metadata !1625, metadata !DIExpression()), !dbg !1626
  %field.447 = getelementptr inbounds { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }, { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }* %tmpv.323, i32 0, i32 1, !dbg !1624
  %cast.1598 = bitcast %error.0* %tmpv.325 to i8*
  %cast.1599 = bitcast %error.0* %field.447 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1598, i8* align 8 %cast.1599, i64 16, i1 false)
  %cast.1600 = bitcast %error.0* %err to i8*
  %cast.1601 = bitcast %error.0* %tmpv.325 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1600, i8* align 8 %cast.1601, i64 16, i1 false)
  call void @llvm.dbg.declare(metadata %error.0* %err, metadata !1627, metadata !DIExpression()), !dbg !1626
  %field.457 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1628
  %err.field.ld.75 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.457, align 8, !dbg !1628
  %icmp.137 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.75, null, !dbg !1628
  %zext.136 = zext i1 %icmp.137 to i8, !dbg !1628
  %trunc.114 = trunc i8 %zext.136 to i1, !dbg !1629
  br i1 %trunc.114, label %then.113, label %else.113

then.113:                                         ; preds = %entry
  %field.448 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1630
  %err.field.ld.72 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.448, align 8, !dbg !1630
  %icmp.136 = icmp eq { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.72, null, !dbg !1630
  %zext.135 = zext i1 %icmp.136 to i8, !dbg !1630
  %trunc.113 = trunc i8 %zext.135 to i1, !dbg !1630
  br i1 %trunc.113, label %then.114, label %else.114

fallthrough.113:                                  ; preds = %else.113
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.GetMSPID({ { i8*, i64 }, %error.0 }* sret({ { i8*, i64 }, %error.0 }) "go_sret" %sret.actual.176, i8* nest undef), !dbg !1631
  %cast.1619 = bitcast { { i8*, i64 }, %error.0 }* %tmpv.330 to i8*, !dbg !1631
  %cast.1620 = bitcast { { i8*, i64 }, %error.0 }* %sret.actual.176 to i8*, !dbg !1631
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1619, i8* align 8 %cast.1620, i64 32, i1 false), !dbg !1631
  %field.458 = getelementptr inbounds { { i8*, i64 }, %error.0 }, { { i8*, i64 }, %error.0 }* %tmpv.330, i32 0, i32 0, !dbg !1631
  %cast.1621 = bitcast { i8*, i64 }* %tmpv.331 to i8*
  %cast.1622 = bitcast { i8*, i64 }* %field.458 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1621, i8* align 8 %cast.1622, i64 16, i1 false)
  %cast.1623 = bitcast { i8*, i64 }* %peerOrgMSP to i8*
  %cast.1624 = bitcast { i8*, i64 }* %tmpv.331 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1623, i8* align 8 %cast.1624, i64 16, i1 false)
  call void @llvm.dbg.declare(metadata { i8*, i64 }* %peerOrgMSP, metadata !1632, metadata !DIExpression()), !dbg !1633
  %field.459 = getelementptr inbounds { { i8*, i64 }, %error.0 }, { { i8*, i64 }, %error.0 }* %tmpv.330, i32 0, i32 1, !dbg !1631
  %cast.1625 = bitcast %error.0* %tmpv.332 to i8*
  %cast.1626 = bitcast %error.0* %field.459 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1625, i8* align 8 %cast.1626, i64 16, i1 false)
  %cast.1627 = bitcast %error.0* %err to i8*, !dbg !1634
  %cast.1628 = bitcast %error.0* %tmpv.332 to i8*, !dbg !1634
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1627, i8* align 8 %cast.1628, i64 16, i1 false), !dbg !1634
  %field.469 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1635
  %err.field.ld.79 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.469, align 8, !dbg !1635
  %icmp.139 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.79, null, !dbg !1635
  %zext.138 = zext i1 %icmp.139 to i8, !dbg !1635
  %trunc.116 = trunc i8 %zext.138 to i1, !dbg !1636
  br i1 %trunc.116, label %then.115, label %else.115

else.113:                                         ; preds = %entry
  br label %fallthrough.113

then.114:                                         ; preds = %then.113
  store %_type.0* null, %_type.0** %tmpv.327, align 8
  br label %fallthrough.114

fallthrough.114:                                  ; preds = %else.114, %then.114
  %tmpv.327.ld.0 = load %_type.0*, %_type.0** %tmpv.327, align 8, !dbg !1630
  %field.451 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !1637
  %err.field.ld.74 = load i8*, i8** %field.451, align 8, !dbg !1637
  %field.452 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.30, i32 0, i32 0, !dbg !1637
  store %_type.0* %tmpv.327.ld.0, %_type.0** %field.452, align 8, !dbg !1637
  %field.453 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.30, i32 0, i32 1, !dbg !1637
  store i8* %err.field.ld.74, i8** %field.453, align 8, !dbg !1637
  %index.76 = getelementptr [1 x %IPST.3], [1 x %IPST.3]* %tmpv.326, i32 0, i32 0, !dbg !1637
  %cast.1604 = bitcast %IPST.3* %index.76 to i8*, !dbg !1637
  %cast.1605 = bitcast %IPST.3* %tmp.30 to i8*, !dbg !1637
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1604, i8* align 8 %cast.1605, i64 16, i1 false), !dbg !1637
  %cast.1606 = bitcast [1 x %IPST.3]* %tmpv.326 to %IPST.3*, !dbg !1637
  %field.454 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.31, i32 0, i32 0, !dbg !1637
  store %IPST.3* %cast.1606, %IPST.3** %field.454, align 8, !dbg !1637
  %field.455 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.31, i32 0, i32 1, !dbg !1637
  store i64 1, i64* %field.455, align 8, !dbg !1637
  %field.456 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.31, i32 0, i32 2, !dbg !1637
  store i64 1, i64* %field.456, align 8, !dbg !1637
  %ld.232 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.189, i32 0, i32 0), align 8, !dbg !1637
  %ld.233 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.189, i32 0, i32 1), align 8, !dbg !1637
  %call.92 = call { i8*, i64 } @fmt.Sprintf(i8* nest undef, i8* %ld.232, i64 %ld.233, %IPST.52* byval(%IPST.52) %tmp.31), !dbg !1637
  store { i8*, i64 } %call.92, { i8*, i64 }* %sret.actual.174, align 8, !dbg !1637
  %cast.1609 = bitcast { i8*, i64 }* %tmpv.328 to i8*
  %cast.1610 = bitcast { i8*, i64 }* %sret.actual.174 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1609, i8* align 8 %cast.1610, i64 16, i1 false)
  %field0.127 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.328, i32 0, i32 0, !dbg !1638
  %ld.234 = load i8*, i8** %field0.127, align 8, !dbg !1638
  %field1.127 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.328, i32 0, i32 1, !dbg !1638
  %ld.235 = load i64, i64* %field1.127, align 8, !dbg !1638
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.175, i8* nest undef, i8* %ld.234, i64 %ld.235), !dbg !1638
  %cast.1612 = bitcast %Response.0* %tmpv.329 to i8*
  %cast.1613 = bitcast %Response.0* %sret.actual.175 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1612, i8* align 8 %cast.1613, i64 80, i1 false)
  %cast.1614 = bitcast %Response.0* %"$ret10" to i8*, !dbg !1639
  %cast.1615 = bitcast %Response.0* %tmpv.329 to i8*, !dbg !1639
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1614, i8* align 8 %cast.1615, i64 80, i1 false), !dbg !1639
  %cast.1616 = bitcast %Response.0* %sret.formal.10 to i8*, !dbg !1639
  %cast.1617 = bitcast %Response.0* %"$ret10" to i8*, !dbg !1639
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1616, i8* align 8 %cast.1617, i64 80, i1 false), !dbg !1639
  %5 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transient to i8*, !dbg !1639
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %5), !dbg !1639
  %6 = bitcast %error.0* %err to i8*, !dbg !1639
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %6), !dbg !1639
  %7 = bitcast { i8*, i64 }* %peerOrgMSP to i8*, !dbg !1639
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %7), !dbg !1639
  %8 = bitcast { i8*, i64 }* %result to i8*, !dbg !1639
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %8), !dbg !1639
  %9 = bitcast %Response.0* %"$ret10" to i8*, !dbg !1639
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %9), !dbg !1639
  ret void, !dbg !1639

else.114:                                         ; preds = %then.113
  %field.449 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1630
  %err.field.ld.73 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.449, align 8, !dbg !1630
  %field.450 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.73, i32 0, i32 0, !dbg !1630
  %.field.ld.50 = load %_type.0*, %_type.0** %field.450, align 8, !dbg !1630
  store %_type.0* %.field.ld.50, %_type.0** %tmpv.327, align 8, !dbg !1630
  br label %fallthrough.114

then.115:                                         ; preds = %fallthrough.113
  %field.460 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1640
  %err.field.ld.76 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.460, align 8, !dbg !1640
  %icmp.138 = icmp eq { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.76, null, !dbg !1640
  %zext.137 = zext i1 %icmp.138 to i8, !dbg !1640
  %trunc.115 = trunc i8 %zext.137 to i1, !dbg !1640
  br i1 %trunc.115, label %then.116, label %else.116

fallthrough.115:                                  ; preds = %else.115
  %cast.1646 = bitcast { i8*, i64 }* %result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1646, i8* align 8 bitcast ({ i8*, i64 }* @const.116 to i8*), i64 16, i1 false)
  call void @llvm.dbg.declare(metadata { i8*, i64 }* %result, metadata !1641, metadata !DIExpression()), !dbg !1642
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %ok)
  store i8 0, i8* %ok, align 1
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !1643, metadata !DIExpression()), !dbg !1644
  %cast.1647 = bitcast { i8*, i64 }* %tmpv.337 to i8*
  %cast.1648 = bitcast { i8*, i64 }* %peerOrgMSP to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1647, i8* align 8 %cast.1648, i64 16, i1 false)
  %transient.ld.0 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transient, align 8, !dbg !1645
  %field0.130 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.337, i32 0, i32 0, !dbg !1646
  %ld.240 = load i8*, i8** %field0.130, align 8, !dbg !1646
  %field1.130 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.337, i32 0, i32 1, !dbg !1646
  %ld.241 = load i64, i64* %field1.130, align 8, !dbg !1646
  %call.94 = call { i8*, i8 } @runtime.mapaccess2__faststr(i8* nest undef, %_type.0* getelementptr inbounds (%MapType.0, %MapType.0* @type..map_6string_7_6_7uint8, i32 0, i32 0), { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %transient.ld.0, i8* %ld.240, i64 %ld.241), !dbg !1646
  store { i8*, i8 } %call.94, { i8*, i8 }* %sret.actual.179, align 8, !dbg !1646
  %cast.1652 = bitcast { i8*, i8 }* %tmpv.340 to i8*, !dbg !1646
  %cast.1653 = bitcast { i8*, i8 }* %sret.actual.179 to i8*, !dbg !1646
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1652, i8* align 8 %cast.1653, i64 16, i1 false), !dbg !1646
  %field.470 = getelementptr inbounds { i8*, i8 }, { i8*, i8 }* %tmpv.340, i32 0, i32 0, !dbg !1646
  %tmpv.340.field.ld.0 = load i8*, i8** %field.470, align 8, !dbg !1646
  store i8* %tmpv.340.field.ld.0, i8** %tmpv.341, align 8
  %tmpv.341.ld.0 = load i8*, i8** %tmpv.341, align 8, !dbg !1646
  %cast.1654 = bitcast i8* %tmpv.341.ld.0 to %IPST.0*, !dbg !1646
  store %IPST.0* %cast.1654, %IPST.0** %tmpv.338, align 8, !dbg !1646
  %field.471 = getelementptr inbounds { i8*, i8 }, { i8*, i8 }* %tmpv.340, i32 0, i32 1, !dbg !1646
  %tmpv.340.field.ld.1 = load i8, i8* %field.471, align 1, !dbg !1646
  store i8 %tmpv.340.field.ld.1, i8* %tmpv.342, align 1
  %tmpv.342.ld.0 = load i8, i8* %tmpv.342, align 1, !dbg !1646
  store i8 %tmpv.342.ld.0, i8* %tmpv.339, align 1, !dbg !1646
  %tmpv.338.ld.0 = load %IPST.0*, %IPST.0** %tmpv.338, align 8, !dbg !1646
  %tmpv.339.ld.0 = load i8, i8* %tmpv.339, align 1, !dbg !1646
  store i8 %tmpv.339.ld.0, i8* %ok, align 1, !dbg !1646
  %ok.ld.3 = load i8, i8* %ok, align 1, !dbg !1647
  %trunc.127 = trunc i8 %ok.ld.3 to i1, !dbg !1648
  br i1 %trunc.127, label %then.117, label %else.117

else.115:                                         ; preds = %fallthrough.113
  br label %fallthrough.115

then.116:                                         ; preds = %then.115
  store %_type.0* null, %_type.0** %tmpv.334, align 8
  br label %fallthrough.116

fallthrough.116:                                  ; preds = %else.116, %then.116
  %tmpv.334.ld.0 = load %_type.0*, %_type.0** %tmpv.334, align 8, !dbg !1640
  %field.463 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !1649
  %err.field.ld.78 = load i8*, i8** %field.463, align 8, !dbg !1649
  %field.464 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.32, i32 0, i32 0, !dbg !1649
  store %_type.0* %tmpv.334.ld.0, %_type.0** %field.464, align 8, !dbg !1649
  %field.465 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.32, i32 0, i32 1, !dbg !1649
  store i8* %err.field.ld.78, i8** %field.465, align 8, !dbg !1649
  %index.77 = getelementptr [1 x %IPST.3], [1 x %IPST.3]* %tmpv.333, i32 0, i32 0, !dbg !1649
  %cast.1631 = bitcast %IPST.3* %index.77 to i8*, !dbg !1649
  %cast.1632 = bitcast %IPST.3* %tmp.32 to i8*, !dbg !1649
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1631, i8* align 8 %cast.1632, i64 16, i1 false), !dbg !1649
  %cast.1633 = bitcast [1 x %IPST.3]* %tmpv.333 to %IPST.3*, !dbg !1649
  %field.466 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.33, i32 0, i32 0, !dbg !1649
  store %IPST.3* %cast.1633, %IPST.3** %field.466, align 8, !dbg !1649
  %field.467 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.33, i32 0, i32 1, !dbg !1649
  store i64 1, i64* %field.467, align 8, !dbg !1649
  %field.468 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.33, i32 0, i32 2, !dbg !1649
  store i64 1, i64* %field.468, align 8, !dbg !1649
  %ld.236 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.191, i32 0, i32 0), align 8, !dbg !1649
  %ld.237 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.191, i32 0, i32 1), align 8, !dbg !1649
  %call.93 = call { i8*, i64 } @fmt.Sprintf(i8* nest undef, i8* %ld.236, i64 %ld.237, %IPST.52* byval(%IPST.52) %tmp.33), !dbg !1649
  store { i8*, i64 } %call.93, { i8*, i64 }* %sret.actual.177, align 8, !dbg !1649
  %cast.1636 = bitcast { i8*, i64 }* %tmpv.335 to i8*
  %cast.1637 = bitcast { i8*, i64 }* %sret.actual.177 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1636, i8* align 8 %cast.1637, i64 16, i1 false)
  %field0.129 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.335, i32 0, i32 0, !dbg !1650
  %ld.238 = load i8*, i8** %field0.129, align 8, !dbg !1650
  %field1.129 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.335, i32 0, i32 1, !dbg !1650
  %ld.239 = load i64, i64* %field1.129, align 8, !dbg !1650
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.178, i8* nest undef, i8* %ld.238, i64 %ld.239), !dbg !1650
  %cast.1639 = bitcast %Response.0* %tmpv.336 to i8*
  %cast.1640 = bitcast %Response.0* %sret.actual.178 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1639, i8* align 8 %cast.1640, i64 80, i1 false)
  %cast.1641 = bitcast %Response.0* %"$ret10" to i8*, !dbg !1651
  %cast.1642 = bitcast %Response.0* %tmpv.336 to i8*, !dbg !1651
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1641, i8* align 8 %cast.1642, i64 80, i1 false), !dbg !1651
  %cast.1643 = bitcast %Response.0* %sret.formal.10 to i8*, !dbg !1651
  %cast.1644 = bitcast %Response.0* %"$ret10" to i8*, !dbg !1651
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1643, i8* align 8 %cast.1644, i64 80, i1 false), !dbg !1651
  %10 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transient to i8*, !dbg !1651
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %10), !dbg !1651
  %11 = bitcast %error.0* %err to i8*, !dbg !1651
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %11), !dbg !1651
  %12 = bitcast { i8*, i64 }* %peerOrgMSP to i8*, !dbg !1651
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %12), !dbg !1651
  %13 = bitcast { i8*, i64 }* %result to i8*, !dbg !1651
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %13), !dbg !1651
  %14 = bitcast %Response.0* %"$ret10" to i8*, !dbg !1651
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %14), !dbg !1651
  ret void, !dbg !1651

else.116:                                         ; preds = %then.115
  %field.461 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1640
  %err.field.ld.77 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.461, align 8, !dbg !1640
  %field.462 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.77, i32 0, i32 0, !dbg !1640
  %.field.ld.51 = load %_type.0*, %_type.0** %field.462, align 8, !dbg !1640
  store %_type.0* %.field.ld.51, %_type.0** %tmpv.334, align 8, !dbg !1640
  br label %fallthrough.116

then.117:                                         ; preds = %fallthrough.115
  %cast.1655 = bitcast { i8*, i64 }* %result to i8*, !dbg !1652
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1655, i8* align 8 bitcast ({ i8*, i64 }* @const.193 to i8*), i64 16, i1 false), !dbg !1652
  br label %fallthrough.117

fallthrough.117:                                  ; preds = %fallthrough.127, %then.117
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok)
  %field0.132 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %result, i32 0, i32 0, !dbg !1653
  %ld.244 = load i8*, i8** %field0.132, align 8, !dbg !1653
  %field1.132 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %result, i32 0, i32 1, !dbg !1653
  %ld.245 = load i64, i64* %field1.132, align 8, !dbg !1653
  call void @runtime.stringtoslicebyte({ i8**, i64, i64 }* sret({ i8**, i64, i64 }) "go_sret" %sret.actual.182, i8* nest undef, i8* null, i8* %ld.244, i64 %ld.245), !dbg !1653
  %cast.1718 = bitcast { i8**, i64, i64 }* %sret.actual.182 to %IPST.0*, !dbg !1653
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Success(%Response.0* sret(%Response.0) "go_sret" %sret.actual.183, i8* nest undef, %IPST.0* byval(%IPST.0) %cast.1718), !dbg !1654
  %cast.1719 = bitcast %Response.0* %tmpv.363 to i8*
  %cast.1720 = bitcast %Response.0* %sret.actual.183 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1719, i8* align 8 %cast.1720, i64 80, i1 false)
  %cast.1721 = bitcast %Response.0* %"$ret10" to i8*, !dbg !1655
  %cast.1722 = bitcast %Response.0* %tmpv.363 to i8*, !dbg !1655
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1721, i8* align 8 %cast.1722, i64 80, i1 false), !dbg !1655
  %cast.1723 = bitcast %Response.0* %sret.formal.10 to i8*, !dbg !1655
  %cast.1724 = bitcast %Response.0* %"$ret10" to i8*, !dbg !1655
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1723, i8* align 8 %cast.1724, i64 80, i1 false), !dbg !1655
  %15 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transient to i8*, !dbg !1655
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %15), !dbg !1655
  %16 = bitcast %error.0* %err to i8*, !dbg !1655
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %16), !dbg !1655
  %17 = bitcast { i8*, i64 }* %peerOrgMSP to i8*, !dbg !1655
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %17), !dbg !1655
  %18 = bitcast { i8*, i64 }* %result to i8*, !dbg !1655
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %18), !dbg !1655
  %19 = bitcast %Response.0* %"$ret10" to i8*, !dbg !1655
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %19), !dbg !1655
  ret void, !dbg !1655

else.117:                                         ; preds = %fallthrough.115
  %20 = bitcast %IPST.7* %expectedMSPs to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %20)
  %transient.ld.1 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transient, align 8, !dbg !1656
  %cast.1656 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %transient.ld.1 to i64*, !dbg !1657
  %icmp.140 = icmp eq i64* %cast.1656, null, !dbg !1657
  %zext.139 = zext i1 %icmp.140 to i8, !dbg !1657
  %trunc.117 = trunc i8 %zext.139 to i1, !dbg !1657
  br i1 %trunc.117, label %then.118, label %else.118

then.118:                                         ; preds = %else.117
  store i64 0, i64* %tmpv.344, align 8
  br label %fallthrough.118

fallthrough.118:                                  ; preds = %else.118, %then.118
  %tmpv.344.ld.0 = load i64, i64* %tmpv.344, align 8, !dbg !1657
  store i64 %tmpv.344.ld.0, i64* %tmpv.343, align 8
  %tmpv.343.ld.0 = load i64, i64* %tmpv.343, align 8, !dbg !1658
  %call.95 = call i8* @runtime.makeslice(i8* nest undef, %_type.0* @string..d, i64 0, i64 %tmpv.343.ld.0), !dbg !1658
  %cast.1658 = bitcast i8* %call.95 to { i8*, i64 }*, !dbg !1658
  %tmpv.343.ld.1 = load i64, i64* %tmpv.343, align 8, !dbg !1658
  %field.472 = getelementptr inbounds %IPST.7, %IPST.7* %expectedMSPs, i32 0, i32 0, !dbg !1658
  store { i8*, i64 }* %cast.1658, { i8*, i64 }** %field.472, align 8, !dbg !1658
  %field.473 = getelementptr inbounds %IPST.7, %IPST.7* %expectedMSPs, i32 0, i32 1, !dbg !1658
  store i64 0, i64* %field.473, align 8, !dbg !1658
  %field.474 = getelementptr inbounds %IPST.7, %IPST.7* %expectedMSPs, i32 0, i32 2, !dbg !1658
  store i64 %tmpv.343.ld.1, i64* %field.474, align 8, !dbg !1658
  %21 = bitcast { i8*, i64 }* %k to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %21)
  %cast.1659 = bitcast { i8*, i64 }* %k to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1659, i8* align 8 bitcast ({ i8*, i64 }* @const.116 to i8*), i64 16, i1 false)
  call void @llvm.dbg.declare(metadata { i8*, i64 }* %k, metadata !1659, metadata !DIExpression()), !dbg !1661
  %transient.ld.3 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transient, align 8, !dbg !1662
  %cast.1661 = bitcast %IPST.2* %tmpv.346 to i8*, !dbg !1662
  call void @runtime.mapiterinit(i8* nest undef, %_type.0* getelementptr inbounds (%MapType.0, %MapType.0* @type..map_6string_7_6_7uint8, i32 0, i32 0), { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %transient.ld.3, i8* %cast.1661), !dbg !1662
  br label %label.0

else.118:                                         ; preds = %else.117
  %transient.ld.2 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transient, align 8, !dbg !1656
  %cast.1657 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %transient.ld.2 to i64*, !dbg !1657
  %deref.ld.13 = load i64, i64* %cast.1657, align 8, !dbg !1657
  store i64 %deref.ld.13, i64* %tmpv.344, align 8, !dbg !1657
  br label %fallthrough.118

label.0:                                          ; preds = %fallthrough.122, %fallthrough.118
  %field.492 = getelementptr inbounds %IPST.2, %IPST.2* %tmpv.346, i32 0, i32 0, !dbg !1662
  %tmpv.346.field.ld.1 = load { i8*, i64 }*, { i8*, i64 }** %field.492, align 8, !dbg !1662
  %icmp.147 = icmp ne { i8*, i64 }* %tmpv.346.field.ld.1, null, !dbg !1662
  %zext.146 = zext i1 %icmp.147 to i8, !dbg !1662
  %trunc.124 = trunc i8 %zext.146 to i1, !dbg !1662
  br i1 %trunc.124, label %then.125, label %else.125

label.1:                                          ; preds = %then.125
  %field.475 = getelementptr inbounds %IPST.2, %IPST.2* %tmpv.346, i32 0, i32 0, !dbg !1662
  %tmpv.346.field.ld.0 = load { i8*, i64 }*, { i8*, i64 }** %field.475, align 8, !dbg !1662
  %cast.1662 = bitcast { i8*, i64 }* %tmpv.345 to i8*, !dbg !1662
  %cast.1663 = bitcast { i8*, i64 }* %tmpv.346.field.ld.0 to i8*, !dbg !1662
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1662, i8* align 8 %cast.1663, i64 16, i1 false), !dbg !1662
  %cast.1664 = bitcast { i8*, i64 }* %k to i8*, !dbg !1662
  %cast.1665 = bitcast { i8*, i64 }* %tmpv.345 to i8*, !dbg !1662
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1664, i8* align 8 %cast.1665, i64 16, i1 false), !dbg !1662
  %cast.1666 = bitcast %IPST.7* %tmpv.347 to i8*
  %cast.1667 = bitcast %IPST.7* %expectedMSPs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1666, i8* align 8 %cast.1667, i64 24, i1 false)
  %field.476 = getelementptr inbounds %IPST.7, %IPST.7* %tmpv.347, i32 0, i32 1, !dbg !1663
  %tmpv.347.field.ld.0 = load i64, i64* %field.476, align 8, !dbg !1663
  store i64 %tmpv.347.field.ld.0, i64* %tmpv.348, align 8
  %tmpv.348.ld.0 = load i64, i64* %tmpv.348, align 8, !dbg !1663
  %add.0 = add i64 %tmpv.348.ld.0, 1, !dbg !1663
  store i64 %add.0, i64* %tmpv.349, align 8
  %field.477 = getelementptr inbounds %IPST.7, %IPST.7* %tmpv.347, i32 0, i32 2, !dbg !1663
  %tmpv.347.field.ld.1 = load i64, i64* %field.477, align 8, !dbg !1663
  store i64 %tmpv.347.field.ld.1, i64* %tmpv.350, align 8
  %tmpv.349.ld.2 = load i64, i64* %tmpv.349, align 8, !dbg !1663
  %tmpv.350.ld.1 = load i64, i64* %tmpv.350, align 8, !dbg !1663
  %icmp.142 = icmp ugt i64 %tmpv.349.ld.2, %tmpv.350.ld.1, !dbg !1663
  %zext.141 = zext i1 %icmp.142 to i8, !dbg !1663
  %trunc.119 = trunc i8 %zext.141 to i1, !dbg !1663
  br i1 %trunc.119, label %then.119, label %else.119

then.119:                                         ; preds = %label.1
  %field.478 = getelementptr inbounds %IPST.7, %IPST.7* %tmpv.347, i32 0, i32 0, !dbg !1663
  %tmpv.347.field.ld.2 = load { i8*, i64 }*, { i8*, i64 }** %field.478, align 8, !dbg !1663
  %cast.1668 = bitcast { i8*, i64 }* %tmpv.347.field.ld.2 to i8*, !dbg !1663
  %tmpv.348.ld.1 = load i64, i64* %tmpv.348, align 8, !dbg !1663
  %tmpv.350.ld.0 = load i64, i64* %tmpv.350, align 8, !dbg !1663
  %tmpv.349.ld.0 = load i64, i64* %tmpv.349, align 8, !dbg !1663
  call void @runtime.growslice({ i8**, i64, i64 }* sret({ i8**, i64, i64 }) "go_sret" %sret.actual.180, i8* nest undef, %_type.0* @string..d, i8* %cast.1668, i64 %tmpv.348.ld.1, i64 %tmpv.350.ld.0, i64 %tmpv.349.ld.0), !dbg !1663
  %cast.1669 = bitcast { i8**, i64, i64 }* %sret.actual.180 to %IPST.7*, !dbg !1663
  %cast.1670 = bitcast %IPST.7* %expectedMSPs to i8*, !dbg !1663
  %cast.1671 = bitcast %IPST.7* %cast.1669 to i8*, !dbg !1663
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1670, i8* align 8 %cast.1671, i64 24, i1 false), !dbg !1663
  br label %fallthrough.119

fallthrough.119:                                  ; preds = %fallthrough.120, %then.119
  %cast.1672 = bitcast %IPST.7* %tmpv.347 to i8*, !dbg !1663
  %cast.1673 = bitcast %IPST.7* %expectedMSPs to i8*, !dbg !1663
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1672, i8* align 8 %cast.1673, i64 24, i1 false), !dbg !1663
  %tmpv.348.ld.2 = load i64, i64* %tmpv.348, align 8, !dbg !1663
  %add.1 = add i64 %tmpv.348.ld.2, 0, !dbg !1663
  store i64 %add.1, i64* %tmpv.352, align 8
  %field.485 = getelementptr inbounds %IPST.7, %IPST.7* %tmpv.347, i32 0, i32 0, !dbg !1663
  %tmpv.347.field.ld.5 = load { i8*, i64 }*, { i8*, i64 }** %field.485, align 8, !dbg !1663
  %tmpv.352.ld.0 = load i64, i64* %tmpv.352, align 8, !dbg !1663
  %ptroff.7 = getelementptr { i8*, i64 }, { i8*, i64 }* %tmpv.347.field.ld.5, i64 %tmpv.352.ld.0, !dbg !1663
  store { i8*, i64 }* %ptroff.7, { i8*, i64 }** %tmpv.353, align 8
  %tmpv.353.ld.0 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.353, align 8, !dbg !1663
  %icmp.143 = icmp eq { i8*, i64 }* %tmpv.353.ld.0, null, !dbg !1663
  %zext.142 = zext i1 %icmp.143 to i8, !dbg !1663
  %trunc.120 = trunc i8 %zext.142 to i1, !dbg !1663
  br i1 %trunc.120, label %then.121, label %else.121, !make.implicit !46

else.119:                                         ; preds = %label.1
  %field.479 = getelementptr inbounds %IPST.7, %IPST.7* %tmpv.347, i32 0, i32 0, !dbg !1663
  %tmpv.347.field.ld.4 = load { i8*, i64 }*, { i8*, i64 }** %field.479, align 8, !dbg !1663
  %field.480 = getelementptr inbounds %IPST.7, %IPST.7* %tmpv.347, i32 0, i32 2, !dbg !1663
  %tmpv.347.field.ld.3 = load i64, i64* %field.480, align 8, !dbg !1663
  %sub.0 = sub i64 %tmpv.347.field.ld.3, 0, !dbg !1663
  %icmp.141 = icmp eq i64 %sub.0, 0, !dbg !1663
  %zext.140 = zext i1 %icmp.141 to i8, !dbg !1663
  %trunc.118 = trunc i8 %zext.140 to i1, !dbg !1663
  br i1 %trunc.118, label %then.120, label %else.120

then.120:                                         ; preds = %else.119
  store i64 0, i64* %tmpv.351, align 8
  br label %fallthrough.120

fallthrough.120:                                  ; preds = %else.120, %then.120
  %tmpv.351.ld.0 = load i64, i64* %tmpv.351, align 8, !dbg !1663
  %ptroff.6 = getelementptr { i8*, i64 }, { i8*, i64 }* %tmpv.347.field.ld.4, i64 %tmpv.351.ld.0, !dbg !1663
  %tmpv.349.ld.1 = load i64, i64* %tmpv.349, align 8, !dbg !1663
  %sub.1 = sub i64 %tmpv.349.ld.1, 0, !dbg !1663
  %field.481 = getelementptr inbounds %IPST.7, %IPST.7* %tmpv.347, i32 0, i32 2, !dbg !1663
  %.field.ld.52 = load i64, i64* %field.481, align 8, !dbg !1663
  %sub.2 = sub i64 %.field.ld.52, 0, !dbg !1663
  %field.482 = getelementptr inbounds %IPST.7, %IPST.7* %expectedMSPs, i32 0, i32 0, !dbg !1663
  store { i8*, i64 }* %ptroff.6, { i8*, i64 }** %field.482, align 8, !dbg !1663
  %field.483 = getelementptr inbounds %IPST.7, %IPST.7* %expectedMSPs, i32 0, i32 1, !dbg !1663
  store i64 %sub.1, i64* %field.483, align 8, !dbg !1663
  %field.484 = getelementptr inbounds %IPST.7, %IPST.7* %expectedMSPs, i32 0, i32 2, !dbg !1663
  store i64 %sub.2, i64* %field.484, align 8, !dbg !1663
  br label %fallthrough.119

else.120:                                         ; preds = %else.119
  store i64 0, i64* %tmpv.351, align 8, !dbg !1663
  br label %fallthrough.120

then.121:                                         ; preds = %fallthrough.119
  call void @runtime.panicmem(i8* nest undef), !dbg !1663
  unreachable

fallthrough.121:                                  ; preds = %else.121
  %tmpv.354.ld.0 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.354, align 8, !dbg !1663
  %field.486 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.354.ld.0, i32 0, i32 1, !dbg !1663
  %field.487 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %k, i32 0, i32 1, !dbg !1663
  %k.field.ld.0 = load i64, i64* %field.487, align 8, !dbg !1663
  store i64 %k.field.ld.0, i64* %field.486, align 8, !dbg !1663
  %deref.ld.14 = load i32, i32* bitcast ({ i8, [3 x i8], i8, i8, i64 }* @runtime.writeBarrier to i32*), align 4, !dbg !1663
  %icmp.146 = icmp eq i32 %deref.ld.14, 0, !dbg !1663
  %zext.145 = zext i1 %icmp.146 to i8, !dbg !1663
  %trunc.123 = trunc i8 %zext.145 to i1, !dbg !1663
  br i1 %trunc.123, label %then.122, label %else.122

else.121:                                         ; preds = %fallthrough.119
  %.ld.8 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.353, align 8, !dbg !1663
  store { i8*, i64 }* %.ld.8, { i8*, i64 }** %tmpv.354, align 8
  br label %fallthrough.121

then.122:                                         ; preds = %fallthrough.121
  %tmpv.353.ld.1 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.353, align 8, !dbg !1663
  %icmp.144 = icmp eq { i8*, i64 }* %tmpv.353.ld.1, null, !dbg !1663
  %zext.143 = zext i1 %icmp.144 to i8, !dbg !1663
  %trunc.121 = trunc i8 %zext.143 to i1, !dbg !1663
  br i1 %trunc.121, label %then.123, label %else.123, !make.implicit !46

fallthrough.122:                                  ; preds = %fallthrough.124, %fallthrough.123
  %cast.1680 = bitcast %IPST.2* %tmpv.346 to i8*, !dbg !1662
  call void @runtime.mapiternext(i8* nest undef, i8* %cast.1680), !dbg !1662
  br label %label.0

else.122:                                         ; preds = %fallthrough.121
  %tmpv.353.ld.2 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.353, align 8, !dbg !1663
  %icmp.145 = icmp eq { i8*, i64 }* %tmpv.353.ld.2, null, !dbg !1663
  %zext.144 = zext i1 %icmp.145 to i8, !dbg !1663
  %trunc.122 = trunc i8 %zext.144 to i1, !dbg !1663
  br i1 %trunc.122, label %then.124, label %else.124, !make.implicit !46

then.123:                                         ; preds = %then.122
  call void @runtime.panicmem(i8* nest undef), !dbg !1663
  unreachable

fallthrough.123:                                  ; preds = %else.123
  %tmpv.355.ld.0 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.355, align 8, !dbg !1663
  %field.488 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.355.ld.0, i32 0, i32 0, !dbg !1663
  %field.489 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %k, i32 0, i32 0, !dbg !1663
  %k.field.ld.1 = load i8*, i8** %field.489, align 8, !dbg !1663
  store i8* %k.field.ld.1, i8** %field.488, align 8, !dbg !1663
  br label %fallthrough.122

else.123:                                         ; preds = %then.122
  %.ld.9 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.353, align 8, !dbg !1663
  store { i8*, i64 }* %.ld.9, { i8*, i64 }** %tmpv.355, align 8
  br label %fallthrough.123

then.124:                                         ; preds = %else.122
  call void @runtime.panicmem(i8* nest undef), !dbg !1663
  unreachable

fallthrough.124:                                  ; preds = %else.124
  %tmpv.356.ld.0 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.356, align 8, !dbg !1663
  %field.490 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.356.ld.0, i32 0, i32 0, !dbg !1663
  %cast.1677 = bitcast i8** %field.490 to i8*, !dbg !1663
  %field.491 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %k, i32 0, i32 0, !dbg !1663
  %k.field.ld.2 = load i8*, i8** %field.491, align 8, !dbg !1663
  %pticast.7 = ptrtoint i8* %k.field.ld.2 to i64, !dbg !1663
  call void @runtime.gcWriteBarrier(i8* nest undef, i8* %cast.1677, i64 %pticast.7), !dbg !1663
  br label %fallthrough.122

else.124:                                         ; preds = %else.122
  %.ld.10 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.353, align 8, !dbg !1663
  store { i8*, i64 }* %.ld.10, { i8*, i64 }** %tmpv.356, align 8
  br label %fallthrough.124

then.125:                                         ; preds = %label.0
  br label %label.1

fallthrough.125:                                  ; preds = %else.125
  %22 = bitcast { i8*, i64 }* %k to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %22)
  %call.96 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type.._6_7string, i32 0, i32 0)), !dbg !1664
  %cast.1683 = bitcast i8* %call.96 to %IPST.7*, !dbg !1664
  store %IPST.7* %cast.1683, %IPST.7** %tmpv.357, align 8
  %cast.1684 = bitcast %IPST.7* %tmpv.358 to i8*
  %cast.1685 = bitcast %IPST.7* %expectedMSPs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1684, i8* align 8 %cast.1685, i64 24, i1 false)
  %deref.ld.15 = load i32, i32* bitcast ({ i8, [3 x i8], i8, i8, i64 }* @runtime.writeBarrier to i32*), align 4, !dbg !1664
  %icmp.148 = icmp eq i32 %deref.ld.15, 0, !dbg !1664
  %zext.147 = zext i1 %icmp.148 to i8, !dbg !1664
  %trunc.125 = trunc i8 %zext.147 to i1, !dbg !1664
  br i1 %trunc.125, label %then.126, label %else.126

else.125:                                         ; preds = %label.0
  br label %fallthrough.125

then.126:                                         ; preds = %fallthrough.125
  %tmpv.357.ld.0 = load %IPST.7*, %IPST.7** %tmpv.357, align 8, !dbg !1664
  %cast.1686 = bitcast %IPST.7* %tmpv.357.ld.0 to i8*, !dbg !1664
  %cast.1687 = bitcast %IPST.7* %tmpv.358 to i8*, !dbg !1664
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1686, i8* align 8 %cast.1687, i64 24, i1 false), !dbg !1664
  br label %fallthrough.126

fallthrough.126:                                  ; preds = %else.126, %then.126
  %tmpv.357.ld.2 = load %IPST.7*, %IPST.7** %tmpv.357, align 8, !dbg !1664
  %field.493 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.34, i32 0, i32 0, !dbg !1664
  store %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type.._6_7string, i32 0, i32 0), %_type.0** %field.493, align 8, !dbg !1664
  %field.494 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.34, i32 0, i32 1, !dbg !1664
  %cast.1703 = bitcast %IPST.7* %tmpv.357.ld.2 to i8*, !dbg !1664
  store i8* %cast.1703, i8** %field.494, align 8, !dbg !1664
  %call.97 = call i8* @runtime.newobject(i8* nest undef, %_type.0* @string..d), !dbg !1664
  %cast.1693 = bitcast i8* %call.97 to { i8*, i64 }*, !dbg !1664
  store { i8*, i64 }* %cast.1693, { i8*, i64 }** %tmpv.359, align 8
  %cast.1694 = bitcast { i8*, i64 }* %tmpv.360 to i8*
  %cast.1695 = bitcast { i8*, i64 }* %peerOrgMSP to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1694, i8* align 8 %cast.1695, i64 16, i1 false)
  %deref.ld.16 = load i32, i32* bitcast ({ i8, [3 x i8], i8, i8, i64 }* @runtime.writeBarrier to i32*), align 4, !dbg !1664
  %icmp.149 = icmp eq i32 %deref.ld.16, 0, !dbg !1664
  %zext.148 = zext i1 %icmp.149 to i8, !dbg !1664
  %trunc.126 = trunc i8 %zext.148 to i1, !dbg !1664
  br i1 %trunc.126, label %then.127, label %else.127

else.126:                                         ; preds = %fallthrough.125
  %tmpv.357.ld.1 = load %IPST.7*, %IPST.7** %tmpv.357, align 8, !dbg !1664
  %cast.1689 = bitcast %IPST.7* %tmpv.357.ld.1 to i8*, !dbg !1664
  %cast.1690 = bitcast %IPST.7* %tmpv.358 to i8*, !dbg !1664
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type.._6_7string, i32 0, i32 0), i8* %cast.1689, i8* %cast.1690), !dbg !1664
  br label %fallthrough.126

then.127:                                         ; preds = %fallthrough.126
  %tmpv.359.ld.0 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.359, align 8, !dbg !1664
  %cast.1696 = bitcast { i8*, i64 }* %tmpv.359.ld.0 to i8*, !dbg !1664
  %cast.1697 = bitcast { i8*, i64 }* %tmpv.360 to i8*, !dbg !1664
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1696, i8* align 8 %cast.1697, i64 16, i1 false), !dbg !1664
  br label %fallthrough.127

fallthrough.127:                                  ; preds = %else.127, %then.127
  %tmpv.359.ld.2 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.359, align 8, !dbg !1664
  %field.495 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.35, i32 0, i32 0, !dbg !1664
  store %_type.0* @string..d, %_type.0** %field.495, align 8, !dbg !1664
  %field.496 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.35, i32 0, i32 1, !dbg !1664
  %cast.1704 = bitcast { i8*, i64 }* %tmpv.359.ld.2 to i8*, !dbg !1664
  store i8* %cast.1704, i8** %field.496, align 8, !dbg !1664
  %index.78 = getelementptr [2 x %IPST.3], [2 x %IPST.3]* %tmpv.361, i32 0, i32 0, !dbg !1664
  %cast.1705 = bitcast %IPST.3* %index.78 to i8*, !dbg !1664
  %cast.1706 = bitcast %IPST.3* %tmp.34 to i8*, !dbg !1664
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1705, i8* align 8 %cast.1706, i64 16, i1 false), !dbg !1664
  %index.79 = getelementptr [2 x %IPST.3], [2 x %IPST.3]* %tmpv.361, i32 0, i32 1, !dbg !1664
  %cast.1707 = bitcast %IPST.3* %index.79 to i8*, !dbg !1664
  %cast.1708 = bitcast %IPST.3* %tmp.35 to i8*, !dbg !1664
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1707, i8* align 8 %cast.1708, i64 16, i1 false), !dbg !1664
  %cast.1709 = bitcast [2 x %IPST.3]* %tmpv.361 to %IPST.3*, !dbg !1664
  %field.497 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.36, i32 0, i32 0, !dbg !1664
  store %IPST.3* %cast.1709, %IPST.3** %field.497, align 8, !dbg !1664
  %field.498 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.36, i32 0, i32 1, !dbg !1664
  store i64 2, i64* %field.498, align 8, !dbg !1664
  %field.499 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.36, i32 0, i32 2, !dbg !1664
  store i64 2, i64* %field.499, align 8, !dbg !1664
  %ld.242 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.195, i32 0, i32 0), align 8, !dbg !1664
  %ld.243 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.195, i32 0, i32 1), align 8, !dbg !1664
  %call.98 = call { i8*, i64 } @fmt.Sprintf(i8* nest undef, i8* %ld.242, i64 %ld.243, %IPST.52* byval(%IPST.52) %tmp.36), !dbg !1664
  store { i8*, i64 } %call.98, { i8*, i64 }* %sret.actual.181, align 8, !dbg !1664
  %cast.1712 = bitcast { i8*, i64 }* %tmpv.362 to i8*
  %cast.1713 = bitcast { i8*, i64 }* %sret.actual.181 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1712, i8* align 8 %cast.1713, i64 16, i1 false)
  %cast.1714 = bitcast { i8*, i64 }* %result to i8*, !dbg !1665
  %cast.1715 = bitcast { i8*, i64 }* %tmpv.362 to i8*, !dbg !1665
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1714, i8* align 8 %cast.1715, i64 16, i1 false), !dbg !1665
  %23 = bitcast %IPST.7* %expectedMSPs to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %23)
  br label %fallthrough.117

else.127:                                         ; preds = %fallthrough.126
  %tmpv.359.ld.1 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.359, align 8, !dbg !1664
  %cast.1698 = bitcast { i8*, i64 }* %tmpv.359.ld.1 to i8*, !dbg !1664
  %cast.1699 = bitcast { i8*, i64 }* %tmpv.360 to i8*, !dbg !1664
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* @string..d, i8* %cast.1698, i8* %cast.1699), !dbg !1664
  br label %fallthrough.127
}

define void @command_x2dline_x2darguments.MarblesPrivateChaincode.delete(%Response.0* sret(%Response.0) %sret.formal.7, i8* nest %nest.7, %MarblesPrivateChaincode.0* %t, i8* %stub.chunk0, i8* %stub.chunk1, %IPST.7* byval(%IPST.7) %args) #0 !dbg !1666 {
entry:
  %tmp.18 = alloca %IPST.7, align 8
  %tmp.17 = alloca { i8*, i64 }, align 8
  %tmp.16 = alloca %IPST.3, align 8
  %tmp.15 = alloca { i8*, i64 }, align 8
  %tmp.14 = alloca %IPST.3, align 8
  %tmp.13 = alloca %IPST.52, align 8
  %t.addr = alloca %MarblesPrivateChaincode.0*, align 8
  call void @llvm.dbg.declare(metadata %IPST.7* %args, metadata !1669, metadata !DIExpression()), !dbg !1670
  %stub.addr = alloca %ChaincodeStubInterface.0, align 8
  %"$ret7" = alloca %Response.0, align 8
  %transMap = alloca { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, align 8
  %err = alloca %error.0, align 8
  %marbleDeleteJsonBytes = alloca %IPST.0, align 8
  %ok = alloca i8, align 1
  %marbleDeleteInput = alloca %.command-line-arguments.marbleDeleteTransientInput.0*, align 8
  %valAsbytes = alloca %IPST.0, align 8
  %marbleToDelete = alloca %.command-line-arguments.marble.0*, align 8
  %indexName = alloca { i8*, i64 }, align 8
  %colorNameIndexKey = alloca { i8*, i64 }, align 8
  %tmpv.176 = alloca { i64, %error.0 }, align 8
  %tmpv.177 = alloca [1 x %IPST.3], align 8
  %sret.actual.92 = alloca { i64, %error.0 }, align 8
  %tmpv.178 = alloca %Response.0, align 8
  %sret.actual.93 = alloca %Response.0, align 8
  %tmpv.179 = alloca { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }, align 8
  %sret.actual.94 = alloca { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }, align 8
  %tmpv.180 = alloca { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, align 8
  %tmpv.181 = alloca %error.0, align 8
  %tmpv.182 = alloca { i8*, i64 }, align 8
  %sret.actual.95 = alloca { i8*, i64 }, align 8
  %tmpv.183 = alloca [2 x { i8*, i64 }], align 8
  %tmpv.184 = alloca %Response.0, align 8
  %sret.actual.96 = alloca { i8*, i64 }, align 8
  %sret.actual.97 = alloca %Response.0, align 8
  %tmpv.185 = alloca { i8*, i64 }, align 8
  %tmpv.186 = alloca %IPST.0*, align 8
  %tmpv.187 = alloca i8, align 1
  %tmpv.188 = alloca { i8*, i8 }, align 8
  %sret.actual.98 = alloca { i8*, i8 }, align 8
  %tmpv.189 = alloca i8*, align 8
  %tmpv.190 = alloca i8, align 1
  %tmpv.191 = alloca %Response.0, align 8
  %sret.actual.99 = alloca %Response.0, align 8
  %tmpv.192 = alloca %Response.0, align 8
  %sret.actual.100 = alloca %Response.0, align 8
  %tmpv.193 = alloca %.command-line-arguments.marbleDeleteTransientInput.0*, align 8
  %tmpv.194 = alloca %error.0, align 8
  %sret.actual.101 = alloca %error.0, align 8
  %tmpv.195 = alloca [2 x { i8*, i64 }], align 8
  %tmpv.196 = alloca %Response.0, align 8
  %sret.actual.102 = alloca { i8*, i64 }, align 8
  %sret.actual.103 = alloca %Response.0, align 8
  %tmpv.197 = alloca %Response.0, align 8
  %sret.actual.104 = alloca %Response.0, align 8
  %tmpv.198 = alloca { %IPST.0, %error.0 }, align 8
  %sret.actual.105 = alloca { %IPST.0, %error.0 }, align 8
  %tmpv.199 = alloca %IPST.0, align 8
  %tmpv.200 = alloca %error.0, align 8
  %tmpv.201 = alloca [2 x { i8*, i64 }], align 8
  %tmpv.202 = alloca %Response.0, align 8
  %sret.actual.106 = alloca { i8*, i64 }, align 8
  %sret.actual.107 = alloca %Response.0, align 8
  %tmpv.203 = alloca [2 x { i8*, i64 }], align 8
  %tmpv.204 = alloca %Response.0, align 8
  %sret.actual.108 = alloca { i8*, i64 }, align 8
  %sret.actual.109 = alloca %Response.0, align 8
  %tmpv.205 = alloca %.command-line-arguments.marble.0*, align 8
  %tmpv.206 = alloca %error.0, align 8
  %sret.actual.110 = alloca %error.0, align 8
  %tmpv.207 = alloca [2 x { i8*, i64 }], align 8
  %tmpv.208 = alloca %Response.0, align 8
  %sret.actual.111 = alloca { i8*, i64 }, align 8
  %sret.actual.112 = alloca %Response.0, align 8
  %tmpv.209 = alloca %error.0, align 8
  %sret.actual.113 = alloca %error.0, align 8
  %tmpv.210 = alloca { i8*, i64 }, align 8
  %sret.actual.114 = alloca { i8*, i64 }, align 8
  %tmpv.211 = alloca [2 x { i8*, i64 }], align 8
  %tmpv.212 = alloca %Response.0, align 8
  %sret.actual.115 = alloca { i8*, i64 }, align 8
  %sret.actual.116 = alloca %Response.0, align 8
  %tmpv.213 = alloca { { i8*, i64 }, %error.0 }, align 8
  %tmpv.214 = alloca [2 x { i8*, i64 }]*, align 8, !go_addrtaken !46
  %tmpv.215 = alloca [2 x { i8*, i64 }], align 8, !go_addrtaken !46
  %sret.actual.117 = alloca { { i8*, i64 }, %error.0 }, align 8
  %tmpv.216 = alloca { i8*, i64 }, align 8
  %tmpv.217 = alloca %error.0, align 8
  %tmpv.218 = alloca { i8*, i64 }, align 8
  %sret.actual.118 = alloca { i8*, i64 }, align 8
  %tmpv.219 = alloca %Response.0, align 8
  %sret.actual.119 = alloca %Response.0, align 8
  %tmpv.220 = alloca %error.0, align 8
  %sret.actual.120 = alloca %error.0, align 8
  %tmpv.221 = alloca { i8*, i64 }, align 8
  %sret.actual.121 = alloca { i8*, i64 }, align 8
  %tmpv.222 = alloca [2 x { i8*, i64 }], align 8
  %tmpv.223 = alloca %Response.0, align 8
  %sret.actual.122 = alloca { i8*, i64 }, align 8
  %sret.actual.123 = alloca %Response.0, align 8
  %tmpv.224 = alloca %error.0, align 8
  %sret.actual.124 = alloca %error.0, align 8
  %tmpv.225 = alloca { i8*, i64 }, align 8
  %sret.actual.125 = alloca { i8*, i64 }, align 8
  %tmpv.226 = alloca %Response.0, align 8
  %sret.actual.126 = alloca %Response.0, align 8
  %tmpv.227 = alloca i8*, align 8
  %tmpv.228 = alloca %Response.0, align 8
  %sret.actual.127 = alloca %Response.0, align 8
  store %MarblesPrivateChaincode.0* %t, %MarblesPrivateChaincode.0** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %MarblesPrivateChaincode.0** %t.addr, metadata !1671, metadata !DIExpression()), !dbg !1672
  %cast.1222 = bitcast %ChaincodeStubInterface.0* %stub.addr to { i8*, i8* }*
  %field0.93 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1222, i32 0, i32 0
  store i8* %stub.chunk0, i8** %field0.93, align 8
  %field1.93 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1222, i32 0, i32 1
  store i8* %stub.chunk1, i8** %field1.93, align 8
  call void @llvm.dbg.declare(metadata %ChaincodeStubInterface.0* %stub.addr, metadata !1673, metadata !DIExpression()), !dbg !1674
  %0 = bitcast %Response.0* %"$ret7" to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* %0)
  %cast.1221 = bitcast %Response.0* %"$ret7" to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1221, i8* align 8 bitcast (%Response.0* @const.44 to i8*), i64 80, i1 false)
  call void @llvm.dbg.declare(metadata %Response.0* %"$ret7", metadata !1675, metadata !DIExpression()), !dbg !1676
  %1 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1)
  %2 = bitcast %error.0* %err to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %2)
  %3 = bitcast %IPST.0* %marbleDeleteJsonBytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %3)
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %ok)
  %4 = bitcast %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4)
  %5 = bitcast %IPST.0* %valAsbytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %5)
  %6 = bitcast %.command-line-arguments.marble.0** %marbleToDelete to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6)
  %7 = bitcast { i8*, i64 }* %indexName to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %7)
  %8 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %8)
  %cast.951 = bitcast [1 x %IPST.3]* %tmpv.177 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.951, i8* align 8 bitcast ([1 x %IPST.3]* @const.140 to i8*), i64 16, i1 false)
  %cast.952 = bitcast [1 x %IPST.3]* %tmpv.177 to %IPST.3*, !dbg !1677
  %field.253 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.13, i32 0, i32 0, !dbg !1677
  store %IPST.3* %cast.952, %IPST.3** %field.253, align 8, !dbg !1677
  %field.254 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.13, i32 0, i32 1, !dbg !1677
  store i64 1, i64* %field.254, align 8, !dbg !1677
  %field.255 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.13, i32 0, i32 2, !dbg !1677
  store i64 1, i64* %field.255, align 8, !dbg !1677
  call void @fmt.Println({ i64, %error.0 }* sret({ i64, %error.0 }) "go_sret" %sret.actual.92, i8* nest undef, %IPST.52* byval(%IPST.52) %tmp.13), !dbg !1677
  %cast.953 = bitcast { i64, %error.0 }* %tmpv.176 to i8*, !dbg !1677
  %cast.954 = bitcast { i64, %error.0 }* %sret.actual.92 to i8*, !dbg !1677
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.953, i8* align 8 %cast.954, i64 24, i1 false), !dbg !1677
  %field.256 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 1, !dbg !1679
  %args.field.ld.17 = load i64, i64* %field.256, align 8, !dbg !1679
  %icmp.91 = icmp ne i64 %args.field.ld.17, 0, !dbg !1680
  %zext.91 = zext i1 %icmp.91 to i8, !dbg !1680
  %trunc.69 = trunc i8 %zext.91 to i1, !dbg !1681
  br i1 %trunc.69, label %then.69, label %else.69

then.69:                                          ; preds = %entry
  %ld.122 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.142, i32 0, i32 0), align 8, !dbg !1682
  %ld.123 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.142, i32 0, i32 1), align 8, !dbg !1682
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.93, i8* nest undef, i8* %ld.122, i64 %ld.123), !dbg !1682
  %cast.956 = bitcast %Response.0* %tmpv.178 to i8*
  %cast.957 = bitcast %Response.0* %sret.actual.93 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.956, i8* align 8 %cast.957, i64 80, i1 false)
  %cast.958 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1683
  %cast.959 = bitcast %Response.0* %tmpv.178 to i8*, !dbg !1683
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.958, i8* align 8 %cast.959, i64 80, i1 false), !dbg !1683
  %cast.960 = bitcast %Response.0* %sret.formal.7 to i8*, !dbg !1683
  %cast.961 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1683
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.960, i8* align 8 %cast.961, i64 80, i1 false), !dbg !1683
  %9 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !1683
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %9), !dbg !1683
  %10 = bitcast %error.0* %err to i8*, !dbg !1683
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %10), !dbg !1683
  %11 = bitcast %IPST.0* %marbleDeleteJsonBytes to i8*, !dbg !1683
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %11), !dbg !1683
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !1683
  %12 = bitcast %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput to i8*, !dbg !1683
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %12), !dbg !1683
  %13 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !1683
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %13), !dbg !1683
  %14 = bitcast %.command-line-arguments.marble.0** %marbleToDelete to i8*, !dbg !1683
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %14), !dbg !1683
  %15 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !1683
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %15), !dbg !1683
  %16 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !1683
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %16), !dbg !1683
  %17 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1683
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %17), !dbg !1683
  ret void, !dbg !1683

fallthrough.69:                                   ; preds = %else.69
  %field.257 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 0, !dbg !1684
  %stub.field.ld.22 = load { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }** %field.257, align 8, !dbg !1684
  %field.258 = getelementptr inbounds { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }* %stub.field.ld.22, i32 0, i32 28, !dbg !1684
  %.field.ld.26 = load void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)** %field.258, align 8, !dbg !1684
  %field.259 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 1, !dbg !1684
  %stub.field.ld.23 = load i8*, i8** %field.259, align 8, !dbg !1684
  call void %.field.ld.26({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }* sret({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }) "go_sret" %sret.actual.94, i8* nest undef, i8* %stub.field.ld.23), !dbg !1684
  %cast.962 = bitcast { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }* %tmpv.179 to i8*, !dbg !1684
  %cast.963 = bitcast { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }* %sret.actual.94 to i8*, !dbg !1684
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.962, i8* align 8 %cast.963, i64 24, i1 false), !dbg !1684
  %field.260 = getelementptr inbounds { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }, { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }* %tmpv.179, i32 0, i32 0, !dbg !1684
  %tmpv.179.field.ld.0 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %field.260, align 8, !dbg !1684
  store { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %tmpv.179.field.ld.0, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %tmpv.180, align 8
  %tmpv.180.ld.0 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %tmpv.180, align 8, !dbg !1684
  store { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %tmpv.180.ld.0, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap, align 8
  call void @llvm.dbg.declare(metadata { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap, metadata !1685, metadata !DIExpression()), !dbg !1686
  %field.261 = getelementptr inbounds { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }, { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }* %tmpv.179, i32 0, i32 1, !dbg !1684
  %cast.964 = bitcast %error.0* %tmpv.181 to i8*
  %cast.965 = bitcast %error.0* %field.261 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.964, i8* align 8 %cast.965, i64 16, i1 false)
  %cast.966 = bitcast %error.0* %err to i8*
  %cast.967 = bitcast %error.0* %tmpv.181 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.966, i8* align 8 %cast.967, i64 16, i1 false)
  call void @llvm.dbg.declare(metadata %error.0* %err, metadata !1687, metadata !DIExpression()), !dbg !1686
  %field.265 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1688
  %err.field.ld.37 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.265, align 8, !dbg !1688
  %icmp.92 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.37, null, !dbg !1688
  %zext.92 = zext i1 %icmp.92 to i8, !dbg !1688
  %trunc.70 = trunc i8 %zext.92 to i1, !dbg !1689
  br i1 %trunc.70, label %then.70, label %else.70

else.69:                                          ; preds = %entry
  br label %fallthrough.69

then.70:                                          ; preds = %fallthrough.69
  %field.262 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1690
  %err.field.ld.35 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.262, align 8, !dbg !1690
  %field.263 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.35, i32 0, i32 1, !dbg !1690
  %.field.ld.27 = load { i8*, i64 } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)** %field.263, align 8, !dbg !1690
  %field.264 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !1690
  %err.field.ld.36 = load i8*, i8** %field.264, align 8, !dbg !1690
  %call.48 = call { i8*, i64 } %.field.ld.27(i8* nest undef, i8* %err.field.ld.36), !dbg !1690
  store { i8*, i64 } %call.48, { i8*, i64 }* %sret.actual.95, align 8, !dbg !1690
  %cast.969 = bitcast { i8*, i64 }* %tmpv.182 to i8*
  %cast.970 = bitcast { i8*, i64 }* %sret.actual.95 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.969, i8* align 8 %cast.970, i64 16, i1 false)
  %index.49 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.183, i32 0, i32 0, !dbg !1691
  %cast.971 = bitcast { i8*, i64 }* %index.49 to i8*, !dbg !1691
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.971, i8* align 8 bitcast ({ i8*, i64 }* @const.66 to i8*), i64 16, i1 false), !dbg !1691
  %index.50 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.183, i32 0, i32 1, !dbg !1691
  %cast.972 = bitcast { i8*, i64 }* %index.50 to i8*, !dbg !1691
  %cast.973 = bitcast { i8*, i64 }* %tmpv.182 to i8*, !dbg !1691
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.972, i8* align 8 %cast.973, i64 16, i1 false), !dbg !1691
  %cast.974 = bitcast [2 x { i8*, i64 }]* %tmpv.183 to i8*, !dbg !1691
  %call.49 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.974, i64 2), !dbg !1691
  store { i8*, i64 } %call.49, { i8*, i64 }* %sret.actual.96, align 8, !dbg !1691
  %field0.69 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.96, i32 0, i32 0, !dbg !1692
  %ld.124 = load i8*, i8** %field0.69, align 8, !dbg !1692
  %field1.69 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.96, i32 0, i32 1, !dbg !1692
  %ld.125 = load i64, i64* %field1.69, align 8, !dbg !1692
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.97, i8* nest undef, i8* %ld.124, i64 %ld.125), !dbg !1692
  %cast.978 = bitcast %Response.0* %tmpv.184 to i8*
  %cast.979 = bitcast %Response.0* %sret.actual.97 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.978, i8* align 8 %cast.979, i64 80, i1 false)
  %cast.980 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1693
  %cast.981 = bitcast %Response.0* %tmpv.184 to i8*, !dbg !1693
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.980, i8* align 8 %cast.981, i64 80, i1 false), !dbg !1693
  %cast.982 = bitcast %Response.0* %sret.formal.7 to i8*, !dbg !1693
  %cast.983 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1693
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.982, i8* align 8 %cast.983, i64 80, i1 false), !dbg !1693
  %18 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !1693
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18), !dbg !1693
  %19 = bitcast %error.0* %err to i8*, !dbg !1693
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %19), !dbg !1693
  %20 = bitcast %IPST.0* %marbleDeleteJsonBytes to i8*, !dbg !1693
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %20), !dbg !1693
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !1693
  %21 = bitcast %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput to i8*, !dbg !1693
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %21), !dbg !1693
  %22 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !1693
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %22), !dbg !1693
  %23 = bitcast %.command-line-arguments.marble.0** %marbleToDelete to i8*, !dbg !1693
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %23), !dbg !1693
  %24 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !1693
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %24), !dbg !1693
  %25 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !1693
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %25), !dbg !1693
  %26 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1693
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %26), !dbg !1693
  ret void, !dbg !1693

fallthrough.70:                                   ; preds = %else.70
  %cast.985 = bitcast %IPST.0* %marbleDeleteJsonBytes to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.985, i8* align 8 bitcast (%IPST.0* @const.43 to i8*), i64 24, i1 false)
  call void @llvm.dbg.declare(metadata %IPST.0* %marbleDeleteJsonBytes, metadata !1694, metadata !DIExpression()), !dbg !1695
  store i8 0, i8* %ok, align 1
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !1696, metadata !DIExpression()), !dbg !1695
  %cast.986 = bitcast { i8*, i64 }* %tmpv.185 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.986, i8* align 8 bitcast ({ i8*, i64 }* @const.144 to i8*), i64 16, i1 false)
  %transMap.ld.1 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap, align 8, !dbg !1697
  %field0.70 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.185, i32 0, i32 0, !dbg !1698
  %ld.126 = load i8*, i8** %field0.70, align 8, !dbg !1698
  %field1.70 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.185, i32 0, i32 1, !dbg !1698
  %ld.127 = load i64, i64* %field1.70, align 8, !dbg !1698
  %call.50 = call { i8*, i8 } @runtime.mapaccess2__faststr(i8* nest undef, %_type.0* getelementptr inbounds (%MapType.0, %MapType.0* @type..map_6string_7_6_7uint8, i32 0, i32 0), { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %transMap.ld.1, i8* %ld.126, i64 %ld.127), !dbg !1698
  store { i8*, i8 } %call.50, { i8*, i8 }* %sret.actual.98, align 8, !dbg !1698
  %cast.990 = bitcast { i8*, i8 }* %tmpv.188 to i8*, !dbg !1698
  %cast.991 = bitcast { i8*, i8 }* %sret.actual.98 to i8*, !dbg !1698
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.990, i8* align 8 %cast.991, i64 16, i1 false), !dbg !1698
  %field.266 = getelementptr inbounds { i8*, i8 }, { i8*, i8 }* %tmpv.188, i32 0, i32 0, !dbg !1698
  %tmpv.188.field.ld.0 = load i8*, i8** %field.266, align 8, !dbg !1698
  store i8* %tmpv.188.field.ld.0, i8** %tmpv.189, align 8
  %tmpv.189.ld.0 = load i8*, i8** %tmpv.189, align 8, !dbg !1698
  %cast.992 = bitcast i8* %tmpv.189.ld.0 to %IPST.0*, !dbg !1698
  store %IPST.0* %cast.992, %IPST.0** %tmpv.186, align 8, !dbg !1698
  %field.267 = getelementptr inbounds { i8*, i8 }, { i8*, i8 }* %tmpv.188, i32 0, i32 1, !dbg !1698
  %tmpv.188.field.ld.1 = load i8, i8* %field.267, align 1, !dbg !1698
  store i8 %tmpv.188.field.ld.1, i8* %tmpv.190, align 1
  %tmpv.190.ld.0 = load i8, i8* %tmpv.190, align 1, !dbg !1698
  store i8 %tmpv.190.ld.0, i8* %tmpv.187, align 1, !dbg !1698
  %tmpv.186.ld.0 = load %IPST.0*, %IPST.0** %tmpv.186, align 8, !dbg !1698
  %cast.993 = bitcast %IPST.0* %marbleDeleteJsonBytes to i8*, !dbg !1698
  %cast.994 = bitcast %IPST.0* %tmpv.186.ld.0 to i8*, !dbg !1698
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.993, i8* align 8 %cast.994, i64 24, i1 false), !dbg !1698
  %tmpv.187.ld.0 = load i8, i8* %tmpv.187, align 1, !dbg !1698
  store i8 %tmpv.187.ld.0, i8* %ok, align 1, !dbg !1698
  %ok.ld.1 = load i8, i8* %ok, align 1, !dbg !1699
  %icmp.93 = icmp ne i8 %ok.ld.1, 0, !dbg !1700
  %xor.10 = xor i1 %icmp.93, true, !dbg !1700
  %zext.93 = zext i1 %xor.10 to i8, !dbg !1700
  %trunc.71 = trunc i8 %zext.93 to i1, !dbg !1701
  br i1 %trunc.71, label %then.71, label %else.71

else.70:                                          ; preds = %fallthrough.69
  br label %fallthrough.70

then.71:                                          ; preds = %fallthrough.70
  %ld.128 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.146, i32 0, i32 0), align 8, !dbg !1702
  %ld.129 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.146, i32 0, i32 1), align 8, !dbg !1702
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.99, i8* nest undef, i8* %ld.128, i64 %ld.129), !dbg !1702
  %cast.996 = bitcast %Response.0* %tmpv.191 to i8*
  %cast.997 = bitcast %Response.0* %sret.actual.99 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.996, i8* align 8 %cast.997, i64 80, i1 false)
  %cast.998 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1703
  %cast.999 = bitcast %Response.0* %tmpv.191 to i8*, !dbg !1703
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.998, i8* align 8 %cast.999, i64 80, i1 false), !dbg !1703
  %cast.1000 = bitcast %Response.0* %sret.formal.7 to i8*, !dbg !1703
  %cast.1001 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1703
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1000, i8* align 8 %cast.1001, i64 80, i1 false), !dbg !1703
  %27 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !1703
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %27), !dbg !1703
  %28 = bitcast %error.0* %err to i8*, !dbg !1703
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %28), !dbg !1703
  %29 = bitcast %IPST.0* %marbleDeleteJsonBytes to i8*, !dbg !1703
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %29), !dbg !1703
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !1703
  %30 = bitcast %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput to i8*, !dbg !1703
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30), !dbg !1703
  %31 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !1703
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %31), !dbg !1703
  %32 = bitcast %.command-line-arguments.marble.0** %marbleToDelete to i8*, !dbg !1703
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %32), !dbg !1703
  %33 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !1703
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %33), !dbg !1703
  %34 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !1703
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %34), !dbg !1703
  %35 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1703
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %35), !dbg !1703
  ret void, !dbg !1703

fallthrough.71:                                   ; preds = %else.71
  %field.268 = getelementptr inbounds %IPST.0, %IPST.0* %marbleDeleteJsonBytes, i32 0, i32 1, !dbg !1704
  %marbleDeleteJsonBytes.field.ld.0 = load i64, i64* %field.268, align 8, !dbg !1704
  %icmp.94 = icmp eq i64 %marbleDeleteJsonBytes.field.ld.0, 0, !dbg !1705
  %zext.94 = zext i1 %icmp.94 to i8, !dbg !1705
  %trunc.72 = trunc i8 %zext.94 to i1, !dbg !1706
  br i1 %trunc.72, label %then.72, label %else.72

else.71:                                          ; preds = %fallthrough.70
  br label %fallthrough.71

then.72:                                          ; preds = %fallthrough.71
  %ld.130 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.148, i32 0, i32 0), align 8, !dbg !1707
  %ld.131 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.148, i32 0, i32 1), align 8, !dbg !1707
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.100, i8* nest undef, i8* %ld.130, i64 %ld.131), !dbg !1707
  %cast.1003 = bitcast %Response.0* %tmpv.192 to i8*
  %cast.1004 = bitcast %Response.0* %sret.actual.100 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1003, i8* align 8 %cast.1004, i64 80, i1 false)
  %cast.1005 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1708
  %cast.1006 = bitcast %Response.0* %tmpv.192 to i8*, !dbg !1708
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1005, i8* align 8 %cast.1006, i64 80, i1 false), !dbg !1708
  %cast.1007 = bitcast %Response.0* %sret.formal.7 to i8*, !dbg !1708
  %cast.1008 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1708
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1007, i8* align 8 %cast.1008, i64 80, i1 false), !dbg !1708
  %36 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !1708
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %36), !dbg !1708
  %37 = bitcast %error.0* %err to i8*, !dbg !1708
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %37), !dbg !1708
  %38 = bitcast %IPST.0* %marbleDeleteJsonBytes to i8*, !dbg !1708
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %38), !dbg !1708
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !1708
  %39 = bitcast %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput to i8*, !dbg !1708
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %39), !dbg !1708
  %40 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !1708
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %40), !dbg !1708
  %41 = bitcast %.command-line-arguments.marble.0** %marbleToDelete to i8*, !dbg !1708
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %41), !dbg !1708
  %42 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !1708
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %42), !dbg !1708
  %43 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !1708
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %43), !dbg !1708
  %44 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1708
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %44), !dbg !1708
  ret void, !dbg !1708

fallthrough.72:                                   ; preds = %else.72
  %call.51 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @command_x2dline_x2darguments_0MarblesPrivateChaincode_0delete_0marbleDeleteTransientInput..d, i32 0, i32 0)), !dbg !1709
  %cast.1017 = bitcast i8* %call.51 to %.command-line-arguments.marbleDeleteTransientInput.0*, !dbg !1709
  store %.command-line-arguments.marbleDeleteTransientInput.0* %cast.1017, %.command-line-arguments.marbleDeleteTransientInput.0** %tmpv.193, align 8
  %tmpv.193.ld.0 = load %.command-line-arguments.marbleDeleteTransientInput.0*, %.command-line-arguments.marbleDeleteTransientInput.0** %tmpv.193, align 8, !dbg !1709
  store %.command-line-arguments.marbleDeleteTransientInput.0* %tmpv.193.ld.0, %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput, align 8
  call void @llvm.dbg.declare(metadata %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput, metadata !1710, metadata !DIExpression()), !dbg !1715
  %marbleDeleteInput.ld.0 = load %.command-line-arguments.marbleDeleteTransientInput.0*, %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput, align 8, !dbg !1716
  %field.269 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.14, i32 0, i32 0, !dbg !1717
  store %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @command_x2dline_x2darguments_0MarblesPrivateChaincode_0delete_0marbleDeleteTransientInput..p, i32 0, i32 0), %_type.0** %field.269, align 8, !dbg !1717
  %field.270 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.14, i32 0, i32 1, !dbg !1717
  %cast.1019 = bitcast %.command-line-arguments.marbleDeleteTransientInput.0* %marbleDeleteInput.ld.0 to i8*, !dbg !1717
  store i8* %cast.1019, i8** %field.270, align 8, !dbg !1717
  %cast.1020 = bitcast %IPST.3* %tmp.14 to { i8*, i8* }*, !dbg !1717
  %field0.73 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1020, i32 0, i32 0, !dbg !1717
  %ld.132 = load i8*, i8** %field0.73, align 8, !dbg !1717
  %field1.73 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1020, i32 0, i32 1, !dbg !1717
  %ld.133 = load i8*, i8** %field1.73, align 8, !dbg !1717
  %call.52 = call { i8*, i8* } @encoding_1json.Unmarshal(i8* nest undef, %IPST.0* byval(%IPST.0) %marbleDeleteJsonBytes, i8* %ld.132, i8* %ld.133), !dbg !1717
  %cast.1021 = bitcast %error.0* %sret.actual.101 to { i8*, i8* }*, !dbg !1717
  store { i8*, i8* } %call.52, { i8*, i8* }* %cast.1021, align 8, !dbg !1717
  %cast.1022 = bitcast %error.0* %tmpv.194 to i8*
  %cast.1023 = bitcast %error.0* %sret.actual.101 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1022, i8* align 8 %cast.1023, i64 16, i1 false)
  %cast.1024 = bitcast %error.0* %err to i8*, !dbg !1718
  %cast.1025 = bitcast %error.0* %tmpv.194 to i8*, !dbg !1718
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1024, i8* align 8 %cast.1025, i64 16, i1 false), !dbg !1718
  %field.275 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1719
  %err.field.ld.38 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.275, align 8, !dbg !1719
  %icmp.95 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.38, null, !dbg !1719
  %zext.95 = zext i1 %icmp.95 to i8, !dbg !1719
  %trunc.73 = trunc i8 %zext.95 to i1, !dbg !1720
  br i1 %trunc.73, label %then.73, label %else.73

else.72:                                          ; preds = %fallthrough.71
  br label %fallthrough.72

then.73:                                          ; preds = %fallthrough.72
  %field.271 = getelementptr inbounds %IPST.0, %IPST.0* %marbleDeleteJsonBytes, i32 0, i32 0, !dbg !1721
  %marbleDeleteJsonBytes.field.ld.1 = load i8*, i8** %field.271, align 8, !dbg !1721
  %field.272 = getelementptr inbounds %IPST.0, %IPST.0* %marbleDeleteJsonBytes, i32 0, i32 1, !dbg !1721
  %marbleDeleteJsonBytes.field.ld.2 = load i64, i64* %field.272, align 8, !dbg !1721
  %field.273 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmp.15, i32 0, i32 0, !dbg !1721
  store i8* %marbleDeleteJsonBytes.field.ld.1, i8** %field.273, align 8, !dbg !1721
  %field.274 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmp.15, i32 0, i32 1, !dbg !1721
  store i64 %marbleDeleteJsonBytes.field.ld.2, i64* %field.274, align 8, !dbg !1721
  %index.51 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.195, i32 0, i32 0, !dbg !1722
  %cast.1026 = bitcast { i8*, i64 }* %index.51 to i8*, !dbg !1722
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1026, i8* align 8 bitcast ({ i8*, i64 }* @const.89 to i8*), i64 16, i1 false), !dbg !1722
  %index.52 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.195, i32 0, i32 1, !dbg !1722
  %cast.1027 = bitcast { i8*, i64 }* %index.52 to i8*, !dbg !1722
  %cast.1028 = bitcast { i8*, i64 }* %tmp.15 to i8*, !dbg !1722
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1027, i8* align 8 %cast.1028, i64 16, i1 false), !dbg !1722
  %cast.1029 = bitcast [2 x { i8*, i64 }]* %tmpv.195 to i8*, !dbg !1722
  %call.53 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.1029, i64 2), !dbg !1722
  store { i8*, i64 } %call.53, { i8*, i64 }* %sret.actual.102, align 8, !dbg !1722
  %field0.74 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.102, i32 0, i32 0, !dbg !1723
  %ld.134 = load i8*, i8** %field0.74, align 8, !dbg !1723
  %field1.74 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.102, i32 0, i32 1, !dbg !1723
  %ld.135 = load i64, i64* %field1.74, align 8, !dbg !1723
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.103, i8* nest undef, i8* %ld.134, i64 %ld.135), !dbg !1723
  %cast.1033 = bitcast %Response.0* %tmpv.196 to i8*
  %cast.1034 = bitcast %Response.0* %sret.actual.103 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1033, i8* align 8 %cast.1034, i64 80, i1 false)
  %cast.1035 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1724
  %cast.1036 = bitcast %Response.0* %tmpv.196 to i8*, !dbg !1724
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1035, i8* align 8 %cast.1036, i64 80, i1 false), !dbg !1724
  %cast.1037 = bitcast %Response.0* %sret.formal.7 to i8*, !dbg !1724
  %cast.1038 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1724
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1037, i8* align 8 %cast.1038, i64 80, i1 false), !dbg !1724
  %45 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !1724
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %45), !dbg !1724
  %46 = bitcast %error.0* %err to i8*, !dbg !1724
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %46), !dbg !1724
  %47 = bitcast %IPST.0* %marbleDeleteJsonBytes to i8*, !dbg !1724
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %47), !dbg !1724
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !1724
  %48 = bitcast %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput to i8*, !dbg !1724
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %48), !dbg !1724
  %49 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !1724
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %49), !dbg !1724
  %50 = bitcast %.command-line-arguments.marble.0** %marbleToDelete to i8*, !dbg !1724
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %50), !dbg !1724
  %51 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !1724
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %51), !dbg !1724
  %52 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !1724
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %52), !dbg !1724
  %53 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1724
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %53), !dbg !1724
  ret void, !dbg !1724

fallthrough.73:                                   ; preds = %else.73
  %marbleDeleteInput.ld.1 = load %.command-line-arguments.marbleDeleteTransientInput.0*, %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput, align 8, !dbg !1725
  %field.276 = getelementptr inbounds %.command-line-arguments.marbleDeleteTransientInput.0, %.command-line-arguments.marbleDeleteTransientInput.0* %marbleDeleteInput.ld.1, i32 0, i32 0, !dbg !1726
  %field.277 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %field.276, i32 0, i32 1, !dbg !1727
  %.field.field.ld.3 = load i64, i64* %field.277, align 8, !dbg !1727
  %icmp.96 = icmp eq i64 %.field.field.ld.3, 0, !dbg !1728
  %zext.96 = zext i1 %icmp.96 to i8, !dbg !1728
  %trunc.74 = trunc i8 %zext.96 to i1, !dbg !1729
  br i1 %trunc.74, label %then.74, label %else.74

else.73:                                          ; preds = %fallthrough.72
  br label %fallthrough.73

then.74:                                          ; preds = %fallthrough.73
  %ld.136 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.91, i32 0, i32 0), align 8, !dbg !1730
  %ld.137 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.91, i32 0, i32 1), align 8, !dbg !1730
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.104, i8* nest undef, i8* %ld.136, i64 %ld.137), !dbg !1730
  %cast.1041 = bitcast %Response.0* %tmpv.197 to i8*
  %cast.1042 = bitcast %Response.0* %sret.actual.104 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1041, i8* align 8 %cast.1042, i64 80, i1 false)
  %cast.1043 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1731
  %cast.1044 = bitcast %Response.0* %tmpv.197 to i8*, !dbg !1731
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1043, i8* align 8 %cast.1044, i64 80, i1 false), !dbg !1731
  %cast.1045 = bitcast %Response.0* %sret.formal.7 to i8*, !dbg !1731
  %cast.1046 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1731
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1045, i8* align 8 %cast.1046, i64 80, i1 false), !dbg !1731
  %54 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !1731
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %54), !dbg !1731
  %55 = bitcast %error.0* %err to i8*, !dbg !1731
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %55), !dbg !1731
  %56 = bitcast %IPST.0* %marbleDeleteJsonBytes to i8*, !dbg !1731
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %56), !dbg !1731
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !1731
  %57 = bitcast %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput to i8*, !dbg !1731
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %57), !dbg !1731
  %58 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !1731
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %58), !dbg !1731
  %59 = bitcast %.command-line-arguments.marble.0** %marbleToDelete to i8*, !dbg !1731
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %59), !dbg !1731
  %60 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !1731
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %60), !dbg !1731
  %61 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !1731
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %61), !dbg !1731
  %62 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1731
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %62), !dbg !1731
  ret void, !dbg !1731

fallthrough.74:                                   ; preds = %else.74
  %field.278 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 0, !dbg !1732
  %stub.field.ld.24 = load { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }** %field.278, align 8, !dbg !1732
  %field.279 = getelementptr inbounds { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }* %stub.field.ld.24, i32 0, i32 12, !dbg !1732
  %.field.ld.28 = load void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)** %field.279, align 8, !dbg !1732
  %field.280 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 1, !dbg !1732
  %stub.field.ld.25 = load i8*, i8** %field.280, align 8, !dbg !1732
  %marbleDeleteInput.ld.2 = load %.command-line-arguments.marbleDeleteTransientInput.0*, %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput, align 8, !dbg !1733
  %field.281 = getelementptr inbounds %.command-line-arguments.marbleDeleteTransientInput.0, %.command-line-arguments.marbleDeleteTransientInput.0* %marbleDeleteInput.ld.2, i32 0, i32 0, !dbg !1734
  %ld.138 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.101, i32 0, i32 0), align 8, !dbg !1732
  %ld.139 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.101, i32 0, i32 1), align 8, !dbg !1732
  %field0.77 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %field.281, i32 0, i32 0, !dbg !1732
  %ld.140 = load i8*, i8** %field0.77, align 8, !dbg !1732
  %field1.77 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %field.281, i32 0, i32 1, !dbg !1732
  %ld.141 = load i64, i64* %field1.77, align 8, !dbg !1732
  call void %.field.ld.28({ %IPST.0, %error.0 }* sret({ %IPST.0, %error.0 }) "go_sret" %sret.actual.105, i8* nest undef, i8* %stub.field.ld.25, i8* %ld.138, i64 %ld.139, i8* %ld.140, i64 %ld.141), !dbg !1732
  %cast.1049 = bitcast { %IPST.0, %error.0 }* %tmpv.198 to i8*, !dbg !1732
  %cast.1050 = bitcast { %IPST.0, %error.0 }* %sret.actual.105 to i8*, !dbg !1732
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1049, i8* align 8 %cast.1050, i64 40, i1 false), !dbg !1732
  %field.282 = getelementptr inbounds { %IPST.0, %error.0 }, { %IPST.0, %error.0 }* %tmpv.198, i32 0, i32 0, !dbg !1732
  %cast.1051 = bitcast %IPST.0* %tmpv.199 to i8*
  %cast.1052 = bitcast %IPST.0* %field.282 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1051, i8* align 8 %cast.1052, i64 24, i1 false)
  %cast.1053 = bitcast %IPST.0* %valAsbytes to i8*
  %cast.1054 = bitcast %IPST.0* %tmpv.199 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1053, i8* align 8 %cast.1054, i64 24, i1 false)
  call void @llvm.dbg.declare(metadata %IPST.0* %valAsbytes, metadata !1735, metadata !DIExpression()), !dbg !1736
  %field.283 = getelementptr inbounds { %IPST.0, %error.0 }, { %IPST.0, %error.0 }* %tmpv.198, i32 0, i32 1, !dbg !1732
  %cast.1055 = bitcast %error.0* %tmpv.200 to i8*
  %cast.1056 = bitcast %error.0* %field.283 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1055, i8* align 8 %cast.1056, i64 16, i1 false)
  %cast.1057 = bitcast %error.0* %err to i8*, !dbg !1737
  %cast.1058 = bitcast %error.0* %tmpv.200 to i8*, !dbg !1737
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1057, i8* align 8 %cast.1058, i64 16, i1 false), !dbg !1737
  %field.287 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1738
  %err.field.ld.39 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.287, align 8, !dbg !1738
  %icmp.98 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.39, null, !dbg !1738
  %zext.98 = zext i1 %icmp.98 to i8, !dbg !1738
  %trunc.76 = trunc i8 %zext.98 to i1, !dbg !1739
  br i1 %trunc.76, label %then.75, label %else.75

else.74:                                          ; preds = %fallthrough.73
  br label %fallthrough.74

then.75:                                          ; preds = %fallthrough.74
  %marbleDeleteInput.ld.3 = load %.command-line-arguments.marbleDeleteTransientInput.0*, %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput, align 8, !dbg !1740
  %field.284 = getelementptr inbounds %.command-line-arguments.marbleDeleteTransientInput.0, %.command-line-arguments.marbleDeleteTransientInput.0* %marbleDeleteInput.ld.3, i32 0, i32 0, !dbg !1741
  %index.53 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.201, i32 0, i32 0, !dbg !1742
  %cast.1059 = bitcast { i8*, i64 }* %index.53 to i8*, !dbg !1742
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1059, i8* align 8 bitcast ({ i8*, i64 }* @const.153 to i8*), i64 16, i1 false), !dbg !1742
  %index.54 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.201, i32 0, i32 1, !dbg !1742
  %cast.1060 = bitcast { i8*, i64 }* %index.54 to i8*, !dbg !1742
  %cast.1061 = bitcast { i8*, i64 }* %field.284 to i8*, !dbg !1742
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1060, i8* align 8 %cast.1061, i64 16, i1 false), !dbg !1742
  %cast.1062 = bitcast [2 x { i8*, i64 }]* %tmpv.201 to i8*, !dbg !1742
  %call.54 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.1062, i64 2), !dbg !1742
  store { i8*, i64 } %call.54, { i8*, i64 }* %sret.actual.106, align 8, !dbg !1742
  %field0.78 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.106, i32 0, i32 0, !dbg !1743
  %ld.142 = load i8*, i8** %field0.78, align 8, !dbg !1743
  %field1.78 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.106, i32 0, i32 1, !dbg !1743
  %ld.143 = load i64, i64* %field1.78, align 8, !dbg !1743
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.107, i8* nest undef, i8* %ld.142, i64 %ld.143), !dbg !1743
  %cast.1066 = bitcast %Response.0* %tmpv.202 to i8*
  %cast.1067 = bitcast %Response.0* %sret.actual.107 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1066, i8* align 8 %cast.1067, i64 80, i1 false)
  %cast.1068 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1744
  %cast.1069 = bitcast %Response.0* %tmpv.202 to i8*, !dbg !1744
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1068, i8* align 8 %cast.1069, i64 80, i1 false), !dbg !1744
  %cast.1070 = bitcast %Response.0* %sret.formal.7 to i8*, !dbg !1744
  %cast.1071 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1744
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1070, i8* align 8 %cast.1071, i64 80, i1 false), !dbg !1744
  %63 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !1744
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %63), !dbg !1744
  %64 = bitcast %error.0* %err to i8*, !dbg !1744
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %64), !dbg !1744
  %65 = bitcast %IPST.0* %marbleDeleteJsonBytes to i8*, !dbg !1744
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %65), !dbg !1744
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !1744
  %66 = bitcast %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput to i8*, !dbg !1744
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %66), !dbg !1744
  %67 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !1744
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %67), !dbg !1744
  %68 = bitcast %.command-line-arguments.marble.0** %marbleToDelete to i8*, !dbg !1744
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %68), !dbg !1744
  %69 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !1744
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %69), !dbg !1744
  %70 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !1744
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %70), !dbg !1744
  %71 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1744
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %71), !dbg !1744
  ret void, !dbg !1744

fallthrough.75:                                   ; preds = %fallthrough.76
  %call.56 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @command_x2dline_x2darguments.marble..d, i32 0, i32 0)), !dbg !1745
  %cast.1088 = bitcast i8* %call.56 to %.command-line-arguments.marble.0*, !dbg !1745
  store %.command-line-arguments.marble.0* %cast.1088, %.command-line-arguments.marble.0** %tmpv.205, align 8
  %tmpv.205.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.205, align 8, !dbg !1745
  store %.command-line-arguments.marble.0* %tmpv.205.ld.0, %.command-line-arguments.marble.0** %marbleToDelete, align 8
  call void @llvm.dbg.declare(metadata %.command-line-arguments.marble.0** %marbleToDelete, metadata !1746, metadata !DIExpression()), !dbg !1755
  %marbleToDelete.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %marbleToDelete, align 8, !dbg !1756
  %field.288 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.16, i32 0, i32 0, !dbg !1757
  store %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @command_x2dline_x2darguments.marble..p, i32 0, i32 0), %_type.0** %field.288, align 8, !dbg !1757
  %field.289 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.16, i32 0, i32 1, !dbg !1757
  %cast.1090 = bitcast %.command-line-arguments.marble.0* %marbleToDelete.ld.0 to i8*, !dbg !1757
  store i8* %cast.1090, i8** %field.289, align 8, !dbg !1757
  %cast.1091 = bitcast %IPST.3* %tmp.16 to { i8*, i8* }*, !dbg !1757
  %field0.80 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1091, i32 0, i32 0, !dbg !1757
  %ld.146 = load i8*, i8** %field0.80, align 8, !dbg !1757
  %field1.80 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1091, i32 0, i32 1, !dbg !1757
  %ld.147 = load i8*, i8** %field1.80, align 8, !dbg !1757
  %call.57 = call { i8*, i8* } @encoding_1json.Unmarshal(i8* nest undef, %IPST.0* byval(%IPST.0) %valAsbytes, i8* %ld.146, i8* %ld.147), !dbg !1757
  %cast.1092 = bitcast %error.0* %sret.actual.110 to { i8*, i8* }*, !dbg !1757
  store { i8*, i8* } %call.57, { i8*, i8* }* %cast.1092, align 8, !dbg !1757
  %cast.1093 = bitcast %error.0* %tmpv.206 to i8*
  %cast.1094 = bitcast %error.0* %sret.actual.110 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1093, i8* align 8 %cast.1094, i64 16, i1 false)
  %cast.1095 = bitcast %error.0* %err to i8*, !dbg !1758
  %cast.1096 = bitcast %error.0* %tmpv.206 to i8*, !dbg !1758
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1095, i8* align 8 %cast.1096, i64 16, i1 false), !dbg !1758
  %field.294 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1759
  %err.field.ld.40 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.294, align 8, !dbg !1759
  %icmp.99 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.40, null, !dbg !1759
  %zext.99 = zext i1 %icmp.99 to i8, !dbg !1759
  %trunc.77 = trunc i8 %zext.99 to i1, !dbg !1760
  br i1 %trunc.77, label %then.77, label %else.77

else.75:                                          ; preds = %fallthrough.74
  %field.286 = getelementptr inbounds %IPST.0, %IPST.0* %valAsbytes, i32 0, i32 0, !dbg !1761
  %valAsbytes.field.ld.4 = load i8*, i8** %field.286, align 8, !dbg !1761
  %icmp.97 = icmp eq i8* %valAsbytes.field.ld.4, null, !dbg !1762
  %zext.97 = zext i1 %icmp.97 to i8, !dbg !1762
  %trunc.75 = trunc i8 %zext.97 to i1, !dbg !1763
  br i1 %trunc.75, label %then.76, label %else.76

then.76:                                          ; preds = %else.75
  %marbleDeleteInput.ld.4 = load %.command-line-arguments.marbleDeleteTransientInput.0*, %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput, align 8, !dbg !1764
  %field.285 = getelementptr inbounds %.command-line-arguments.marbleDeleteTransientInput.0, %.command-line-arguments.marbleDeleteTransientInput.0* %marbleDeleteInput.ld.4, i32 0, i32 0, !dbg !1765
  %index.55 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.203, i32 0, i32 0, !dbg !1766
  %cast.1072 = bitcast { i8*, i64 }* %index.55 to i8*, !dbg !1766
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1072, i8* align 8 bitcast ({ i8*, i64 }* @const.155 to i8*), i64 16, i1 false), !dbg !1766
  %index.56 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.203, i32 0, i32 1, !dbg !1766
  %cast.1073 = bitcast { i8*, i64 }* %index.56 to i8*, !dbg !1766
  %cast.1074 = bitcast { i8*, i64 }* %field.285 to i8*, !dbg !1766
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1073, i8* align 8 %cast.1074, i64 16, i1 false), !dbg !1766
  %cast.1075 = bitcast [2 x { i8*, i64 }]* %tmpv.203 to i8*, !dbg !1766
  %call.55 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.1075, i64 2), !dbg !1766
  store { i8*, i64 } %call.55, { i8*, i64 }* %sret.actual.108, align 8, !dbg !1766
  %field0.79 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.108, i32 0, i32 0, !dbg !1767
  %ld.144 = load i8*, i8** %field0.79, align 8, !dbg !1767
  %field1.79 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.108, i32 0, i32 1, !dbg !1767
  %ld.145 = load i64, i64* %field1.79, align 8, !dbg !1767
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.109, i8* nest undef, i8* %ld.144, i64 %ld.145), !dbg !1767
  %cast.1079 = bitcast %Response.0* %tmpv.204 to i8*
  %cast.1080 = bitcast %Response.0* %sret.actual.109 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1079, i8* align 8 %cast.1080, i64 80, i1 false)
  %cast.1081 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1768
  %cast.1082 = bitcast %Response.0* %tmpv.204 to i8*, !dbg !1768
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1081, i8* align 8 %cast.1082, i64 80, i1 false), !dbg !1768
  %cast.1083 = bitcast %Response.0* %sret.formal.7 to i8*, !dbg !1768
  %cast.1084 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1768
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1083, i8* align 8 %cast.1084, i64 80, i1 false), !dbg !1768
  %72 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !1768
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %72), !dbg !1768
  %73 = bitcast %error.0* %err to i8*, !dbg !1768
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %73), !dbg !1768
  %74 = bitcast %IPST.0* %marbleDeleteJsonBytes to i8*, !dbg !1768
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %74), !dbg !1768
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !1768
  %75 = bitcast %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput to i8*, !dbg !1768
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %75), !dbg !1768
  %76 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !1768
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %76), !dbg !1768
  %77 = bitcast %.command-line-arguments.marble.0** %marbleToDelete to i8*, !dbg !1768
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %77), !dbg !1768
  %78 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !1768
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %78), !dbg !1768
  %79 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !1768
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %79), !dbg !1768
  %80 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1768
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %80), !dbg !1768
  ret void, !dbg !1768

fallthrough.76:                                   ; preds = %else.76
  br label %fallthrough.75

else.76:                                          ; preds = %else.75
  br label %fallthrough.76

then.77:                                          ; preds = %fallthrough.75
  %field.290 = getelementptr inbounds %IPST.0, %IPST.0* %valAsbytes, i32 0, i32 0, !dbg !1769
  %valAsbytes.field.ld.5 = load i8*, i8** %field.290, align 8, !dbg !1769
  %field.291 = getelementptr inbounds %IPST.0, %IPST.0* %valAsbytes, i32 0, i32 1, !dbg !1769
  %valAsbytes.field.ld.6 = load i64, i64* %field.291, align 8, !dbg !1769
  %field.292 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmp.17, i32 0, i32 0, !dbg !1769
  store i8* %valAsbytes.field.ld.5, i8** %field.292, align 8, !dbg !1769
  %field.293 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmp.17, i32 0, i32 1, !dbg !1769
  store i64 %valAsbytes.field.ld.6, i64* %field.293, align 8, !dbg !1769
  %index.57 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.207, i32 0, i32 0, !dbg !1770
  %cast.1097 = bitcast { i8*, i64 }* %index.57 to i8*, !dbg !1770
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1097, i8* align 8 bitcast ({ i8*, i64 }* @const.89 to i8*), i64 16, i1 false), !dbg !1770
  %index.58 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.207, i32 0, i32 1, !dbg !1770
  %cast.1098 = bitcast { i8*, i64 }* %index.58 to i8*, !dbg !1770
  %cast.1099 = bitcast { i8*, i64 }* %tmp.17 to i8*, !dbg !1770
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1098, i8* align 8 %cast.1099, i64 16, i1 false), !dbg !1770
  %cast.1100 = bitcast [2 x { i8*, i64 }]* %tmpv.207 to i8*, !dbg !1770
  %call.58 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.1100, i64 2), !dbg !1770
  store { i8*, i64 } %call.58, { i8*, i64 }* %sret.actual.111, align 8, !dbg !1770
  %field0.81 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.111, i32 0, i32 0, !dbg !1771
  %ld.148 = load i8*, i8** %field0.81, align 8, !dbg !1771
  %field1.81 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.111, i32 0, i32 1, !dbg !1771
  %ld.149 = load i64, i64* %field1.81, align 8, !dbg !1771
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.112, i8* nest undef, i8* %ld.148, i64 %ld.149), !dbg !1771
  %cast.1104 = bitcast %Response.0* %tmpv.208 to i8*
  %cast.1105 = bitcast %Response.0* %sret.actual.112 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1104, i8* align 8 %cast.1105, i64 80, i1 false)
  %cast.1106 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1772
  %cast.1107 = bitcast %Response.0* %tmpv.208 to i8*, !dbg !1772
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1106, i8* align 8 %cast.1107, i64 80, i1 false), !dbg !1772
  %cast.1108 = bitcast %Response.0* %sret.formal.7 to i8*, !dbg !1772
  %cast.1109 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1772
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1108, i8* align 8 %cast.1109, i64 80, i1 false), !dbg !1772
  %81 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !1772
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %81), !dbg !1772
  %82 = bitcast %error.0* %err to i8*, !dbg !1772
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %82), !dbg !1772
  %83 = bitcast %IPST.0* %marbleDeleteJsonBytes to i8*, !dbg !1772
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %83), !dbg !1772
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !1772
  %84 = bitcast %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput to i8*, !dbg !1772
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %84), !dbg !1772
  %85 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !1772
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %85), !dbg !1772
  %86 = bitcast %.command-line-arguments.marble.0** %marbleToDelete to i8*, !dbg !1772
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %86), !dbg !1772
  %87 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !1772
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %87), !dbg !1772
  %88 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !1772
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %88), !dbg !1772
  %89 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1772
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %89), !dbg !1772
  ret void, !dbg !1772

fallthrough.77:                                   ; preds = %else.77
  %field.295 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 0, !dbg !1773
  %stub.field.ld.26 = load { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }** %field.295, align 8, !dbg !1773
  %field.296 = getelementptr inbounds { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }* %stub.field.ld.26, i32 0, i32 2, !dbg !1773
  %.field.ld.29 = load { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)** %field.296, align 8, !dbg !1773
  %field.297 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 1, !dbg !1773
  %stub.field.ld.27 = load i8*, i8** %field.297, align 8, !dbg !1773
  %marbleDeleteInput.ld.5 = load %.command-line-arguments.marbleDeleteTransientInput.0*, %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput, align 8, !dbg !1774
  %field.298 = getelementptr inbounds %.command-line-arguments.marbleDeleteTransientInput.0, %.command-line-arguments.marbleDeleteTransientInput.0* %marbleDeleteInput.ld.5, i32 0, i32 0, !dbg !1775
  %ld.150 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.101, i32 0, i32 0), align 8, !dbg !1773
  %ld.151 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.101, i32 0, i32 1), align 8, !dbg !1773
  %field0.83 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %field.298, i32 0, i32 0, !dbg !1773
  %ld.152 = load i8*, i8** %field0.83, align 8, !dbg !1773
  %field1.83 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %field.298, i32 0, i32 1, !dbg !1773
  %ld.153 = load i64, i64* %field1.83, align 8, !dbg !1773
  %call.59 = call { i8*, i8* } %.field.ld.29(i8* nest undef, i8* %stub.field.ld.27, i8* %ld.150, i64 %ld.151, i8* %ld.152, i64 %ld.153), !dbg !1773
  %cast.1113 = bitcast %error.0* %sret.actual.113 to { i8*, i8* }*, !dbg !1773
  store { i8*, i8* } %call.59, { i8*, i8* }* %cast.1113, align 8, !dbg !1773
  %cast.1114 = bitcast %error.0* %tmpv.209 to i8*
  %cast.1115 = bitcast %error.0* %sret.actual.113 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1114, i8* align 8 %cast.1115, i64 16, i1 false)
  %cast.1116 = bitcast %error.0* %err to i8*, !dbg !1776
  %cast.1117 = bitcast %error.0* %tmpv.209 to i8*, !dbg !1776
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1116, i8* align 8 %cast.1117, i64 16, i1 false), !dbg !1776
  %field.302 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1777
  %err.field.ld.43 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.302, align 8, !dbg !1777
  %icmp.100 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.43, null, !dbg !1777
  %zext.100 = zext i1 %icmp.100 to i8, !dbg !1777
  %trunc.78 = trunc i8 %zext.100 to i1, !dbg !1778
  br i1 %trunc.78, label %then.78, label %else.78

else.77:                                          ; preds = %fallthrough.75
  br label %fallthrough.77

then.78:                                          ; preds = %fallthrough.77
  %field.299 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1779
  %err.field.ld.41 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.299, align 8, !dbg !1779
  %field.300 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.41, i32 0, i32 1, !dbg !1779
  %.field.ld.30 = load { i8*, i64 } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)** %field.300, align 8, !dbg !1779
  %field.301 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !1779
  %err.field.ld.42 = load i8*, i8** %field.301, align 8, !dbg !1779
  %call.60 = call { i8*, i64 } %.field.ld.30(i8* nest undef, i8* %err.field.ld.42), !dbg !1779
  store { i8*, i64 } %call.60, { i8*, i64 }* %sret.actual.114, align 8, !dbg !1779
  %cast.1119 = bitcast { i8*, i64 }* %tmpv.210 to i8*
  %cast.1120 = bitcast { i8*, i64 }* %sret.actual.114 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1119, i8* align 8 %cast.1120, i64 16, i1 false)
  %index.59 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.211, i32 0, i32 0, !dbg !1780
  %cast.1121 = bitcast { i8*, i64 }* %index.59 to i8*, !dbg !1780
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1121, i8* align 8 bitcast ({ i8*, i64 }* @const.157 to i8*), i64 16, i1 false), !dbg !1780
  %index.60 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.211, i32 0, i32 1, !dbg !1780
  %cast.1122 = bitcast { i8*, i64 }* %index.60 to i8*, !dbg !1780
  %cast.1123 = bitcast { i8*, i64 }* %tmpv.210 to i8*, !dbg !1780
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1122, i8* align 8 %cast.1123, i64 16, i1 false), !dbg !1780
  %cast.1124 = bitcast [2 x { i8*, i64 }]* %tmpv.211 to i8*, !dbg !1780
  %call.61 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.1124, i64 2), !dbg !1780
  store { i8*, i64 } %call.61, { i8*, i64 }* %sret.actual.115, align 8, !dbg !1780
  %field0.84 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.115, i32 0, i32 0, !dbg !1781
  %ld.154 = load i8*, i8** %field0.84, align 8, !dbg !1781
  %field1.84 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.115, i32 0, i32 1, !dbg !1781
  %ld.155 = load i64, i64* %field1.84, align 8, !dbg !1781
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.116, i8* nest undef, i8* %ld.154, i64 %ld.155), !dbg !1781
  %cast.1128 = bitcast %Response.0* %tmpv.212 to i8*
  %cast.1129 = bitcast %Response.0* %sret.actual.116 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1128, i8* align 8 %cast.1129, i64 80, i1 false)
  %cast.1130 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1782
  %cast.1131 = bitcast %Response.0* %tmpv.212 to i8*, !dbg !1782
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1130, i8* align 8 %cast.1131, i64 80, i1 false), !dbg !1782
  %cast.1132 = bitcast %Response.0* %sret.formal.7 to i8*, !dbg !1782
  %cast.1133 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1782
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1132, i8* align 8 %cast.1133, i64 80, i1 false), !dbg !1782
  %90 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !1782
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %90), !dbg !1782
  %91 = bitcast %error.0* %err to i8*, !dbg !1782
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %91), !dbg !1782
  %92 = bitcast %IPST.0* %marbleDeleteJsonBytes to i8*, !dbg !1782
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %92), !dbg !1782
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !1782
  %93 = bitcast %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput to i8*, !dbg !1782
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %93), !dbg !1782
  %94 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !1782
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %94), !dbg !1782
  %95 = bitcast %.command-line-arguments.marble.0** %marbleToDelete to i8*, !dbg !1782
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %95), !dbg !1782
  %96 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !1782
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %96), !dbg !1782
  %97 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !1782
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %97), !dbg !1782
  %98 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1782
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %98), !dbg !1782
  ret void, !dbg !1782

fallthrough.78:                                   ; preds = %else.78
  %cast.1135 = bitcast { i8*, i64 }* %indexName to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1135, i8* align 8 bitcast ({ i8*, i64 }* @const.110 to i8*), i64 16, i1 false)
  call void @llvm.dbg.declare(metadata { i8*, i64 }* %indexName, metadata !1783, metadata !DIExpression()), !dbg !1784
  %field.305 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 0, !dbg !1785
  %stub.field.ld.28 = load { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }** %field.305, align 8, !dbg !1785
  %field.306 = getelementptr inbounds { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }* %stub.field.ld.28, i32 0, i32 1, !dbg !1785
  %.field.ld.31 = load void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)** %field.306, align 8, !dbg !1785
  %field.307 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 1, !dbg !1785
  %stub.field.ld.29 = load i8*, i8** %field.307, align 8, !dbg !1785
  %call.62 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.0, %ArrayType.0* @type.._62x_7string, i32 0, i32 0)), !dbg !1786
  %cast.1137 = bitcast i8* %call.62 to [2 x { i8*, i64 }]*, !dbg !1786
  store [2 x { i8*, i64 }]* %cast.1137, [2 x { i8*, i64 }]** %tmpv.214, align 8
  %marbleToDelete.ld.1 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %marbleToDelete, align 8, !dbg !1787
  %field.303 = getelementptr inbounds %.command-line-arguments.marble.0, %.command-line-arguments.marble.0* %marbleToDelete.ld.1, i32 0, i32 2, !dbg !1788
  %marbleToDelete.ld.2 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %marbleToDelete, align 8, !dbg !1789
  %field.304 = getelementptr inbounds %.command-line-arguments.marble.0, %.command-line-arguments.marble.0* %marbleToDelete.ld.2, i32 0, i32 1, !dbg !1790
  %index.61 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.215, i32 0, i32 0, !dbg !1786
  %cast.1138 = bitcast { i8*, i64 }* %index.61 to i8*, !dbg !1786
  %cast.1139 = bitcast { i8*, i64 }* %field.303 to i8*, !dbg !1786
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1138, i8* align 8 %cast.1139, i64 16, i1 false), !dbg !1786
  %index.62 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.215, i32 0, i32 1, !dbg !1786
  %cast.1140 = bitcast { i8*, i64 }* %index.62 to i8*, !dbg !1786
  %cast.1141 = bitcast { i8*, i64 }* %field.304 to i8*, !dbg !1786
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1140, i8* align 8 %cast.1141, i64 16, i1 false), !dbg !1786
  %deref.ld.6 = load i32, i32* bitcast ({ i8, [3 x i8], i8, i8, i64 }* @runtime.writeBarrier to i32*), align 4, !dbg !1786
  %icmp.101 = icmp eq i32 %deref.ld.6, 0, !dbg !1786
  %zext.101 = zext i1 %icmp.101 to i8, !dbg !1786
  %trunc.79 = trunc i8 %zext.101 to i1, !dbg !1786
  br i1 %trunc.79, label %then.79, label %else.79

else.78:                                          ; preds = %fallthrough.77
  br label %fallthrough.78

then.79:                                          ; preds = %fallthrough.78
  %tmpv.214.ld.0 = load [2 x { i8*, i64 }]*, [2 x { i8*, i64 }]** %tmpv.214, align 8, !dbg !1786
  %cast.1142 = bitcast [2 x { i8*, i64 }]* %tmpv.214.ld.0 to i8*, !dbg !1786
  %cast.1143 = bitcast [2 x { i8*, i64 }]* %tmpv.215 to i8*, !dbg !1786
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1142, i8* align 8 %cast.1143, i64 32, i1 false), !dbg !1786
  br label %fallthrough.79

fallthrough.79:                                   ; preds = %else.79, %then.79
  %tmpv.214.ld.2 = load [2 x { i8*, i64 }]*, [2 x { i8*, i64 }]** %tmpv.214, align 8, !dbg !1786
  %cast.1149 = bitcast [2 x { i8*, i64 }]* %tmpv.214.ld.2 to { i8*, i64 }*, !dbg !1786
  %field.308 = getelementptr inbounds %IPST.7, %IPST.7* %tmp.18, i32 0, i32 0, !dbg !1786
  store { i8*, i64 }* %cast.1149, { i8*, i64 }** %field.308, align 8, !dbg !1786
  %field.309 = getelementptr inbounds %IPST.7, %IPST.7* %tmp.18, i32 0, i32 1, !dbg !1786
  store i64 2, i64* %field.309, align 8, !dbg !1786
  %field.310 = getelementptr inbounds %IPST.7, %IPST.7* %tmp.18, i32 0, i32 2, !dbg !1786
  store i64 2, i64* %field.310, align 8, !dbg !1786
  %field0.85 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %indexName, i32 0, i32 0, !dbg !1785
  %ld.156 = load i8*, i8** %field0.85, align 8, !dbg !1785
  %field1.85 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %indexName, i32 0, i32 1, !dbg !1785
  %ld.157 = load i64, i64* %field1.85, align 8, !dbg !1785
  call void %.field.ld.31({ { i8*, i64 }, %error.0 }* sret({ { i8*, i64 }, %error.0 }) "go_sret" %sret.actual.117, i8* nest undef, i8* %stub.field.ld.29, i8* %ld.156, i64 %ld.157, %IPST.7* byval(%IPST.7) %tmp.18), !dbg !1785
  %cast.1151 = bitcast { { i8*, i64 }, %error.0 }* %tmpv.213 to i8*, !dbg !1785
  %cast.1152 = bitcast { { i8*, i64 }, %error.0 }* %sret.actual.117 to i8*, !dbg !1785
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1151, i8* align 8 %cast.1152, i64 32, i1 false), !dbg !1785
  %field.311 = getelementptr inbounds { { i8*, i64 }, %error.0 }, { { i8*, i64 }, %error.0 }* %tmpv.213, i32 0, i32 0, !dbg !1785
  %cast.1153 = bitcast { i8*, i64 }* %tmpv.216 to i8*
  %cast.1154 = bitcast { i8*, i64 }* %field.311 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1153, i8* align 8 %cast.1154, i64 16, i1 false)
  %cast.1155 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*
  %cast.1156 = bitcast { i8*, i64 }* %tmpv.216 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1155, i8* align 8 %cast.1156, i64 16, i1 false)
  call void @llvm.dbg.declare(metadata { i8*, i64 }* %colorNameIndexKey, metadata !1791, metadata !DIExpression()), !dbg !1792
  %field.312 = getelementptr inbounds { { i8*, i64 }, %error.0 }, { { i8*, i64 }, %error.0 }* %tmpv.213, i32 0, i32 1, !dbg !1785
  %cast.1157 = bitcast %error.0* %tmpv.217 to i8*
  %cast.1158 = bitcast %error.0* %field.312 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1157, i8* align 8 %cast.1158, i64 16, i1 false)
  %cast.1159 = bitcast %error.0* %err to i8*, !dbg !1793
  %cast.1160 = bitcast %error.0* %tmpv.217 to i8*, !dbg !1793
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1159, i8* align 8 %cast.1160, i64 16, i1 false), !dbg !1793
  %field.316 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1794
  %err.field.ld.46 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.316, align 8, !dbg !1794
  %icmp.102 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.46, null, !dbg !1794
  %zext.102 = zext i1 %icmp.102 to i8, !dbg !1794
  %trunc.80 = trunc i8 %zext.102 to i1, !dbg !1795
  br i1 %trunc.80, label %then.80, label %else.80

else.79:                                          ; preds = %fallthrough.78
  %tmpv.214.ld.1 = load [2 x { i8*, i64 }]*, [2 x { i8*, i64 }]** %tmpv.214, align 8, !dbg !1786
  %cast.1145 = bitcast [2 x { i8*, i64 }]* %tmpv.214.ld.1 to i8*, !dbg !1786
  %cast.1146 = bitcast [2 x { i8*, i64 }]* %tmpv.215 to i8*, !dbg !1786
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.0, %ArrayType.0* @type.._62x_7string, i32 0, i32 0), i8* %cast.1145, i8* %cast.1146), !dbg !1786
  br label %fallthrough.79

then.80:                                          ; preds = %fallthrough.79
  %field.313 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1796
  %err.field.ld.44 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.313, align 8, !dbg !1796
  %field.314 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.44, i32 0, i32 1, !dbg !1796
  %.field.ld.32 = load { i8*, i64 } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)** %field.314, align 8, !dbg !1796
  %field.315 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !1796
  %err.field.ld.45 = load i8*, i8** %field.315, align 8, !dbg !1796
  %call.63 = call { i8*, i64 } %.field.ld.32(i8* nest undef, i8* %err.field.ld.45), !dbg !1796
  store { i8*, i64 } %call.63, { i8*, i64 }* %sret.actual.118, align 8, !dbg !1796
  %cast.1162 = bitcast { i8*, i64 }* %tmpv.218 to i8*
  %cast.1163 = bitcast { i8*, i64 }* %sret.actual.118 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1162, i8* align 8 %cast.1163, i64 16, i1 false)
  %field0.86 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.218, i32 0, i32 0, !dbg !1797
  %ld.158 = load i8*, i8** %field0.86, align 8, !dbg !1797
  %field1.86 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.218, i32 0, i32 1, !dbg !1797
  %ld.159 = load i64, i64* %field1.86, align 8, !dbg !1797
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.119, i8* nest undef, i8* %ld.158, i64 %ld.159), !dbg !1797
  %cast.1165 = bitcast %Response.0* %tmpv.219 to i8*
  %cast.1166 = bitcast %Response.0* %sret.actual.119 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1165, i8* align 8 %cast.1166, i64 80, i1 false)
  %cast.1167 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1798
  %cast.1168 = bitcast %Response.0* %tmpv.219 to i8*, !dbg !1798
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1167, i8* align 8 %cast.1168, i64 80, i1 false), !dbg !1798
  %cast.1169 = bitcast %Response.0* %sret.formal.7 to i8*, !dbg !1798
  %cast.1170 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1798
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1169, i8* align 8 %cast.1170, i64 80, i1 false), !dbg !1798
  %99 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !1798
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %99), !dbg !1798
  %100 = bitcast %error.0* %err to i8*, !dbg !1798
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %100), !dbg !1798
  %101 = bitcast %IPST.0* %marbleDeleteJsonBytes to i8*, !dbg !1798
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %101), !dbg !1798
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !1798
  %102 = bitcast %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput to i8*, !dbg !1798
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %102), !dbg !1798
  %103 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !1798
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %103), !dbg !1798
  %104 = bitcast %.command-line-arguments.marble.0** %marbleToDelete to i8*, !dbg !1798
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %104), !dbg !1798
  %105 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !1798
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %105), !dbg !1798
  %106 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !1798
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %106), !dbg !1798
  %107 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1798
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %107), !dbg !1798
  ret void, !dbg !1798

fallthrough.80:                                   ; preds = %else.80
  %field.317 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 0, !dbg !1799
  %stub.field.ld.30 = load { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }** %field.317, align 8, !dbg !1799
  %field.318 = getelementptr inbounds { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }* %stub.field.ld.30, i32 0, i32 2, !dbg !1799
  %.field.ld.33 = load { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)** %field.318, align 8, !dbg !1799
  %field.319 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 1, !dbg !1799
  %stub.field.ld.31 = load i8*, i8** %field.319, align 8, !dbg !1799
  %ld.160 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.101, i32 0, i32 0), align 8, !dbg !1799
  %ld.161 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.101, i32 0, i32 1), align 8, !dbg !1799
  %field0.88 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %colorNameIndexKey, i32 0, i32 0, !dbg !1799
  %ld.162 = load i8*, i8** %field0.88, align 8, !dbg !1799
  %field1.88 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %colorNameIndexKey, i32 0, i32 1, !dbg !1799
  %ld.163 = load i64, i64* %field1.88, align 8, !dbg !1799
  %call.64 = call { i8*, i8* } %.field.ld.33(i8* nest undef, i8* %stub.field.ld.31, i8* %ld.160, i64 %ld.161, i8* %ld.162, i64 %ld.163), !dbg !1799
  %cast.1174 = bitcast %error.0* %sret.actual.120 to { i8*, i8* }*, !dbg !1799
  store { i8*, i8* } %call.64, { i8*, i8* }* %cast.1174, align 8, !dbg !1799
  %cast.1175 = bitcast %error.0* %tmpv.220 to i8*
  %cast.1176 = bitcast %error.0* %sret.actual.120 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1175, i8* align 8 %cast.1176, i64 16, i1 false)
  %cast.1177 = bitcast %error.0* %err to i8*, !dbg !1800
  %cast.1178 = bitcast %error.0* %tmpv.220 to i8*, !dbg !1800
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1177, i8* align 8 %cast.1178, i64 16, i1 false), !dbg !1800
  %field.323 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1801
  %err.field.ld.49 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.323, align 8, !dbg !1801
  %icmp.103 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.49, null, !dbg !1801
  %zext.103 = zext i1 %icmp.103 to i8, !dbg !1801
  %trunc.81 = trunc i8 %zext.103 to i1, !dbg !1802
  br i1 %trunc.81, label %then.81, label %else.81

else.80:                                          ; preds = %fallthrough.79
  br label %fallthrough.80

then.81:                                          ; preds = %fallthrough.80
  %field.320 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1803
  %err.field.ld.47 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.320, align 8, !dbg !1803
  %field.321 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.47, i32 0, i32 1, !dbg !1803
  %.field.ld.34 = load { i8*, i64 } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)** %field.321, align 8, !dbg !1803
  %field.322 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !1803
  %err.field.ld.48 = load i8*, i8** %field.322, align 8, !dbg !1803
  %call.65 = call { i8*, i64 } %.field.ld.34(i8* nest undef, i8* %err.field.ld.48), !dbg !1803
  store { i8*, i64 } %call.65, { i8*, i64 }* %sret.actual.121, align 8, !dbg !1803
  %cast.1180 = bitcast { i8*, i64 }* %tmpv.221 to i8*
  %cast.1181 = bitcast { i8*, i64 }* %sret.actual.121 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1180, i8* align 8 %cast.1181, i64 16, i1 false)
  %index.63 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.222, i32 0, i32 0, !dbg !1804
  %cast.1182 = bitcast { i8*, i64 }* %index.63 to i8*, !dbg !1804
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1182, i8* align 8 bitcast ({ i8*, i64 }* @const.157 to i8*), i64 16, i1 false), !dbg !1804
  %index.64 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.222, i32 0, i32 1, !dbg !1804
  %cast.1183 = bitcast { i8*, i64 }* %index.64 to i8*, !dbg !1804
  %cast.1184 = bitcast { i8*, i64 }* %tmpv.221 to i8*, !dbg !1804
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1183, i8* align 8 %cast.1184, i64 16, i1 false), !dbg !1804
  %cast.1185 = bitcast [2 x { i8*, i64 }]* %tmpv.222 to i8*, !dbg !1804
  %call.66 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.1185, i64 2), !dbg !1804
  store { i8*, i64 } %call.66, { i8*, i64 }* %sret.actual.122, align 8, !dbg !1804
  %field0.89 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.122, i32 0, i32 0, !dbg !1805
  %ld.164 = load i8*, i8** %field0.89, align 8, !dbg !1805
  %field1.89 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.122, i32 0, i32 1, !dbg !1805
  %ld.165 = load i64, i64* %field1.89, align 8, !dbg !1805
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.123, i8* nest undef, i8* %ld.164, i64 %ld.165), !dbg !1805
  %cast.1189 = bitcast %Response.0* %tmpv.223 to i8*
  %cast.1190 = bitcast %Response.0* %sret.actual.123 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1189, i8* align 8 %cast.1190, i64 80, i1 false)
  %cast.1191 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1806
  %cast.1192 = bitcast %Response.0* %tmpv.223 to i8*, !dbg !1806
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1191, i8* align 8 %cast.1192, i64 80, i1 false), !dbg !1806
  %cast.1193 = bitcast %Response.0* %sret.formal.7 to i8*, !dbg !1806
  %cast.1194 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1806
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1193, i8* align 8 %cast.1194, i64 80, i1 false), !dbg !1806
  %108 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !1806
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %108), !dbg !1806
  %109 = bitcast %error.0* %err to i8*, !dbg !1806
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %109), !dbg !1806
  %110 = bitcast %IPST.0* %marbleDeleteJsonBytes to i8*, !dbg !1806
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %110), !dbg !1806
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !1806
  %111 = bitcast %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput to i8*, !dbg !1806
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %111), !dbg !1806
  %112 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !1806
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %112), !dbg !1806
  %113 = bitcast %.command-line-arguments.marble.0** %marbleToDelete to i8*, !dbg !1806
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %113), !dbg !1806
  %114 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !1806
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %114), !dbg !1806
  %115 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !1806
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %115), !dbg !1806
  %116 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1806
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %116), !dbg !1806
  ret void, !dbg !1806

fallthrough.81:                                   ; preds = %else.81
  %field.324 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 0, !dbg !1807
  %stub.field.ld.32 = load { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }** %field.324, align 8, !dbg !1807
  %field.325 = getelementptr inbounds { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }* %stub.field.ld.32, i32 0, i32 2, !dbg !1807
  %.field.ld.35 = load { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)** %field.325, align 8, !dbg !1807
  %field.326 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 1, !dbg !1807
  %stub.field.ld.33 = load i8*, i8** %field.326, align 8, !dbg !1807
  %marbleDeleteInput.ld.6 = load %.command-line-arguments.marbleDeleteTransientInput.0*, %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput, align 8, !dbg !1808
  %field.327 = getelementptr inbounds %.command-line-arguments.marbleDeleteTransientInput.0, %.command-line-arguments.marbleDeleteTransientInput.0* %marbleDeleteInput.ld.6, i32 0, i32 0, !dbg !1809
  %ld.166 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.108, i32 0, i32 0), align 8, !dbg !1807
  %ld.167 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.108, i32 0, i32 1), align 8, !dbg !1807
  %field0.91 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %field.327, i32 0, i32 0, !dbg !1807
  %ld.168 = load i8*, i8** %field0.91, align 8, !dbg !1807
  %field1.91 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %field.327, i32 0, i32 1, !dbg !1807
  %ld.169 = load i64, i64* %field1.91, align 8, !dbg !1807
  %call.67 = call { i8*, i8* } %.field.ld.35(i8* nest undef, i8* %stub.field.ld.33, i8* %ld.166, i64 %ld.167, i8* %ld.168, i64 %ld.169), !dbg !1807
  %cast.1198 = bitcast %error.0* %sret.actual.124 to { i8*, i8* }*, !dbg !1807
  store { i8*, i8* } %call.67, { i8*, i8* }* %cast.1198, align 8, !dbg !1807
  %cast.1199 = bitcast %error.0* %tmpv.224 to i8*
  %cast.1200 = bitcast %error.0* %sret.actual.124 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1199, i8* align 8 %cast.1200, i64 16, i1 false)
  %cast.1201 = bitcast %error.0* %err to i8*, !dbg !1810
  %cast.1202 = bitcast %error.0* %tmpv.224 to i8*, !dbg !1810
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1201, i8* align 8 %cast.1202, i64 16, i1 false), !dbg !1810
  %field.331 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1811
  %err.field.ld.52 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.331, align 8, !dbg !1811
  %icmp.104 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.52, null, !dbg !1811
  %zext.104 = zext i1 %icmp.104 to i8, !dbg !1811
  %trunc.82 = trunc i8 %zext.104 to i1, !dbg !1812
  br i1 %trunc.82, label %then.82, label %else.82

else.81:                                          ; preds = %fallthrough.80
  br label %fallthrough.81

then.82:                                          ; preds = %fallthrough.81
  %field.328 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1813
  %err.field.ld.50 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.328, align 8, !dbg !1813
  %field.329 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.50, i32 0, i32 1, !dbg !1813
  %.field.ld.36 = load { i8*, i64 } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)** %field.329, align 8, !dbg !1813
  %field.330 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !1813
  %err.field.ld.51 = load i8*, i8** %field.330, align 8, !dbg !1813
  %call.68 = call { i8*, i64 } %.field.ld.36(i8* nest undef, i8* %err.field.ld.51), !dbg !1813
  store { i8*, i64 } %call.68, { i8*, i64 }* %sret.actual.125, align 8, !dbg !1813
  %cast.1204 = bitcast { i8*, i64 }* %tmpv.225 to i8*
  %cast.1205 = bitcast { i8*, i64 }* %sret.actual.125 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1204, i8* align 8 %cast.1205, i64 16, i1 false)
  %field0.92 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.225, i32 0, i32 0, !dbg !1814
  %ld.170 = load i8*, i8** %field0.92, align 8, !dbg !1814
  %field1.92 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.225, i32 0, i32 1, !dbg !1814
  %ld.171 = load i64, i64* %field1.92, align 8, !dbg !1814
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.126, i8* nest undef, i8* %ld.170, i64 %ld.171), !dbg !1814
  %cast.1207 = bitcast %Response.0* %tmpv.226 to i8*
  %cast.1208 = bitcast %Response.0* %sret.actual.126 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1207, i8* align 8 %cast.1208, i64 80, i1 false)
  %cast.1209 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1815
  %cast.1210 = bitcast %Response.0* %tmpv.226 to i8*, !dbg !1815
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1209, i8* align 8 %cast.1210, i64 80, i1 false), !dbg !1815
  %cast.1211 = bitcast %Response.0* %sret.formal.7 to i8*, !dbg !1815
  %cast.1212 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1815
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1211, i8* align 8 %cast.1212, i64 80, i1 false), !dbg !1815
  %117 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !1815
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %117), !dbg !1815
  %118 = bitcast %error.0* %err to i8*, !dbg !1815
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %118), !dbg !1815
  %119 = bitcast %IPST.0* %marbleDeleteJsonBytes to i8*, !dbg !1815
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %119), !dbg !1815
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !1815
  %120 = bitcast %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput to i8*, !dbg !1815
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %120), !dbg !1815
  %121 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !1815
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %121), !dbg !1815
  %122 = bitcast %.command-line-arguments.marble.0** %marbleToDelete to i8*, !dbg !1815
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %122), !dbg !1815
  %123 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !1815
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %123), !dbg !1815
  %124 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !1815
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %124), !dbg !1815
  %125 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1815
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %125), !dbg !1815
  ret void, !dbg !1815

fallthrough.82:                                   ; preds = %else.82
  store i8* null, i8** %tmpv.227, align 8
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Success(%Response.0* sret(%Response.0) "go_sret" %sret.actual.127, i8* nest undef, %IPST.0* byval(%IPST.0) @const.43), !dbg !1816
  %cast.1215 = bitcast %Response.0* %tmpv.228 to i8*
  %cast.1216 = bitcast %Response.0* %sret.actual.127 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1215, i8* align 8 %cast.1216, i64 80, i1 false)
  %cast.1217 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1817
  %cast.1218 = bitcast %Response.0* %tmpv.228 to i8*, !dbg !1817
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1217, i8* align 8 %cast.1218, i64 80, i1 false), !dbg !1817
  %cast.1219 = bitcast %Response.0* %sret.formal.7 to i8*, !dbg !1817
  %cast.1220 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1817
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1219, i8* align 8 %cast.1220, i64 80, i1 false), !dbg !1817
  %126 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !1817
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %126), !dbg !1817
  %127 = bitcast %error.0* %err to i8*, !dbg !1817
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %127), !dbg !1817
  %128 = bitcast %IPST.0* %marbleDeleteJsonBytes to i8*, !dbg !1817
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %128), !dbg !1817
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !1817
  %129 = bitcast %.command-line-arguments.marbleDeleteTransientInput.0** %marbleDeleteInput to i8*, !dbg !1817
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %129), !dbg !1817
  %130 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !1817
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %130), !dbg !1817
  %131 = bitcast %.command-line-arguments.marble.0** %marbleToDelete to i8*, !dbg !1817
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %131), !dbg !1817
  %132 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !1817
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %132), !dbg !1817
  %133 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !1817
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %133), !dbg !1817
  %134 = bitcast %Response.0* %"$ret7" to i8*, !dbg !1817
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %134), !dbg !1817
  ret void, !dbg !1817

else.82:                                          ; preds = %fallthrough.81
  br label %fallthrough.82
}

define void @command_x2dline_x2darguments.MarblesPrivateChaincode.getMarbleHash(%Response.0* sret(%Response.0) %sret.formal.5, i8* nest %nest.5, %MarblesPrivateChaincode.0* %t, i8* %stub.chunk0, i8* %stub.chunk1, %IPST.7* byval(%IPST.7) %args) #0 !dbg !1818 {
entry:
  %t.addr = alloca %MarblesPrivateChaincode.0*, align 8
  call void @llvm.dbg.declare(metadata %IPST.7* %args, metadata !1819, metadata !DIExpression()), !dbg !1820
  %stub.addr = alloca %ChaincodeStubInterface.0, align 8
  %"$ret5" = alloca %Response.0, align 8
  %name = alloca { i8*, i64 }, align 8
  %jsonResp = alloca { i8*, i64 }, align 8
  %err = alloca %error.0, align 8
  %valAsbytes = alloca %IPST.0, align 8
  %tmpv.153 = alloca %Response.0, align 8
  %sret.actual.77 = alloca %Response.0, align 8
  %tmpv.154 = alloca i64, align 8
  %tmpv.155 = alloca i64, align 8
  %tmpv.156 = alloca { %IPST.0, %error.0 }, align 8
  %sret.actual.78 = alloca { %IPST.0, %error.0 }, align 8
  %tmpv.157 = alloca %IPST.0, align 8
  %tmpv.158 = alloca %error.0, align 8
  %tmpv.159 = alloca [3 x { i8*, i64 }], align 8
  %sret.actual.79 = alloca { i8*, i64 }, align 8
  %tmpv.160 = alloca %Response.0, align 8
  %sret.actual.80 = alloca %Response.0, align 8
  %tmpv.161 = alloca [3 x { i8*, i64 }], align 8
  %sret.actual.81 = alloca { i8*, i64 }, align 8
  %tmpv.162 = alloca %Response.0, align 8
  %sret.actual.82 = alloca %Response.0, align 8
  %tmpv.163 = alloca %Response.0, align 8
  %sret.actual.83 = alloca %Response.0, align 8
  store %MarblesPrivateChaincode.0* %t, %MarblesPrivateChaincode.0** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %MarblesPrivateChaincode.0** %t.addr, metadata !1821, metadata !DIExpression()), !dbg !1822
  %cast.878 = bitcast %ChaincodeStubInterface.0* %stub.addr to { i8*, i8* }*
  %field0.61 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.878, i32 0, i32 0
  store i8* %stub.chunk0, i8** %field0.61, align 8
  %field1.61 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.878, i32 0, i32 1
  store i8* %stub.chunk1, i8** %field1.61, align 8
  call void @llvm.dbg.declare(metadata %ChaincodeStubInterface.0* %stub.addr, metadata !1823, metadata !DIExpression()), !dbg !1824
  %0 = bitcast %Response.0* %"$ret5" to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* %0)
  %cast.877 = bitcast %Response.0* %"$ret5" to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.877, i8* align 8 bitcast (%Response.0* @const.44 to i8*), i64 80, i1 false)
  call void @llvm.dbg.declare(metadata %Response.0* %"$ret5", metadata !1825, metadata !DIExpression()), !dbg !1826
  %1 = bitcast { i8*, i64 }* %name to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %1)
  %2 = bitcast { i8*, i64 }* %jsonResp to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %2)
  %3 = bitcast %error.0* %err to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %3)
  %4 = bitcast %IPST.0* %valAsbytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %4)
  %cast.813 = bitcast { i8*, i64 }* %name to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.813, i8* align 8 bitcast ({ i8*, i64 }* @const.116 to i8*), i64 16, i1 false)
  call void @llvm.dbg.declare(metadata { i8*, i64 }* %name, metadata !1827, metadata !DIExpression()), !dbg !1829
  %cast.814 = bitcast { i8*, i64 }* %jsonResp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.814, i8* align 8 bitcast ({ i8*, i64 }* @const.116 to i8*), i64 16, i1 false)
  call void @llvm.dbg.declare(metadata { i8*, i64 }* %jsonResp, metadata !1830, metadata !DIExpression()), !dbg !1831
  %cast.815 = bitcast %error.0* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.815, i8* align 8 bitcast (%error.0* @const.60 to i8*), i64 16, i1 false)
  call void @llvm.dbg.declare(metadata %error.0* %err, metadata !1832, metadata !DIExpression()), !dbg !1833
  %field.228 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 1, !dbg !1834
  %args.field.ld.9 = load i64, i64* %field.228, align 8, !dbg !1834
  %icmp.81 = icmp ne i64 %args.field.ld.9, 1, !dbg !1835
  %zext.81 = zext i1 %icmp.81 to i8, !dbg !1835
  %trunc.61 = trunc i8 %zext.81 to i1, !dbg !1836
  br i1 %trunc.61, label %then.61, label %else.61

then.61:                                          ; preds = %entry
  %ld.102 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.118, i32 0, i32 0), align 8, !dbg !1837
  %ld.103 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.118, i32 0, i32 1), align 8, !dbg !1837
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.77, i8* nest undef, i8* %ld.102, i64 %ld.103), !dbg !1837
  %cast.817 = bitcast %Response.0* %tmpv.153 to i8*
  %cast.818 = bitcast %Response.0* %sret.actual.77 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.817, i8* align 8 %cast.818, i64 80, i1 false)
  %cast.819 = bitcast %Response.0* %"$ret5" to i8*, !dbg !1838
  %cast.820 = bitcast %Response.0* %tmpv.153 to i8*, !dbg !1838
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.819, i8* align 8 %cast.820, i64 80, i1 false), !dbg !1838
  %cast.821 = bitcast %Response.0* %sret.formal.5 to i8*, !dbg !1838
  %cast.822 = bitcast %Response.0* %"$ret5" to i8*, !dbg !1838
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.821, i8* align 8 %cast.822, i64 80, i1 false), !dbg !1838
  %5 = bitcast { i8*, i64 }* %name to i8*, !dbg !1838
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %5), !dbg !1838
  %6 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !1838
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %6), !dbg !1838
  %7 = bitcast %error.0* %err to i8*, !dbg !1838
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %7), !dbg !1838
  %8 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !1838
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %8), !dbg !1838
  %9 = bitcast %Response.0* %"$ret5" to i8*, !dbg !1838
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %9), !dbg !1838
  ret void, !dbg !1838

fallthrough.61:                                   ; preds = %else.61
  %field.229 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 1, !dbg !1839
  %args.field.ld.10 = load i64, i64* %field.229, align 8, !dbg !1839
  store i64 %args.field.ld.10, i64* %tmpv.154, align 8
  %field.230 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 2, !dbg !1839
  %args.field.ld.11 = load i64, i64* %field.230, align 8, !dbg !1839
  store i64 %args.field.ld.11, i64* %tmpv.155, align 8
  %tmpv.154.ld.0 = load i64, i64* %tmpv.154, align 8, !dbg !1840
  %icmp.83 = icmp slt i64 0, %tmpv.154.ld.0, !dbg !1840
  %zext.83 = zext i1 %icmp.83 to i8, !dbg !1840
  %iand.2 = and i8 1, %zext.83, !dbg !1840
  %trunc.62 = trunc i8 %iand.2 to i1, !dbg !1840
  br i1 %trunc.62, label %then.62, label %else.62

else.61:                                          ; preds = %entry
  br label %fallthrough.61

then.62:                                          ; preds = %fallthrough.61
  br label %fallthrough.62

fallthrough.62:                                   ; preds = %then.62
  %field.231 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 0, !dbg !1839
  %args.field.ld.12 = load { i8*, i64 }*, { i8*, i64 }** %field.231, align 8, !dbg !1839
  %ptroff.2 = getelementptr { i8*, i64 }, { i8*, i64 }* %args.field.ld.12, i64 0, !dbg !1840
  %cast.823 = bitcast { i8*, i64 }* %name to i8*, !dbg !1841
  %cast.824 = bitcast { i8*, i64 }* %ptroff.2 to i8*, !dbg !1841
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.823, i8* align 8 %cast.824, i64 16, i1 false), !dbg !1841
  %field.232 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 0, !dbg !1842
  %stub.field.ld.18 = load { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }** %field.232, align 8, !dbg !1842
  %field.233 = getelementptr inbounds { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }* %stub.field.ld.18, i32 0, i32 15, !dbg !1842
  %.field.ld.23 = load void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)** %field.233, align 8, !dbg !1842
  %field.234 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 1, !dbg !1842
  %stub.field.ld.19 = load i8*, i8** %field.234, align 8, !dbg !1842
  %ld.104 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.101, i32 0, i32 0), align 8, !dbg !1842
  %ld.105 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.101, i32 0, i32 1), align 8, !dbg !1842
  %field0.58 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %name, i32 0, i32 0, !dbg !1842
  %ld.106 = load i8*, i8** %field0.58, align 8, !dbg !1842
  %field1.58 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %name, i32 0, i32 1, !dbg !1842
  %ld.107 = load i64, i64* %field1.58, align 8, !dbg !1842
  call void %.field.ld.23({ %IPST.0, %error.0 }* sret({ %IPST.0, %error.0 }) "go_sret" %sret.actual.78, i8* nest undef, i8* %stub.field.ld.19, i8* %ld.104, i64 %ld.105, i8* %ld.106, i64 %ld.107), !dbg !1842
  %cast.827 = bitcast { %IPST.0, %error.0 }* %tmpv.156 to i8*, !dbg !1842
  %cast.828 = bitcast { %IPST.0, %error.0 }* %sret.actual.78 to i8*, !dbg !1842
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.827, i8* align 8 %cast.828, i64 40, i1 false), !dbg !1842
  %field.235 = getelementptr inbounds { %IPST.0, %error.0 }, { %IPST.0, %error.0 }* %tmpv.156, i32 0, i32 0, !dbg !1842
  %cast.829 = bitcast %IPST.0* %tmpv.157 to i8*
  %cast.830 = bitcast %IPST.0* %field.235 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.829, i8* align 8 %cast.830, i64 24, i1 false)
  %cast.831 = bitcast %IPST.0* %valAsbytes to i8*
  %cast.832 = bitcast %IPST.0* %tmpv.157 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.831, i8* align 8 %cast.832, i64 24, i1 false)
  call void @llvm.dbg.declare(metadata %IPST.0* %valAsbytes, metadata !1843, metadata !DIExpression()), !dbg !1844
  %field.236 = getelementptr inbounds { %IPST.0, %error.0 }, { %IPST.0, %error.0 }* %tmpv.156, i32 0, i32 1, !dbg !1842
  %cast.833 = bitcast %error.0* %tmpv.158 to i8*
  %cast.834 = bitcast %error.0* %field.236 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.833, i8* align 8 %cast.834, i64 16, i1 false)
  %cast.835 = bitcast %error.0* %err to i8*, !dbg !1845
  %cast.836 = bitcast %error.0* %tmpv.158 to i8*, !dbg !1845
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.835, i8* align 8 %cast.836, i64 16, i1 false), !dbg !1845
  %field.238 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1846
  %err.field.ld.31 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.238, align 8, !dbg !1846
  %icmp.85 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.31, null, !dbg !1846
  %zext.85 = zext i1 %icmp.85 to i8, !dbg !1846
  %trunc.64 = trunc i8 %zext.85 to i1, !dbg !1847
  br i1 %trunc.64, label %then.63, label %else.63

else.62:                                          ; preds = %fallthrough.61
  %tmpv.154.ld.1 = load i64, i64* %tmpv.154, align 8, !dbg !1840
  call void @runtime.goPanicIndex(i8* nest undef, i64 0, i64 %tmpv.154.ld.1), !dbg !1840
  unreachable

then.63:                                          ; preds = %fallthrough.62
  %index.35 = getelementptr [3 x { i8*, i64 }], [3 x { i8*, i64 }]* %tmpv.159, i32 0, i32 0, !dbg !1848
  %cast.837 = bitcast { i8*, i64 }* %index.35 to i8*, !dbg !1848
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.837, i8* align 8 bitcast ({ i8*, i64 }* @const.132 to i8*), i64 16, i1 false), !dbg !1848
  %index.36 = getelementptr [3 x { i8*, i64 }], [3 x { i8*, i64 }]* %tmpv.159, i32 0, i32 1, !dbg !1848
  %cast.838 = bitcast { i8*, i64 }* %index.36 to i8*, !dbg !1848
  %cast.839 = bitcast { i8*, i64 }* %name to i8*, !dbg !1848
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.838, i8* align 8 %cast.839, i64 16, i1 false), !dbg !1848
  %index.37 = getelementptr [3 x { i8*, i64 }], [3 x { i8*, i64 }]* %tmpv.159, i32 0, i32 2, !dbg !1848
  %cast.840 = bitcast { i8*, i64 }* %index.37 to i8*, !dbg !1848
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.840, i8* align 8 bitcast ({ i8*, i64 }* @const.124 to i8*), i64 16, i1 false), !dbg !1848
  %cast.841 = bitcast [3 x { i8*, i64 }]* %tmpv.159 to i8*, !dbg !1848
  %call.43 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.841, i64 3), !dbg !1848
  store { i8*, i64 } %call.43, { i8*, i64 }* %sret.actual.79, align 8, !dbg !1848
  %cast.844 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !1849
  %cast.845 = bitcast { i8*, i64 }* %sret.actual.79 to i8*, !dbg !1849
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.844, i8* align 8 %cast.845, i64 16, i1 false), !dbg !1849
  %field0.59 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %jsonResp, i32 0, i32 0, !dbg !1850
  %ld.108 = load i8*, i8** %field0.59, align 8, !dbg !1850
  %field1.59 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %jsonResp, i32 0, i32 1, !dbg !1850
  %ld.109 = load i64, i64* %field1.59, align 8, !dbg !1850
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.80, i8* nest undef, i8* %ld.108, i64 %ld.109), !dbg !1850
  %cast.847 = bitcast %Response.0* %tmpv.160 to i8*
  %cast.848 = bitcast %Response.0* %sret.actual.80 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.847, i8* align 8 %cast.848, i64 80, i1 false)
  %cast.849 = bitcast %Response.0* %"$ret5" to i8*, !dbg !1851
  %cast.850 = bitcast %Response.0* %tmpv.160 to i8*, !dbg !1851
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.849, i8* align 8 %cast.850, i64 80, i1 false), !dbg !1851
  %cast.851 = bitcast %Response.0* %sret.formal.5 to i8*, !dbg !1851
  %cast.852 = bitcast %Response.0* %"$ret5" to i8*, !dbg !1851
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.851, i8* align 8 %cast.852, i64 80, i1 false), !dbg !1851
  %10 = bitcast { i8*, i64 }* %name to i8*, !dbg !1851
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %10), !dbg !1851
  %11 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !1851
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %11), !dbg !1851
  %12 = bitcast %error.0* %err to i8*, !dbg !1851
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %12), !dbg !1851
  %13 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !1851
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %13), !dbg !1851
  %14 = bitcast %Response.0* %"$ret5" to i8*, !dbg !1851
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %14), !dbg !1851
  ret void, !dbg !1851

fallthrough.63:                                   ; preds = %fallthrough.64
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Success(%Response.0* sret(%Response.0) "go_sret" %sret.actual.83, i8* nest undef, %IPST.0* byval(%IPST.0) %valAsbytes), !dbg !1852
  %cast.871 = bitcast %Response.0* %tmpv.163 to i8*
  %cast.872 = bitcast %Response.0* %sret.actual.83 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.871, i8* align 8 %cast.872, i64 80, i1 false)
  %cast.873 = bitcast %Response.0* %"$ret5" to i8*, !dbg !1853
  %cast.874 = bitcast %Response.0* %tmpv.163 to i8*, !dbg !1853
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.873, i8* align 8 %cast.874, i64 80, i1 false), !dbg !1853
  %cast.875 = bitcast %Response.0* %sret.formal.5 to i8*, !dbg !1853
  %cast.876 = bitcast %Response.0* %"$ret5" to i8*, !dbg !1853
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.875, i8* align 8 %cast.876, i64 80, i1 false), !dbg !1853
  %15 = bitcast { i8*, i64 }* %name to i8*, !dbg !1853
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %15), !dbg !1853
  %16 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !1853
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %16), !dbg !1853
  %17 = bitcast %error.0* %err to i8*, !dbg !1853
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %17), !dbg !1853
  %18 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !1853
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %18), !dbg !1853
  %19 = bitcast %Response.0* %"$ret5" to i8*, !dbg !1853
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %19), !dbg !1853
  ret void, !dbg !1853

else.63:                                          ; preds = %fallthrough.62
  %field.237 = getelementptr inbounds %IPST.0, %IPST.0* %valAsbytes, i32 0, i32 0, !dbg !1854
  %valAsbytes.field.ld.2 = load i8*, i8** %field.237, align 8, !dbg !1854
  %icmp.84 = icmp eq i8* %valAsbytes.field.ld.2, null, !dbg !1855
  %zext.84 = zext i1 %icmp.84 to i8, !dbg !1855
  %trunc.63 = trunc i8 %zext.84 to i1, !dbg !1856
  br i1 %trunc.63, label %then.64, label %else.64

then.64:                                          ; preds = %else.63
  %index.38 = getelementptr [3 x { i8*, i64 }], [3 x { i8*, i64 }]* %tmpv.161, i32 0, i32 0, !dbg !1857
  %cast.853 = bitcast { i8*, i64 }* %index.38 to i8*, !dbg !1857
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.853, i8* align 8 bitcast ({ i8*, i64 }* @const.134 to i8*), i64 16, i1 false), !dbg !1857
  %index.39 = getelementptr [3 x { i8*, i64 }], [3 x { i8*, i64 }]* %tmpv.161, i32 0, i32 1, !dbg !1857
  %cast.854 = bitcast { i8*, i64 }* %index.39 to i8*, !dbg !1857
  %cast.855 = bitcast { i8*, i64 }* %name to i8*, !dbg !1857
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.854, i8* align 8 %cast.855, i64 16, i1 false), !dbg !1857
  %index.40 = getelementptr [3 x { i8*, i64 }], [3 x { i8*, i64 }]* %tmpv.161, i32 0, i32 2, !dbg !1857
  %cast.856 = bitcast { i8*, i64 }* %index.40 to i8*, !dbg !1857
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.856, i8* align 8 bitcast ({ i8*, i64 }* @const.124 to i8*), i64 16, i1 false), !dbg !1857
  %cast.857 = bitcast [3 x { i8*, i64 }]* %tmpv.161 to i8*, !dbg !1857
  %call.44 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.857, i64 3), !dbg !1857
  store { i8*, i64 } %call.44, { i8*, i64 }* %sret.actual.81, align 8, !dbg !1857
  %cast.860 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !1858
  %cast.861 = bitcast { i8*, i64 }* %sret.actual.81 to i8*, !dbg !1858
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.860, i8* align 8 %cast.861, i64 16, i1 false), !dbg !1858
  %field0.60 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %jsonResp, i32 0, i32 0, !dbg !1859
  %ld.110 = load i8*, i8** %field0.60, align 8, !dbg !1859
  %field1.60 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %jsonResp, i32 0, i32 1, !dbg !1859
  %ld.111 = load i64, i64* %field1.60, align 8, !dbg !1859
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.82, i8* nest undef, i8* %ld.110, i64 %ld.111), !dbg !1859
  %cast.863 = bitcast %Response.0* %tmpv.162 to i8*
  %cast.864 = bitcast %Response.0* %sret.actual.82 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.863, i8* align 8 %cast.864, i64 80, i1 false)
  %cast.865 = bitcast %Response.0* %"$ret5" to i8*, !dbg !1860
  %cast.866 = bitcast %Response.0* %tmpv.162 to i8*, !dbg !1860
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.865, i8* align 8 %cast.866, i64 80, i1 false), !dbg !1860
  %cast.867 = bitcast %Response.0* %sret.formal.5 to i8*, !dbg !1860
  %cast.868 = bitcast %Response.0* %"$ret5" to i8*, !dbg !1860
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.867, i8* align 8 %cast.868, i64 80, i1 false), !dbg !1860
  %20 = bitcast { i8*, i64 }* %name to i8*, !dbg !1860
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %20), !dbg !1860
  %21 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !1860
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %21), !dbg !1860
  %22 = bitcast %error.0* %err to i8*, !dbg !1860
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %22), !dbg !1860
  %23 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !1860
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %23), !dbg !1860
  %24 = bitcast %Response.0* %"$ret5" to i8*, !dbg !1860
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %24), !dbg !1860
  ret void, !dbg !1860

fallthrough.64:                                   ; preds = %else.64
  br label %fallthrough.63

else.64:                                          ; preds = %else.63
  br label %fallthrough.64
}

define void @command_x2dline_x2darguments.MarblesPrivateChaincode.getMarblePrivateDetailsHash(%Response.0* sret(%Response.0) %sret.formal.6, i8* nest %nest.6, %MarblesPrivateChaincode.0* %t, i8* %stub.chunk0, i8* %stub.chunk1, %IPST.7* byval(%IPST.7) %args) #0 !dbg !1861 {
entry:
  %t.addr = alloca %MarblesPrivateChaincode.0*, align 8
  call void @llvm.dbg.declare(metadata %IPST.7* %args, metadata !1862, metadata !DIExpression()), !dbg !1863
  %stub.addr = alloca %ChaincodeStubInterface.0, align 8
  %"$ret6" = alloca %Response.0, align 8
  %name = alloca { i8*, i64 }, align 8
  %jsonResp = alloca { i8*, i64 }, align 8
  %err = alloca %error.0, align 8
  %valAsbytes = alloca %IPST.0, align 8
  %tmpv.164 = alloca %Response.0, align 8
  %sret.actual.84 = alloca %Response.0, align 8
  %tmpv.165 = alloca i64, align 8
  %tmpv.166 = alloca i64, align 8
  %tmpv.167 = alloca { %IPST.0, %error.0 }, align 8
  %sret.actual.85 = alloca { %IPST.0, %error.0 }, align 8
  %tmpv.168 = alloca %IPST.0, align 8
  %tmpv.169 = alloca %error.0, align 8
  %tmpv.170 = alloca { i8*, i64 }, align 8
  %sret.actual.86 = alloca { i8*, i64 }, align 8
  %tmpv.171 = alloca [5 x { i8*, i64 }], align 8
  %sret.actual.87 = alloca { i8*, i64 }, align 8
  %tmpv.172 = alloca %Response.0, align 8
  %sret.actual.88 = alloca %Response.0, align 8
  %tmpv.173 = alloca [3 x { i8*, i64 }], align 8
  %sret.actual.89 = alloca { i8*, i64 }, align 8
  %tmpv.174 = alloca %Response.0, align 8
  %sret.actual.90 = alloca %Response.0, align 8
  %tmpv.175 = alloca %Response.0, align 8
  %sret.actual.91 = alloca %Response.0, align 8
  store %MarblesPrivateChaincode.0* %t, %MarblesPrivateChaincode.0** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %MarblesPrivateChaincode.0** %t.addr, metadata !1864, metadata !DIExpression()), !dbg !1865
  %cast.950 = bitcast %ChaincodeStubInterface.0* %stub.addr to { i8*, i8* }*
  %field0.67 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.950, i32 0, i32 0
  store i8* %stub.chunk0, i8** %field0.67, align 8
  %field1.67 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.950, i32 0, i32 1
  store i8* %stub.chunk1, i8** %field1.67, align 8
  call void @llvm.dbg.declare(metadata %ChaincodeStubInterface.0* %stub.addr, metadata !1866, metadata !DIExpression()), !dbg !1867
  %0 = bitcast %Response.0* %"$ret6" to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* %0)
  %cast.949 = bitcast %Response.0* %"$ret6" to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.949, i8* align 8 bitcast (%Response.0* @const.44 to i8*), i64 80, i1 false)
  call void @llvm.dbg.declare(metadata %Response.0* %"$ret6", metadata !1868, metadata !DIExpression()), !dbg !1869
  %1 = bitcast { i8*, i64 }* %name to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %1)
  %2 = bitcast { i8*, i64 }* %jsonResp to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %2)
  %3 = bitcast %error.0* %err to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %3)
  %4 = bitcast %IPST.0* %valAsbytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %4)
  %cast.879 = bitcast { i8*, i64 }* %name to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.879, i8* align 8 bitcast ({ i8*, i64 }* @const.116 to i8*), i64 16, i1 false)
  call void @llvm.dbg.declare(metadata { i8*, i64 }* %name, metadata !1870, metadata !DIExpression()), !dbg !1872
  %cast.880 = bitcast { i8*, i64 }* %jsonResp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.880, i8* align 8 bitcast ({ i8*, i64 }* @const.116 to i8*), i64 16, i1 false)
  call void @llvm.dbg.declare(metadata { i8*, i64 }* %jsonResp, metadata !1873, metadata !DIExpression()), !dbg !1874
  %cast.881 = bitcast %error.0* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.881, i8* align 8 bitcast (%error.0* @const.60 to i8*), i64 16, i1 false)
  call void @llvm.dbg.declare(metadata %error.0* %err, metadata !1875, metadata !DIExpression()), !dbg !1876
  %field.239 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 1, !dbg !1877
  %args.field.ld.13 = load i64, i64* %field.239, align 8, !dbg !1877
  %icmp.86 = icmp ne i64 %args.field.ld.13, 1, !dbg !1878
  %zext.86 = zext i1 %icmp.86 to i8, !dbg !1878
  %trunc.65 = trunc i8 %zext.86 to i1, !dbg !1879
  br i1 %trunc.65, label %then.65, label %else.65

then.65:                                          ; preds = %entry
  %ld.112 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.118, i32 0, i32 0), align 8, !dbg !1880
  %ld.113 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.118, i32 0, i32 1), align 8, !dbg !1880
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.84, i8* nest undef, i8* %ld.112, i64 %ld.113), !dbg !1880
  %cast.883 = bitcast %Response.0* %tmpv.164 to i8*
  %cast.884 = bitcast %Response.0* %sret.actual.84 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.883, i8* align 8 %cast.884, i64 80, i1 false)
  %cast.885 = bitcast %Response.0* %"$ret6" to i8*, !dbg !1881
  %cast.886 = bitcast %Response.0* %tmpv.164 to i8*, !dbg !1881
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.885, i8* align 8 %cast.886, i64 80, i1 false), !dbg !1881
  %cast.887 = bitcast %Response.0* %sret.formal.6 to i8*, !dbg !1881
  %cast.888 = bitcast %Response.0* %"$ret6" to i8*, !dbg !1881
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.887, i8* align 8 %cast.888, i64 80, i1 false), !dbg !1881
  %5 = bitcast { i8*, i64 }* %name to i8*, !dbg !1881
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %5), !dbg !1881
  %6 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !1881
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %6), !dbg !1881
  %7 = bitcast %error.0* %err to i8*, !dbg !1881
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %7), !dbg !1881
  %8 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !1881
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %8), !dbg !1881
  %9 = bitcast %Response.0* %"$ret6" to i8*, !dbg !1881
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %9), !dbg !1881
  ret void, !dbg !1881

fallthrough.65:                                   ; preds = %else.65
  %field.240 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 1, !dbg !1882
  %args.field.ld.14 = load i64, i64* %field.240, align 8, !dbg !1882
  store i64 %args.field.ld.14, i64* %tmpv.165, align 8
  %field.241 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 2, !dbg !1882
  %args.field.ld.15 = load i64, i64* %field.241, align 8, !dbg !1882
  store i64 %args.field.ld.15, i64* %tmpv.166, align 8
  %tmpv.165.ld.0 = load i64, i64* %tmpv.165, align 8, !dbg !1883
  %icmp.88 = icmp slt i64 0, %tmpv.165.ld.0, !dbg !1883
  %zext.88 = zext i1 %icmp.88 to i8, !dbg !1883
  %iand.3 = and i8 1, %zext.88, !dbg !1883
  %trunc.66 = trunc i8 %iand.3 to i1, !dbg !1883
  br i1 %trunc.66, label %then.66, label %else.66

else.65:                                          ; preds = %entry
  br label %fallthrough.65

then.66:                                          ; preds = %fallthrough.65
  br label %fallthrough.66

fallthrough.66:                                   ; preds = %then.66
  %field.242 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 0, !dbg !1882
  %args.field.ld.16 = load { i8*, i64 }*, { i8*, i64 }** %field.242, align 8, !dbg !1882
  %ptroff.3 = getelementptr { i8*, i64 }, { i8*, i64 }* %args.field.ld.16, i64 0, !dbg !1883
  %cast.889 = bitcast { i8*, i64 }* %name to i8*, !dbg !1884
  %cast.890 = bitcast { i8*, i64 }* %ptroff.3 to i8*, !dbg !1884
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.889, i8* align 8 %cast.890, i64 16, i1 false), !dbg !1884
  %field.243 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 0, !dbg !1885
  %stub.field.ld.20 = load { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }** %field.243, align 8, !dbg !1885
  %field.244 = getelementptr inbounds { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }* %stub.field.ld.20, i32 0, i32 15, !dbg !1885
  %.field.ld.24 = load void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)** %field.244, align 8, !dbg !1885
  %field.245 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 1, !dbg !1885
  %stub.field.ld.21 = load i8*, i8** %field.245, align 8, !dbg !1885
  %ld.114 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.108, i32 0, i32 0), align 8, !dbg !1885
  %ld.115 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.108, i32 0, i32 1), align 8, !dbg !1885
  %field0.64 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %name, i32 0, i32 0, !dbg !1885
  %ld.116 = load i8*, i8** %field0.64, align 8, !dbg !1885
  %field1.64 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %name, i32 0, i32 1, !dbg !1885
  %ld.117 = load i64, i64* %field1.64, align 8, !dbg !1885
  call void %.field.ld.24({ %IPST.0, %error.0 }* sret({ %IPST.0, %error.0 }) "go_sret" %sret.actual.85, i8* nest undef, i8* %stub.field.ld.21, i8* %ld.114, i64 %ld.115, i8* %ld.116, i64 %ld.117), !dbg !1885
  %cast.893 = bitcast { %IPST.0, %error.0 }* %tmpv.167 to i8*, !dbg !1885
  %cast.894 = bitcast { %IPST.0, %error.0 }* %sret.actual.85 to i8*, !dbg !1885
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.893, i8* align 8 %cast.894, i64 40, i1 false), !dbg !1885
  %field.246 = getelementptr inbounds { %IPST.0, %error.0 }, { %IPST.0, %error.0 }* %tmpv.167, i32 0, i32 0, !dbg !1885
  %cast.895 = bitcast %IPST.0* %tmpv.168 to i8*
  %cast.896 = bitcast %IPST.0* %field.246 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.895, i8* align 8 %cast.896, i64 24, i1 false)
  %cast.897 = bitcast %IPST.0* %valAsbytes to i8*
  %cast.898 = bitcast %IPST.0* %tmpv.168 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.897, i8* align 8 %cast.898, i64 24, i1 false)
  call void @llvm.dbg.declare(metadata %IPST.0* %valAsbytes, metadata !1886, metadata !DIExpression()), !dbg !1887
  %field.247 = getelementptr inbounds { %IPST.0, %error.0 }, { %IPST.0, %error.0 }* %tmpv.167, i32 0, i32 1, !dbg !1885
  %cast.899 = bitcast %error.0* %tmpv.169 to i8*
  %cast.900 = bitcast %error.0* %field.247 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.899, i8* align 8 %cast.900, i64 16, i1 false)
  %cast.901 = bitcast %error.0* %err to i8*, !dbg !1888
  %cast.902 = bitcast %error.0* %tmpv.169 to i8*, !dbg !1888
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.901, i8* align 8 %cast.902, i64 16, i1 false), !dbg !1888
  %field.252 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1889
  %err.field.ld.34 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.252, align 8, !dbg !1889
  %icmp.90 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.34, null, !dbg !1889
  %zext.90 = zext i1 %icmp.90 to i8, !dbg !1889
  %trunc.68 = trunc i8 %zext.90 to i1, !dbg !1890
  br i1 %trunc.68, label %then.67, label %else.67

else.66:                                          ; preds = %fallthrough.65
  %tmpv.165.ld.1 = load i64, i64* %tmpv.165, align 8, !dbg !1883
  call void @runtime.goPanicIndex(i8* nest undef, i64 0, i64 %tmpv.165.ld.1), !dbg !1883
  unreachable

then.67:                                          ; preds = %fallthrough.66
  %field.248 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1891
  %err.field.ld.32 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.248, align 8, !dbg !1891
  %field.249 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.32, i32 0, i32 1, !dbg !1891
  %.field.ld.25 = load { i8*, i64 } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)** %field.249, align 8, !dbg !1891
  %field.250 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !1891
  %err.field.ld.33 = load i8*, i8** %field.250, align 8, !dbg !1891
  %call.45 = call { i8*, i64 } %.field.ld.25(i8* nest undef, i8* %err.field.ld.33), !dbg !1891
  store { i8*, i64 } %call.45, { i8*, i64 }* %sret.actual.86, align 8, !dbg !1891
  %cast.904 = bitcast { i8*, i64 }* %tmpv.170 to i8*
  %cast.905 = bitcast { i8*, i64 }* %sret.actual.86 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.904, i8* align 8 %cast.905, i64 16, i1 false)
  %index.41 = getelementptr [5 x { i8*, i64 }], [5 x { i8*, i64 }]* %tmpv.171, i32 0, i32 0, !dbg !1892
  %cast.906 = bitcast { i8*, i64 }* %index.41 to i8*, !dbg !1892
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.906, i8* align 8 bitcast ({ i8*, i64 }* @const.136 to i8*), i64 16, i1 false), !dbg !1892
  %index.42 = getelementptr [5 x { i8*, i64 }], [5 x { i8*, i64 }]* %tmpv.171, i32 0, i32 1, !dbg !1892
  %cast.907 = bitcast { i8*, i64 }* %index.42 to i8*, !dbg !1892
  %cast.908 = bitcast { i8*, i64 }* %name to i8*, !dbg !1892
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.907, i8* align 8 %cast.908, i64 16, i1 false), !dbg !1892
  %index.43 = getelementptr [5 x { i8*, i64 }], [5 x { i8*, i64 }]* %tmpv.171, i32 0, i32 2, !dbg !1892
  %cast.909 = bitcast { i8*, i64 }* %index.43 to i8*, !dbg !1892
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.909, i8* align 8 bitcast ({ i8*, i64 }* @const.123 to i8*), i64 16, i1 false), !dbg !1892
  %index.44 = getelementptr [5 x { i8*, i64 }], [5 x { i8*, i64 }]* %tmpv.171, i32 0, i32 3, !dbg !1892
  %cast.910 = bitcast { i8*, i64 }* %index.44 to i8*, !dbg !1892
  %cast.911 = bitcast { i8*, i64 }* %tmpv.170 to i8*, !dbg !1892
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.910, i8* align 8 %cast.911, i64 16, i1 false), !dbg !1892
  %index.45 = getelementptr [5 x { i8*, i64 }], [5 x { i8*, i64 }]* %tmpv.171, i32 0, i32 4, !dbg !1892
  %cast.912 = bitcast { i8*, i64 }* %index.45 to i8*, !dbg !1892
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.912, i8* align 8 bitcast ({ i8*, i64 }* @const.124 to i8*), i64 16, i1 false), !dbg !1892
  %cast.913 = bitcast [5 x { i8*, i64 }]* %tmpv.171 to i8*, !dbg !1892
  %call.46 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.913, i64 5), !dbg !1892
  store { i8*, i64 } %call.46, { i8*, i64 }* %sret.actual.87, align 8, !dbg !1892
  %cast.916 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !1893
  %cast.917 = bitcast { i8*, i64 }* %sret.actual.87 to i8*, !dbg !1893
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.916, i8* align 8 %cast.917, i64 16, i1 false), !dbg !1893
  %field0.65 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %jsonResp, i32 0, i32 0, !dbg !1894
  %ld.118 = load i8*, i8** %field0.65, align 8, !dbg !1894
  %field1.65 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %jsonResp, i32 0, i32 1, !dbg !1894
  %ld.119 = load i64, i64* %field1.65, align 8, !dbg !1894
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.88, i8* nest undef, i8* %ld.118, i64 %ld.119), !dbg !1894
  %cast.919 = bitcast %Response.0* %tmpv.172 to i8*
  %cast.920 = bitcast %Response.0* %sret.actual.88 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.919, i8* align 8 %cast.920, i64 80, i1 false)
  %cast.921 = bitcast %Response.0* %"$ret6" to i8*, !dbg !1895
  %cast.922 = bitcast %Response.0* %tmpv.172 to i8*, !dbg !1895
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.921, i8* align 8 %cast.922, i64 80, i1 false), !dbg !1895
  %cast.923 = bitcast %Response.0* %sret.formal.6 to i8*, !dbg !1895
  %cast.924 = bitcast %Response.0* %"$ret6" to i8*, !dbg !1895
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.923, i8* align 8 %cast.924, i64 80, i1 false), !dbg !1895
  %10 = bitcast { i8*, i64 }* %name to i8*, !dbg !1895
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %10), !dbg !1895
  %11 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !1895
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %11), !dbg !1895
  %12 = bitcast %error.0* %err to i8*, !dbg !1895
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %12), !dbg !1895
  %13 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !1895
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %13), !dbg !1895
  %14 = bitcast %Response.0* %"$ret6" to i8*, !dbg !1895
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %14), !dbg !1895
  ret void, !dbg !1895

fallthrough.67:                                   ; preds = %fallthrough.68
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Success(%Response.0* sret(%Response.0) "go_sret" %sret.actual.91, i8* nest undef, %IPST.0* byval(%IPST.0) %valAsbytes), !dbg !1896
  %cast.943 = bitcast %Response.0* %tmpv.175 to i8*
  %cast.944 = bitcast %Response.0* %sret.actual.91 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.943, i8* align 8 %cast.944, i64 80, i1 false)
  %cast.945 = bitcast %Response.0* %"$ret6" to i8*, !dbg !1897
  %cast.946 = bitcast %Response.0* %tmpv.175 to i8*, !dbg !1897
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.945, i8* align 8 %cast.946, i64 80, i1 false), !dbg !1897
  %cast.947 = bitcast %Response.0* %sret.formal.6 to i8*, !dbg !1897
  %cast.948 = bitcast %Response.0* %"$ret6" to i8*, !dbg !1897
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.947, i8* align 8 %cast.948, i64 80, i1 false), !dbg !1897
  %15 = bitcast { i8*, i64 }* %name to i8*, !dbg !1897
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %15), !dbg !1897
  %16 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !1897
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %16), !dbg !1897
  %17 = bitcast %error.0* %err to i8*, !dbg !1897
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %17), !dbg !1897
  %18 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !1897
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %18), !dbg !1897
  %19 = bitcast %Response.0* %"$ret6" to i8*, !dbg !1897
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %19), !dbg !1897
  ret void, !dbg !1897

else.67:                                          ; preds = %fallthrough.66
  %field.251 = getelementptr inbounds %IPST.0, %IPST.0* %valAsbytes, i32 0, i32 0, !dbg !1898
  %valAsbytes.field.ld.3 = load i8*, i8** %field.251, align 8, !dbg !1898
  %icmp.89 = icmp eq i8* %valAsbytes.field.ld.3, null, !dbg !1899
  %zext.89 = zext i1 %icmp.89 to i8, !dbg !1899
  %trunc.67 = trunc i8 %zext.89 to i1, !dbg !1900
  br i1 %trunc.67, label %then.68, label %else.68

then.68:                                          ; preds = %else.67
  %index.46 = getelementptr [3 x { i8*, i64 }], [3 x { i8*, i64 }]* %tmpv.173, i32 0, i32 0, !dbg !1901
  %cast.925 = bitcast { i8*, i64 }* %index.46 to i8*, !dbg !1901
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.925, i8* align 8 bitcast ({ i8*, i64 }* @const.138 to i8*), i64 16, i1 false), !dbg !1901
  %index.47 = getelementptr [3 x { i8*, i64 }], [3 x { i8*, i64 }]* %tmpv.173, i32 0, i32 1, !dbg !1901
  %cast.926 = bitcast { i8*, i64 }* %index.47 to i8*, !dbg !1901
  %cast.927 = bitcast { i8*, i64 }* %name to i8*, !dbg !1901
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.926, i8* align 8 %cast.927, i64 16, i1 false), !dbg !1901
  %index.48 = getelementptr [3 x { i8*, i64 }], [3 x { i8*, i64 }]* %tmpv.173, i32 0, i32 2, !dbg !1901
  %cast.928 = bitcast { i8*, i64 }* %index.48 to i8*, !dbg !1901
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.928, i8* align 8 bitcast ({ i8*, i64 }* @const.124 to i8*), i64 16, i1 false), !dbg !1901
  %cast.929 = bitcast [3 x { i8*, i64 }]* %tmpv.173 to i8*, !dbg !1901
  %call.47 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.929, i64 3), !dbg !1901
  store { i8*, i64 } %call.47, { i8*, i64 }* %sret.actual.89, align 8, !dbg !1901
  %cast.932 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !1902
  %cast.933 = bitcast { i8*, i64 }* %sret.actual.89 to i8*, !dbg !1902
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.932, i8* align 8 %cast.933, i64 16, i1 false), !dbg !1902
  %field0.66 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %jsonResp, i32 0, i32 0, !dbg !1903
  %ld.120 = load i8*, i8** %field0.66, align 8, !dbg !1903
  %field1.66 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %jsonResp, i32 0, i32 1, !dbg !1903
  %ld.121 = load i64, i64* %field1.66, align 8, !dbg !1903
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.90, i8* nest undef, i8* %ld.120, i64 %ld.121), !dbg !1903
  %cast.935 = bitcast %Response.0* %tmpv.174 to i8*
  %cast.936 = bitcast %Response.0* %sret.actual.90 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.935, i8* align 8 %cast.936, i64 80, i1 false)
  %cast.937 = bitcast %Response.0* %"$ret6" to i8*, !dbg !1904
  %cast.938 = bitcast %Response.0* %tmpv.174 to i8*, !dbg !1904
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.937, i8* align 8 %cast.938, i64 80, i1 false), !dbg !1904
  %cast.939 = bitcast %Response.0* %sret.formal.6 to i8*, !dbg !1904
  %cast.940 = bitcast %Response.0* %"$ret6" to i8*, !dbg !1904
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.939, i8* align 8 %cast.940, i64 80, i1 false), !dbg !1904
  %20 = bitcast { i8*, i64 }* %name to i8*, !dbg !1904
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %20), !dbg !1904
  %21 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !1904
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %21), !dbg !1904
  %22 = bitcast %error.0* %err to i8*, !dbg !1904
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %22), !dbg !1904
  %23 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !1904
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %23), !dbg !1904
  %24 = bitcast %Response.0* %"$ret6" to i8*, !dbg !1904
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %24), !dbg !1904
  ret void, !dbg !1904

fallthrough.68:                                   ; preds = %else.68
  br label %fallthrough.67

else.68:                                          ; preds = %else.67
  br label %fallthrough.68
}

define void @command_x2dline_x2darguments.MarblesPrivateChaincode.getMarblesByRange(%Response.0* sret(%Response.0) %sret.formal.9, i8* nest %nest.9, %MarblesPrivateChaincode.0* %t, i8* %stub.chunk0, i8* %stub.chunk1, %IPST.7* byval(%IPST.7) %args) #0 personality i32 (i32, i32, i64, i8*, i8*)* @__gccgo_personality_v0 !dbg !1905 {
entry:
  %tmp.29 = alloca %IPST.52, align 8
  %tmp.28 = alloca %IPST.3, align 8
  %tmp.27 = alloca %IPST.52, align 8
  %tmp.26 = alloca %IPST.3, align 8
  %tmp.25 = alloca %IPST.3, align 8
  %ehtmp.0 = alloca { i8*, i32 }, align 8
  %t.addr = alloca %MarblesPrivateChaincode.0*, align 8
  call void @llvm.dbg.declare(metadata %IPST.7* %args, metadata !1906, metadata !DIExpression()), !dbg !1907
  %stub.addr = alloca %ChaincodeStubInterface.0, align 8
  %"$ret9" = alloca %Response.0, align 8
  %tmpv.284 = alloca i8, align 1, !go_addrtaken !46
  %tmpv.285 = alloca %Buffer.0, align 8, !go_addrtaken !46
  %startKey = alloca { i8*, i64 }, align 8
  %endKey = alloca { i8*, i64 }, align 8
  %resultsIterator = alloca %StateQueryIteratorInterface.0, align 8
  %err = alloca %error.0, align 8
  %bArrayMemberAlreadyWritten = alloca i8, align 1
  %tmpv.286 = alloca %Response.0, align 8
  %sret.actual.157 = alloca %Response.0, align 8
  %tmpv.287 = alloca i64, align 8
  %tmpv.288 = alloca i64, align 8
  %tmpv.289 = alloca i64, align 8
  %tmpv.290 = alloca i64, align 8
  %tmpv.291 = alloca { %StateQueryIteratorInterface.0, %error.0 }, align 8
  %sret.actual.158 = alloca { %StateQueryIteratorInterface.0, %error.0 }, align 8
  %tmpv.292 = alloca %StateQueryIteratorInterface.0, align 8
  %tmpv.293 = alloca %error.0, align 8
  %tmpv.294 = alloca { i8*, i64 }, align 8
  %sret.actual.159 = alloca { i8*, i64 }, align 8
  %tmpv.295 = alloca %Response.0, align 8
  %sret.actual.160 = alloca %Response.0, align 8
  %tmpv.296 = alloca { i8*, i8*, i8*, i8*, i64, i8*, i64, i8, i8 }, align 8, !go_addrtaken !46
  %tmpv.297 = alloca { %StateQueryIteratorInterface.0 }, align 8, !go_addrtaken !46
  %tmpv.298 = alloca { %StateQueryIteratorInterface.0 }*, align 8, !go_addrtaken !46
  %tmpv.299 = alloca { i64, %error.0 }, align 8
  %sret.actual.161 = alloca { i64, %error.0 }, align 8
  %queryResponse = alloca %KV.0*, align 8
  %err1 = alloca %error.0, align 8
  %tmpv.300 = alloca { %KV.0*, %error.0 }, align 8
  %sret.actual.162 = alloca { %KV.0*, %error.0 }, align 8
  %tmpv.301 = alloca %KV.0*, align 8
  %tmpv.302 = alloca %error.0, align 8
  %tmpv.303 = alloca { i8*, i64 }, align 8
  %sret.actual.163 = alloca { i8*, i64 }, align 8
  %tmpv.304 = alloca %Response.0, align 8
  %sret.actual.164 = alloca %Response.0, align 8
  %tmpv.305 = alloca { i64, %error.0 }, align 8
  %sret.actual.165 = alloca { i64, %error.0 }, align 8
  %tmpv.306 = alloca { i64, %error.0 }, align 8
  %tmpv.307 = alloca { i8*, i64 }*, align 8, !go_addrtaken !46
  %tmpv.308 = alloca { i8*, i64 }, align 8, !go_addrtaken !46
  %tmpv.309 = alloca %KV.0*, align 8
  %tmpv.310 = alloca %IPST.0*, align 8, !go_addrtaken !46
  %tmpv.311 = alloca %IPST.0, align 8, !go_addrtaken !46
  %tmpv.312 = alloca %KV.0*, align 8
  %tmpv.313 = alloca [2 x %IPST.3], align 8
  %tmpv.314 = alloca { i8*, i64 }, align 8
  %sret.actual.166 = alloca { i8*, i64 }, align 8
  %sret.actual.167 = alloca { i64, %error.0 }, align 8
  %tmpv.315 = alloca { i64, %error.0 }, align 8
  %sret.actual.168 = alloca { i64, %error.0 }, align 8
  %tmpv.316 = alloca { i64, %error.0 }, align 8
  %tmpv.317 = alloca { i8*, i64 }, align 8
  %sret.actual.169 = alloca { i8*, i64 }, align 8
  %tmpv.318 = alloca { i8*, i64 }*, align 8, !go_addrtaken !46
  %tmpv.319 = alloca { i8*, i64 }, align 8, !go_addrtaken !46
  %tmpv.320 = alloca [1 x %IPST.3], align 8
  %sret.actual.170 = alloca { i64, %error.0 }, align 8
  %tmpv.321 = alloca %IPST.0, align 8
  %sret.actual.171 = alloca %IPST.0, align 8
  %tmpv.322 = alloca %Response.0, align 8
  %sret.actual.172 = alloca %Response.0, align 8
  %finvar.0 = alloca i8, align 1
  store %MarblesPrivateChaincode.0* %t, %MarblesPrivateChaincode.0** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %MarblesPrivateChaincode.0** %t.addr, metadata !1908, metadata !DIExpression()), !dbg !1909
  %cast.1595 = bitcast %ChaincodeStubInterface.0* %stub.addr to { i8*, i8* }*
  %field0.125 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1595, i32 0, i32 0
  store i8* %stub.chunk0, i8** %field0.125, align 8
  %field1.125 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1595, i32 0, i32 1
  store i8* %stub.chunk1, i8** %field1.125, align 8
  call void @llvm.dbg.declare(metadata %ChaincodeStubInterface.0* %stub.addr, metadata !1910, metadata !DIExpression()), !dbg !1911
  %0 = bitcast %Response.0* %"$ret9" to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* %0)
  store i8 0, i8* %tmpv.284, align 1
  %cast.1592 = bitcast %Response.0* %"$ret9" to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1592, i8* align 8 bitcast (%Response.0* @const.44 to i8*), i64 80, i1 false)
  call void @llvm.dbg.declare(metadata %Response.0* %"$ret9", metadata !1912, metadata !DIExpression()), !dbg !1913
  %1 = bitcast { i8*, i64 }* %startKey to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %1)
  %2 = bitcast { i8*, i64 }* %endKey to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %2)
  %3 = bitcast %StateQueryIteratorInterface.0* %resultsIterator to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %3)
  %4 = bitcast %error.0* %err to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %4)
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %bArrayMemberAlreadyWritten)
  %field.400 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 1, !dbg !1914
  %args.field.ld.19 = load i64, i64* %field.400, align 8, !dbg !1914
  %icmp.123 = icmp slt i64 %args.field.ld.19, 2, !dbg !1916
  %zext.123 = zext i1 %icmp.123 to i8, !dbg !1916
  %trunc.101 = trunc i8 %zext.123 to i1, !dbg !1917
  br i1 %trunc.101, label %then.101, label %else.101

finok.0:                                          ; No predecessors!
  store i8 1, i8* %finvar.0, align 1
  br label %finally.0

finally.0:                                        ; preds = %catchpad.0, %finok.0
  br label %finish.0

pad.0:                                            ; preds = %cont.29, %cont.28, %cont.11, %cont.6, %cont.1, %finish.0
  %ex.0 = landingpad { i8*, i32 }
          catch i8* null
  br label %catch.0

catch.0:                                          ; preds = %pad.0
  call void @runtime.checkdefer(i8* nest undef, i8* %tmpv.284), !dbg !1918
  br label %finish.0

finish.0:                                         ; preds = %catch.0, %finally.0
  invoke void @runtime.deferreturn(i8* nest undef, i8* %tmpv.284)
          to label %cont.0 unwind label %pad.0, !dbg !1918

cont.0:                                           ; preds = %cont.29, %cont.28, %cont.11, %cont.6, %cont.1, %finish.0
  %fload.0 = load i8, i8* %finvar.0, align 1
  %icmp.135 = icmp eq i8 %fload.0, 1
  br i1 %icmp.135, label %finret.0, label %finres.0

pad.1:                                            ; preds = %cont.27, %cont.26, %fallthrough.112, %else.112, %cont.23, %cont.22, %fallthrough.111, %label.0, %cont.19, %fallthrough.110, %else.110, %then.109, %fallthrough.108, %else.108, %then.107, %fallthrough.106, %then.106, %cont.10, %then.105, %label.1, %cont.7, %fallthrough.104, %cont.5, %then.104, %fallthrough.103, %else.103, %else.102, %then.101
  %ex.1 = landingpad { i8*, i32 }
          catch i8* null
  br label %catch.1

catch.1:                                          ; preds = %pad.1
  invoke void @runtime.checkdefer(i8* nest undef, i8* %tmpv.284)
          to label %cont.29 unwind label %catchpad.0, !dbg !1918

catchpad.0:                                       ; preds = %catch.1
  %ex2.0 = landingpad { i8*, i32 }
          cleanup
  store { i8*, i32 } %ex2.0, { i8*, i32 }* %ehtmp.0, align 8
  store i8 0, i8* %finvar.0, align 1
  br label %finally.0

then.101:                                         ; preds = %entry
  %ld.210 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.175, i32 0, i32 0), align 8, !dbg !1919
  %ld.211 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.175, i32 0, i32 1), align 8, !dbg !1919
  invoke void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.157, i8* nest undef, i8* %ld.210, i64 %ld.211)
          to label %cont.1 unwind label %pad.1, !dbg !1919

fallthrough.101:                                  ; preds = %else.101
  %field.401 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 1, !dbg !1920
  %args.field.ld.20 = load i64, i64* %field.401, align 8, !dbg !1920
  store i64 %args.field.ld.20, i64* %tmpv.287, align 8
  %field.402 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 2, !dbg !1920
  %args.field.ld.21 = load i64, i64* %field.402, align 8, !dbg !1920
  store i64 %args.field.ld.21, i64* %tmpv.288, align 8
  %tmpv.287.ld.0 = load i64, i64* %tmpv.287, align 8, !dbg !1921
  %icmp.125 = icmp slt i64 0, %tmpv.287.ld.0, !dbg !1921
  %zext.125 = zext i1 %icmp.125 to i8, !dbg !1921
  %iand.4 = and i8 1, %zext.125, !dbg !1921
  %trunc.102 = trunc i8 %iand.4 to i1, !dbg !1921
  br i1 %trunc.102, label %then.102, label %else.102

else.101:                                         ; preds = %entry
  br label %fallthrough.101

cont.1:                                           ; preds = %then.101
  %cast.1463 = bitcast %Response.0* %tmpv.286 to i8*
  %cast.1464 = bitcast %Response.0* %sret.actual.157 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1463, i8* align 8 %cast.1464, i64 80, i1 false)
  %cast.1465 = bitcast %Response.0* %"$ret9" to i8*, !dbg !1922
  %cast.1466 = bitcast %Response.0* %tmpv.286 to i8*, !dbg !1922
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1465, i8* align 8 %cast.1466, i64 80, i1 false), !dbg !1922
  store i8 1, i8* %finvar.0, align 1
  invoke void @runtime.deferreturn(i8* nest undef, i8* %tmpv.284)
          to label %cont.0 unwind label %pad.0, !dbg !1918

then.102:                                         ; preds = %fallthrough.101
  br label %fallthrough.102

fallthrough.102:                                  ; preds = %then.102
  %field.403 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 0, !dbg !1920
  %args.field.ld.22 = load { i8*, i64 }*, { i8*, i64 }** %field.403, align 8, !dbg !1920
  %ptroff.4 = getelementptr { i8*, i64 }, { i8*, i64 }* %args.field.ld.22, i64 0, !dbg !1921
  %cast.1469 = bitcast { i8*, i64 }* %startKey to i8*
  %cast.1470 = bitcast { i8*, i64 }* %ptroff.4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1469, i8* align 8 %cast.1470, i64 16, i1 false)
  call void @llvm.dbg.declare(metadata { i8*, i64 }* %startKey, metadata !1923, metadata !DIExpression()), !dbg !1924
  %field.404 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 1, !dbg !1925
  %args.field.ld.23 = load i64, i64* %field.404, align 8, !dbg !1925
  store i64 %args.field.ld.23, i64* %tmpv.289, align 8
  %field.405 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 2, !dbg !1925
  %args.field.ld.24 = load i64, i64* %field.405, align 8, !dbg !1925
  store i64 %args.field.ld.24, i64* %tmpv.290, align 8
  %tmpv.289.ld.0 = load i64, i64* %tmpv.289, align 8, !dbg !1926
  %icmp.127 = icmp slt i64 1, %tmpv.289.ld.0, !dbg !1926
  %zext.127 = zext i1 %icmp.127 to i8, !dbg !1926
  %iand.5 = and i8 1, %zext.127, !dbg !1926
  %trunc.103 = trunc i8 %iand.5 to i1, !dbg !1926
  br i1 %trunc.103, label %then.103, label %else.103

else.102:                                         ; preds = %fallthrough.101
  %tmpv.287.ld.1 = load i64, i64* %tmpv.287, align 8, !dbg !1921
  invoke void @runtime.goPanicIndex(i8* nest undef, i64 0, i64 %tmpv.287.ld.1)
          to label %cont.2 unwind label %pad.1, !dbg !1921

cont.2:                                           ; preds = %else.102
  unreachable

then.103:                                         ; preds = %fallthrough.102
  br label %fallthrough.103

fallthrough.103:                                  ; preds = %then.103
  %field.406 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 0, !dbg !1925
  %args.field.ld.25 = load { i8*, i64 }*, { i8*, i64 }** %field.406, align 8, !dbg !1925
  %ptroff.5 = getelementptr { i8*, i64 }, { i8*, i64 }* %args.field.ld.25, i64 1, !dbg !1926
  %cast.1471 = bitcast { i8*, i64 }* %endKey to i8*
  %cast.1472 = bitcast { i8*, i64 }* %ptroff.5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1471, i8* align 8 %cast.1472, i64 16, i1 false)
  call void @llvm.dbg.declare(metadata { i8*, i64 }* %endKey, metadata !1927, metadata !DIExpression()), !dbg !1928
  %field.407 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 0, !dbg !1929
  %stub.field.ld.40 = load { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }** %field.407, align 8, !dbg !1929
  %field.408 = getelementptr inbounds { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }* %stub.field.ld.40, i32 0, i32 14, !dbg !1929
  %.field.ld.44 = load void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)** %field.408, align 8, !dbg !1929
  %field.409 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 1, !dbg !1929
  %stub.field.ld.41 = load i8*, i8** %field.409, align 8, !dbg !1929
  %ld.212 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.101, i32 0, i32 0), align 8, !dbg !1929
  %ld.213 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.101, i32 0, i32 1), align 8, !dbg !1929
  %field0.116 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %startKey, i32 0, i32 0, !dbg !1929
  %ld.214 = load i8*, i8** %field0.116, align 8, !dbg !1929
  %field1.116 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %startKey, i32 0, i32 1, !dbg !1929
  %ld.215 = load i64, i64* %field1.116, align 8, !dbg !1929
  invoke void %.field.ld.44({ %StateQueryIteratorInterface.0, %error.0 }* sret({ %StateQueryIteratorInterface.0, %error.0 }) "go_sret" %sret.actual.158, i8* nest undef, i8* %stub.field.ld.41, i8* %ld.212, i64 %ld.213, i8* %ld.214, i64 %ld.215, { i8*, i64 }* byval({ i8*, i64 }) %endKey)
          to label %cont.4 unwind label %pad.1, !dbg !1929

else.103:                                         ; preds = %fallthrough.102
  %tmpv.289.ld.1 = load i64, i64* %tmpv.289, align 8, !dbg !1926
  invoke void @runtime.goPanicIndex(i8* nest undef, i64 1, i64 %tmpv.289.ld.1)
          to label %cont.3 unwind label %pad.1, !dbg !1926

cont.3:                                           ; preds = %else.103
  unreachable

cont.4:                                           ; preds = %fallthrough.103
  %cast.1475 = bitcast { %StateQueryIteratorInterface.0, %error.0 }* %tmpv.291 to i8*, !dbg !1929
  %cast.1476 = bitcast { %StateQueryIteratorInterface.0, %error.0 }* %sret.actual.158 to i8*, !dbg !1929
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1475, i8* align 8 %cast.1476, i64 32, i1 false), !dbg !1929
  %field.410 = getelementptr inbounds { %StateQueryIteratorInterface.0, %error.0 }, { %StateQueryIteratorInterface.0, %error.0 }* %tmpv.291, i32 0, i32 0, !dbg !1929
  %cast.1477 = bitcast %StateQueryIteratorInterface.0* %tmpv.292 to i8*
  %cast.1478 = bitcast %StateQueryIteratorInterface.0* %field.410 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1477, i8* align 8 %cast.1478, i64 16, i1 false)
  %cast.1479 = bitcast %StateQueryIteratorInterface.0* %resultsIterator to i8*
  %cast.1480 = bitcast %StateQueryIteratorInterface.0* %tmpv.292 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1479, i8* align 8 %cast.1480, i64 16, i1 false)
  call void @llvm.dbg.declare(metadata %StateQueryIteratorInterface.0* %resultsIterator, metadata !1930, metadata !DIExpression()), !dbg !1931
  %field.411 = getelementptr inbounds { %StateQueryIteratorInterface.0, %error.0 }, { %StateQueryIteratorInterface.0, %error.0 }* %tmpv.291, i32 0, i32 1, !dbg !1929
  %cast.1481 = bitcast %error.0* %tmpv.293 to i8*
  %cast.1482 = bitcast %error.0* %field.411 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1481, i8* align 8 %cast.1482, i64 16, i1 false)
  %cast.1483 = bitcast %error.0* %err to i8*
  %cast.1484 = bitcast %error.0* %tmpv.293 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1483, i8* align 8 %cast.1484, i64 16, i1 false)
  call void @llvm.dbg.declare(metadata %error.0* %err, metadata !1932, metadata !DIExpression()), !dbg !1931
  %field.415 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1933
  %err.field.ld.68 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.415, align 8, !dbg !1933
  %icmp.128 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.68, null, !dbg !1933
  %zext.128 = zext i1 %icmp.128 to i8, !dbg !1933
  %trunc.104 = trunc i8 %zext.128 to i1, !dbg !1934
  br i1 %trunc.104, label %then.104, label %else.104

then.104:                                         ; preds = %cont.4
  %field.412 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !1935
  %err.field.ld.66 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.412, align 8, !dbg !1935
  %field.413 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.66, i32 0, i32 1, !dbg !1935
  %.field.ld.45 = load { i8*, i64 } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)** %field.413, align 8, !dbg !1935
  %field.414 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !1935
  %err.field.ld.67 = load i8*, i8** %field.414, align 8, !dbg !1935
  %call.84 = invoke { i8*, i64 } %.field.ld.45(i8* nest undef, i8* %err.field.ld.67)
          to label %cont.5 unwind label %pad.1, !dbg !1935

fallthrough.104:                                  ; preds = %else.104
  %cast.1499 = bitcast { i8*, i8*, i8*, i8*, i64, i8*, i64, i8, i8 }* %tmpv.296 to i8*, !dbg !1936
  %cast.1496 = bitcast { %StateQueryIteratorInterface.0 }* %tmpv.297 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1496, i8* align 8 bitcast ({ %StateQueryIteratorInterface.0 }* @const.176 to i8*), i64 16, i1 false)
  store { %StateQueryIteratorInterface.0 }* %tmpv.297, { %StateQueryIteratorInterface.0 }** %tmpv.298, align 8
  %tmpv.298.ld.0 = load { %StateQueryIteratorInterface.0 }*, { %StateQueryIteratorInterface.0 }** %tmpv.298, align 8, !dbg !1936
  %field.416 = getelementptr inbounds { %StateQueryIteratorInterface.0 }, { %StateQueryIteratorInterface.0 }* %tmpv.298.ld.0, i32 0, i32 0, !dbg !1936
  %cast.1497 = bitcast %StateQueryIteratorInterface.0* %field.416 to i8*, !dbg !1936
  %cast.1498 = bitcast %StateQueryIteratorInterface.0* %resultsIterator to i8*, !dbg !1936
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1497, i8* align 8 %cast.1498, i64 16, i1 false), !dbg !1936
  %tmpv.298.ld.1 = load { %StateQueryIteratorInterface.0 }*, { %StateQueryIteratorInterface.0 }** %tmpv.298, align 8, !dbg !1936
  %cast.1500 = bitcast { %StateQueryIteratorInterface.0 }* %tmpv.298.ld.1 to i8*, !dbg !1936
  invoke void @runtime.deferprocStack(i8* nest undef, i8* %cast.1499, i8* %tmpv.284, i64 ptrtoint (i8 (i8*, { %StateQueryIteratorInterface.0 }*)* @command_x2dline_x2darguments.go..thunk0 to i64), i8* %cast.1500)
          to label %cont.7 unwind label %pad.1, !dbg !1936

else.104:                                         ; preds = %cont.4
  br label %fallthrough.104

cont.5:                                           ; preds = %then.104
  store { i8*, i64 } %call.84, { i8*, i64 }* %sret.actual.159, align 8, !dbg !1935
  %cast.1486 = bitcast { i8*, i64 }* %tmpv.294 to i8*
  %cast.1487 = bitcast { i8*, i64 }* %sret.actual.159 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1486, i8* align 8 %cast.1487, i64 16, i1 false)
  %field0.117 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.294, i32 0, i32 0, !dbg !1937
  %ld.216 = load i8*, i8** %field0.117, align 8, !dbg !1937
  %field1.117 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.294, i32 0, i32 1, !dbg !1937
  %ld.217 = load i64, i64* %field1.117, align 8, !dbg !1937
  invoke void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.160, i8* nest undef, i8* %ld.216, i64 %ld.217)
          to label %cont.6 unwind label %pad.1, !dbg !1937

cont.6:                                           ; preds = %cont.5
  %cast.1489 = bitcast %Response.0* %tmpv.295 to i8*
  %cast.1490 = bitcast %Response.0* %sret.actual.160 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1489, i8* align 8 %cast.1490, i64 80, i1 false)
  %cast.1491 = bitcast %Response.0* %"$ret9" to i8*, !dbg !1938
  %cast.1492 = bitcast %Response.0* %tmpv.295 to i8*, !dbg !1938
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1491, i8* align 8 %cast.1492, i64 80, i1 false), !dbg !1938
  store i8 1, i8* %finvar.0, align 1
  invoke void @runtime.deferreturn(i8* nest undef, i8* %tmpv.284)
          to label %cont.0 unwind label %pad.0, !dbg !1918

cont.7:                                           ; preds = %fallthrough.104
  %cast.1501 = bitcast %Buffer.0* %tmpv.285 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1501, i8* align 8 bitcast (%Buffer.0* @const.177 to i8*), i64 40, i1 false)
  call void @llvm.dbg.declare(metadata %Buffer.0* %tmpv.285, metadata !1939, metadata !DIExpression()), !dbg !1946
  %ld.218 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.179, i32 0, i32 0), align 8, !dbg !1947
  %ld.219 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.179, i32 0, i32 1), align 8, !dbg !1947
  invoke void @bytes.Buffer.WriteString({ i64, %error.0 }* sret({ i64, %error.0 }) "go_sret" %sret.actual.161, i8* nest undef, %Buffer.0* %tmpv.285, i8* %ld.218, i64 %ld.219)
          to label %cont.8 unwind label %pad.1, !dbg !1947

cont.8:                                           ; preds = %cont.7
  %cast.1503 = bitcast { i64, %error.0 }* %tmpv.299 to i8*, !dbg !1947
  %cast.1504 = bitcast { i64, %error.0 }* %sret.actual.161 to i8*, !dbg !1947
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1503, i8* align 8 %cast.1504, i64 24, i1 false), !dbg !1947
  store i8 0, i8* %bArrayMemberAlreadyWritten, align 1
  call void @llvm.dbg.declare(metadata i8* %bArrayMemberAlreadyWritten, metadata !1948, metadata !DIExpression()), !dbg !1949
  br label %label.0

label.0:                                          ; preds = %cont.20, %cont.8
  %field.435 = getelementptr inbounds %StateQueryIteratorInterface.0, %StateQueryIteratorInterface.0* %resultsIterator, i32 0, i32 0, !dbg !1950
  %resultsIterator.field.ld.2 = load { %_type.0*, { i8*, i8* } (i8*, i8*)*, i8 (i8*, i8*)*, void ({ %KV.0*, %error.0 }*, i8*, i8*)* }*, { %_type.0*, { i8*, i8* } (i8*, i8*)*, i8 (i8*, i8*)*, void ({ %KV.0*, %error.0 }*, i8*, i8*)* }** %field.435, align 8, !dbg !1950
  %field.436 = getelementptr inbounds { %_type.0*, { i8*, i8* } (i8*, i8*)*, i8 (i8*, i8*)*, void ({ %KV.0*, %error.0 }*, i8*, i8*)* }, { %_type.0*, { i8*, i8* } (i8*, i8*)*, i8 (i8*, i8*)*, void ({ %KV.0*, %error.0 }*, i8*, i8*)* }* %resultsIterator.field.ld.2, i32 0, i32 2, !dbg !1950
  %.field.ld.48 = load i8 (i8*, i8*)*, i8 (i8*, i8*)** %field.436, align 8, !dbg !1950
  %field.437 = getelementptr inbounds %StateQueryIteratorInterface.0, %StateQueryIteratorInterface.0* %resultsIterator, i32 0, i32 1, !dbg !1950
  %resultsIterator.field.ld.3 = load i8*, i8** %field.437, align 8, !dbg !1950
  %call.89 = invoke i8 %.field.ld.48(i8* nest undef, i8* %resultsIterator.field.ld.3)
          to label %cont.21 unwind label %pad.1, !dbg !1950

label.1:                                          ; preds = %then.111
  %5 = bitcast %KV.0** %queryResponse to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5)
  %6 = bitcast %error.0* %err1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %6)
  %field.417 = getelementptr inbounds %StateQueryIteratorInterface.0, %StateQueryIteratorInterface.0* %resultsIterator, i32 0, i32 0, !dbg !1951
  %resultsIterator.field.ld.0 = load { %_type.0*, { i8*, i8* } (i8*, i8*)*, i8 (i8*, i8*)*, void ({ %KV.0*, %error.0 }*, i8*, i8*)* }*, { %_type.0*, { i8*, i8* } (i8*, i8*)*, i8 (i8*, i8*)*, void ({ %KV.0*, %error.0 }*, i8*, i8*)* }** %field.417, align 8, !dbg !1951
  %field.418 = getelementptr inbounds { %_type.0*, { i8*, i8* } (i8*, i8*)*, i8 (i8*, i8*)*, void ({ %KV.0*, %error.0 }*, i8*, i8*)* }, { %_type.0*, { i8*, i8* } (i8*, i8*)*, i8 (i8*, i8*)*, void ({ %KV.0*, %error.0 }*, i8*, i8*)* }* %resultsIterator.field.ld.0, i32 0, i32 3, !dbg !1951
  %.field.ld.46 = load void ({ %KV.0*, %error.0 }*, i8*, i8*)*, void ({ %KV.0*, %error.0 }*, i8*, i8*)** %field.418, align 8, !dbg !1951
  %field.419 = getelementptr inbounds %StateQueryIteratorInterface.0, %StateQueryIteratorInterface.0* %resultsIterator, i32 0, i32 1, !dbg !1951
  %resultsIterator.field.ld.1 = load i8*, i8** %field.419, align 8, !dbg !1951
  invoke void %.field.ld.46({ %KV.0*, %error.0 }* sret({ %KV.0*, %error.0 }) "go_sret" %sret.actual.162, i8* nest undef, i8* %resultsIterator.field.ld.1)
          to label %cont.9 unwind label %pad.1, !dbg !1951

cont.9:                                           ; preds = %label.1
  %cast.1505 = bitcast { %KV.0*, %error.0 }* %tmpv.300 to i8*, !dbg !1951
  %cast.1506 = bitcast { %KV.0*, %error.0 }* %sret.actual.162 to i8*, !dbg !1951
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1505, i8* align 8 %cast.1506, i64 24, i1 false), !dbg !1951
  %field.420 = getelementptr inbounds { %KV.0*, %error.0 }, { %KV.0*, %error.0 }* %tmpv.300, i32 0, i32 0, !dbg !1951
  %tmpv.300.field.ld.0 = load %KV.0*, %KV.0** %field.420, align 8, !dbg !1951
  store %KV.0* %tmpv.300.field.ld.0, %KV.0** %tmpv.301, align 8
  %tmpv.301.ld.0 = load %KV.0*, %KV.0** %tmpv.301, align 8, !dbg !1951
  store %KV.0* %tmpv.301.ld.0, %KV.0** %queryResponse, align 8
  call void @llvm.dbg.declare(metadata %KV.0** %queryResponse, metadata !1953, metadata !DIExpression()), !dbg !1954
  %field.421 = getelementptr inbounds { %KV.0*, %error.0 }, { %KV.0*, %error.0 }* %tmpv.300, i32 0, i32 1, !dbg !1951
  %cast.1507 = bitcast %error.0* %tmpv.302 to i8*
  %cast.1508 = bitcast %error.0* %field.421 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1507, i8* align 8 %cast.1508, i64 16, i1 false)
  %cast.1509 = bitcast %error.0* %err1 to i8*
  %cast.1510 = bitcast %error.0* %tmpv.302 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1509, i8* align 8 %cast.1510, i64 16, i1 false)
  call void @llvm.dbg.declare(metadata %error.0* %err1, metadata !1955, metadata !DIExpression()), !dbg !1954
  %field.425 = getelementptr inbounds %error.0, %error.0* %err1, i32 0, i32 0, !dbg !1956
  %err.field.ld.71 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.425, align 8, !dbg !1956
  %icmp.129 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.71, null, !dbg !1956
  %zext.129 = zext i1 %icmp.129 to i8, !dbg !1956
  %trunc.105 = trunc i8 %zext.129 to i1, !dbg !1957
  br i1 %trunc.105, label %then.105, label %else.105

then.105:                                         ; preds = %cont.9
  %field.422 = getelementptr inbounds %error.0, %error.0* %err1, i32 0, i32 0, !dbg !1958
  %err.field.ld.69 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.422, align 8, !dbg !1958
  %field.423 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.69, i32 0, i32 1, !dbg !1958
  %.field.ld.47 = load { i8*, i64 } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)** %field.423, align 8, !dbg !1958
  %field.424 = getelementptr inbounds %error.0, %error.0* %err1, i32 0, i32 1, !dbg !1958
  %err.field.ld.70 = load i8*, i8** %field.424, align 8, !dbg !1958
  %call.85 = invoke { i8*, i64 } %.field.ld.47(i8* nest undef, i8* %err.field.ld.70)
          to label %cont.10 unwind label %pad.1, !dbg !1958

fallthrough.105:                                  ; preds = %else.105
  %bArrayMemberAlreadyWritten.ld.0 = load i8, i8* %bArrayMemberAlreadyWritten, align 1, !dbg !1959
  %trunc.106 = trunc i8 %bArrayMemberAlreadyWritten.ld.0 to i1, !dbg !1960
  br i1 %trunc.106, label %then.106, label %else.106

else.105:                                         ; preds = %cont.9
  br label %fallthrough.105

cont.10:                                          ; preds = %then.105
  store { i8*, i64 } %call.85, { i8*, i64 }* %sret.actual.163, align 8, !dbg !1958
  %cast.1512 = bitcast { i8*, i64 }* %tmpv.303 to i8*
  %cast.1513 = bitcast { i8*, i64 }* %sret.actual.163 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1512, i8* align 8 %cast.1513, i64 16, i1 false)
  %field0.119 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.303, i32 0, i32 0, !dbg !1961
  %ld.220 = load i8*, i8** %field0.119, align 8, !dbg !1961
  %field1.119 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.303, i32 0, i32 1, !dbg !1961
  %ld.221 = load i64, i64* %field1.119, align 8, !dbg !1961
  invoke void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.164, i8* nest undef, i8* %ld.220, i64 %ld.221)
          to label %cont.11 unwind label %pad.1, !dbg !1961

cont.11:                                          ; preds = %cont.10
  %cast.1515 = bitcast %Response.0* %tmpv.304 to i8*
  %cast.1516 = bitcast %Response.0* %sret.actual.164 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1515, i8* align 8 %cast.1516, i64 80, i1 false)
  %cast.1517 = bitcast %Response.0* %"$ret9" to i8*, !dbg !1962
  %cast.1518 = bitcast %Response.0* %tmpv.304 to i8*, !dbg !1962
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1517, i8* align 8 %cast.1518, i64 80, i1 false), !dbg !1962
  store i8 1, i8* %finvar.0, align 1
  invoke void @runtime.deferreturn(i8* nest undef, i8* %tmpv.284)
          to label %cont.0 unwind label %pad.0, !dbg !1918

then.106:                                         ; preds = %fallthrough.105
  %ld.222 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.181, i32 0, i32 0), align 8, !dbg !1963
  %ld.223 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.181, i32 0, i32 1), align 8, !dbg !1963
  invoke void @bytes.Buffer.WriteString({ i64, %error.0 }* sret({ i64, %error.0 }) "go_sret" %sret.actual.165, i8* nest undef, %Buffer.0* %tmpv.285, i8* %ld.222, i64 %ld.223)
          to label %cont.12 unwind label %pad.1, !dbg !1963

fallthrough.106:                                  ; preds = %else.106, %cont.12
  %call.86 = invoke i8* @runtime.newobject(i8* nest undef, %_type.0* @string..d)
          to label %cont.13 unwind label %pad.1, !dbg !1964

else.106:                                         ; preds = %fallthrough.105
  br label %fallthrough.106

cont.12:                                          ; preds = %then.106
  %cast.1523 = bitcast { i64, %error.0 }* %tmpv.305 to i8*, !dbg !1963
  %cast.1524 = bitcast { i64, %error.0 }* %sret.actual.165 to i8*, !dbg !1963
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1523, i8* align 8 %cast.1524, i64 24, i1 false), !dbg !1963
  br label %fallthrough.106

cont.13:                                          ; preds = %fallthrough.106
  %cast.1525 = bitcast i8* %call.86 to { i8*, i64 }*, !dbg !1964
  store { i8*, i64 }* %cast.1525, { i8*, i64 }** %tmpv.307, align 8
  %queryResponse.ld.0 = load %KV.0*, %KV.0** %queryResponse, align 8, !dbg !1965
  %icmp.130 = icmp eq %KV.0* %queryResponse.ld.0, null, !dbg !1966
  %zext.130 = zext i1 %icmp.130 to i8, !dbg !1966
  %trunc.107 = trunc i8 %zext.130 to i1, !dbg !1966
  br i1 %trunc.107, label %then.107, label %else.107, !make.implicit !46

then.107:                                         ; preds = %cont.13
  invoke void @runtime.panicmem(i8* nest undef)
          to label %cont.14 unwind label %pad.1, !dbg !1966

fallthrough.107:                                  ; preds = %else.107
  %tmpv.309.ld.0 = load %KV.0*, %KV.0** %tmpv.309, align 8, !dbg !1966
  %field.426 = getelementptr inbounds %KV.0, %KV.0* %tmpv.309.ld.0, i32 0, i32 1, !dbg !1966
  %cast.1527 = bitcast { i8*, i64 }* %tmpv.308 to i8*
  %cast.1528 = bitcast { i8*, i64 }* %field.426 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1527, i8* align 8 %cast.1528, i64 16, i1 false)
  %deref.ld.10 = load i32, i32* bitcast ({ i8, [3 x i8], i8, i8, i64 }* @runtime.writeBarrier to i32*), align 4, !dbg !1964
  %icmp.131 = icmp eq i32 %deref.ld.10, 0, !dbg !1964
  %zext.131 = zext i1 %icmp.131 to i8, !dbg !1964
  %trunc.108 = trunc i8 %zext.131 to i1, !dbg !1964
  br i1 %trunc.108, label %then.108, label %else.108

else.107:                                         ; preds = %cont.13
  %.ld.6 = load %KV.0*, %KV.0** %queryResponse, align 8, !dbg !1965
  store %KV.0* %.ld.6, %KV.0** %tmpv.309, align 8
  br label %fallthrough.107

cont.14:                                          ; preds = %then.107
  unreachable

then.108:                                         ; preds = %fallthrough.107
  %tmpv.307.ld.0 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.307, align 8, !dbg !1964
  %cast.1529 = bitcast { i8*, i64 }* %tmpv.307.ld.0 to i8*, !dbg !1964
  %cast.1530 = bitcast { i8*, i64 }* %tmpv.308 to i8*, !dbg !1964
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1529, i8* align 8 %cast.1530, i64 16, i1 false), !dbg !1964
  br label %fallthrough.108

fallthrough.108:                                  ; preds = %cont.15, %then.108
  %tmpv.307.ld.2 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.307, align 8, !dbg !1964
  %field.428 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.25, i32 0, i32 0, !dbg !1964
  store %_type.0* @string..d, %_type.0** %field.428, align 8, !dbg !1964
  %field.429 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.25, i32 0, i32 1, !dbg !1964
  %cast.1548 = bitcast { i8*, i64 }* %tmpv.307.ld.2 to i8*, !dbg !1964
  store i8* %cast.1548, i8** %field.429, align 8, !dbg !1964
  %call.87 = invoke i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type.._6_7uint8, i32 0, i32 0))
          to label %cont.16 unwind label %pad.1, !dbg !1964

else.108:                                         ; preds = %fallthrough.107
  %tmpv.307.ld.1 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.307, align 8, !dbg !1964
  %cast.1531 = bitcast { i8*, i64 }* %tmpv.307.ld.1 to i8*, !dbg !1964
  %cast.1532 = bitcast { i8*, i64 }* %tmpv.308 to i8*, !dbg !1964
  invoke void @runtime.typedmemmove(i8* nest undef, %_type.0* @string..d, i8* %cast.1531, i8* %cast.1532)
          to label %cont.15 unwind label %pad.1, !dbg !1964

cont.15:                                          ; preds = %else.108
  br label %fallthrough.108

cont.16:                                          ; preds = %fallthrough.108
  %cast.1536 = bitcast i8* %call.87 to %IPST.0*, !dbg !1964
  store %IPST.0* %cast.1536, %IPST.0** %tmpv.310, align 8
  %queryResponse.ld.1 = load %KV.0*, %KV.0** %queryResponse, align 8, !dbg !1967
  %icmp.132 = icmp eq %KV.0* %queryResponse.ld.1, null, !dbg !1968
  %zext.132 = zext i1 %icmp.132 to i8, !dbg !1968
  %trunc.109 = trunc i8 %zext.132 to i1, !dbg !1968
  br i1 %trunc.109, label %then.109, label %else.109, !make.implicit !46

then.109:                                         ; preds = %cont.16
  invoke void @runtime.panicmem(i8* nest undef)
          to label %cont.17 unwind label %pad.1, !dbg !1968

fallthrough.109:                                  ; preds = %else.109
  %tmpv.312.ld.0 = load %KV.0*, %KV.0** %tmpv.312, align 8, !dbg !1968
  %field.427 = getelementptr inbounds %KV.0, %KV.0* %tmpv.312.ld.0, i32 0, i32 2, !dbg !1968
  %cast.1538 = bitcast %IPST.0* %tmpv.311 to i8*
  %cast.1539 = bitcast %IPST.0* %field.427 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1538, i8* align 8 %cast.1539, i64 24, i1 false)
  %deref.ld.11 = load i32, i32* bitcast ({ i8, [3 x i8], i8, i8, i64 }* @runtime.writeBarrier to i32*), align 4, !dbg !1964
  %icmp.133 = icmp eq i32 %deref.ld.11, 0, !dbg !1964
  %zext.133 = zext i1 %icmp.133 to i8, !dbg !1964
  %trunc.110 = trunc i8 %zext.133 to i1, !dbg !1964
  br i1 %trunc.110, label %then.110, label %else.110

else.109:                                         ; preds = %cont.16
  %.ld.7 = load %KV.0*, %KV.0** %queryResponse, align 8, !dbg !1967
  store %KV.0* %.ld.7, %KV.0** %tmpv.312, align 8
  br label %fallthrough.109

cont.17:                                          ; preds = %then.109
  unreachable

then.110:                                         ; preds = %fallthrough.109
  %tmpv.310.ld.0 = load %IPST.0*, %IPST.0** %tmpv.310, align 8, !dbg !1964
  %cast.1540 = bitcast %IPST.0* %tmpv.310.ld.0 to i8*, !dbg !1964
  %cast.1541 = bitcast %IPST.0* %tmpv.311 to i8*, !dbg !1964
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1540, i8* align 8 %cast.1541, i64 24, i1 false), !dbg !1964
  br label %fallthrough.110

fallthrough.110:                                  ; preds = %cont.18, %then.110
  %tmpv.310.ld.2 = load %IPST.0*, %IPST.0** %tmpv.310, align 8, !dbg !1964
  %field.430 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.26, i32 0, i32 0, !dbg !1964
  store %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type.._6_7uint8, i32 0, i32 0), %_type.0** %field.430, align 8, !dbg !1964
  %field.431 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.26, i32 0, i32 1, !dbg !1964
  %cast.1549 = bitcast %IPST.0* %tmpv.310.ld.2 to i8*, !dbg !1964
  store i8* %cast.1549, i8** %field.431, align 8, !dbg !1964
  %index.73 = getelementptr [2 x %IPST.3], [2 x %IPST.3]* %tmpv.313, i32 0, i32 0, !dbg !1964
  %cast.1550 = bitcast %IPST.3* %index.73 to i8*, !dbg !1964
  %cast.1551 = bitcast %IPST.3* %tmp.25 to i8*, !dbg !1964
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1550, i8* align 8 %cast.1551, i64 16, i1 false), !dbg !1964
  %index.74 = getelementptr [2 x %IPST.3], [2 x %IPST.3]* %tmpv.313, i32 0, i32 1, !dbg !1964
  %cast.1552 = bitcast %IPST.3* %index.74 to i8*, !dbg !1964
  %cast.1553 = bitcast %IPST.3* %tmp.26 to i8*, !dbg !1964
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1552, i8* align 8 %cast.1553, i64 16, i1 false), !dbg !1964
  %cast.1554 = bitcast [2 x %IPST.3]* %tmpv.313 to %IPST.3*, !dbg !1964
  %field.432 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.27, i32 0, i32 0, !dbg !1964
  store %IPST.3* %cast.1554, %IPST.3** %field.432, align 8, !dbg !1964
  %field.433 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.27, i32 0, i32 1, !dbg !1964
  store i64 2, i64* %field.433, align 8, !dbg !1964
  %field.434 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.27, i32 0, i32 2, !dbg !1964
  store i64 2, i64* %field.434, align 8, !dbg !1964
  %ld.224 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.183, i32 0, i32 0), align 8, !dbg !1964
  %ld.225 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.183, i32 0, i32 1), align 8, !dbg !1964
  %call.88 = invoke { i8*, i64 } @fmt.Sprintf(i8* nest undef, i8* %ld.224, i64 %ld.225, %IPST.52* byval(%IPST.52) %tmp.27)
          to label %cont.19 unwind label %pad.1, !dbg !1964

else.110:                                         ; preds = %fallthrough.109
  %tmpv.310.ld.1 = load %IPST.0*, %IPST.0** %tmpv.310, align 8, !dbg !1964
  %cast.1543 = bitcast %IPST.0* %tmpv.310.ld.1 to i8*, !dbg !1964
  %cast.1544 = bitcast %IPST.0* %tmpv.311 to i8*, !dbg !1964
  invoke void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%SliceType.0, %SliceType.0* @type.._6_7uint8, i32 0, i32 0), i8* %cast.1543, i8* %cast.1544)
          to label %cont.18 unwind label %pad.1, !dbg !1964

cont.18:                                          ; preds = %else.110
  br label %fallthrough.110

cont.19:                                          ; preds = %fallthrough.110
  store { i8*, i64 } %call.88, { i8*, i64 }* %sret.actual.166, align 8, !dbg !1964
  %cast.1557 = bitcast { i8*, i64 }* %tmpv.314 to i8*
  %cast.1558 = bitcast { i8*, i64 }* %sret.actual.166 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1557, i8* align 8 %cast.1558, i64 16, i1 false)
  %field0.122 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.314, i32 0, i32 0, !dbg !1969
  %ld.226 = load i8*, i8** %field0.122, align 8, !dbg !1969
  %field1.122 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.314, i32 0, i32 1, !dbg !1969
  %ld.227 = load i64, i64* %field1.122, align 8, !dbg !1969
  invoke void @bytes.Buffer.WriteString({ i64, %error.0 }* sret({ i64, %error.0 }) "go_sret" %sret.actual.167, i8* nest undef, %Buffer.0* %tmpv.285, i8* %ld.226, i64 %ld.227)
          to label %cont.20 unwind label %pad.1, !dbg !1969

cont.20:                                          ; preds = %cont.19
  %cast.1560 = bitcast { i64, %error.0 }* %tmpv.306 to i8*, !dbg !1969
  %cast.1561 = bitcast { i64, %error.0 }* %sret.actual.167 to i8*, !dbg !1969
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1560, i8* align 8 %cast.1561, i64 24, i1 false), !dbg !1969
  store i8 1, i8* %bArrayMemberAlreadyWritten, align 1, !dbg !1970
  %7 = bitcast %KV.0** %queryResponse to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %7)
  %8 = bitcast %error.0* %err1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %8)
  br label %label.0

cont.21:                                          ; preds = %label.0
  %trunc.111 = trunc i8 %call.89 to i1, !dbg !1950
  br i1 %trunc.111, label %then.111, label %else.111

then.111:                                         ; preds = %cont.21
  br label %label.1

fallthrough.111:                                  ; preds = %else.111
  %ld.228 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.185, i32 0, i32 0), align 8, !dbg !1971
  %ld.229 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.185, i32 0, i32 1), align 8, !dbg !1971
  invoke void @bytes.Buffer.WriteString({ i64, %error.0 }* sret({ i64, %error.0 }) "go_sret" %sret.actual.168, i8* nest undef, %Buffer.0* %tmpv.285, i8* %ld.228, i64 %ld.229)
          to label %cont.22 unwind label %pad.1, !dbg !1971

else.111:                                         ; preds = %cont.21
  br label %fallthrough.111

cont.22:                                          ; preds = %fallthrough.111
  %cast.1563 = bitcast { i64, %error.0 }* %tmpv.315 to i8*, !dbg !1971
  %cast.1564 = bitcast { i64, %error.0 }* %sret.actual.168 to i8*, !dbg !1971
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1563, i8* align 8 %cast.1564, i64 24, i1 false), !dbg !1971
  %call.90 = invoke { i8*, i64 } @bytes.Buffer.String(i8* nest undef, %Buffer.0* %tmpv.285)
          to label %cont.23 unwind label %pad.1, !dbg !1972

cont.23:                                          ; preds = %cont.22
  store { i8*, i64 } %call.90, { i8*, i64 }* %sret.actual.169, align 8, !dbg !1972
  %cast.1566 = bitcast { i8*, i64 }* %tmpv.317 to i8*
  %cast.1567 = bitcast { i8*, i64 }* %sret.actual.169 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1566, i8* align 8 %cast.1567, i64 16, i1 false)
  %call.91 = invoke i8* @runtime.newobject(i8* nest undef, %_type.0* @string..d)
          to label %cont.24 unwind label %pad.1, !dbg !1973

cont.24:                                          ; preds = %cont.23
  %cast.1568 = bitcast i8* %call.91 to { i8*, i64 }*, !dbg !1973
  store { i8*, i64 }* %cast.1568, { i8*, i64 }** %tmpv.318, align 8
  %cast.1569 = bitcast { i8*, i64 }* %tmpv.319 to i8*
  %cast.1570 = bitcast { i8*, i64 }* %tmpv.317 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1569, i8* align 8 %cast.1570, i64 16, i1 false)
  %deref.ld.12 = load i32, i32* bitcast ({ i8, [3 x i8], i8, i8, i64 }* @runtime.writeBarrier to i32*), align 4, !dbg !1973
  %icmp.134 = icmp eq i32 %deref.ld.12, 0, !dbg !1973
  %zext.134 = zext i1 %icmp.134 to i8, !dbg !1973
  %trunc.112 = trunc i8 %zext.134 to i1, !dbg !1973
  br i1 %trunc.112, label %then.112, label %else.112

then.112:                                         ; preds = %cont.24
  %tmpv.318.ld.0 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.318, align 8, !dbg !1973
  %cast.1571 = bitcast { i8*, i64 }* %tmpv.318.ld.0 to i8*, !dbg !1973
  %cast.1572 = bitcast { i8*, i64 }* %tmpv.319 to i8*, !dbg !1973
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1571, i8* align 8 %cast.1572, i64 16, i1 false), !dbg !1973
  br label %fallthrough.112

fallthrough.112:                                  ; preds = %cont.25, %then.112
  %tmpv.318.ld.2 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.318, align 8, !dbg !1973
  %field.438 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.28, i32 0, i32 0, !dbg !1973
  store %_type.0* @string..d, %_type.0** %field.438, align 8, !dbg !1973
  %field.439 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.28, i32 0, i32 1, !dbg !1973
  %cast.1577 = bitcast { i8*, i64 }* %tmpv.318.ld.2 to i8*, !dbg !1973
  store i8* %cast.1577, i8** %field.439, align 8, !dbg !1973
  %index.75 = getelementptr [1 x %IPST.3], [1 x %IPST.3]* %tmpv.320, i32 0, i32 0, !dbg !1973
  %cast.1578 = bitcast %IPST.3* %index.75 to i8*, !dbg !1973
  %cast.1579 = bitcast %IPST.3* %tmp.28 to i8*, !dbg !1973
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1578, i8* align 8 %cast.1579, i64 16, i1 false), !dbg !1973
  %cast.1580 = bitcast [1 x %IPST.3]* %tmpv.320 to %IPST.3*, !dbg !1973
  %field.440 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.29, i32 0, i32 0, !dbg !1973
  store %IPST.3* %cast.1580, %IPST.3** %field.440, align 8, !dbg !1973
  %field.441 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.29, i32 0, i32 1, !dbg !1973
  store i64 1, i64* %field.441, align 8, !dbg !1973
  %field.442 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.29, i32 0, i32 2, !dbg !1973
  store i64 1, i64* %field.442, align 8, !dbg !1973
  %ld.230 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.187, i32 0, i32 0), align 8, !dbg !1973
  %ld.231 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.187, i32 0, i32 1), align 8, !dbg !1973
  invoke void @fmt.Printf({ i64, %error.0 }* sret({ i64, %error.0 }) "go_sret" %sret.actual.170, i8* nest undef, i8* %ld.230, i64 %ld.231, %IPST.52* byval(%IPST.52) %tmp.29)
          to label %cont.26 unwind label %pad.1, !dbg !1973

else.112:                                         ; preds = %cont.24
  %tmpv.318.ld.1 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.318, align 8, !dbg !1973
  %cast.1573 = bitcast { i8*, i64 }* %tmpv.318.ld.1 to i8*, !dbg !1973
  %cast.1574 = bitcast { i8*, i64 }* %tmpv.319 to i8*, !dbg !1973
  invoke void @runtime.typedmemmove(i8* nest undef, %_type.0* @string..d, i8* %cast.1573, i8* %cast.1574)
          to label %cont.25 unwind label %pad.1, !dbg !1973

cont.25:                                          ; preds = %else.112
  br label %fallthrough.112

cont.26:                                          ; preds = %fallthrough.112
  %cast.1582 = bitcast { i64, %error.0 }* %tmpv.316 to i8*, !dbg !1973
  %cast.1583 = bitcast { i64, %error.0 }* %sret.actual.170 to i8*, !dbg !1973
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1582, i8* align 8 %cast.1583, i64 24, i1 false), !dbg !1973
  invoke void @bytes.Buffer.Bytes(%IPST.0* sret(%IPST.0) "go_sret" %sret.actual.171, i8* nest undef, %Buffer.0* %tmpv.285)
          to label %cont.27 unwind label %pad.1, !dbg !1974

cont.27:                                          ; preds = %cont.26
  %cast.1584 = bitcast %IPST.0* %tmpv.321 to i8*
  %cast.1585 = bitcast %IPST.0* %sret.actual.171 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1584, i8* align 8 %cast.1585, i64 24, i1 false)
  invoke void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Success(%Response.0* sret(%Response.0) "go_sret" %sret.actual.172, i8* nest undef, %IPST.0* byval(%IPST.0) %tmpv.321)
          to label %cont.28 unwind label %pad.1, !dbg !1975

cont.28:                                          ; preds = %cont.27
  %cast.1586 = bitcast %Response.0* %tmpv.322 to i8*
  %cast.1587 = bitcast %Response.0* %sret.actual.172 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1586, i8* align 8 %cast.1587, i64 80, i1 false)
  %cast.1588 = bitcast %Response.0* %"$ret9" to i8*, !dbg !1976
  %cast.1589 = bitcast %Response.0* %tmpv.322 to i8*, !dbg !1976
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1588, i8* align 8 %cast.1589, i64 80, i1 false), !dbg !1976
  store i8 1, i8* %finvar.0, align 1
  invoke void @runtime.deferreturn(i8* nest undef, i8* %tmpv.284)
          to label %cont.0 unwind label %pad.0, !dbg !1918

cont.29:                                          ; preds = %catch.1
  store i8 1, i8* %finvar.0, align 1
  invoke void @runtime.deferreturn(i8* nest undef, i8* %tmpv.284)
          to label %cont.0 unwind label %pad.0, !dbg !1918

finres.0:                                         ; preds = %cont.0
  %excv.0 = load { i8*, i32 }, { i8*, i32 }* %ehtmp.0, align 8
  resume { i8*, i32 } %excv.0

finret.0:                                         ; preds = %cont.0
  %cast.1467 = bitcast %Response.0* %sret.formal.9 to i8*, !dbg !1977
  %cast.1468 = bitcast %Response.0* %"$ret9" to i8*, !dbg !1977
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1467, i8* align 8 %cast.1468, i64 80, i1 false), !dbg !1977
  %9 = bitcast %Response.0* %"$ret9" to i8*, !dbg !1977
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %9), !dbg !1977
  ret void, !dbg !1977
}

define void @command_x2dline_x2darguments.MarblesPrivateChaincode.initMarble(%Response.0* sret(%Response.0) %sret.formal.2, i8* nest %nest.2, %MarblesPrivateChaincode.0* %t, i8* %stub.chunk0, i8* %stub.chunk1, %IPST.7* byval(%IPST.7) %args) #0 !dbg !1978 {
entry:
  %tmp.12 = alloca %IPST.52, align 8
  %tmp.11 = alloca %IPST.7, align 8
  %tmp.10 = alloca %IPST.3, align 8
  %tmp.9 = alloca %IPST.3, align 8
  %tmp.8 = alloca %IPST.52, align 8
  %tmp.7 = alloca %IPST.3, align 8
  %tmp.6 = alloca { i8*, i64 }, align 8
  %tmp.5 = alloca %IPST.3, align 8
  %tmp.4 = alloca %IPST.52, align 8
  %t.addr = alloca %MarblesPrivateChaincode.0*, align 8
  call void @llvm.dbg.declare(metadata %IPST.7* %args, metadata !1979, metadata !DIExpression()), !dbg !1980
  %stub.addr = alloca %ChaincodeStubInterface.0, align 8
  %"$ret2" = alloca %Response.0, align 8
  %err = alloca %error.0, align 8
  %transMap = alloca { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, align 8
  %marbleJsonBytes = alloca %IPST.0, align 8
  %ok = alloca i8, align 1
  %marbleInput = alloca %.command-line-arguments.marbleTransientInput.0*, align 8
  %marbleAsBytes = alloca %IPST.0, align 8
  %marble = alloca %.command-line-arguments.marble.0*, align 8
  %marbleJSONasBytes = alloca %IPST.0, align 8
  %marblePrivateDetails = alloca %.command-line-arguments.marblePrivateDetails.0*, align 8
  %marblePrivateDetailsBytes = alloca %IPST.0, align 8
  %indexName = alloca { i8*, i64 }, align 8
  %colorNameIndexKey = alloca { i8*, i64 }, align 8
  %value = alloca %IPST.0, align 8
  call void @llvm.dbg.declare(metadata %IPST.0* %value, metadata !1981, metadata !DIExpression()), !dbg !1983
  %tmpv.53 = alloca { i64, %error.0 }, align 8
  %tmpv.54 = alloca [1 x %IPST.3], align 8
  %sret.actual.16 = alloca { i64, %error.0 }, align 8
  %tmpv.55 = alloca %Response.0, align 8
  %sret.actual.17 = alloca %Response.0, align 8
  %tmpv.56 = alloca { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }, align 8
  %sret.actual.18 = alloca { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }, align 8
  %tmpv.57 = alloca { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, align 8
  %tmpv.58 = alloca %error.0, align 8
  %tmpv.59 = alloca { i8*, i64 }, align 8
  %sret.actual.19 = alloca { i8*, i64 }, align 8
  %tmpv.60 = alloca [2 x { i8*, i64 }], align 8
  %tmpv.61 = alloca %Response.0, align 8
  %sret.actual.20 = alloca { i8*, i64 }, align 8
  %sret.actual.21 = alloca %Response.0, align 8
  %tmpv.62 = alloca { i8*, i64 }, align 8
  %tmpv.63 = alloca %IPST.0*, align 8
  %tmpv.64 = alloca i8, align 1
  %tmpv.65 = alloca { i8*, i8 }, align 8
  %sret.actual.22 = alloca { i8*, i8 }, align 8
  %tmpv.66 = alloca i8*, align 8
  %tmpv.67 = alloca i8, align 1
  %tmpv.68 = alloca %Response.0, align 8
  %sret.actual.23 = alloca %Response.0, align 8
  %tmpv.69 = alloca %Response.0, align 8
  %sret.actual.24 = alloca %Response.0, align 8
  %tmpv.70 = alloca %.command-line-arguments.marbleTransientInput.0*, align 8
  %tmpv.71 = alloca %error.0, align 8
  %sret.actual.25 = alloca %error.0, align 8
  %tmpv.72 = alloca [2 x { i8*, i64 }], align 8
  %tmpv.73 = alloca %Response.0, align 8
  %sret.actual.26 = alloca { i8*, i64 }, align 8
  %sret.actual.27 = alloca %Response.0, align 8
  %tmpv.74 = alloca %Response.0, align 8
  %sret.actual.28 = alloca %Response.0, align 8
  %tmpv.75 = alloca %Response.0, align 8
  %sret.actual.29 = alloca %Response.0, align 8
  %tmpv.76 = alloca %Response.0, align 8
  %sret.actual.30 = alloca %Response.0, align 8
  %tmpv.77 = alloca %Response.0, align 8
  %sret.actual.31 = alloca %Response.0, align 8
  %tmpv.78 = alloca %Response.0, align 8
  %sret.actual.32 = alloca %Response.0, align 8
  %tmpv.79 = alloca { %IPST.0, %error.0 }, align 8
  %sret.actual.33 = alloca { %IPST.0, %error.0 }, align 8
  %tmpv.80 = alloca %IPST.0, align 8
  %tmpv.81 = alloca %error.0, align 8
  %tmpv.82 = alloca { i8*, i64 }, align 8
  %sret.actual.34 = alloca { i8*, i64 }, align 8
  %tmpv.83 = alloca [2 x { i8*, i64 }], align 8
  %tmpv.84 = alloca %Response.0, align 8
  %sret.actual.35 = alloca { i8*, i64 }, align 8
  %sret.actual.36 = alloca %Response.0, align 8
  %tmpv.85 = alloca { i64, %error.0 }, align 8
  %tmpv.86 = alloca [2 x { i8*, i64 }], align 8
  %tmpv.87 = alloca { i8*, i64 }*, align 8, !go_addrtaken !46
  %tmpv.88 = alloca { i8*, i64 }, align 8, !go_addrtaken !46
  %sret.actual.37 = alloca { i8*, i64 }, align 8
  %tmpv.89 = alloca [1 x %IPST.3], align 8
  %sret.actual.38 = alloca { i64, %error.0 }, align 8
  %tmpv.90 = alloca [2 x { i8*, i64 }], align 8
  %tmpv.91 = alloca %Response.0, align 8
  %sret.actual.39 = alloca { i8*, i64 }, align 8
  %sret.actual.40 = alloca %Response.0, align 8
  %tmpv.92 = alloca %.command-line-arguments.marble.0*, align 8, !go_addrtaken !46
  %tmpv.93 = alloca %.command-line-arguments.marble.0, align 8, !go_addrtaken !46
  %tmpv.94 = alloca { %IPST.0, %error.0 }, align 8
  %sret.actual.41 = alloca { %IPST.0, %error.0 }, align 8
  %tmpv.95 = alloca %IPST.0, align 8
  %tmpv.96 = alloca %error.0, align 8
  %tmpv.97 = alloca { i8*, i64 }, align 8
  %sret.actual.42 = alloca { i8*, i64 }, align 8
  %tmpv.98 = alloca %Response.0, align 8
  %sret.actual.43 = alloca %Response.0, align 8
  %tmpv.99 = alloca %error.0, align 8
  %sret.actual.44 = alloca %error.0, align 8
  %tmpv.100 = alloca { i8*, i64 }, align 8
  %sret.actual.45 = alloca { i8*, i64 }, align 8
  %tmpv.101 = alloca %Response.0, align 8
  %sret.actual.46 = alloca %Response.0, align 8
  %tmpv.102 = alloca %.command-line-arguments.marblePrivateDetails.0*, align 8, !go_addrtaken !46
  %tmpv.103 = alloca %.command-line-arguments.marblePrivateDetails.0, align 8, !go_addrtaken !46
  %tmpv.104 = alloca { %IPST.0, %error.0 }, align 8
  %sret.actual.47 = alloca { %IPST.0, %error.0 }, align 8
  %tmpv.105 = alloca %IPST.0, align 8
  %tmpv.106 = alloca %error.0, align 8
  %tmpv.107 = alloca { i8*, i64 }, align 8
  %sret.actual.48 = alloca { i8*, i64 }, align 8
  %tmpv.108 = alloca %Response.0, align 8
  %sret.actual.49 = alloca %Response.0, align 8
  %tmpv.109 = alloca %error.0, align 8
  %sret.actual.50 = alloca %error.0, align 8
  %tmpv.110 = alloca { i8*, i64 }, align 8
  %sret.actual.51 = alloca { i8*, i64 }, align 8
  %tmpv.111 = alloca %Response.0, align 8
  %sret.actual.52 = alloca %Response.0, align 8
  %tmpv.112 = alloca { { i8*, i64 }, %error.0 }, align 8
  %tmpv.113 = alloca [2 x { i8*, i64 }]*, align 8, !go_addrtaken !46
  %tmpv.114 = alloca [2 x { i8*, i64 }], align 8, !go_addrtaken !46
  %tmpv.115 = alloca %.command-line-arguments.marble.0*, align 8
  %tmpv.116 = alloca %.command-line-arguments.marble.0*, align 8
  %sret.actual.53 = alloca { { i8*, i64 }, %error.0 }, align 8
  %tmpv.117 = alloca { i8*, i64 }, align 8
  %tmpv.118 = alloca %error.0, align 8
  %tmpv.119 = alloca { i8*, i64 }, align 8
  %sret.actual.54 = alloca { i8*, i64 }, align 8
  %tmpv.120 = alloca %Response.0, align 8
  %sret.actual.55 = alloca %Response.0, align 8
  %tmpv.121 = alloca [1 x i8]*, align 8, !go_addrtaken !46
  %tmpv.122 = alloca %error.0, align 8
  %sret.actual.56 = alloca %error.0, align 8
  %tmpv.123 = alloca { i8*, i64 }, align 8
  %sret.actual.57 = alloca { i8*, i64 }, align 8
  %tmpv.124 = alloca %Response.0, align 8
  %sret.actual.58 = alloca %Response.0, align 8
  %tmpv.125 = alloca { i64, %error.0 }, align 8
  %tmpv.126 = alloca [1 x %IPST.3], align 8
  %sret.actual.59 = alloca { i64, %error.0 }, align 8
  %tmpv.127 = alloca i8*, align 8
  %tmpv.128 = alloca %Response.0, align 8
  %sret.actual.60 = alloca %Response.0, align 8
  store %MarblesPrivateChaincode.0* %t, %MarblesPrivateChaincode.0** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %MarblesPrivateChaincode.0** %t.addr, metadata !1984, metadata !DIExpression()), !dbg !1985
  %cast.668 = bitcast %ChaincodeStubInterface.0* %stub.addr to { i8*, i8* }*
  %field0.43 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.668, i32 0, i32 0
  store i8* %stub.chunk0, i8** %field0.43, align 8
  %field1.43 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.668, i32 0, i32 1
  store i8* %stub.chunk1, i8** %field1.43, align 8
  call void @llvm.dbg.declare(metadata %ChaincodeStubInterface.0* %stub.addr, metadata !1986, metadata !DIExpression()), !dbg !1987
  %0 = bitcast %Response.0* %"$ret2" to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* %0)
  %cast.667 = bitcast %Response.0* %"$ret2" to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.667, i8* align 8 bitcast (%Response.0* @const.44 to i8*), i64 80, i1 false)
  call void @llvm.dbg.declare(metadata %Response.0* %"$ret2", metadata !1988, metadata !DIExpression()), !dbg !1989
  %1 = bitcast %error.0* %err to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %1)
  %2 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2)
  %3 = bitcast %IPST.0* %marbleJsonBytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %3)
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %ok)
  %4 = bitcast %.command-line-arguments.marbleTransientInput.0** %marbleInput to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4)
  %5 = bitcast %IPST.0* %marbleAsBytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %5)
  %6 = bitcast %.command-line-arguments.marble.0** %marble to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6)
  %7 = bitcast %IPST.0* %marbleJSONasBytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %7)
  %8 = bitcast %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8)
  %9 = bitcast %IPST.0* %marblePrivateDetailsBytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %9)
  %10 = bitcast { i8*, i64 }* %indexName to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %10)
  %11 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %11)
  %12 = bitcast %IPST.0* %value to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %12)
  %cast.271 = bitcast %error.0* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.271, i8* align 8 bitcast (%error.0* @const.60 to i8*), i64 16, i1 false)
  call void @llvm.dbg.declare(metadata %error.0* %err, metadata !1990, metadata !DIExpression()), !dbg !1991
  %cast.272 = bitcast [1 x %IPST.3]* %tmpv.54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.272, i8* align 8 bitcast ([1 x %IPST.3]* @const.62 to i8*), i64 16, i1 false)
  %cast.273 = bitcast [1 x %IPST.3]* %tmpv.54 to %IPST.3*, !dbg !1992
  %field.78 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.4, i32 0, i32 0, !dbg !1992
  store %IPST.3* %cast.273, %IPST.3** %field.78, align 8, !dbg !1992
  %field.79 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.4, i32 0, i32 1, !dbg !1992
  store i64 1, i64* %field.79, align 8, !dbg !1992
  %field.80 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.4, i32 0, i32 2, !dbg !1992
  store i64 1, i64* %field.80, align 8, !dbg !1992
  call void @fmt.Println({ i64, %error.0 }* sret({ i64, %error.0 }) "go_sret" %sret.actual.16, i8* nest undef, %IPST.52* byval(%IPST.52) %tmp.4), !dbg !1992
  %cast.274 = bitcast { i64, %error.0 }* %tmpv.53 to i8*, !dbg !1992
  %cast.275 = bitcast { i64, %error.0 }* %sret.actual.16 to i8*, !dbg !1992
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.274, i8* align 8 %cast.275, i64 24, i1 false), !dbg !1992
  %field.81 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 1, !dbg !1993
  %args.field.ld.0 = load i64, i64* %field.81, align 8, !dbg !1993
  %icmp.47 = icmp ne i64 %args.field.ld.0, 0, !dbg !1994
  %zext.47 = zext i1 %icmp.47 to i8, !dbg !1994
  %trunc.29 = trunc i8 %zext.47 to i1, !dbg !1995
  br i1 %trunc.29, label %then.29, label %else.29

then.29:                                          ; preds = %entry
  %ld.20 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.64, i32 0, i32 0), align 8, !dbg !1996
  %ld.21 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.64, i32 0, i32 1), align 8, !dbg !1996
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.17, i8* nest undef, i8* %ld.20, i64 %ld.21), !dbg !1996
  %cast.277 = bitcast %Response.0* %tmpv.55 to i8*
  %cast.278 = bitcast %Response.0* %sret.actual.17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.277, i8* align 8 %cast.278, i64 80, i1 false)
  %cast.279 = bitcast %Response.0* %"$ret2" to i8*, !dbg !1997
  %cast.280 = bitcast %Response.0* %tmpv.55 to i8*, !dbg !1997
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.279, i8* align 8 %cast.280, i64 80, i1 false), !dbg !1997
  %cast.281 = bitcast %Response.0* %sret.formal.2 to i8*, !dbg !1997
  %cast.282 = bitcast %Response.0* %"$ret2" to i8*, !dbg !1997
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.281, i8* align 8 %cast.282, i64 80, i1 false), !dbg !1997
  %13 = bitcast %error.0* %err to i8*, !dbg !1997
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %13), !dbg !1997
  %14 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !1997
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %14), !dbg !1997
  %15 = bitcast %IPST.0* %marbleJsonBytes to i8*, !dbg !1997
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %15), !dbg !1997
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !1997
  %16 = bitcast %.command-line-arguments.marbleTransientInput.0** %marbleInput to i8*, !dbg !1997
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16), !dbg !1997
  %17 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !1997
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %17), !dbg !1997
  %18 = bitcast %.command-line-arguments.marble.0** %marble to i8*, !dbg !1997
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18), !dbg !1997
  %19 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !1997
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %19), !dbg !1997
  %20 = bitcast %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails to i8*, !dbg !1997
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %20), !dbg !1997
  %21 = bitcast %IPST.0* %marblePrivateDetailsBytes to i8*, !dbg !1997
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %21), !dbg !1997
  %22 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !1997
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %22), !dbg !1997
  %23 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !1997
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %23), !dbg !1997
  %24 = bitcast %IPST.0* %value to i8*, !dbg !1997
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %24), !dbg !1997
  %25 = bitcast %Response.0* %"$ret2" to i8*, !dbg !1997
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %25), !dbg !1997
  ret void, !dbg !1997

fallthrough.29:                                   ; preds = %else.29
  %field.82 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 0, !dbg !1998
  %stub.field.ld.2 = load { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }** %field.82, align 8, !dbg !1998
  %field.83 = getelementptr inbounds { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }* %stub.field.ld.2, i32 0, i32 28, !dbg !1998
  %.field.ld.1 = load void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)** %field.83, align 8, !dbg !1998
  %field.84 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 1, !dbg !1998
  %stub.field.ld.3 = load i8*, i8** %field.84, align 8, !dbg !1998
  call void %.field.ld.1({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }* sret({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }) "go_sret" %sret.actual.18, i8* nest undef, i8* %stub.field.ld.3), !dbg !1998
  %cast.283 = bitcast { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }* %tmpv.56 to i8*, !dbg !1998
  %cast.284 = bitcast { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }* %sret.actual.18 to i8*, !dbg !1998
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.283, i8* align 8 %cast.284, i64 24, i1 false), !dbg !1998
  %field.85 = getelementptr inbounds { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }, { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }* %tmpv.56, i32 0, i32 0, !dbg !1998
  %tmpv.56.field.ld.0 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %field.85, align 8, !dbg !1998
  store { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %tmpv.56.field.ld.0, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %tmpv.57, align 8
  %tmpv.57.ld.0 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %tmpv.57, align 8, !dbg !1998
  store { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %tmpv.57.ld.0, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap, align 8
  call void @llvm.dbg.declare(metadata { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap, metadata !1999, metadata !DIExpression()), !dbg !2000
  %field.86 = getelementptr inbounds { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }, { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }* %tmpv.56, i32 0, i32 1, !dbg !1998
  %cast.285 = bitcast %error.0* %tmpv.58 to i8*
  %cast.286 = bitcast %error.0* %field.86 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.285, i8* align 8 %cast.286, i64 16, i1 false)
  %cast.287 = bitcast %error.0* %err to i8*, !dbg !2001
  %cast.288 = bitcast %error.0* %tmpv.58 to i8*, !dbg !2001
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.287, i8* align 8 %cast.288, i64 16, i1 false), !dbg !2001
  %field.90 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2002
  %err.field.ld.2 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.90, align 8, !dbg !2002
  %icmp.48 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.2, null, !dbg !2002
  %zext.48 = zext i1 %icmp.48 to i8, !dbg !2002
  %trunc.30 = trunc i8 %zext.48 to i1, !dbg !2003
  br i1 %trunc.30, label %then.30, label %else.30

else.29:                                          ; preds = %entry
  br label %fallthrough.29

then.30:                                          ; preds = %fallthrough.29
  %field.87 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2004
  %err.field.ld.0 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.87, align 8, !dbg !2004
  %field.88 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.0, i32 0, i32 1, !dbg !2004
  %.field.ld.2 = load { i8*, i64 } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)** %field.88, align 8, !dbg !2004
  %field.89 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !2004
  %err.field.ld.1 = load i8*, i8** %field.89, align 8, !dbg !2004
  %call.13 = call { i8*, i64 } %.field.ld.2(i8* nest undef, i8* %err.field.ld.1), !dbg !2004
  store { i8*, i64 } %call.13, { i8*, i64 }* %sret.actual.19, align 8, !dbg !2004
  %cast.290 = bitcast { i8*, i64 }* %tmpv.59 to i8*
  %cast.291 = bitcast { i8*, i64 }* %sret.actual.19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.290, i8* align 8 %cast.291, i64 16, i1 false)
  %index.6 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.60, i32 0, i32 0, !dbg !2005
  %cast.292 = bitcast { i8*, i64 }* %index.6 to i8*, !dbg !2005
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.292, i8* align 8 bitcast ({ i8*, i64 }* @const.66 to i8*), i64 16, i1 false), !dbg !2005
  %index.7 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.60, i32 0, i32 1, !dbg !2005
  %cast.293 = bitcast { i8*, i64 }* %index.7 to i8*, !dbg !2005
  %cast.294 = bitcast { i8*, i64 }* %tmpv.59 to i8*, !dbg !2005
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.293, i8* align 8 %cast.294, i64 16, i1 false), !dbg !2005
  %cast.295 = bitcast [2 x { i8*, i64 }]* %tmpv.60 to i8*, !dbg !2005
  %call.14 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.295, i64 2), !dbg !2005
  store { i8*, i64 } %call.14, { i8*, i64 }* %sret.actual.20, align 8, !dbg !2005
  %field0.13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.20, i32 0, i32 0, !dbg !2006
  %ld.22 = load i8*, i8** %field0.13, align 8, !dbg !2006
  %field1.13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.20, i32 0, i32 1, !dbg !2006
  %ld.23 = load i64, i64* %field1.13, align 8, !dbg !2006
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.21, i8* nest undef, i8* %ld.22, i64 %ld.23), !dbg !2006
  %cast.299 = bitcast %Response.0* %tmpv.61 to i8*
  %cast.300 = bitcast %Response.0* %sret.actual.21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.299, i8* align 8 %cast.300, i64 80, i1 false)
  %cast.301 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2007
  %cast.302 = bitcast %Response.0* %tmpv.61 to i8*, !dbg !2007
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.301, i8* align 8 %cast.302, i64 80, i1 false), !dbg !2007
  %cast.303 = bitcast %Response.0* %sret.formal.2 to i8*, !dbg !2007
  %cast.304 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2007
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.303, i8* align 8 %cast.304, i64 80, i1 false), !dbg !2007
  %26 = bitcast %error.0* %err to i8*, !dbg !2007
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %26), !dbg !2007
  %27 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2007
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %27), !dbg !2007
  %28 = bitcast %IPST.0* %marbleJsonBytes to i8*, !dbg !2007
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %28), !dbg !2007
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2007
  %29 = bitcast %.command-line-arguments.marbleTransientInput.0** %marbleInput to i8*, !dbg !2007
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %29), !dbg !2007
  %30 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2007
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %30), !dbg !2007
  %31 = bitcast %.command-line-arguments.marble.0** %marble to i8*, !dbg !2007
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %31), !dbg !2007
  %32 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2007
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %32), !dbg !2007
  %33 = bitcast %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails to i8*, !dbg !2007
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %33), !dbg !2007
  %34 = bitcast %IPST.0* %marblePrivateDetailsBytes to i8*, !dbg !2007
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %34), !dbg !2007
  %35 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !2007
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %35), !dbg !2007
  %36 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !2007
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %36), !dbg !2007
  %37 = bitcast %IPST.0* %value to i8*, !dbg !2007
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %37), !dbg !2007
  %38 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2007
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %38), !dbg !2007
  ret void, !dbg !2007

fallthrough.30:                                   ; preds = %else.30
  %cast.306 = bitcast %IPST.0* %marbleJsonBytes to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.306, i8* align 8 bitcast (%IPST.0* @const.43 to i8*), i64 24, i1 false)
  call void @llvm.dbg.declare(metadata %IPST.0* %marbleJsonBytes, metadata !2008, metadata !DIExpression()), !dbg !2009
  store i8 0, i8* %ok, align 1
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !2010, metadata !DIExpression()), !dbg !2009
  %cast.307 = bitcast { i8*, i64 }* %tmpv.62 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.307, i8* align 8 bitcast ({ i8*, i64 }* @const.67 to i8*), i64 16, i1 false)
  %transMap.ld.0 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap, align 8, !dbg !2011
  %field0.14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.62, i32 0, i32 0, !dbg !2012
  %ld.24 = load i8*, i8** %field0.14, align 8, !dbg !2012
  %field1.14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.62, i32 0, i32 1, !dbg !2012
  %ld.25 = load i64, i64* %field1.14, align 8, !dbg !2012
  %call.15 = call { i8*, i8 } @runtime.mapaccess2__faststr(i8* nest undef, %_type.0* getelementptr inbounds (%MapType.0, %MapType.0* @type..map_6string_7_6_7uint8, i32 0, i32 0), { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %transMap.ld.0, i8* %ld.24, i64 %ld.25), !dbg !2012
  store { i8*, i8 } %call.15, { i8*, i8 }* %sret.actual.22, align 8, !dbg !2012
  %cast.331 = bitcast { i8*, i8 }* %tmpv.65 to i8*, !dbg !2012
  %cast.332 = bitcast { i8*, i8 }* %sret.actual.22 to i8*, !dbg !2012
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.331, i8* align 8 %cast.332, i64 16, i1 false), !dbg !2012
  %field.91 = getelementptr inbounds { i8*, i8 }, { i8*, i8 }* %tmpv.65, i32 0, i32 0, !dbg !2012
  %tmpv.65.field.ld.0 = load i8*, i8** %field.91, align 8, !dbg !2012
  store i8* %tmpv.65.field.ld.0, i8** %tmpv.66, align 8
  %tmpv.66.ld.0 = load i8*, i8** %tmpv.66, align 8, !dbg !2012
  %cast.333 = bitcast i8* %tmpv.66.ld.0 to %IPST.0*, !dbg !2012
  store %IPST.0* %cast.333, %IPST.0** %tmpv.63, align 8, !dbg !2012
  %field.92 = getelementptr inbounds { i8*, i8 }, { i8*, i8 }* %tmpv.65, i32 0, i32 1, !dbg !2012
  %tmpv.65.field.ld.1 = load i8, i8* %field.92, align 1, !dbg !2012
  store i8 %tmpv.65.field.ld.1, i8* %tmpv.67, align 1
  %tmpv.67.ld.0 = load i8, i8* %tmpv.67, align 1, !dbg !2012
  store i8 %tmpv.67.ld.0, i8* %tmpv.64, align 1, !dbg !2012
  %tmpv.63.ld.0 = load %IPST.0*, %IPST.0** %tmpv.63, align 8, !dbg !2012
  %cast.334 = bitcast %IPST.0* %marbleJsonBytes to i8*, !dbg !2012
  %cast.335 = bitcast %IPST.0* %tmpv.63.ld.0 to i8*, !dbg !2012
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.334, i8* align 8 %cast.335, i64 24, i1 false), !dbg !2012
  %tmpv.64.ld.0 = load i8, i8* %tmpv.64, align 1, !dbg !2012
  store i8 %tmpv.64.ld.0, i8* %ok, align 1, !dbg !2012
  %ok.ld.0 = load i8, i8* %ok, align 1, !dbg !2013
  %icmp.49 = icmp ne i8 %ok.ld.0, 0, !dbg !2014
  %xor.9 = xor i1 %icmp.49, true, !dbg !2014
  %zext.49 = zext i1 %xor.9 to i8, !dbg !2014
  %trunc.31 = trunc i8 %zext.49 to i1, !dbg !2015
  br i1 %trunc.31, label %then.31, label %else.31

else.30:                                          ; preds = %fallthrough.29
  br label %fallthrough.30

then.31:                                          ; preds = %fallthrough.30
  %ld.26 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.82, i32 0, i32 0), align 8, !dbg !2016
  %ld.27 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.82, i32 0, i32 1), align 8, !dbg !2016
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.23, i8* nest undef, i8* %ld.26, i64 %ld.27), !dbg !2016
  %cast.337 = bitcast %Response.0* %tmpv.68 to i8*
  %cast.338 = bitcast %Response.0* %sret.actual.23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.337, i8* align 8 %cast.338, i64 80, i1 false)
  %cast.339 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2017
  %cast.340 = bitcast %Response.0* %tmpv.68 to i8*, !dbg !2017
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.339, i8* align 8 %cast.340, i64 80, i1 false), !dbg !2017
  %cast.341 = bitcast %Response.0* %sret.formal.2 to i8*, !dbg !2017
  %cast.342 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2017
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.341, i8* align 8 %cast.342, i64 80, i1 false), !dbg !2017
  %39 = bitcast %error.0* %err to i8*, !dbg !2017
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %39), !dbg !2017
  %40 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2017
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %40), !dbg !2017
  %41 = bitcast %IPST.0* %marbleJsonBytes to i8*, !dbg !2017
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %41), !dbg !2017
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2017
  %42 = bitcast %.command-line-arguments.marbleTransientInput.0** %marbleInput to i8*, !dbg !2017
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %42), !dbg !2017
  %43 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2017
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %43), !dbg !2017
  %44 = bitcast %.command-line-arguments.marble.0** %marble to i8*, !dbg !2017
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %44), !dbg !2017
  %45 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2017
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %45), !dbg !2017
  %46 = bitcast %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails to i8*, !dbg !2017
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %46), !dbg !2017
  %47 = bitcast %IPST.0* %marblePrivateDetailsBytes to i8*, !dbg !2017
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %47), !dbg !2017
  %48 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !2017
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %48), !dbg !2017
  %49 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !2017
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %49), !dbg !2017
  %50 = bitcast %IPST.0* %value to i8*, !dbg !2017
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %50), !dbg !2017
  %51 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2017
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %51), !dbg !2017
  ret void, !dbg !2017

fallthrough.31:                                   ; preds = %else.31
  %field.93 = getelementptr inbounds %IPST.0, %IPST.0* %marbleJsonBytes, i32 0, i32 1, !dbg !2018
  %marbleJsonBytes.field.ld.0 = load i64, i64* %field.93, align 8, !dbg !2018
  %icmp.50 = icmp eq i64 %marbleJsonBytes.field.ld.0, 0, !dbg !2019
  %zext.50 = zext i1 %icmp.50 to i8, !dbg !2019
  %trunc.32 = trunc i8 %zext.50 to i1, !dbg !2020
  br i1 %trunc.32, label %then.32, label %else.32

else.31:                                          ; preds = %fallthrough.30
  br label %fallthrough.31

then.32:                                          ; preds = %fallthrough.31
  %ld.28 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.84, i32 0, i32 0), align 8, !dbg !2021
  %ld.29 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.84, i32 0, i32 1), align 8, !dbg !2021
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.24, i8* nest undef, i8* %ld.28, i64 %ld.29), !dbg !2021
  %cast.344 = bitcast %Response.0* %tmpv.69 to i8*
  %cast.345 = bitcast %Response.0* %sret.actual.24 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.344, i8* align 8 %cast.345, i64 80, i1 false)
  %cast.346 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2022
  %cast.347 = bitcast %Response.0* %tmpv.69 to i8*, !dbg !2022
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.346, i8* align 8 %cast.347, i64 80, i1 false), !dbg !2022
  %cast.348 = bitcast %Response.0* %sret.formal.2 to i8*, !dbg !2022
  %cast.349 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2022
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.348, i8* align 8 %cast.349, i64 80, i1 false), !dbg !2022
  %52 = bitcast %error.0* %err to i8*, !dbg !2022
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %52), !dbg !2022
  %53 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2022
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %53), !dbg !2022
  %54 = bitcast %IPST.0* %marbleJsonBytes to i8*, !dbg !2022
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %54), !dbg !2022
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2022
  %55 = bitcast %.command-line-arguments.marbleTransientInput.0** %marbleInput to i8*, !dbg !2022
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %55), !dbg !2022
  %56 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2022
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %56), !dbg !2022
  %57 = bitcast %.command-line-arguments.marble.0** %marble to i8*, !dbg !2022
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %57), !dbg !2022
  %58 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2022
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %58), !dbg !2022
  %59 = bitcast %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails to i8*, !dbg !2022
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %59), !dbg !2022
  %60 = bitcast %IPST.0* %marblePrivateDetailsBytes to i8*, !dbg !2022
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %60), !dbg !2022
  %61 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !2022
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %61), !dbg !2022
  %62 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !2022
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %62), !dbg !2022
  %63 = bitcast %IPST.0* %value to i8*, !dbg !2022
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %63), !dbg !2022
  %64 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2022
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %64), !dbg !2022
  ret void, !dbg !2022

fallthrough.32:                                   ; preds = %else.32
  %call.16 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @command_x2dline_x2darguments_0MarblesPrivateChaincode_0initMarble_0marbleTransientInput..d, i32 0, i32 0)), !dbg !2023
  %cast.358 = bitcast i8* %call.16 to %.command-line-arguments.marbleTransientInput.0*, !dbg !2023
  store %.command-line-arguments.marbleTransientInput.0* %cast.358, %.command-line-arguments.marbleTransientInput.0** %tmpv.70, align 8
  %tmpv.70.ld.0 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.70, align 8, !dbg !2023
  store %.command-line-arguments.marbleTransientInput.0* %tmpv.70.ld.0, %.command-line-arguments.marbleTransientInput.0** %marbleInput, align 8
  call void @llvm.dbg.declare(metadata %.command-line-arguments.marbleTransientInput.0** %marbleInput, metadata !2024, metadata !DIExpression()), !dbg !2033
  %marbleInput.ld.0 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %marbleInput, align 8, !dbg !2034
  %field.94 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.5, i32 0, i32 0, !dbg !2035
  store %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @command_x2dline_x2darguments_0MarblesPrivateChaincode_0initMarble_0marbleTransientInput..p, i32 0, i32 0), %_type.0** %field.94, align 8, !dbg !2035
  %field.95 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.5, i32 0, i32 1, !dbg !2035
  %cast.360 = bitcast %.command-line-arguments.marbleTransientInput.0* %marbleInput.ld.0 to i8*, !dbg !2035
  store i8* %cast.360, i8** %field.95, align 8, !dbg !2035
  %cast.361 = bitcast %IPST.3* %tmp.5 to { i8*, i8* }*, !dbg !2035
  %field0.17 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.361, i32 0, i32 0, !dbg !2035
  %ld.30 = load i8*, i8** %field0.17, align 8, !dbg !2035
  %field1.17 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.361, i32 0, i32 1, !dbg !2035
  %ld.31 = load i8*, i8** %field1.17, align 8, !dbg !2035
  %call.17 = call { i8*, i8* } @encoding_1json.Unmarshal(i8* nest undef, %IPST.0* byval(%IPST.0) %marbleJsonBytes, i8* %ld.30, i8* %ld.31), !dbg !2035
  %cast.362 = bitcast %error.0* %sret.actual.25 to { i8*, i8* }*, !dbg !2035
  store { i8*, i8* } %call.17, { i8*, i8* }* %cast.362, align 8, !dbg !2035
  %cast.363 = bitcast %error.0* %tmpv.71 to i8*
  %cast.364 = bitcast %error.0* %sret.actual.25 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.363, i8* align 8 %cast.364, i64 16, i1 false)
  %cast.365 = bitcast %error.0* %err to i8*, !dbg !2036
  %cast.366 = bitcast %error.0* %tmpv.71 to i8*, !dbg !2036
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.365, i8* align 8 %cast.366, i64 16, i1 false), !dbg !2036
  %field.100 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2037
  %err.field.ld.3 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.100, align 8, !dbg !2037
  %icmp.51 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.3, null, !dbg !2037
  %zext.51 = zext i1 %icmp.51 to i8, !dbg !2037
  %trunc.33 = trunc i8 %zext.51 to i1, !dbg !2038
  br i1 %trunc.33, label %then.33, label %else.33

else.32:                                          ; preds = %fallthrough.31
  br label %fallthrough.32

then.33:                                          ; preds = %fallthrough.32
  %field.96 = getelementptr inbounds %IPST.0, %IPST.0* %marbleJsonBytes, i32 0, i32 0, !dbg !2039
  %marbleJsonBytes.field.ld.1 = load i8*, i8** %field.96, align 8, !dbg !2039
  %field.97 = getelementptr inbounds %IPST.0, %IPST.0* %marbleJsonBytes, i32 0, i32 1, !dbg !2039
  %marbleJsonBytes.field.ld.2 = load i64, i64* %field.97, align 8, !dbg !2039
  %field.98 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmp.6, i32 0, i32 0, !dbg !2039
  store i8* %marbleJsonBytes.field.ld.1, i8** %field.98, align 8, !dbg !2039
  %field.99 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmp.6, i32 0, i32 1, !dbg !2039
  store i64 %marbleJsonBytes.field.ld.2, i64* %field.99, align 8, !dbg !2039
  %index.8 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.72, i32 0, i32 0, !dbg !2040
  %cast.367 = bitcast { i8*, i64 }* %index.8 to i8*, !dbg !2040
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.367, i8* align 8 bitcast ({ i8*, i64 }* @const.89 to i8*), i64 16, i1 false), !dbg !2040
  %index.9 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.72, i32 0, i32 1, !dbg !2040
  %cast.368 = bitcast { i8*, i64 }* %index.9 to i8*, !dbg !2040
  %cast.369 = bitcast { i8*, i64 }* %tmp.6 to i8*, !dbg !2040
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.368, i8* align 8 %cast.369, i64 16, i1 false), !dbg !2040
  %cast.370 = bitcast [2 x { i8*, i64 }]* %tmpv.72 to i8*, !dbg !2040
  %call.18 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.370, i64 2), !dbg !2040
  store { i8*, i64 } %call.18, { i8*, i64 }* %sret.actual.26, align 8, !dbg !2040
  %field0.18 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.26, i32 0, i32 0, !dbg !2041
  %ld.32 = load i8*, i8** %field0.18, align 8, !dbg !2041
  %field1.18 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.26, i32 0, i32 1, !dbg !2041
  %ld.33 = load i64, i64* %field1.18, align 8, !dbg !2041
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.27, i8* nest undef, i8* %ld.32, i64 %ld.33), !dbg !2041
  %cast.374 = bitcast %Response.0* %tmpv.73 to i8*
  %cast.375 = bitcast %Response.0* %sret.actual.27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.374, i8* align 8 %cast.375, i64 80, i1 false)
  %cast.376 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2042
  %cast.377 = bitcast %Response.0* %tmpv.73 to i8*, !dbg !2042
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.376, i8* align 8 %cast.377, i64 80, i1 false), !dbg !2042
  %cast.378 = bitcast %Response.0* %sret.formal.2 to i8*, !dbg !2042
  %cast.379 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2042
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.378, i8* align 8 %cast.379, i64 80, i1 false), !dbg !2042
  %65 = bitcast %error.0* %err to i8*, !dbg !2042
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %65), !dbg !2042
  %66 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2042
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %66), !dbg !2042
  %67 = bitcast %IPST.0* %marbleJsonBytes to i8*, !dbg !2042
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %67), !dbg !2042
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2042
  %68 = bitcast %.command-line-arguments.marbleTransientInput.0** %marbleInput to i8*, !dbg !2042
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %68), !dbg !2042
  %69 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2042
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %69), !dbg !2042
  %70 = bitcast %.command-line-arguments.marble.0** %marble to i8*, !dbg !2042
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %70), !dbg !2042
  %71 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2042
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %71), !dbg !2042
  %72 = bitcast %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails to i8*, !dbg !2042
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %72), !dbg !2042
  %73 = bitcast %IPST.0* %marblePrivateDetailsBytes to i8*, !dbg !2042
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %73), !dbg !2042
  %74 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !2042
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %74), !dbg !2042
  %75 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !2042
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %75), !dbg !2042
  %76 = bitcast %IPST.0* %value to i8*, !dbg !2042
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %76), !dbg !2042
  %77 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2042
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %77), !dbg !2042
  ret void, !dbg !2042

fallthrough.33:                                   ; preds = %else.33
  %marbleInput.ld.1 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %marbleInput, align 8, !dbg !2043
  %field.101 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %marbleInput.ld.1, i32 0, i32 0, !dbg !2044
  %field.102 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %field.101, i32 0, i32 1, !dbg !2045
  %.field.field.ld.0 = load i64, i64* %field.102, align 8, !dbg !2045
  %icmp.52 = icmp eq i64 %.field.field.ld.0, 0, !dbg !2046
  %zext.52 = zext i1 %icmp.52 to i8, !dbg !2046
  %trunc.34 = trunc i8 %zext.52 to i1, !dbg !2047
  br i1 %trunc.34, label %then.34, label %else.34

else.33:                                          ; preds = %fallthrough.32
  br label %fallthrough.33

then.34:                                          ; preds = %fallthrough.33
  %ld.34 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.91, i32 0, i32 0), align 8, !dbg !2048
  %ld.35 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.91, i32 0, i32 1), align 8, !dbg !2048
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.28, i8* nest undef, i8* %ld.34, i64 %ld.35), !dbg !2048
  %cast.382 = bitcast %Response.0* %tmpv.74 to i8*
  %cast.383 = bitcast %Response.0* %sret.actual.28 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.382, i8* align 8 %cast.383, i64 80, i1 false)
  %cast.384 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2049
  %cast.385 = bitcast %Response.0* %tmpv.74 to i8*, !dbg !2049
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.384, i8* align 8 %cast.385, i64 80, i1 false), !dbg !2049
  %cast.386 = bitcast %Response.0* %sret.formal.2 to i8*, !dbg !2049
  %cast.387 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2049
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.386, i8* align 8 %cast.387, i64 80, i1 false), !dbg !2049
  %78 = bitcast %error.0* %err to i8*, !dbg !2049
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %78), !dbg !2049
  %79 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2049
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %79), !dbg !2049
  %80 = bitcast %IPST.0* %marbleJsonBytes to i8*, !dbg !2049
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %80), !dbg !2049
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2049
  %81 = bitcast %.command-line-arguments.marbleTransientInput.0** %marbleInput to i8*, !dbg !2049
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %81), !dbg !2049
  %82 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2049
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %82), !dbg !2049
  %83 = bitcast %.command-line-arguments.marble.0** %marble to i8*, !dbg !2049
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %83), !dbg !2049
  %84 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2049
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %84), !dbg !2049
  %85 = bitcast %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails to i8*, !dbg !2049
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %85), !dbg !2049
  %86 = bitcast %IPST.0* %marblePrivateDetailsBytes to i8*, !dbg !2049
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %86), !dbg !2049
  %87 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !2049
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %87), !dbg !2049
  %88 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !2049
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %88), !dbg !2049
  %89 = bitcast %IPST.0* %value to i8*, !dbg !2049
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %89), !dbg !2049
  %90 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2049
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %90), !dbg !2049
  ret void, !dbg !2049

fallthrough.34:                                   ; preds = %else.34
  %marbleInput.ld.2 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %marbleInput, align 8, !dbg !2050
  %field.103 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %marbleInput.ld.2, i32 0, i32 1, !dbg !2051
  %field.104 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %field.103, i32 0, i32 1, !dbg !2052
  %.field.field.ld.1 = load i64, i64* %field.104, align 8, !dbg !2052
  %icmp.53 = icmp eq i64 %.field.field.ld.1, 0, !dbg !2053
  %zext.53 = zext i1 %icmp.53 to i8, !dbg !2053
  %trunc.35 = trunc i8 %zext.53 to i1, !dbg !2054
  br i1 %trunc.35, label %then.35, label %else.35

else.34:                                          ; preds = %fallthrough.33
  br label %fallthrough.34

then.35:                                          ; preds = %fallthrough.34
  %ld.36 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.93, i32 0, i32 0), align 8, !dbg !2055
  %ld.37 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.93, i32 0, i32 1), align 8, !dbg !2055
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.29, i8* nest undef, i8* %ld.36, i64 %ld.37), !dbg !2055
  %cast.389 = bitcast %Response.0* %tmpv.75 to i8*
  %cast.390 = bitcast %Response.0* %sret.actual.29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.389, i8* align 8 %cast.390, i64 80, i1 false)
  %cast.391 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2056
  %cast.392 = bitcast %Response.0* %tmpv.75 to i8*, !dbg !2056
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.391, i8* align 8 %cast.392, i64 80, i1 false), !dbg !2056
  %cast.393 = bitcast %Response.0* %sret.formal.2 to i8*, !dbg !2056
  %cast.394 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2056
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.393, i8* align 8 %cast.394, i64 80, i1 false), !dbg !2056
  %91 = bitcast %error.0* %err to i8*, !dbg !2056
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %91), !dbg !2056
  %92 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2056
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %92), !dbg !2056
  %93 = bitcast %IPST.0* %marbleJsonBytes to i8*, !dbg !2056
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %93), !dbg !2056
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2056
  %94 = bitcast %.command-line-arguments.marbleTransientInput.0** %marbleInput to i8*, !dbg !2056
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %94), !dbg !2056
  %95 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2056
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %95), !dbg !2056
  %96 = bitcast %.command-line-arguments.marble.0** %marble to i8*, !dbg !2056
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %96), !dbg !2056
  %97 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2056
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %97), !dbg !2056
  %98 = bitcast %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails to i8*, !dbg !2056
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %98), !dbg !2056
  %99 = bitcast %IPST.0* %marblePrivateDetailsBytes to i8*, !dbg !2056
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %99), !dbg !2056
  %100 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !2056
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %100), !dbg !2056
  %101 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !2056
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %101), !dbg !2056
  %102 = bitcast %IPST.0* %value to i8*, !dbg !2056
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %102), !dbg !2056
  %103 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2056
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %103), !dbg !2056
  ret void, !dbg !2056

fallthrough.35:                                   ; preds = %else.35
  %marbleInput.ld.3 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %marbleInput, align 8, !dbg !2057
  %field.105 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %marbleInput.ld.3, i32 0, i32 2, !dbg !2058
  %.field.ld.3 = load i64, i64* %field.105, align 8, !dbg !2058
  %icmp.54 = icmp sle i64 %.field.ld.3, 0, !dbg !2059
  %zext.54 = zext i1 %icmp.54 to i8, !dbg !2059
  %trunc.36 = trunc i8 %zext.54 to i1, !dbg !2060
  br i1 %trunc.36, label %then.36, label %else.36

else.35:                                          ; preds = %fallthrough.34
  br label %fallthrough.35

then.36:                                          ; preds = %fallthrough.35
  %ld.38 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.95, i32 0, i32 0), align 8, !dbg !2061
  %ld.39 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.95, i32 0, i32 1), align 8, !dbg !2061
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.30, i8* nest undef, i8* %ld.38, i64 %ld.39), !dbg !2061
  %cast.396 = bitcast %Response.0* %tmpv.76 to i8*
  %cast.397 = bitcast %Response.0* %sret.actual.30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.396, i8* align 8 %cast.397, i64 80, i1 false)
  %cast.398 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2062
  %cast.399 = bitcast %Response.0* %tmpv.76 to i8*, !dbg !2062
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.398, i8* align 8 %cast.399, i64 80, i1 false), !dbg !2062
  %cast.400 = bitcast %Response.0* %sret.formal.2 to i8*, !dbg !2062
  %cast.401 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2062
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.400, i8* align 8 %cast.401, i64 80, i1 false), !dbg !2062
  %104 = bitcast %error.0* %err to i8*, !dbg !2062
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %104), !dbg !2062
  %105 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2062
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %105), !dbg !2062
  %106 = bitcast %IPST.0* %marbleJsonBytes to i8*, !dbg !2062
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %106), !dbg !2062
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2062
  %107 = bitcast %.command-line-arguments.marbleTransientInput.0** %marbleInput to i8*, !dbg !2062
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %107), !dbg !2062
  %108 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2062
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %108), !dbg !2062
  %109 = bitcast %.command-line-arguments.marble.0** %marble to i8*, !dbg !2062
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %109), !dbg !2062
  %110 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2062
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %110), !dbg !2062
  %111 = bitcast %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails to i8*, !dbg !2062
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %111), !dbg !2062
  %112 = bitcast %IPST.0* %marblePrivateDetailsBytes to i8*, !dbg !2062
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %112), !dbg !2062
  %113 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !2062
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %113), !dbg !2062
  %114 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !2062
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %114), !dbg !2062
  %115 = bitcast %IPST.0* %value to i8*, !dbg !2062
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %115), !dbg !2062
  %116 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2062
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %116), !dbg !2062
  ret void, !dbg !2062

fallthrough.36:                                   ; preds = %else.36
  %marbleInput.ld.4 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %marbleInput, align 8, !dbg !2063
  %field.106 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %marbleInput.ld.4, i32 0, i32 3, !dbg !2064
  %field.107 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %field.106, i32 0, i32 1, !dbg !2065
  %.field.field.ld.2 = load i64, i64* %field.107, align 8, !dbg !2065
  %icmp.55 = icmp eq i64 %.field.field.ld.2, 0, !dbg !2066
  %zext.55 = zext i1 %icmp.55 to i8, !dbg !2066
  %trunc.37 = trunc i8 %zext.55 to i1, !dbg !2067
  br i1 %trunc.37, label %then.37, label %else.37

else.36:                                          ; preds = %fallthrough.35
  br label %fallthrough.36

then.37:                                          ; preds = %fallthrough.36
  %ld.40 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.97, i32 0, i32 0), align 8, !dbg !2068
  %ld.41 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.97, i32 0, i32 1), align 8, !dbg !2068
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.31, i8* nest undef, i8* %ld.40, i64 %ld.41), !dbg !2068
  %cast.403 = bitcast %Response.0* %tmpv.77 to i8*
  %cast.404 = bitcast %Response.0* %sret.actual.31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.403, i8* align 8 %cast.404, i64 80, i1 false)
  %cast.405 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2069
  %cast.406 = bitcast %Response.0* %tmpv.77 to i8*, !dbg !2069
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.405, i8* align 8 %cast.406, i64 80, i1 false), !dbg !2069
  %cast.407 = bitcast %Response.0* %sret.formal.2 to i8*, !dbg !2069
  %cast.408 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2069
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.407, i8* align 8 %cast.408, i64 80, i1 false), !dbg !2069
  %117 = bitcast %error.0* %err to i8*, !dbg !2069
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %117), !dbg !2069
  %118 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2069
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %118), !dbg !2069
  %119 = bitcast %IPST.0* %marbleJsonBytes to i8*, !dbg !2069
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %119), !dbg !2069
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2069
  %120 = bitcast %.command-line-arguments.marbleTransientInput.0** %marbleInput to i8*, !dbg !2069
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %120), !dbg !2069
  %121 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2069
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %121), !dbg !2069
  %122 = bitcast %.command-line-arguments.marble.0** %marble to i8*, !dbg !2069
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %122), !dbg !2069
  %123 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2069
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %123), !dbg !2069
  %124 = bitcast %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails to i8*, !dbg !2069
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %124), !dbg !2069
  %125 = bitcast %IPST.0* %marblePrivateDetailsBytes to i8*, !dbg !2069
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %125), !dbg !2069
  %126 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !2069
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %126), !dbg !2069
  %127 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !2069
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %127), !dbg !2069
  %128 = bitcast %IPST.0* %value to i8*, !dbg !2069
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %128), !dbg !2069
  %129 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2069
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %129), !dbg !2069
  ret void, !dbg !2069

fallthrough.37:                                   ; preds = %else.37
  %marbleInput.ld.5 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %marbleInput, align 8, !dbg !2070
  %field.108 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %marbleInput.ld.5, i32 0, i32 4, !dbg !2071
  %.field.ld.4 = load i64, i64* %field.108, align 8, !dbg !2071
  %icmp.56 = icmp sle i64 %.field.ld.4, 0, !dbg !2072
  %zext.56 = zext i1 %icmp.56 to i8, !dbg !2072
  %trunc.38 = trunc i8 %zext.56 to i1, !dbg !2073
  br i1 %trunc.38, label %then.38, label %else.38

else.37:                                          ; preds = %fallthrough.36
  br label %fallthrough.37

then.38:                                          ; preds = %fallthrough.37
  %ld.42 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.99, i32 0, i32 0), align 8, !dbg !2074
  %ld.43 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.99, i32 0, i32 1), align 8, !dbg !2074
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.32, i8* nest undef, i8* %ld.42, i64 %ld.43), !dbg !2074
  %cast.410 = bitcast %Response.0* %tmpv.78 to i8*
  %cast.411 = bitcast %Response.0* %sret.actual.32 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.410, i8* align 8 %cast.411, i64 80, i1 false)
  %cast.412 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2075
  %cast.413 = bitcast %Response.0* %tmpv.78 to i8*, !dbg !2075
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.412, i8* align 8 %cast.413, i64 80, i1 false), !dbg !2075
  %cast.414 = bitcast %Response.0* %sret.formal.2 to i8*, !dbg !2075
  %cast.415 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2075
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.414, i8* align 8 %cast.415, i64 80, i1 false), !dbg !2075
  %130 = bitcast %error.0* %err to i8*, !dbg !2075
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %130), !dbg !2075
  %131 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2075
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %131), !dbg !2075
  %132 = bitcast %IPST.0* %marbleJsonBytes to i8*, !dbg !2075
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %132), !dbg !2075
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2075
  %133 = bitcast %.command-line-arguments.marbleTransientInput.0** %marbleInput to i8*, !dbg !2075
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %133), !dbg !2075
  %134 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2075
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %134), !dbg !2075
  %135 = bitcast %.command-line-arguments.marble.0** %marble to i8*, !dbg !2075
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %135), !dbg !2075
  %136 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2075
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %136), !dbg !2075
  %137 = bitcast %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails to i8*, !dbg !2075
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %137), !dbg !2075
  %138 = bitcast %IPST.0* %marblePrivateDetailsBytes to i8*, !dbg !2075
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %138), !dbg !2075
  %139 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !2075
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %139), !dbg !2075
  %140 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !2075
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %140), !dbg !2075
  %141 = bitcast %IPST.0* %value to i8*, !dbg !2075
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %141), !dbg !2075
  %142 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2075
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %142), !dbg !2075
  ret void, !dbg !2075

fallthrough.38:                                   ; preds = %else.38
  %field.109 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 0, !dbg !2076
  %stub.field.ld.4 = load { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }** %field.109, align 8, !dbg !2076
  %field.110 = getelementptr inbounds { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }* %stub.field.ld.4, i32 0, i32 12, !dbg !2076
  %.field.ld.5 = load void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)** %field.110, align 8, !dbg !2076
  %field.111 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 1, !dbg !2076
  %stub.field.ld.5 = load i8*, i8** %field.111, align 8, !dbg !2076
  %marbleInput.ld.6 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %marbleInput, align 8, !dbg !2077
  %field.112 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %marbleInput.ld.6, i32 0, i32 0, !dbg !2078
  %ld.44 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.101, i32 0, i32 0), align 8, !dbg !2076
  %ld.45 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.101, i32 0, i32 1), align 8, !dbg !2076
  %field0.25 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %field.112, i32 0, i32 0, !dbg !2076
  %ld.46 = load i8*, i8** %field0.25, align 8, !dbg !2076
  %field1.25 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %field.112, i32 0, i32 1, !dbg !2076
  %ld.47 = load i64, i64* %field1.25, align 8, !dbg !2076
  call void %.field.ld.5({ %IPST.0, %error.0 }* sret({ %IPST.0, %error.0 }) "go_sret" %sret.actual.33, i8* nest undef, i8* %stub.field.ld.5, i8* %ld.44, i64 %ld.45, i8* %ld.46, i64 %ld.47), !dbg !2076
  %cast.418 = bitcast { %IPST.0, %error.0 }* %tmpv.79 to i8*, !dbg !2076
  %cast.419 = bitcast { %IPST.0, %error.0 }* %sret.actual.33 to i8*, !dbg !2076
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.418, i8* align 8 %cast.419, i64 40, i1 false), !dbg !2076
  %field.113 = getelementptr inbounds { %IPST.0, %error.0 }, { %IPST.0, %error.0 }* %tmpv.79, i32 0, i32 0, !dbg !2076
  %cast.420 = bitcast %IPST.0* %tmpv.80 to i8*
  %cast.421 = bitcast %IPST.0* %field.113 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.420, i8* align 8 %cast.421, i64 24, i1 false)
  %cast.422 = bitcast %IPST.0* %marbleAsBytes to i8*
  %cast.423 = bitcast %IPST.0* %tmpv.80 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.422, i8* align 8 %cast.423, i64 24, i1 false)
  call void @llvm.dbg.declare(metadata %IPST.0* %marbleAsBytes, metadata !2079, metadata !DIExpression()), !dbg !2080
  %field.114 = getelementptr inbounds { %IPST.0, %error.0 }, { %IPST.0, %error.0 }* %tmpv.79, i32 0, i32 1, !dbg !2076
  %cast.424 = bitcast %error.0* %tmpv.81 to i8*
  %cast.425 = bitcast %error.0* %field.114 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.424, i8* align 8 %cast.425, i64 16, i1 false)
  %cast.426 = bitcast %error.0* %err to i8*, !dbg !2081
  %cast.427 = bitcast %error.0* %tmpv.81 to i8*, !dbg !2081
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.426, i8* align 8 %cast.427, i64 16, i1 false), !dbg !2081
  %field.126 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2082
  %err.field.ld.6 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.126, align 8, !dbg !2082
  %icmp.59 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.6, null, !dbg !2082
  %zext.59 = zext i1 %icmp.59 to i8, !dbg !2082
  %trunc.41 = trunc i8 %zext.59 to i1, !dbg !2083
  br i1 %trunc.41, label %then.39, label %else.39

else.38:                                          ; preds = %fallthrough.37
  br label %fallthrough.38

then.39:                                          ; preds = %fallthrough.38
  %field.115 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2084
  %err.field.ld.4 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.115, align 8, !dbg !2084
  %field.116 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.4, i32 0, i32 1, !dbg !2084
  %.field.ld.6 = load { i8*, i64 } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)** %field.116, align 8, !dbg !2084
  %field.117 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !2084
  %err.field.ld.5 = load i8*, i8** %field.117, align 8, !dbg !2084
  %call.19 = call { i8*, i64 } %.field.ld.6(i8* nest undef, i8* %err.field.ld.5), !dbg !2084
  store { i8*, i64 } %call.19, { i8*, i64 }* %sret.actual.34, align 8, !dbg !2084
  %cast.429 = bitcast { i8*, i64 }* %tmpv.82 to i8*
  %cast.430 = bitcast { i8*, i64 }* %sret.actual.34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.429, i8* align 8 %cast.430, i64 16, i1 false)
  %index.10 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.83, i32 0, i32 0, !dbg !2085
  %cast.431 = bitcast { i8*, i64 }* %index.10 to i8*, !dbg !2085
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.431, i8* align 8 bitcast ({ i8*, i64 }* @const.103 to i8*), i64 16, i1 false), !dbg !2085
  %index.11 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.83, i32 0, i32 1, !dbg !2085
  %cast.432 = bitcast { i8*, i64 }* %index.11 to i8*, !dbg !2085
  %cast.433 = bitcast { i8*, i64 }* %tmpv.82 to i8*, !dbg !2085
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.432, i8* align 8 %cast.433, i64 16, i1 false), !dbg !2085
  %cast.434 = bitcast [2 x { i8*, i64 }]* %tmpv.83 to i8*, !dbg !2085
  %call.20 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.434, i64 2), !dbg !2085
  store { i8*, i64 } %call.20, { i8*, i64 }* %sret.actual.35, align 8, !dbg !2085
  %field0.26 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.35, i32 0, i32 0, !dbg !2086
  %ld.48 = load i8*, i8** %field0.26, align 8, !dbg !2086
  %field1.26 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.35, i32 0, i32 1, !dbg !2086
  %ld.49 = load i64, i64* %field1.26, align 8, !dbg !2086
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.36, i8* nest undef, i8* %ld.48, i64 %ld.49), !dbg !2086
  %cast.438 = bitcast %Response.0* %tmpv.84 to i8*
  %cast.439 = bitcast %Response.0* %sret.actual.36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.438, i8* align 8 %cast.439, i64 80, i1 false)
  %cast.440 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2087
  %cast.441 = bitcast %Response.0* %tmpv.84 to i8*, !dbg !2087
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.440, i8* align 8 %cast.441, i64 80, i1 false), !dbg !2087
  %cast.442 = bitcast %Response.0* %sret.formal.2 to i8*, !dbg !2087
  %cast.443 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2087
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.442, i8* align 8 %cast.443, i64 80, i1 false), !dbg !2087
  %143 = bitcast %error.0* %err to i8*, !dbg !2087
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %143), !dbg !2087
  %144 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2087
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %144), !dbg !2087
  %145 = bitcast %IPST.0* %marbleJsonBytes to i8*, !dbg !2087
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %145), !dbg !2087
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2087
  %146 = bitcast %.command-line-arguments.marbleTransientInput.0** %marbleInput to i8*, !dbg !2087
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %146), !dbg !2087
  %147 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2087
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %147), !dbg !2087
  %148 = bitcast %.command-line-arguments.marble.0** %marble to i8*, !dbg !2087
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %148), !dbg !2087
  %149 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2087
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %149), !dbg !2087
  %150 = bitcast %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails to i8*, !dbg !2087
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %150), !dbg !2087
  %151 = bitcast %IPST.0* %marblePrivateDetailsBytes to i8*, !dbg !2087
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %151), !dbg !2087
  %152 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !2087
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %152), !dbg !2087
  %153 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !2087
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %153), !dbg !2087
  %154 = bitcast %IPST.0* %value to i8*, !dbg !2087
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %154), !dbg !2087
  %155 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2087
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %155), !dbg !2087
  ret void, !dbg !2087

fallthrough.39:                                   ; preds = %fallthrough.40
  %call.24 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @command_x2dline_x2darguments.marble..d, i32 0, i32 0)), !dbg !2088
  %cast.481 = bitcast i8* %call.24 to %.command-line-arguments.marble.0*, !dbg !2088
  store %.command-line-arguments.marble.0* %cast.481, %.command-line-arguments.marble.0** %tmpv.92, align 8
  %marbleInput.ld.9 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %marbleInput, align 8, !dbg !2089
  %field.127 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %marbleInput.ld.9, i32 0, i32 0, !dbg !2090
  %marbleInput.ld.10 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %marbleInput, align 8, !dbg !2091
  %field.128 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %marbleInput.ld.10, i32 0, i32 1, !dbg !2092
  %marbleInput.ld.11 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %marbleInput, align 8, !dbg !2093
  %field.129 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %marbleInput.ld.11, i32 0, i32 2, !dbg !2094
  %.field.ld.7 = load i64, i64* %field.129, align 8, !dbg !2094
  %marbleInput.ld.12 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %marbleInput, align 8, !dbg !2095
  %field.130 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %marbleInput.ld.12, i32 0, i32 3, !dbg !2096
  %field.131 = getelementptr inbounds %.command-line-arguments.marble.0, %.command-line-arguments.marble.0* %tmpv.93, i32 0, i32 0, !dbg !2097
  %cast.482 = bitcast { i8*, i64 }* %field.131 to i8*, !dbg !2097
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.482, i8* align 8 bitcast ({ i8*, i64 }* @const.67 to i8*), i64 16, i1 false), !dbg !2097
  %field.132 = getelementptr inbounds %.command-line-arguments.marble.0, %.command-line-arguments.marble.0* %tmpv.93, i32 0, i32 1, !dbg !2097
  %cast.483 = bitcast { i8*, i64 }* %field.132 to i8*, !dbg !2097
  %cast.484 = bitcast { i8*, i64 }* %field.127 to i8*, !dbg !2097
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.483, i8* align 8 %cast.484, i64 16, i1 false), !dbg !2097
  %field.133 = getelementptr inbounds %.command-line-arguments.marble.0, %.command-line-arguments.marble.0* %tmpv.93, i32 0, i32 2, !dbg !2097
  %cast.485 = bitcast { i8*, i64 }* %field.133 to i8*, !dbg !2097
  %cast.486 = bitcast { i8*, i64 }* %field.128 to i8*, !dbg !2097
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.485, i8* align 8 %cast.486, i64 16, i1 false), !dbg !2097
  %field.134 = getelementptr inbounds %.command-line-arguments.marble.0, %.command-line-arguments.marble.0* %tmpv.93, i32 0, i32 3, !dbg !2097
  store i64 %.field.ld.7, i64* %field.134, align 8, !dbg !2097
  %field.135 = getelementptr inbounds %.command-line-arguments.marble.0, %.command-line-arguments.marble.0* %tmpv.93, i32 0, i32 4, !dbg !2097
  %cast.487 = bitcast { i8*, i64 }* %field.135 to i8*, !dbg !2097
  %cast.488 = bitcast { i8*, i64 }* %field.130 to i8*, !dbg !2097
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.487, i8* align 8 %cast.488, i64 16, i1 false), !dbg !2097
  %deref.ld.3 = load i32, i32* bitcast ({ i8, [3 x i8], i8, i8, i64 }* @runtime.writeBarrier to i32*), align 4, !dbg !2088
  %icmp.60 = icmp eq i32 %deref.ld.3, 0, !dbg !2088
  %zext.60 = zext i1 %icmp.60 to i8, !dbg !2088
  %trunc.42 = trunc i8 %zext.60 to i1, !dbg !2088
  br i1 %trunc.42, label %then.42, label %else.42

else.39:                                          ; preds = %fallthrough.38
  %field.125 = getelementptr inbounds %IPST.0, %IPST.0* %marbleAsBytes, i32 0, i32 0, !dbg !2098
  %marbleAsBytes.field.ld.0 = load i8*, i8** %field.125, align 8, !dbg !2098
  %icmp.58 = icmp ne i8* %marbleAsBytes.field.ld.0, null, !dbg !2099
  %zext.58 = zext i1 %icmp.58 to i8, !dbg !2099
  %trunc.40 = trunc i8 %zext.58 to i1, !dbg !2100
  br i1 %trunc.40, label %then.40, label %else.40

then.40:                                          ; preds = %else.39
  %marbleInput.ld.7 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %marbleInput, align 8, !dbg !2101
  %field.118 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %marbleInput.ld.7, i32 0, i32 0, !dbg !2102
  %index.12 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.86, i32 0, i32 0, !dbg !2103
  %cast.444 = bitcast { i8*, i64 }* %index.12 to i8*, !dbg !2103
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.444, i8* align 8 bitcast ({ i8*, i64 }* @const.105 to i8*), i64 16, i1 false), !dbg !2103
  %index.13 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.86, i32 0, i32 1, !dbg !2103
  %cast.445 = bitcast { i8*, i64 }* %index.13 to i8*, !dbg !2103
  %cast.446 = bitcast { i8*, i64 }* %field.118 to i8*, !dbg !2103
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.445, i8* align 8 %cast.446, i64 16, i1 false), !dbg !2103
  %call.21 = call i8* @runtime.newobject(i8* nest undef, %_type.0* @string..d), !dbg !2104
  %cast.447 = bitcast i8* %call.21 to { i8*, i64 }*, !dbg !2104
  store { i8*, i64 }* %cast.447, { i8*, i64 }** %tmpv.87, align 8
  %cast.448 = bitcast [2 x { i8*, i64 }]* %tmpv.86 to i8*, !dbg !2103
  %call.22 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.448, i64 2), !dbg !2103
  store { i8*, i64 } %call.22, { i8*, i64 }* %sret.actual.37, align 8, !dbg !2103
  %cast.451 = bitcast { i8*, i64 }* %tmpv.88 to i8*
  %cast.452 = bitcast { i8*, i64 }* %sret.actual.37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.451, i8* align 8 %cast.452, i64 16, i1 false)
  %deref.ld.2 = load i32, i32* bitcast ({ i8, [3 x i8], i8, i8, i64 }* @runtime.writeBarrier to i32*), align 4, !dbg !2104
  %icmp.57 = icmp eq i32 %deref.ld.2, 0, !dbg !2104
  %zext.57 = zext i1 %icmp.57 to i8, !dbg !2104
  %trunc.39 = trunc i8 %zext.57 to i1, !dbg !2104
  br i1 %trunc.39, label %then.41, label %else.41

fallthrough.40:                                   ; preds = %else.40
  br label %fallthrough.39

else.40:                                          ; preds = %else.39
  br label %fallthrough.40

then.41:                                          ; preds = %then.40
  %tmpv.87.ld.0 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.87, align 8, !dbg !2104
  %cast.453 = bitcast { i8*, i64 }* %tmpv.87.ld.0 to i8*, !dbg !2104
  %cast.454 = bitcast { i8*, i64 }* %tmpv.88 to i8*, !dbg !2104
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.453, i8* align 8 %cast.454, i64 16, i1 false), !dbg !2104
  br label %fallthrough.41

fallthrough.41:                                   ; preds = %else.41, %then.41
  %tmpv.87.ld.2 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.87, align 8, !dbg !2104
  %field.119 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.7, i32 0, i32 0, !dbg !2104
  store %_type.0* @string..d, %_type.0** %field.119, align 8, !dbg !2104
  %field.120 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.7, i32 0, i32 1, !dbg !2104
  %cast.459 = bitcast { i8*, i64 }* %tmpv.87.ld.2 to i8*, !dbg !2104
  store i8* %cast.459, i8** %field.120, align 8, !dbg !2104
  %index.14 = getelementptr [1 x %IPST.3], [1 x %IPST.3]* %tmpv.89, i32 0, i32 0, !dbg !2104
  %cast.460 = bitcast %IPST.3* %index.14 to i8*, !dbg !2104
  %cast.461 = bitcast %IPST.3* %tmp.7 to i8*, !dbg !2104
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.460, i8* align 8 %cast.461, i64 16, i1 false), !dbg !2104
  %cast.462 = bitcast [1 x %IPST.3]* %tmpv.89 to %IPST.3*, !dbg !2104
  %field.121 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.8, i32 0, i32 0, !dbg !2104
  store %IPST.3* %cast.462, %IPST.3** %field.121, align 8, !dbg !2104
  %field.122 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.8, i32 0, i32 1, !dbg !2104
  store i64 1, i64* %field.122, align 8, !dbg !2104
  %field.123 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.8, i32 0, i32 2, !dbg !2104
  store i64 1, i64* %field.123, align 8, !dbg !2104
  call void @fmt.Println({ i64, %error.0 }* sret({ i64, %error.0 }) "go_sret" %sret.actual.38, i8* nest undef, %IPST.52* byval(%IPST.52) %tmp.8), !dbg !2104
  %cast.463 = bitcast { i64, %error.0 }* %tmpv.85 to i8*, !dbg !2104
  %cast.464 = bitcast { i64, %error.0 }* %sret.actual.38 to i8*, !dbg !2104
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.463, i8* align 8 %cast.464, i64 24, i1 false), !dbg !2104
  %marbleInput.ld.8 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %marbleInput, align 8, !dbg !2105
  %field.124 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %marbleInput.ld.8, i32 0, i32 0, !dbg !2106
  %index.15 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.90, i32 0, i32 0, !dbg !2107
  %cast.465 = bitcast { i8*, i64 }* %index.15 to i8*, !dbg !2107
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.465, i8* align 8 bitcast ({ i8*, i64 }* @const.105 to i8*), i64 16, i1 false), !dbg !2107
  %index.16 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.90, i32 0, i32 1, !dbg !2107
  %cast.466 = bitcast { i8*, i64 }* %index.16 to i8*, !dbg !2107
  %cast.467 = bitcast { i8*, i64 }* %field.124 to i8*, !dbg !2107
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.466, i8* align 8 %cast.467, i64 16, i1 false), !dbg !2107
  %cast.468 = bitcast [2 x { i8*, i64 }]* %tmpv.90 to i8*, !dbg !2107
  %call.23 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.468, i64 2), !dbg !2107
  store { i8*, i64 } %call.23, { i8*, i64 }* %sret.actual.39, align 8, !dbg !2107
  %field0.27 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.39, i32 0, i32 0, !dbg !2108
  %ld.50 = load i8*, i8** %field0.27, align 8, !dbg !2108
  %field1.27 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.39, i32 0, i32 1, !dbg !2108
  %ld.51 = load i64, i64* %field1.27, align 8, !dbg !2108
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.40, i8* nest undef, i8* %ld.50, i64 %ld.51), !dbg !2108
  %cast.472 = bitcast %Response.0* %tmpv.91 to i8*
  %cast.473 = bitcast %Response.0* %sret.actual.40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.472, i8* align 8 %cast.473, i64 80, i1 false)
  %cast.474 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2109
  %cast.475 = bitcast %Response.0* %tmpv.91 to i8*, !dbg !2109
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.474, i8* align 8 %cast.475, i64 80, i1 false), !dbg !2109
  %cast.476 = bitcast %Response.0* %sret.formal.2 to i8*, !dbg !2109
  %cast.477 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2109
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.476, i8* align 8 %cast.477, i64 80, i1 false), !dbg !2109
  %156 = bitcast %error.0* %err to i8*, !dbg !2109
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %156), !dbg !2109
  %157 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2109
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %157), !dbg !2109
  %158 = bitcast %IPST.0* %marbleJsonBytes to i8*, !dbg !2109
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %158), !dbg !2109
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2109
  %159 = bitcast %.command-line-arguments.marbleTransientInput.0** %marbleInput to i8*, !dbg !2109
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %159), !dbg !2109
  %160 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2109
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %160), !dbg !2109
  %161 = bitcast %.command-line-arguments.marble.0** %marble to i8*, !dbg !2109
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %161), !dbg !2109
  %162 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2109
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %162), !dbg !2109
  %163 = bitcast %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails to i8*, !dbg !2109
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %163), !dbg !2109
  %164 = bitcast %IPST.0* %marblePrivateDetailsBytes to i8*, !dbg !2109
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %164), !dbg !2109
  %165 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !2109
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %165), !dbg !2109
  %166 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !2109
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %166), !dbg !2109
  %167 = bitcast %IPST.0* %value to i8*, !dbg !2109
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %167), !dbg !2109
  %168 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2109
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %168), !dbg !2109
  ret void, !dbg !2109

else.41:                                          ; preds = %then.40
  %tmpv.87.ld.1 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.87, align 8, !dbg !2104
  %cast.455 = bitcast { i8*, i64 }* %tmpv.87.ld.1 to i8*, !dbg !2104
  %cast.456 = bitcast { i8*, i64 }* %tmpv.88 to i8*, !dbg !2104
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* @string..d, i8* %cast.455, i8* %cast.456), !dbg !2104
  br label %fallthrough.41

then.42:                                          ; preds = %fallthrough.39
  %tmpv.92.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.92, align 8, !dbg !2088
  %cast.489 = bitcast %.command-line-arguments.marble.0* %tmpv.92.ld.0 to i8*, !dbg !2088
  %cast.490 = bitcast %.command-line-arguments.marble.0* %tmpv.93 to i8*, !dbg !2088
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.489, i8* align 8 %cast.490, i64 72, i1 false), !dbg !2088
  br label %fallthrough.42

fallthrough.42:                                   ; preds = %else.42, %then.42
  %tmpv.92.ld.2 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.92, align 8, !dbg !2088
  store %.command-line-arguments.marble.0* %tmpv.92.ld.2, %.command-line-arguments.marble.0** %marble, align 8
  call void @llvm.dbg.declare(metadata %.command-line-arguments.marble.0** %marble, metadata !2110, metadata !DIExpression()), !dbg !2111
  %marble.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %marble, align 8, !dbg !2112
  %field.136 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.9, i32 0, i32 0, !dbg !2113
  store %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @command_x2dline_x2darguments.marble..p, i32 0, i32 0), %_type.0** %field.136, align 8, !dbg !2113
  %field.137 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.9, i32 0, i32 1, !dbg !2113
  %cast.497 = bitcast %.command-line-arguments.marble.0* %marble.ld.0 to i8*, !dbg !2113
  store i8* %cast.497, i8** %field.137, align 8, !dbg !2113
  %cast.498 = bitcast %IPST.3* %tmp.9 to { i8*, i8* }*, !dbg !2113
  %field0.28 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.498, i32 0, i32 0, !dbg !2113
  %ld.52 = load i8*, i8** %field0.28, align 8, !dbg !2113
  %field1.28 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.498, i32 0, i32 1, !dbg !2113
  %ld.53 = load i8*, i8** %field1.28, align 8, !dbg !2113
  call void @encoding_1json.Marshal({ %IPST.0, %error.0 }* sret({ %IPST.0, %error.0 }) "go_sret" %sret.actual.41, i8* nest undef, i8* %ld.52, i8* %ld.53), !dbg !2113
  %cast.499 = bitcast { %IPST.0, %error.0 }* %tmpv.94 to i8*, !dbg !2113
  %cast.500 = bitcast { %IPST.0, %error.0 }* %sret.actual.41 to i8*, !dbg !2113
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.499, i8* align 8 %cast.500, i64 40, i1 false), !dbg !2113
  %field.138 = getelementptr inbounds { %IPST.0, %error.0 }, { %IPST.0, %error.0 }* %tmpv.94, i32 0, i32 0, !dbg !2113
  %cast.501 = bitcast %IPST.0* %tmpv.95 to i8*
  %cast.502 = bitcast %IPST.0* %field.138 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.501, i8* align 8 %cast.502, i64 24, i1 false)
  %cast.503 = bitcast %IPST.0* %marbleJSONasBytes to i8*
  %cast.504 = bitcast %IPST.0* %tmpv.95 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.503, i8* align 8 %cast.504, i64 24, i1 false)
  call void @llvm.dbg.declare(metadata %IPST.0* %marbleJSONasBytes, metadata !2114, metadata !DIExpression()), !dbg !2115
  %field.139 = getelementptr inbounds { %IPST.0, %error.0 }, { %IPST.0, %error.0 }* %tmpv.94, i32 0, i32 1, !dbg !2113
  %cast.505 = bitcast %error.0* %tmpv.96 to i8*
  %cast.506 = bitcast %error.0* %field.139 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.505, i8* align 8 %cast.506, i64 16, i1 false)
  %cast.507 = bitcast %error.0* %err to i8*, !dbg !2116
  %cast.508 = bitcast %error.0* %tmpv.96 to i8*, !dbg !2116
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.507, i8* align 8 %cast.508, i64 16, i1 false), !dbg !2116
  %field.143 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2117
  %err.field.ld.9 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.143, align 8, !dbg !2117
  %icmp.61 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.9, null, !dbg !2117
  %zext.61 = zext i1 %icmp.61 to i8, !dbg !2117
  %trunc.43 = trunc i8 %zext.61 to i1, !dbg !2118
  br i1 %trunc.43, label %then.43, label %else.43

else.42:                                          ; preds = %fallthrough.39
  %tmpv.92.ld.1 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.92, align 8, !dbg !2088
  %cast.492 = bitcast %.command-line-arguments.marble.0* %tmpv.92.ld.1 to i8*, !dbg !2088
  %cast.493 = bitcast %.command-line-arguments.marble.0* %tmpv.93 to i8*, !dbg !2088
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @command_x2dline_x2darguments.marble..d, i32 0, i32 0), i8* %cast.492, i8* %cast.493), !dbg !2088
  br label %fallthrough.42

then.43:                                          ; preds = %fallthrough.42
  %field.140 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2119
  %err.field.ld.7 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.140, align 8, !dbg !2119
  %field.141 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.7, i32 0, i32 1, !dbg !2119
  %.field.ld.8 = load { i8*, i64 } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)** %field.141, align 8, !dbg !2119
  %field.142 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !2119
  %err.field.ld.8 = load i8*, i8** %field.142, align 8, !dbg !2119
  %call.25 = call { i8*, i64 } %.field.ld.8(i8* nest undef, i8* %err.field.ld.8), !dbg !2119
  store { i8*, i64 } %call.25, { i8*, i64 }* %sret.actual.42, align 8, !dbg !2119
  %cast.510 = bitcast { i8*, i64 }* %tmpv.97 to i8*
  %cast.511 = bitcast { i8*, i64 }* %sret.actual.42 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.510, i8* align 8 %cast.511, i64 16, i1 false)
  %field0.29 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.97, i32 0, i32 0, !dbg !2120
  %ld.54 = load i8*, i8** %field0.29, align 8, !dbg !2120
  %field1.29 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.97, i32 0, i32 1, !dbg !2120
  %ld.55 = load i64, i64* %field1.29, align 8, !dbg !2120
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.43, i8* nest undef, i8* %ld.54, i64 %ld.55), !dbg !2120
  %cast.513 = bitcast %Response.0* %tmpv.98 to i8*
  %cast.514 = bitcast %Response.0* %sret.actual.43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.513, i8* align 8 %cast.514, i64 80, i1 false)
  %cast.515 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2121
  %cast.516 = bitcast %Response.0* %tmpv.98 to i8*, !dbg !2121
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.515, i8* align 8 %cast.516, i64 80, i1 false), !dbg !2121
  %cast.517 = bitcast %Response.0* %sret.formal.2 to i8*, !dbg !2121
  %cast.518 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2121
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.517, i8* align 8 %cast.518, i64 80, i1 false), !dbg !2121
  %169 = bitcast %error.0* %err to i8*, !dbg !2121
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %169), !dbg !2121
  %170 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2121
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %170), !dbg !2121
  %171 = bitcast %IPST.0* %marbleJsonBytes to i8*, !dbg !2121
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %171), !dbg !2121
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2121
  %172 = bitcast %.command-line-arguments.marbleTransientInput.0** %marbleInput to i8*, !dbg !2121
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %172), !dbg !2121
  %173 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2121
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %173), !dbg !2121
  %174 = bitcast %.command-line-arguments.marble.0** %marble to i8*, !dbg !2121
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %174), !dbg !2121
  %175 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2121
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %175), !dbg !2121
  %176 = bitcast %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails to i8*, !dbg !2121
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %176), !dbg !2121
  %177 = bitcast %IPST.0* %marblePrivateDetailsBytes to i8*, !dbg !2121
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %177), !dbg !2121
  %178 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !2121
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %178), !dbg !2121
  %179 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !2121
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %179), !dbg !2121
  %180 = bitcast %IPST.0* %value to i8*, !dbg !2121
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %180), !dbg !2121
  %181 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2121
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %181), !dbg !2121
  ret void, !dbg !2121

fallthrough.43:                                   ; preds = %else.43
  %field.144 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 0, !dbg !2122
  %stub.field.ld.6 = load { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }** %field.144, align 8, !dbg !2122
  %field.145 = getelementptr inbounds { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }* %stub.field.ld.6, i32 0, i32 33, !dbg !2122
  %.field.ld.9 = load { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)** %field.145, align 8, !dbg !2122
  %field.146 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 1, !dbg !2122
  %stub.field.ld.7 = load i8*, i8** %field.146, align 8, !dbg !2122
  %marbleInput.ld.13 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %marbleInput, align 8, !dbg !2123
  %field.147 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %marbleInput.ld.13, i32 0, i32 0, !dbg !2124
  %ld.56 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.101, i32 0, i32 0), align 8, !dbg !2122
  %ld.57 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.101, i32 0, i32 1), align 8, !dbg !2122
  %field0.31 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %field.147, i32 0, i32 0, !dbg !2122
  %ld.58 = load i8*, i8** %field0.31, align 8, !dbg !2122
  %field1.31 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %field.147, i32 0, i32 1, !dbg !2122
  %ld.59 = load i64, i64* %field1.31, align 8, !dbg !2122
  %call.26 = call { i8*, i8* } %.field.ld.9(i8* nest undef, i8* %stub.field.ld.7, i8* %ld.56, i64 %ld.57, i8* %ld.58, i64 %ld.59, %IPST.0* byval(%IPST.0) %marbleJSONasBytes), !dbg !2122
  %cast.522 = bitcast %error.0* %sret.actual.44 to { i8*, i8* }*, !dbg !2122
  store { i8*, i8* } %call.26, { i8*, i8* }* %cast.522, align 8, !dbg !2122
  %cast.523 = bitcast %error.0* %tmpv.99 to i8*
  %cast.524 = bitcast %error.0* %sret.actual.44 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.523, i8* align 8 %cast.524, i64 16, i1 false)
  %cast.525 = bitcast %error.0* %err to i8*, !dbg !2125
  %cast.526 = bitcast %error.0* %tmpv.99 to i8*, !dbg !2125
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.525, i8* align 8 %cast.526, i64 16, i1 false), !dbg !2125
  %field.151 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2126
  %err.field.ld.12 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.151, align 8, !dbg !2126
  %icmp.62 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.12, null, !dbg !2126
  %zext.62 = zext i1 %icmp.62 to i8, !dbg !2126
  %trunc.44 = trunc i8 %zext.62 to i1, !dbg !2127
  br i1 %trunc.44, label %then.44, label %else.44

else.43:                                          ; preds = %fallthrough.42
  br label %fallthrough.43

then.44:                                          ; preds = %fallthrough.43
  %field.148 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2128
  %err.field.ld.10 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.148, align 8, !dbg !2128
  %field.149 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.10, i32 0, i32 1, !dbg !2128
  %.field.ld.10 = load { i8*, i64 } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)** %field.149, align 8, !dbg !2128
  %field.150 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !2128
  %err.field.ld.11 = load i8*, i8** %field.150, align 8, !dbg !2128
  %call.27 = call { i8*, i64 } %.field.ld.10(i8* nest undef, i8* %err.field.ld.11), !dbg !2128
  store { i8*, i64 } %call.27, { i8*, i64 }* %sret.actual.45, align 8, !dbg !2128
  %cast.528 = bitcast { i8*, i64 }* %tmpv.100 to i8*
  %cast.529 = bitcast { i8*, i64 }* %sret.actual.45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.528, i8* align 8 %cast.529, i64 16, i1 false)
  %field0.32 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.100, i32 0, i32 0, !dbg !2129
  %ld.60 = load i8*, i8** %field0.32, align 8, !dbg !2129
  %field1.32 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.100, i32 0, i32 1, !dbg !2129
  %ld.61 = load i64, i64* %field1.32, align 8, !dbg !2129
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.46, i8* nest undef, i8* %ld.60, i64 %ld.61), !dbg !2129
  %cast.531 = bitcast %Response.0* %tmpv.101 to i8*
  %cast.532 = bitcast %Response.0* %sret.actual.46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.531, i8* align 8 %cast.532, i64 80, i1 false)
  %cast.533 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2130
  %cast.534 = bitcast %Response.0* %tmpv.101 to i8*, !dbg !2130
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.533, i8* align 8 %cast.534, i64 80, i1 false), !dbg !2130
  %cast.535 = bitcast %Response.0* %sret.formal.2 to i8*, !dbg !2130
  %cast.536 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2130
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.535, i8* align 8 %cast.536, i64 80, i1 false), !dbg !2130
  %182 = bitcast %error.0* %err to i8*, !dbg !2130
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %182), !dbg !2130
  %183 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2130
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %183), !dbg !2130
  %184 = bitcast %IPST.0* %marbleJsonBytes to i8*, !dbg !2130
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %184), !dbg !2130
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2130
  %185 = bitcast %.command-line-arguments.marbleTransientInput.0** %marbleInput to i8*, !dbg !2130
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %185), !dbg !2130
  %186 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2130
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %186), !dbg !2130
  %187 = bitcast %.command-line-arguments.marble.0** %marble to i8*, !dbg !2130
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %187), !dbg !2130
  %188 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2130
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %188), !dbg !2130
  %189 = bitcast %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails to i8*, !dbg !2130
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %189), !dbg !2130
  %190 = bitcast %IPST.0* %marblePrivateDetailsBytes to i8*, !dbg !2130
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %190), !dbg !2130
  %191 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !2130
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %191), !dbg !2130
  %192 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !2130
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %192), !dbg !2130
  %193 = bitcast %IPST.0* %value to i8*, !dbg !2130
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %193), !dbg !2130
  %194 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2130
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %194), !dbg !2130
  ret void, !dbg !2130

fallthrough.44:                                   ; preds = %else.44
  %call.28 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @command_x2dline_x2darguments.marblePrivateDetails..d, i32 0, i32 0)), !dbg !2131
  %cast.539 = bitcast i8* %call.28 to %.command-line-arguments.marblePrivateDetails.0*, !dbg !2131
  store %.command-line-arguments.marblePrivateDetails.0* %cast.539, %.command-line-arguments.marblePrivateDetails.0** %tmpv.102, align 8
  %marbleInput.ld.14 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %marbleInput, align 8, !dbg !2132
  %field.152 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %marbleInput.ld.14, i32 0, i32 0, !dbg !2133
  %marbleInput.ld.15 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %marbleInput, align 8, !dbg !2134
  %field.153 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %marbleInput.ld.15, i32 0, i32 4, !dbg !2135
  %.field.ld.11 = load i64, i64* %field.153, align 8, !dbg !2135
  %field.154 = getelementptr inbounds %.command-line-arguments.marblePrivateDetails.0, %.command-line-arguments.marblePrivateDetails.0* %tmpv.103, i32 0, i32 0, !dbg !2136
  %cast.540 = bitcast { i8*, i64 }* %field.154 to i8*, !dbg !2136
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.540, i8* align 8 bitcast ({ i8*, i64 }* @const.106 to i8*), i64 16, i1 false), !dbg !2136
  %field.155 = getelementptr inbounds %.command-line-arguments.marblePrivateDetails.0, %.command-line-arguments.marblePrivateDetails.0* %tmpv.103, i32 0, i32 1, !dbg !2136
  %cast.541 = bitcast { i8*, i64 }* %field.155 to i8*, !dbg !2136
  %cast.542 = bitcast { i8*, i64 }* %field.152 to i8*, !dbg !2136
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.541, i8* align 8 %cast.542, i64 16, i1 false), !dbg !2136
  %field.156 = getelementptr inbounds %.command-line-arguments.marblePrivateDetails.0, %.command-line-arguments.marblePrivateDetails.0* %tmpv.103, i32 0, i32 2, !dbg !2136
  store i64 %.field.ld.11, i64* %field.156, align 8, !dbg !2136
  %deref.ld.4 = load i32, i32* bitcast ({ i8, [3 x i8], i8, i8, i64 }* @runtime.writeBarrier to i32*), align 4, !dbg !2131
  %icmp.63 = icmp eq i32 %deref.ld.4, 0, !dbg !2131
  %zext.63 = zext i1 %icmp.63 to i8, !dbg !2131
  %trunc.45 = trunc i8 %zext.63 to i1, !dbg !2131
  br i1 %trunc.45, label %then.45, label %else.45

else.44:                                          ; preds = %fallthrough.43
  br label %fallthrough.44

then.45:                                          ; preds = %fallthrough.44
  %tmpv.102.ld.0 = load %.command-line-arguments.marblePrivateDetails.0*, %.command-line-arguments.marblePrivateDetails.0** %tmpv.102, align 8, !dbg !2131
  %cast.543 = bitcast %.command-line-arguments.marblePrivateDetails.0* %tmpv.102.ld.0 to i8*, !dbg !2131
  %cast.544 = bitcast %.command-line-arguments.marblePrivateDetails.0* %tmpv.103 to i8*, !dbg !2131
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.543, i8* align 8 %cast.544, i64 40, i1 false), !dbg !2131
  br label %fallthrough.45

fallthrough.45:                                   ; preds = %else.45, %then.45
  %tmpv.102.ld.2 = load %.command-line-arguments.marblePrivateDetails.0*, %.command-line-arguments.marblePrivateDetails.0** %tmpv.102, align 8, !dbg !2131
  store %.command-line-arguments.marblePrivateDetails.0* %tmpv.102.ld.2, %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails, align 8
  call void @llvm.dbg.declare(metadata %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails, metadata !2137, metadata !DIExpression()), !dbg !2144
  %marblePrivateDetails.ld.0 = load %.command-line-arguments.marblePrivateDetails.0*, %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails, align 8, !dbg !2145
  %field.157 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.10, i32 0, i32 0, !dbg !2146
  store %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @command_x2dline_x2darguments.marblePrivateDetails..p, i32 0, i32 0), %_type.0** %field.157, align 8, !dbg !2146
  %field.158 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.10, i32 0, i32 1, !dbg !2146
  %cast.551 = bitcast %.command-line-arguments.marblePrivateDetails.0* %marblePrivateDetails.ld.0 to i8*, !dbg !2146
  store i8* %cast.551, i8** %field.158, align 8, !dbg !2146
  %cast.552 = bitcast %IPST.3* %tmp.10 to { i8*, i8* }*, !dbg !2146
  %field0.33 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.552, i32 0, i32 0, !dbg !2146
  %ld.62 = load i8*, i8** %field0.33, align 8, !dbg !2146
  %field1.33 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.552, i32 0, i32 1, !dbg !2146
  %ld.63 = load i8*, i8** %field1.33, align 8, !dbg !2146
  call void @encoding_1json.Marshal({ %IPST.0, %error.0 }* sret({ %IPST.0, %error.0 }) "go_sret" %sret.actual.47, i8* nest undef, i8* %ld.62, i8* %ld.63), !dbg !2146
  %cast.553 = bitcast { %IPST.0, %error.0 }* %tmpv.104 to i8*, !dbg !2146
  %cast.554 = bitcast { %IPST.0, %error.0 }* %sret.actual.47 to i8*, !dbg !2146
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.553, i8* align 8 %cast.554, i64 40, i1 false), !dbg !2146
  %field.159 = getelementptr inbounds { %IPST.0, %error.0 }, { %IPST.0, %error.0 }* %tmpv.104, i32 0, i32 0, !dbg !2146
  %cast.555 = bitcast %IPST.0* %tmpv.105 to i8*
  %cast.556 = bitcast %IPST.0* %field.159 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.555, i8* align 8 %cast.556, i64 24, i1 false)
  %cast.557 = bitcast %IPST.0* %marblePrivateDetailsBytes to i8*
  %cast.558 = bitcast %IPST.0* %tmpv.105 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.557, i8* align 8 %cast.558, i64 24, i1 false)
  call void @llvm.dbg.declare(metadata %IPST.0* %marblePrivateDetailsBytes, metadata !2147, metadata !DIExpression()), !dbg !2148
  %field.160 = getelementptr inbounds { %IPST.0, %error.0 }, { %IPST.0, %error.0 }* %tmpv.104, i32 0, i32 1, !dbg !2146
  %cast.559 = bitcast %error.0* %tmpv.106 to i8*
  %cast.560 = bitcast %error.0* %field.160 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.559, i8* align 8 %cast.560, i64 16, i1 false)
  %cast.561 = bitcast %error.0* %err to i8*, !dbg !2149
  %cast.562 = bitcast %error.0* %tmpv.106 to i8*, !dbg !2149
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.561, i8* align 8 %cast.562, i64 16, i1 false), !dbg !2149
  %field.164 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2150
  %err.field.ld.15 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.164, align 8, !dbg !2150
  %icmp.64 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.15, null, !dbg !2150
  %zext.64 = zext i1 %icmp.64 to i8, !dbg !2150
  %trunc.46 = trunc i8 %zext.64 to i1, !dbg !2151
  br i1 %trunc.46, label %then.46, label %else.46

else.45:                                          ; preds = %fallthrough.44
  %tmpv.102.ld.1 = load %.command-line-arguments.marblePrivateDetails.0*, %.command-line-arguments.marblePrivateDetails.0** %tmpv.102, align 8, !dbg !2131
  %cast.546 = bitcast %.command-line-arguments.marblePrivateDetails.0* %tmpv.102.ld.1 to i8*, !dbg !2131
  %cast.547 = bitcast %.command-line-arguments.marblePrivateDetails.0* %tmpv.103 to i8*, !dbg !2131
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @command_x2dline_x2darguments.marblePrivateDetails..d, i32 0, i32 0), i8* %cast.546, i8* %cast.547), !dbg !2131
  br label %fallthrough.45

then.46:                                          ; preds = %fallthrough.45
  %field.161 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2152
  %err.field.ld.13 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.161, align 8, !dbg !2152
  %field.162 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.13, i32 0, i32 1, !dbg !2152
  %.field.ld.12 = load { i8*, i64 } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)** %field.162, align 8, !dbg !2152
  %field.163 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !2152
  %err.field.ld.14 = load i8*, i8** %field.163, align 8, !dbg !2152
  %call.29 = call { i8*, i64 } %.field.ld.12(i8* nest undef, i8* %err.field.ld.14), !dbg !2152
  store { i8*, i64 } %call.29, { i8*, i64 }* %sret.actual.48, align 8, !dbg !2152
  %cast.564 = bitcast { i8*, i64 }* %tmpv.107 to i8*
  %cast.565 = bitcast { i8*, i64 }* %sret.actual.48 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.564, i8* align 8 %cast.565, i64 16, i1 false)
  %field0.34 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.107, i32 0, i32 0, !dbg !2153
  %ld.64 = load i8*, i8** %field0.34, align 8, !dbg !2153
  %field1.34 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.107, i32 0, i32 1, !dbg !2153
  %ld.65 = load i64, i64* %field1.34, align 8, !dbg !2153
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.49, i8* nest undef, i8* %ld.64, i64 %ld.65), !dbg !2153
  %cast.567 = bitcast %Response.0* %tmpv.108 to i8*
  %cast.568 = bitcast %Response.0* %sret.actual.49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.567, i8* align 8 %cast.568, i64 80, i1 false)
  %cast.569 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2154
  %cast.570 = bitcast %Response.0* %tmpv.108 to i8*, !dbg !2154
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.569, i8* align 8 %cast.570, i64 80, i1 false), !dbg !2154
  %cast.571 = bitcast %Response.0* %sret.formal.2 to i8*, !dbg !2154
  %cast.572 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2154
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.571, i8* align 8 %cast.572, i64 80, i1 false), !dbg !2154
  %195 = bitcast %error.0* %err to i8*, !dbg !2154
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %195), !dbg !2154
  %196 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2154
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %196), !dbg !2154
  %197 = bitcast %IPST.0* %marbleJsonBytes to i8*, !dbg !2154
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %197), !dbg !2154
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2154
  %198 = bitcast %.command-line-arguments.marbleTransientInput.0** %marbleInput to i8*, !dbg !2154
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %198), !dbg !2154
  %199 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2154
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %199), !dbg !2154
  %200 = bitcast %.command-line-arguments.marble.0** %marble to i8*, !dbg !2154
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %200), !dbg !2154
  %201 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2154
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %201), !dbg !2154
  %202 = bitcast %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails to i8*, !dbg !2154
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %202), !dbg !2154
  %203 = bitcast %IPST.0* %marblePrivateDetailsBytes to i8*, !dbg !2154
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %203), !dbg !2154
  %204 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !2154
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %204), !dbg !2154
  %205 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !2154
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %205), !dbg !2154
  %206 = bitcast %IPST.0* %value to i8*, !dbg !2154
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %206), !dbg !2154
  %207 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2154
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %207), !dbg !2154
  ret void, !dbg !2154

fallthrough.46:                                   ; preds = %else.46
  %field.165 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 0, !dbg !2155
  %stub.field.ld.8 = load { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }** %field.165, align 8, !dbg !2155
  %field.166 = getelementptr inbounds { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }* %stub.field.ld.8, i32 0, i32 33, !dbg !2155
  %.field.ld.13 = load { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)** %field.166, align 8, !dbg !2155
  %field.167 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 1, !dbg !2155
  %stub.field.ld.9 = load i8*, i8** %field.167, align 8, !dbg !2155
  %marbleInput.ld.16 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %marbleInput, align 8, !dbg !2156
  %field.168 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %marbleInput.ld.16, i32 0, i32 0, !dbg !2157
  %ld.66 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.108, i32 0, i32 0), align 8, !dbg !2155
  %ld.67 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.108, i32 0, i32 1), align 8, !dbg !2155
  %field0.36 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %field.168, i32 0, i32 0, !dbg !2155
  %ld.68 = load i8*, i8** %field0.36, align 8, !dbg !2155
  %field1.36 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %field.168, i32 0, i32 1, !dbg !2155
  %ld.69 = load i64, i64* %field1.36, align 8, !dbg !2155
  %call.30 = call { i8*, i8* } %.field.ld.13(i8* nest undef, i8* %stub.field.ld.9, i8* %ld.66, i64 %ld.67, i8* %ld.68, i64 %ld.69, %IPST.0* byval(%IPST.0) %marblePrivateDetailsBytes), !dbg !2155
  %cast.576 = bitcast %error.0* %sret.actual.50 to { i8*, i8* }*, !dbg !2155
  store { i8*, i8* } %call.30, { i8*, i8* }* %cast.576, align 8, !dbg !2155
  %cast.577 = bitcast %error.0* %tmpv.109 to i8*
  %cast.578 = bitcast %error.0* %sret.actual.50 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.577, i8* align 8 %cast.578, i64 16, i1 false)
  %cast.579 = bitcast %error.0* %err to i8*, !dbg !2158
  %cast.580 = bitcast %error.0* %tmpv.109 to i8*, !dbg !2158
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.579, i8* align 8 %cast.580, i64 16, i1 false), !dbg !2158
  %field.172 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2159
  %err.field.ld.18 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.172, align 8, !dbg !2159
  %icmp.65 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.18, null, !dbg !2159
  %zext.65 = zext i1 %icmp.65 to i8, !dbg !2159
  %trunc.47 = trunc i8 %zext.65 to i1, !dbg !2160
  br i1 %trunc.47, label %then.47, label %else.47

else.46:                                          ; preds = %fallthrough.45
  br label %fallthrough.46

then.47:                                          ; preds = %fallthrough.46
  %field.169 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2161
  %err.field.ld.16 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.169, align 8, !dbg !2161
  %field.170 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.16, i32 0, i32 1, !dbg !2161
  %.field.ld.14 = load { i8*, i64 } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)** %field.170, align 8, !dbg !2161
  %field.171 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !2161
  %err.field.ld.17 = load i8*, i8** %field.171, align 8, !dbg !2161
  %call.31 = call { i8*, i64 } %.field.ld.14(i8* nest undef, i8* %err.field.ld.17), !dbg !2161
  store { i8*, i64 } %call.31, { i8*, i64 }* %sret.actual.51, align 8, !dbg !2161
  %cast.582 = bitcast { i8*, i64 }* %tmpv.110 to i8*
  %cast.583 = bitcast { i8*, i64 }* %sret.actual.51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.582, i8* align 8 %cast.583, i64 16, i1 false)
  %field0.37 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.110, i32 0, i32 0, !dbg !2162
  %ld.70 = load i8*, i8** %field0.37, align 8, !dbg !2162
  %field1.37 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.110, i32 0, i32 1, !dbg !2162
  %ld.71 = load i64, i64* %field1.37, align 8, !dbg !2162
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.52, i8* nest undef, i8* %ld.70, i64 %ld.71), !dbg !2162
  %cast.585 = bitcast %Response.0* %tmpv.111 to i8*
  %cast.586 = bitcast %Response.0* %sret.actual.52 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.585, i8* align 8 %cast.586, i64 80, i1 false)
  %cast.587 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2163
  %cast.588 = bitcast %Response.0* %tmpv.111 to i8*, !dbg !2163
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.587, i8* align 8 %cast.588, i64 80, i1 false), !dbg !2163
  %cast.589 = bitcast %Response.0* %sret.formal.2 to i8*, !dbg !2163
  %cast.590 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2163
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.589, i8* align 8 %cast.590, i64 80, i1 false), !dbg !2163
  %208 = bitcast %error.0* %err to i8*, !dbg !2163
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %208), !dbg !2163
  %209 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2163
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %209), !dbg !2163
  %210 = bitcast %IPST.0* %marbleJsonBytes to i8*, !dbg !2163
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %210), !dbg !2163
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2163
  %211 = bitcast %.command-line-arguments.marbleTransientInput.0** %marbleInput to i8*, !dbg !2163
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %211), !dbg !2163
  %212 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2163
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %212), !dbg !2163
  %213 = bitcast %.command-line-arguments.marble.0** %marble to i8*, !dbg !2163
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %213), !dbg !2163
  %214 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2163
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %214), !dbg !2163
  %215 = bitcast %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails to i8*, !dbg !2163
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %215), !dbg !2163
  %216 = bitcast %IPST.0* %marblePrivateDetailsBytes to i8*, !dbg !2163
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %216), !dbg !2163
  %217 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !2163
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %217), !dbg !2163
  %218 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !2163
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %218), !dbg !2163
  %219 = bitcast %IPST.0* %value to i8*, !dbg !2163
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %219), !dbg !2163
  %220 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2163
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %220), !dbg !2163
  ret void, !dbg !2163

fallthrough.47:                                   ; preds = %else.47
  %cast.592 = bitcast { i8*, i64 }* %indexName to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.592, i8* align 8 bitcast ({ i8*, i64 }* @const.110 to i8*), i64 16, i1 false)
  call void @llvm.dbg.declare(metadata { i8*, i64 }* %indexName, metadata !2164, metadata !DIExpression()), !dbg !2165
  %field.175 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 0, !dbg !2166
  %stub.field.ld.10 = load { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }** %field.175, align 8, !dbg !2166
  %field.176 = getelementptr inbounds { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }* %stub.field.ld.10, i32 0, i32 1, !dbg !2166
  %.field.ld.15 = load void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)** %field.176, align 8, !dbg !2166
  %field.177 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 1, !dbg !2166
  %stub.field.ld.11 = load i8*, i8** %field.177, align 8, !dbg !2166
  %call.32 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.0, %ArrayType.0* @type.._62x_7string, i32 0, i32 0)), !dbg !2167
  %cast.596 = bitcast i8* %call.32 to [2 x { i8*, i64 }]*, !dbg !2167
  store [2 x { i8*, i64 }]* %cast.596, [2 x { i8*, i64 }]** %tmpv.113, align 8
  %marble.ld.1 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %marble, align 8, !dbg !2168
  %icmp.66 = icmp eq %.command-line-arguments.marble.0* %marble.ld.1, null, !dbg !2169
  %zext.66 = zext i1 %icmp.66 to i8, !dbg !2169
  %trunc.48 = trunc i8 %zext.66 to i1, !dbg !2169
  br i1 %trunc.48, label %then.48, label %else.48, !make.implicit !46

else.47:                                          ; preds = %fallthrough.46
  br label %fallthrough.47

then.48:                                          ; preds = %fallthrough.47
  call void @runtime.panicmem(i8* nest undef), !dbg !2169
  unreachable

fallthrough.48:                                   ; preds = %else.48
  %tmpv.115.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.115, align 8, !dbg !2169
  %field.173 = getelementptr inbounds %.command-line-arguments.marble.0, %.command-line-arguments.marble.0* %tmpv.115.ld.0, i32 0, i32 2, !dbg !2169
  %marble.ld.2 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %marble, align 8, !dbg !2170
  %icmp.67 = icmp eq %.command-line-arguments.marble.0* %marble.ld.2, null, !dbg !2171
  %zext.67 = zext i1 %icmp.67 to i8, !dbg !2171
  %trunc.49 = trunc i8 %zext.67 to i1, !dbg !2171
  br i1 %trunc.49, label %then.49, label %else.49, !make.implicit !46

else.48:                                          ; preds = %fallthrough.47
  %.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %marble, align 8, !dbg !2168
  store %.command-line-arguments.marble.0* %.ld.0, %.command-line-arguments.marble.0** %tmpv.115, align 8
  br label %fallthrough.48

then.49:                                          ; preds = %fallthrough.48
  call void @runtime.panicmem(i8* nest undef), !dbg !2171
  unreachable

fallthrough.49:                                   ; preds = %else.49
  %tmpv.116.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.116, align 8, !dbg !2171
  %field.174 = getelementptr inbounds %.command-line-arguments.marble.0, %.command-line-arguments.marble.0* %tmpv.116.ld.0, i32 0, i32 1, !dbg !2171
  %index.17 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.114, i32 0, i32 0, !dbg !2167
  %cast.599 = bitcast { i8*, i64 }* %index.17 to i8*, !dbg !2167
  %cast.600 = bitcast { i8*, i64 }* %field.173 to i8*, !dbg !2167
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.599, i8* align 8 %cast.600, i64 16, i1 false), !dbg !2167
  %index.18 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.114, i32 0, i32 1, !dbg !2167
  %cast.601 = bitcast { i8*, i64 }* %index.18 to i8*, !dbg !2167
  %cast.602 = bitcast { i8*, i64 }* %field.174 to i8*, !dbg !2167
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.601, i8* align 8 %cast.602, i64 16, i1 false), !dbg !2167
  %deref.ld.5 = load i32, i32* bitcast ({ i8, [3 x i8], i8, i8, i64 }* @runtime.writeBarrier to i32*), align 4, !dbg !2167
  %icmp.68 = icmp eq i32 %deref.ld.5, 0, !dbg !2167
  %zext.68 = zext i1 %icmp.68 to i8, !dbg !2167
  %trunc.50 = trunc i8 %zext.68 to i1, !dbg !2167
  br i1 %trunc.50, label %then.50, label %else.50

else.49:                                          ; preds = %fallthrough.48
  %.ld.1 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %marble, align 8, !dbg !2170
  store %.command-line-arguments.marble.0* %.ld.1, %.command-line-arguments.marble.0** %tmpv.116, align 8
  br label %fallthrough.49

then.50:                                          ; preds = %fallthrough.49
  %tmpv.113.ld.0 = load [2 x { i8*, i64 }]*, [2 x { i8*, i64 }]** %tmpv.113, align 8, !dbg !2167
  %cast.603 = bitcast [2 x { i8*, i64 }]* %tmpv.113.ld.0 to i8*, !dbg !2167
  %cast.604 = bitcast [2 x { i8*, i64 }]* %tmpv.114 to i8*, !dbg !2167
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.603, i8* align 8 %cast.604, i64 32, i1 false), !dbg !2167
  br label %fallthrough.50

fallthrough.50:                                   ; preds = %else.50, %then.50
  %tmpv.113.ld.2 = load [2 x { i8*, i64 }]*, [2 x { i8*, i64 }]** %tmpv.113, align 8, !dbg !2167
  %cast.610 = bitcast [2 x { i8*, i64 }]* %tmpv.113.ld.2 to { i8*, i64 }*, !dbg !2167
  %field.178 = getelementptr inbounds %IPST.7, %IPST.7* %tmp.11, i32 0, i32 0, !dbg !2167
  store { i8*, i64 }* %cast.610, { i8*, i64 }** %field.178, align 8, !dbg !2167
  %field.179 = getelementptr inbounds %IPST.7, %IPST.7* %tmp.11, i32 0, i32 1, !dbg !2167
  store i64 2, i64* %field.179, align 8, !dbg !2167
  %field.180 = getelementptr inbounds %IPST.7, %IPST.7* %tmp.11, i32 0, i32 2, !dbg !2167
  store i64 2, i64* %field.180, align 8, !dbg !2167
  %field0.38 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %indexName, i32 0, i32 0, !dbg !2166
  %ld.72 = load i8*, i8** %field0.38, align 8, !dbg !2166
  %field1.38 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %indexName, i32 0, i32 1, !dbg !2166
  %ld.73 = load i64, i64* %field1.38, align 8, !dbg !2166
  call void %.field.ld.15({ { i8*, i64 }, %error.0 }* sret({ { i8*, i64 }, %error.0 }) "go_sret" %sret.actual.53, i8* nest undef, i8* %stub.field.ld.11, i8* %ld.72, i64 %ld.73, %IPST.7* byval(%IPST.7) %tmp.11), !dbg !2166
  %cast.612 = bitcast { { i8*, i64 }, %error.0 }* %tmpv.112 to i8*, !dbg !2166
  %cast.613 = bitcast { { i8*, i64 }, %error.0 }* %sret.actual.53 to i8*, !dbg !2166
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.612, i8* align 8 %cast.613, i64 32, i1 false), !dbg !2166
  %field.181 = getelementptr inbounds { { i8*, i64 }, %error.0 }, { { i8*, i64 }, %error.0 }* %tmpv.112, i32 0, i32 0, !dbg !2166
  %cast.614 = bitcast { i8*, i64 }* %tmpv.117 to i8*
  %cast.615 = bitcast { i8*, i64 }* %field.181 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.614, i8* align 8 %cast.615, i64 16, i1 false)
  %cast.616 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*
  %cast.617 = bitcast { i8*, i64 }* %tmpv.117 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.616, i8* align 8 %cast.617, i64 16, i1 false)
  call void @llvm.dbg.declare(metadata { i8*, i64 }* %colorNameIndexKey, metadata !2172, metadata !DIExpression()), !dbg !2173
  %field.182 = getelementptr inbounds { { i8*, i64 }, %error.0 }, { { i8*, i64 }, %error.0 }* %tmpv.112, i32 0, i32 1, !dbg !2166
  %cast.618 = bitcast %error.0* %tmpv.118 to i8*
  %cast.619 = bitcast %error.0* %field.182 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.618, i8* align 8 %cast.619, i64 16, i1 false)
  %cast.620 = bitcast %error.0* %err to i8*, !dbg !2174
  %cast.621 = bitcast %error.0* %tmpv.118 to i8*, !dbg !2174
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.620, i8* align 8 %cast.621, i64 16, i1 false), !dbg !2174
  %field.186 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2175
  %err.field.ld.21 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.186, align 8, !dbg !2175
  %icmp.69 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.21, null, !dbg !2175
  %zext.69 = zext i1 %icmp.69 to i8, !dbg !2175
  %trunc.51 = trunc i8 %zext.69 to i1, !dbg !2176
  br i1 %trunc.51, label %then.51, label %else.51

else.50:                                          ; preds = %fallthrough.49
  %tmpv.113.ld.1 = load [2 x { i8*, i64 }]*, [2 x { i8*, i64 }]** %tmpv.113, align 8, !dbg !2167
  %cast.606 = bitcast [2 x { i8*, i64 }]* %tmpv.113.ld.1 to i8*, !dbg !2167
  %cast.607 = bitcast [2 x { i8*, i64 }]* %tmpv.114 to i8*, !dbg !2167
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.0, %ArrayType.0* @type.._62x_7string, i32 0, i32 0), i8* %cast.606, i8* %cast.607), !dbg !2167
  br label %fallthrough.50

then.51:                                          ; preds = %fallthrough.50
  %field.183 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2177
  %err.field.ld.19 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.183, align 8, !dbg !2177
  %field.184 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.19, i32 0, i32 1, !dbg !2177
  %.field.ld.16 = load { i8*, i64 } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)** %field.184, align 8, !dbg !2177
  %field.185 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !2177
  %err.field.ld.20 = load i8*, i8** %field.185, align 8, !dbg !2177
  %call.33 = call { i8*, i64 } %.field.ld.16(i8* nest undef, i8* %err.field.ld.20), !dbg !2177
  store { i8*, i64 } %call.33, { i8*, i64 }* %sret.actual.54, align 8, !dbg !2177
  %cast.623 = bitcast { i8*, i64 }* %tmpv.119 to i8*
  %cast.624 = bitcast { i8*, i64 }* %sret.actual.54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.623, i8* align 8 %cast.624, i64 16, i1 false)
  %field0.39 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.119, i32 0, i32 0, !dbg !2178
  %ld.74 = load i8*, i8** %field0.39, align 8, !dbg !2178
  %field1.39 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.119, i32 0, i32 1, !dbg !2178
  %ld.75 = load i64, i64* %field1.39, align 8, !dbg !2178
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.55, i8* nest undef, i8* %ld.74, i64 %ld.75), !dbg !2178
  %cast.626 = bitcast %Response.0* %tmpv.120 to i8*
  %cast.627 = bitcast %Response.0* %sret.actual.55 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.626, i8* align 8 %cast.627, i64 80, i1 false)
  %cast.628 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2179
  %cast.629 = bitcast %Response.0* %tmpv.120 to i8*, !dbg !2179
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.628, i8* align 8 %cast.629, i64 80, i1 false), !dbg !2179
  %cast.630 = bitcast %Response.0* %sret.formal.2 to i8*, !dbg !2179
  %cast.631 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2179
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.630, i8* align 8 %cast.631, i64 80, i1 false), !dbg !2179
  %221 = bitcast %error.0* %err to i8*, !dbg !2179
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %221), !dbg !2179
  %222 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2179
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %222), !dbg !2179
  %223 = bitcast %IPST.0* %marbleJsonBytes to i8*, !dbg !2179
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %223), !dbg !2179
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2179
  %224 = bitcast %.command-line-arguments.marbleTransientInput.0** %marbleInput to i8*, !dbg !2179
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %224), !dbg !2179
  %225 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2179
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %225), !dbg !2179
  %226 = bitcast %.command-line-arguments.marble.0** %marble to i8*, !dbg !2179
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %226), !dbg !2179
  %227 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2179
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %227), !dbg !2179
  %228 = bitcast %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails to i8*, !dbg !2179
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %228), !dbg !2179
  %229 = bitcast %IPST.0* %marblePrivateDetailsBytes to i8*, !dbg !2179
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %229), !dbg !2179
  %230 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !2179
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %230), !dbg !2179
  %231 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !2179
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %231), !dbg !2179
  %232 = bitcast %IPST.0* %value to i8*, !dbg !2179
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %232), !dbg !2179
  %233 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2179
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %233), !dbg !2179
  ret void, !dbg !2179

fallthrough.51:                                   ; preds = %else.51
  %call.34 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%ArrayType.0, %ArrayType.0* @type.._61x_7uint8, i32 0, i32 0)), !dbg !2180
  %cast.635 = bitcast i8* %call.34 to [1 x i8]*, !dbg !2180
  store [1 x i8]* %cast.635, [1 x i8]** %tmpv.121, align 8
  %tmpv.121.ld.0 = load [1 x i8]*, [1 x i8]** %tmpv.121, align 8, !dbg !2180
  %cast.636 = bitcast [1 x i8]* %tmpv.121.ld.0 to i8*, !dbg !2180
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %cast.636, i8* align 1 getelementptr inbounds ([1 x i8], [1 x i8]* @const.113, i32 0, i32 0), i64 1, i1 false), !dbg !2180
  %tmpv.121.ld.1 = load [1 x i8]*, [1 x i8]** %tmpv.121, align 8, !dbg !2180
  %cast.637 = bitcast [1 x i8]* %tmpv.121.ld.1 to i8*, !dbg !2180
  %field.187 = getelementptr inbounds %IPST.0, %IPST.0* %value, i32 0, i32 0, !dbg !2180
  store i8* %cast.637, i8** %field.187, align 8, !dbg !2180
  %field.188 = getelementptr inbounds %IPST.0, %IPST.0* %value, i32 0, i32 1, !dbg !2180
  store i64 1, i64* %field.188, align 8, !dbg !2180
  %field.189 = getelementptr inbounds %IPST.0, %IPST.0* %value, i32 0, i32 2, !dbg !2180
  store i64 1, i64* %field.189, align 8, !dbg !2180
  %field.190 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 0, !dbg !2181
  %stub.field.ld.12 = load { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }** %field.190, align 8, !dbg !2181
  %field.191 = getelementptr inbounds { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }* %stub.field.ld.12, i32 0, i32 33, !dbg !2181
  %.field.ld.17 = load { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)** %field.191, align 8, !dbg !2181
  %field.192 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 1, !dbg !2181
  %stub.field.ld.13 = load i8*, i8** %field.192, align 8, !dbg !2181
  %ld.76 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.101, i32 0, i32 0), align 8, !dbg !2181
  %ld.77 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.101, i32 0, i32 1), align 8, !dbg !2181
  %field0.41 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %colorNameIndexKey, i32 0, i32 0, !dbg !2181
  %ld.78 = load i8*, i8** %field0.41, align 8, !dbg !2181
  %field1.41 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %colorNameIndexKey, i32 0, i32 1, !dbg !2181
  %ld.79 = load i64, i64* %field1.41, align 8, !dbg !2181
  %call.35 = call { i8*, i8* } %.field.ld.17(i8* nest undef, i8* %stub.field.ld.13, i8* %ld.76, i64 %ld.77, i8* %ld.78, i64 %ld.79, %IPST.0* byval(%IPST.0) %value), !dbg !2181
  %cast.640 = bitcast %error.0* %sret.actual.56 to { i8*, i8* }*, !dbg !2181
  store { i8*, i8* } %call.35, { i8*, i8* }* %cast.640, align 8, !dbg !2181
  %cast.641 = bitcast %error.0* %tmpv.122 to i8*
  %cast.642 = bitcast %error.0* %sret.actual.56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.641, i8* align 8 %cast.642, i64 16, i1 false)
  %cast.643 = bitcast %error.0* %err to i8*, !dbg !2182
  %cast.644 = bitcast %error.0* %tmpv.122 to i8*, !dbg !2182
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.643, i8* align 8 %cast.644, i64 16, i1 false), !dbg !2182
  %field.196 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2183
  %err.field.ld.24 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.196, align 8, !dbg !2183
  %icmp.70 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.24, null, !dbg !2183
  %zext.70 = zext i1 %icmp.70 to i8, !dbg !2183
  %trunc.52 = trunc i8 %zext.70 to i1, !dbg !2184
  br i1 %trunc.52, label %then.52, label %else.52

else.51:                                          ; preds = %fallthrough.50
  br label %fallthrough.51

then.52:                                          ; preds = %fallthrough.51
  %field.193 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2185
  %err.field.ld.22 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.193, align 8, !dbg !2185
  %field.194 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.22, i32 0, i32 1, !dbg !2185
  %.field.ld.18 = load { i8*, i64 } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)** %field.194, align 8, !dbg !2185
  %field.195 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !2185
  %err.field.ld.23 = load i8*, i8** %field.195, align 8, !dbg !2185
  %call.36 = call { i8*, i64 } %.field.ld.18(i8* nest undef, i8* %err.field.ld.23), !dbg !2185
  store { i8*, i64 } %call.36, { i8*, i64 }* %sret.actual.57, align 8, !dbg !2185
  %cast.646 = bitcast { i8*, i64 }* %tmpv.123 to i8*
  %cast.647 = bitcast { i8*, i64 }* %sret.actual.57 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.646, i8* align 8 %cast.647, i64 16, i1 false)
  %field0.42 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.123, i32 0, i32 0, !dbg !2186
  %ld.80 = load i8*, i8** %field0.42, align 8, !dbg !2186
  %field1.42 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.123, i32 0, i32 1, !dbg !2186
  %ld.81 = load i64, i64* %field1.42, align 8, !dbg !2186
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.58, i8* nest undef, i8* %ld.80, i64 %ld.81), !dbg !2186
  %cast.649 = bitcast %Response.0* %tmpv.124 to i8*
  %cast.650 = bitcast %Response.0* %sret.actual.58 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.649, i8* align 8 %cast.650, i64 80, i1 false)
  %cast.651 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2187
  %cast.652 = bitcast %Response.0* %tmpv.124 to i8*, !dbg !2187
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.651, i8* align 8 %cast.652, i64 80, i1 false), !dbg !2187
  %cast.653 = bitcast %Response.0* %sret.formal.2 to i8*, !dbg !2187
  %cast.654 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2187
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.653, i8* align 8 %cast.654, i64 80, i1 false), !dbg !2187
  %234 = bitcast %error.0* %err to i8*, !dbg !2187
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %234), !dbg !2187
  %235 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2187
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %235), !dbg !2187
  %236 = bitcast %IPST.0* %marbleJsonBytes to i8*, !dbg !2187
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %236), !dbg !2187
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2187
  %237 = bitcast %.command-line-arguments.marbleTransientInput.0** %marbleInput to i8*, !dbg !2187
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %237), !dbg !2187
  %238 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2187
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %238), !dbg !2187
  %239 = bitcast %.command-line-arguments.marble.0** %marble to i8*, !dbg !2187
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %239), !dbg !2187
  %240 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2187
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %240), !dbg !2187
  %241 = bitcast %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails to i8*, !dbg !2187
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %241), !dbg !2187
  %242 = bitcast %IPST.0* %marblePrivateDetailsBytes to i8*, !dbg !2187
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %242), !dbg !2187
  %243 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !2187
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %243), !dbg !2187
  %244 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !2187
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %244), !dbg !2187
  %245 = bitcast %IPST.0* %value to i8*, !dbg !2187
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %245), !dbg !2187
  %246 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2187
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %246), !dbg !2187
  ret void, !dbg !2187

fallthrough.52:                                   ; preds = %else.52
  %cast.656 = bitcast [1 x %IPST.3]* %tmpv.126 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.656, i8* align 8 bitcast ([1 x %IPST.3]* @const.115 to i8*), i64 16, i1 false)
  %cast.657 = bitcast [1 x %IPST.3]* %tmpv.126 to %IPST.3*, !dbg !2188
  %field.197 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.12, i32 0, i32 0, !dbg !2188
  store %IPST.3* %cast.657, %IPST.3** %field.197, align 8, !dbg !2188
  %field.198 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.12, i32 0, i32 1, !dbg !2188
  store i64 1, i64* %field.198, align 8, !dbg !2188
  %field.199 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.12, i32 0, i32 2, !dbg !2188
  store i64 1, i64* %field.199, align 8, !dbg !2188
  call void @fmt.Println({ i64, %error.0 }* sret({ i64, %error.0 }) "go_sret" %sret.actual.59, i8* nest undef, %IPST.52* byval(%IPST.52) %tmp.12), !dbg !2188
  %cast.658 = bitcast { i64, %error.0 }* %tmpv.125 to i8*, !dbg !2188
  %cast.659 = bitcast { i64, %error.0 }* %sret.actual.59 to i8*, !dbg !2188
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.658, i8* align 8 %cast.659, i64 24, i1 false), !dbg !2188
  store i8* null, i8** %tmpv.127, align 8
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Success(%Response.0* sret(%Response.0) "go_sret" %sret.actual.60, i8* nest undef, %IPST.0* byval(%IPST.0) @const.43), !dbg !2189
  %cast.661 = bitcast %Response.0* %tmpv.128 to i8*
  %cast.662 = bitcast %Response.0* %sret.actual.60 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.661, i8* align 8 %cast.662, i64 80, i1 false)
  %cast.663 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2190
  %cast.664 = bitcast %Response.0* %tmpv.128 to i8*, !dbg !2190
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.663, i8* align 8 %cast.664, i64 80, i1 false), !dbg !2190
  %cast.665 = bitcast %Response.0* %sret.formal.2 to i8*, !dbg !2190
  %cast.666 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2190
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.665, i8* align 8 %cast.666, i64 80, i1 false), !dbg !2190
  %247 = bitcast %error.0* %err to i8*, !dbg !2190
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %247), !dbg !2190
  %248 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2190
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %248), !dbg !2190
  %249 = bitcast %IPST.0* %marbleJsonBytes to i8*, !dbg !2190
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %249), !dbg !2190
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2190
  %250 = bitcast %.command-line-arguments.marbleTransientInput.0** %marbleInput to i8*, !dbg !2190
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %250), !dbg !2190
  %251 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2190
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %251), !dbg !2190
  %252 = bitcast %.command-line-arguments.marble.0** %marble to i8*, !dbg !2190
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %252), !dbg !2190
  %253 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2190
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %253), !dbg !2190
  %254 = bitcast %.command-line-arguments.marblePrivateDetails.0** %marblePrivateDetails to i8*, !dbg !2190
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %254), !dbg !2190
  %255 = bitcast %IPST.0* %marblePrivateDetailsBytes to i8*, !dbg !2190
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %255), !dbg !2190
  %256 = bitcast { i8*, i64 }* %indexName to i8*, !dbg !2190
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %256), !dbg !2190
  %257 = bitcast { i8*, i64 }* %colorNameIndexKey to i8*, !dbg !2190
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %257), !dbg !2190
  %258 = bitcast %IPST.0* %value to i8*, !dbg !2190
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %258), !dbg !2190
  %259 = bitcast %Response.0* %"$ret2" to i8*, !dbg !2190
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %259), !dbg !2190
  ret void, !dbg !2190

else.52:                                          ; preds = %fallthrough.51
  br label %fallthrough.52
}

define void @command_x2dline_x2darguments.MarblesPrivateChaincode.readMarble(%Response.0* sret(%Response.0) %sret.formal.3, i8* nest %nest.3, %MarblesPrivateChaincode.0* %t, i8* %stub.chunk0, i8* %stub.chunk1, %IPST.7* byval(%IPST.7) %args) #0 !dbg !2191 {
entry:
  %t.addr = alloca %MarblesPrivateChaincode.0*, align 8
  call void @llvm.dbg.declare(metadata %IPST.7* %args, metadata !2192, metadata !DIExpression()), !dbg !2193
  %stub.addr = alloca %ChaincodeStubInterface.0, align 8
  %"$ret3" = alloca %Response.0, align 8
  %name = alloca { i8*, i64 }, align 8
  %jsonResp = alloca { i8*, i64 }, align 8
  %err = alloca %error.0, align 8
  %valAsbytes = alloca %IPST.0, align 8
  %tmpv.129 = alloca %Response.0, align 8
  %sret.actual.61 = alloca %Response.0, align 8
  %tmpv.130 = alloca i64, align 8
  %tmpv.131 = alloca i64, align 8
  %tmpv.132 = alloca { %IPST.0, %error.0 }, align 8
  %sret.actual.62 = alloca { %IPST.0, %error.0 }, align 8
  %tmpv.133 = alloca %IPST.0, align 8
  %tmpv.134 = alloca %error.0, align 8
  %tmpv.135 = alloca { i8*, i64 }, align 8
  %sret.actual.63 = alloca { i8*, i64 }, align 8
  %tmpv.136 = alloca [5 x { i8*, i64 }], align 8
  %sret.actual.64 = alloca { i8*, i64 }, align 8
  %tmpv.137 = alloca %Response.0, align 8
  %sret.actual.65 = alloca %Response.0, align 8
  %tmpv.138 = alloca [3 x { i8*, i64 }], align 8
  %sret.actual.66 = alloca { i8*, i64 }, align 8
  %tmpv.139 = alloca %Response.0, align 8
  %sret.actual.67 = alloca %Response.0, align 8
  %tmpv.140 = alloca %Response.0, align 8
  %sret.actual.68 = alloca %Response.0, align 8
  store %MarblesPrivateChaincode.0* %t, %MarblesPrivateChaincode.0** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %MarblesPrivateChaincode.0** %t.addr, metadata !2194, metadata !DIExpression()), !dbg !2195
  %cast.740 = bitcast %ChaincodeStubInterface.0* %stub.addr to { i8*, i8* }*
  %field0.49 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.740, i32 0, i32 0
  store i8* %stub.chunk0, i8** %field0.49, align 8
  %field1.49 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.740, i32 0, i32 1
  store i8* %stub.chunk1, i8** %field1.49, align 8
  call void @llvm.dbg.declare(metadata %ChaincodeStubInterface.0* %stub.addr, metadata !2196, metadata !DIExpression()), !dbg !2197
  %0 = bitcast %Response.0* %"$ret3" to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* %0)
  %cast.739 = bitcast %Response.0* %"$ret3" to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.739, i8* align 8 bitcast (%Response.0* @const.44 to i8*), i64 80, i1 false)
  call void @llvm.dbg.declare(metadata %Response.0* %"$ret3", metadata !2198, metadata !DIExpression()), !dbg !2199
  %1 = bitcast { i8*, i64 }* %name to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %1)
  %2 = bitcast { i8*, i64 }* %jsonResp to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %2)
  %3 = bitcast %error.0* %err to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %3)
  %4 = bitcast %IPST.0* %valAsbytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %4)
  %cast.669 = bitcast { i8*, i64 }* %name to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.669, i8* align 8 bitcast ({ i8*, i64 }* @const.116 to i8*), i64 16, i1 false)
  call void @llvm.dbg.declare(metadata { i8*, i64 }* %name, metadata !2200, metadata !DIExpression()), !dbg !2202
  %cast.670 = bitcast { i8*, i64 }* %jsonResp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.670, i8* align 8 bitcast ({ i8*, i64 }* @const.116 to i8*), i64 16, i1 false)
  call void @llvm.dbg.declare(metadata { i8*, i64 }* %jsonResp, metadata !2203, metadata !DIExpression()), !dbg !2204
  %cast.671 = bitcast %error.0* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.671, i8* align 8 bitcast (%error.0* @const.60 to i8*), i64 16, i1 false)
  call void @llvm.dbg.declare(metadata %error.0* %err, metadata !2205, metadata !DIExpression()), !dbg !2206
  %field.200 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 1, !dbg !2207
  %args.field.ld.1 = load i64, i64* %field.200, align 8, !dbg !2207
  %icmp.71 = icmp ne i64 %args.field.ld.1, 1, !dbg !2208
  %zext.71 = zext i1 %icmp.71 to i8, !dbg !2208
  %trunc.53 = trunc i8 %zext.71 to i1, !dbg !2209
  br i1 %trunc.53, label %then.53, label %else.53

then.53:                                          ; preds = %entry
  %ld.82 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.118, i32 0, i32 0), align 8, !dbg !2210
  %ld.83 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.118, i32 0, i32 1), align 8, !dbg !2210
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.61, i8* nest undef, i8* %ld.82, i64 %ld.83), !dbg !2210
  %cast.673 = bitcast %Response.0* %tmpv.129 to i8*
  %cast.674 = bitcast %Response.0* %sret.actual.61 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.673, i8* align 8 %cast.674, i64 80, i1 false)
  %cast.675 = bitcast %Response.0* %"$ret3" to i8*, !dbg !2211
  %cast.676 = bitcast %Response.0* %tmpv.129 to i8*, !dbg !2211
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.675, i8* align 8 %cast.676, i64 80, i1 false), !dbg !2211
  %cast.677 = bitcast %Response.0* %sret.formal.3 to i8*, !dbg !2211
  %cast.678 = bitcast %Response.0* %"$ret3" to i8*, !dbg !2211
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.677, i8* align 8 %cast.678, i64 80, i1 false), !dbg !2211
  %5 = bitcast { i8*, i64 }* %name to i8*, !dbg !2211
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %5), !dbg !2211
  %6 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !2211
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %6), !dbg !2211
  %7 = bitcast %error.0* %err to i8*, !dbg !2211
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %7), !dbg !2211
  %8 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !2211
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %8), !dbg !2211
  %9 = bitcast %Response.0* %"$ret3" to i8*, !dbg !2211
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %9), !dbg !2211
  ret void, !dbg !2211

fallthrough.53:                                   ; preds = %else.53
  %field.201 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 1, !dbg !2212
  %args.field.ld.2 = load i64, i64* %field.201, align 8, !dbg !2212
  store i64 %args.field.ld.2, i64* %tmpv.130, align 8
  %field.202 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 2, !dbg !2212
  %args.field.ld.3 = load i64, i64* %field.202, align 8, !dbg !2212
  store i64 %args.field.ld.3, i64* %tmpv.131, align 8
  %tmpv.130.ld.0 = load i64, i64* %tmpv.130, align 8, !dbg !2213
  %icmp.73 = icmp slt i64 0, %tmpv.130.ld.0, !dbg !2213
  %zext.73 = zext i1 %icmp.73 to i8, !dbg !2213
  %iand.0 = and i8 1, %zext.73, !dbg !2213
  %trunc.54 = trunc i8 %iand.0 to i1, !dbg !2213
  br i1 %trunc.54, label %then.54, label %else.54

else.53:                                          ; preds = %entry
  br label %fallthrough.53

then.54:                                          ; preds = %fallthrough.53
  br label %fallthrough.54

fallthrough.54:                                   ; preds = %then.54
  %field.203 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 0, !dbg !2212
  %args.field.ld.4 = load { i8*, i64 }*, { i8*, i64 }** %field.203, align 8, !dbg !2212
  %ptroff.0 = getelementptr { i8*, i64 }, { i8*, i64 }* %args.field.ld.4, i64 0, !dbg !2213
  %cast.679 = bitcast { i8*, i64 }* %name to i8*, !dbg !2214
  %cast.680 = bitcast { i8*, i64 }* %ptroff.0 to i8*, !dbg !2214
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.679, i8* align 8 %cast.680, i64 16, i1 false), !dbg !2214
  %field.204 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 0, !dbg !2215
  %stub.field.ld.14 = load { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }** %field.204, align 8, !dbg !2215
  %field.205 = getelementptr inbounds { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }* %stub.field.ld.14, i32 0, i32 12, !dbg !2215
  %.field.ld.19 = load void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)** %field.205, align 8, !dbg !2215
  %field.206 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 1, !dbg !2215
  %stub.field.ld.15 = load i8*, i8** %field.206, align 8, !dbg !2215
  %ld.84 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.101, i32 0, i32 0), align 8, !dbg !2215
  %ld.85 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.101, i32 0, i32 1), align 8, !dbg !2215
  %field0.46 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %name, i32 0, i32 0, !dbg !2215
  %ld.86 = load i8*, i8** %field0.46, align 8, !dbg !2215
  %field1.46 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %name, i32 0, i32 1, !dbg !2215
  %ld.87 = load i64, i64* %field1.46, align 8, !dbg !2215
  call void %.field.ld.19({ %IPST.0, %error.0 }* sret({ %IPST.0, %error.0 }) "go_sret" %sret.actual.62, i8* nest undef, i8* %stub.field.ld.15, i8* %ld.84, i64 %ld.85, i8* %ld.86, i64 %ld.87), !dbg !2215
  %cast.683 = bitcast { %IPST.0, %error.0 }* %tmpv.132 to i8*, !dbg !2215
  %cast.684 = bitcast { %IPST.0, %error.0 }* %sret.actual.62 to i8*, !dbg !2215
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.683, i8* align 8 %cast.684, i64 40, i1 false), !dbg !2215
  %field.207 = getelementptr inbounds { %IPST.0, %error.0 }, { %IPST.0, %error.0 }* %tmpv.132, i32 0, i32 0, !dbg !2215
  %cast.685 = bitcast %IPST.0* %tmpv.133 to i8*
  %cast.686 = bitcast %IPST.0* %field.207 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.685, i8* align 8 %cast.686, i64 24, i1 false)
  %cast.687 = bitcast %IPST.0* %valAsbytes to i8*
  %cast.688 = bitcast %IPST.0* %tmpv.133 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.687, i8* align 8 %cast.688, i64 24, i1 false)
  call void @llvm.dbg.declare(metadata %IPST.0* %valAsbytes, metadata !2216, metadata !DIExpression()), !dbg !2217
  %field.208 = getelementptr inbounds { %IPST.0, %error.0 }, { %IPST.0, %error.0 }* %tmpv.132, i32 0, i32 1, !dbg !2215
  %cast.689 = bitcast %error.0* %tmpv.134 to i8*
  %cast.690 = bitcast %error.0* %field.208 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.689, i8* align 8 %cast.690, i64 16, i1 false)
  %cast.691 = bitcast %error.0* %err to i8*, !dbg !2218
  %cast.692 = bitcast %error.0* %tmpv.134 to i8*, !dbg !2218
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.691, i8* align 8 %cast.692, i64 16, i1 false), !dbg !2218
  %field.213 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2219
  %err.field.ld.27 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.213, align 8, !dbg !2219
  %icmp.75 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.27, null, !dbg !2219
  %zext.75 = zext i1 %icmp.75 to i8, !dbg !2219
  %trunc.56 = trunc i8 %zext.75 to i1, !dbg !2220
  br i1 %trunc.56, label %then.55, label %else.55

else.54:                                          ; preds = %fallthrough.53
  %tmpv.130.ld.1 = load i64, i64* %tmpv.130, align 8, !dbg !2213
  call void @runtime.goPanicIndex(i8* nest undef, i64 0, i64 %tmpv.130.ld.1), !dbg !2213
  unreachable

then.55:                                          ; preds = %fallthrough.54
  %field.209 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2221
  %err.field.ld.25 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.209, align 8, !dbg !2221
  %field.210 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.25, i32 0, i32 1, !dbg !2221
  %.field.ld.20 = load { i8*, i64 } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)** %field.210, align 8, !dbg !2221
  %field.211 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !2221
  %err.field.ld.26 = load i8*, i8** %field.211, align 8, !dbg !2221
  %call.37 = call { i8*, i64 } %.field.ld.20(i8* nest undef, i8* %err.field.ld.26), !dbg !2221
  store { i8*, i64 } %call.37, { i8*, i64 }* %sret.actual.63, align 8, !dbg !2221
  %cast.694 = bitcast { i8*, i64 }* %tmpv.135 to i8*
  %cast.695 = bitcast { i8*, i64 }* %sret.actual.63 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.694, i8* align 8 %cast.695, i64 16, i1 false)
  %index.19 = getelementptr [5 x { i8*, i64 }], [5 x { i8*, i64 }]* %tmpv.136, i32 0, i32 0, !dbg !2222
  %cast.696 = bitcast { i8*, i64 }* %index.19 to i8*, !dbg !2222
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.696, i8* align 8 bitcast ({ i8*, i64 }* @const.122 to i8*), i64 16, i1 false), !dbg !2222
  %index.20 = getelementptr [5 x { i8*, i64 }], [5 x { i8*, i64 }]* %tmpv.136, i32 0, i32 1, !dbg !2222
  %cast.697 = bitcast { i8*, i64 }* %index.20 to i8*, !dbg !2222
  %cast.698 = bitcast { i8*, i64 }* %name to i8*, !dbg !2222
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.697, i8* align 8 %cast.698, i64 16, i1 false), !dbg !2222
  %index.21 = getelementptr [5 x { i8*, i64 }], [5 x { i8*, i64 }]* %tmpv.136, i32 0, i32 2, !dbg !2222
  %cast.699 = bitcast { i8*, i64 }* %index.21 to i8*, !dbg !2222
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.699, i8* align 8 bitcast ({ i8*, i64 }* @const.123 to i8*), i64 16, i1 false), !dbg !2222
  %index.22 = getelementptr [5 x { i8*, i64 }], [5 x { i8*, i64 }]* %tmpv.136, i32 0, i32 3, !dbg !2222
  %cast.700 = bitcast { i8*, i64 }* %index.22 to i8*, !dbg !2222
  %cast.701 = bitcast { i8*, i64 }* %tmpv.135 to i8*, !dbg !2222
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.700, i8* align 8 %cast.701, i64 16, i1 false), !dbg !2222
  %index.23 = getelementptr [5 x { i8*, i64 }], [5 x { i8*, i64 }]* %tmpv.136, i32 0, i32 4, !dbg !2222
  %cast.702 = bitcast { i8*, i64 }* %index.23 to i8*, !dbg !2222
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.702, i8* align 8 bitcast ({ i8*, i64 }* @const.124 to i8*), i64 16, i1 false), !dbg !2222
  %cast.703 = bitcast [5 x { i8*, i64 }]* %tmpv.136 to i8*, !dbg !2222
  %call.38 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.703, i64 5), !dbg !2222
  store { i8*, i64 } %call.38, { i8*, i64 }* %sret.actual.64, align 8, !dbg !2222
  %cast.706 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !2223
  %cast.707 = bitcast { i8*, i64 }* %sret.actual.64 to i8*, !dbg !2223
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.706, i8* align 8 %cast.707, i64 16, i1 false), !dbg !2223
  %field0.47 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %jsonResp, i32 0, i32 0, !dbg !2224
  %ld.88 = load i8*, i8** %field0.47, align 8, !dbg !2224
  %field1.47 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %jsonResp, i32 0, i32 1, !dbg !2224
  %ld.89 = load i64, i64* %field1.47, align 8, !dbg !2224
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.65, i8* nest undef, i8* %ld.88, i64 %ld.89), !dbg !2224
  %cast.709 = bitcast %Response.0* %tmpv.137 to i8*
  %cast.710 = bitcast %Response.0* %sret.actual.65 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.709, i8* align 8 %cast.710, i64 80, i1 false)
  %cast.711 = bitcast %Response.0* %"$ret3" to i8*, !dbg !2225
  %cast.712 = bitcast %Response.0* %tmpv.137 to i8*, !dbg !2225
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.711, i8* align 8 %cast.712, i64 80, i1 false), !dbg !2225
  %cast.713 = bitcast %Response.0* %sret.formal.3 to i8*, !dbg !2225
  %cast.714 = bitcast %Response.0* %"$ret3" to i8*, !dbg !2225
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.713, i8* align 8 %cast.714, i64 80, i1 false), !dbg !2225
  %10 = bitcast { i8*, i64 }* %name to i8*, !dbg !2225
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %10), !dbg !2225
  %11 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !2225
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %11), !dbg !2225
  %12 = bitcast %error.0* %err to i8*, !dbg !2225
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %12), !dbg !2225
  %13 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !2225
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %13), !dbg !2225
  %14 = bitcast %Response.0* %"$ret3" to i8*, !dbg !2225
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %14), !dbg !2225
  ret void, !dbg !2225

fallthrough.55:                                   ; preds = %fallthrough.56
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Success(%Response.0* sret(%Response.0) "go_sret" %sret.actual.68, i8* nest undef, %IPST.0* byval(%IPST.0) %valAsbytes), !dbg !2226
  %cast.733 = bitcast %Response.0* %tmpv.140 to i8*
  %cast.734 = bitcast %Response.0* %sret.actual.68 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.733, i8* align 8 %cast.734, i64 80, i1 false)
  %cast.735 = bitcast %Response.0* %"$ret3" to i8*, !dbg !2227
  %cast.736 = bitcast %Response.0* %tmpv.140 to i8*, !dbg !2227
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.735, i8* align 8 %cast.736, i64 80, i1 false), !dbg !2227
  %cast.737 = bitcast %Response.0* %sret.formal.3 to i8*, !dbg !2227
  %cast.738 = bitcast %Response.0* %"$ret3" to i8*, !dbg !2227
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.737, i8* align 8 %cast.738, i64 80, i1 false), !dbg !2227
  %15 = bitcast { i8*, i64 }* %name to i8*, !dbg !2227
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %15), !dbg !2227
  %16 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !2227
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %16), !dbg !2227
  %17 = bitcast %error.0* %err to i8*, !dbg !2227
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %17), !dbg !2227
  %18 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !2227
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %18), !dbg !2227
  %19 = bitcast %Response.0* %"$ret3" to i8*, !dbg !2227
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %19), !dbg !2227
  ret void, !dbg !2227

else.55:                                          ; preds = %fallthrough.54
  %field.212 = getelementptr inbounds %IPST.0, %IPST.0* %valAsbytes, i32 0, i32 0, !dbg !2228
  %valAsbytes.field.ld.0 = load i8*, i8** %field.212, align 8, !dbg !2228
  %icmp.74 = icmp eq i8* %valAsbytes.field.ld.0, null, !dbg !2229
  %zext.74 = zext i1 %icmp.74 to i8, !dbg !2229
  %trunc.55 = trunc i8 %zext.74 to i1, !dbg !2230
  br i1 %trunc.55, label %then.56, label %else.56

then.56:                                          ; preds = %else.55
  %index.24 = getelementptr [3 x { i8*, i64 }], [3 x { i8*, i64 }]* %tmpv.138, i32 0, i32 0, !dbg !2231
  %cast.715 = bitcast { i8*, i64 }* %index.24 to i8*, !dbg !2231
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.715, i8* align 8 bitcast ({ i8*, i64 }* @const.126 to i8*), i64 16, i1 false), !dbg !2231
  %index.25 = getelementptr [3 x { i8*, i64 }], [3 x { i8*, i64 }]* %tmpv.138, i32 0, i32 1, !dbg !2231
  %cast.716 = bitcast { i8*, i64 }* %index.25 to i8*, !dbg !2231
  %cast.717 = bitcast { i8*, i64 }* %name to i8*, !dbg !2231
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.716, i8* align 8 %cast.717, i64 16, i1 false), !dbg !2231
  %index.26 = getelementptr [3 x { i8*, i64 }], [3 x { i8*, i64 }]* %tmpv.138, i32 0, i32 2, !dbg !2231
  %cast.718 = bitcast { i8*, i64 }* %index.26 to i8*, !dbg !2231
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.718, i8* align 8 bitcast ({ i8*, i64 }* @const.124 to i8*), i64 16, i1 false), !dbg !2231
  %cast.719 = bitcast [3 x { i8*, i64 }]* %tmpv.138 to i8*, !dbg !2231
  %call.39 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.719, i64 3), !dbg !2231
  store { i8*, i64 } %call.39, { i8*, i64 }* %sret.actual.66, align 8, !dbg !2231
  %cast.722 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !2232
  %cast.723 = bitcast { i8*, i64 }* %sret.actual.66 to i8*, !dbg !2232
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.722, i8* align 8 %cast.723, i64 16, i1 false), !dbg !2232
  %field0.48 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %jsonResp, i32 0, i32 0, !dbg !2233
  %ld.90 = load i8*, i8** %field0.48, align 8, !dbg !2233
  %field1.48 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %jsonResp, i32 0, i32 1, !dbg !2233
  %ld.91 = load i64, i64* %field1.48, align 8, !dbg !2233
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.67, i8* nest undef, i8* %ld.90, i64 %ld.91), !dbg !2233
  %cast.725 = bitcast %Response.0* %tmpv.139 to i8*
  %cast.726 = bitcast %Response.0* %sret.actual.67 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.725, i8* align 8 %cast.726, i64 80, i1 false)
  %cast.727 = bitcast %Response.0* %"$ret3" to i8*, !dbg !2234
  %cast.728 = bitcast %Response.0* %tmpv.139 to i8*, !dbg !2234
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.727, i8* align 8 %cast.728, i64 80, i1 false), !dbg !2234
  %cast.729 = bitcast %Response.0* %sret.formal.3 to i8*, !dbg !2234
  %cast.730 = bitcast %Response.0* %"$ret3" to i8*, !dbg !2234
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.729, i8* align 8 %cast.730, i64 80, i1 false), !dbg !2234
  %20 = bitcast { i8*, i64 }* %name to i8*, !dbg !2234
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %20), !dbg !2234
  %21 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !2234
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %21), !dbg !2234
  %22 = bitcast %error.0* %err to i8*, !dbg !2234
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %22), !dbg !2234
  %23 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !2234
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %23), !dbg !2234
  %24 = bitcast %Response.0* %"$ret3" to i8*, !dbg !2234
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %24), !dbg !2234
  ret void, !dbg !2234

fallthrough.56:                                   ; preds = %else.56
  br label %fallthrough.55

else.56:                                          ; preds = %else.55
  br label %fallthrough.56
}

define void @command_x2dline_x2darguments.MarblesPrivateChaincode.readMarblePrivateDetails(%Response.0* sret(%Response.0) %sret.formal.4, i8* nest %nest.4, %MarblesPrivateChaincode.0* %t, i8* %stub.chunk0, i8* %stub.chunk1, %IPST.7* byval(%IPST.7) %args) #0 !dbg !2235 {
entry:
  %t.addr = alloca %MarblesPrivateChaincode.0*, align 8
  call void @llvm.dbg.declare(metadata %IPST.7* %args, metadata !2236, metadata !DIExpression()), !dbg !2237
  %stub.addr = alloca %ChaincodeStubInterface.0, align 8
  %"$ret4" = alloca %Response.0, align 8
  %name = alloca { i8*, i64 }, align 8
  %jsonResp = alloca { i8*, i64 }, align 8
  %err = alloca %error.0, align 8
  %valAsbytes = alloca %IPST.0, align 8
  %tmpv.141 = alloca %Response.0, align 8
  %sret.actual.69 = alloca %Response.0, align 8
  %tmpv.142 = alloca i64, align 8
  %tmpv.143 = alloca i64, align 8
  %tmpv.144 = alloca { %IPST.0, %error.0 }, align 8
  %sret.actual.70 = alloca { %IPST.0, %error.0 }, align 8
  %tmpv.145 = alloca %IPST.0, align 8
  %tmpv.146 = alloca %error.0, align 8
  %tmpv.147 = alloca { i8*, i64 }, align 8
  %sret.actual.71 = alloca { i8*, i64 }, align 8
  %tmpv.148 = alloca [5 x { i8*, i64 }], align 8
  %sret.actual.72 = alloca { i8*, i64 }, align 8
  %tmpv.149 = alloca %Response.0, align 8
  %sret.actual.73 = alloca %Response.0, align 8
  %tmpv.150 = alloca [3 x { i8*, i64 }], align 8
  %sret.actual.74 = alloca { i8*, i64 }, align 8
  %tmpv.151 = alloca %Response.0, align 8
  %sret.actual.75 = alloca %Response.0, align 8
  %tmpv.152 = alloca %Response.0, align 8
  %sret.actual.76 = alloca %Response.0, align 8
  store %MarblesPrivateChaincode.0* %t, %MarblesPrivateChaincode.0** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %MarblesPrivateChaincode.0** %t.addr, metadata !2238, metadata !DIExpression()), !dbg !2239
  %cast.812 = bitcast %ChaincodeStubInterface.0* %stub.addr to { i8*, i8* }*
  %field0.55 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.812, i32 0, i32 0
  store i8* %stub.chunk0, i8** %field0.55, align 8
  %field1.55 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.812, i32 0, i32 1
  store i8* %stub.chunk1, i8** %field1.55, align 8
  call void @llvm.dbg.declare(metadata %ChaincodeStubInterface.0* %stub.addr, metadata !2240, metadata !DIExpression()), !dbg !2241
  %0 = bitcast %Response.0* %"$ret4" to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* %0)
  %cast.811 = bitcast %Response.0* %"$ret4" to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.811, i8* align 8 bitcast (%Response.0* @const.44 to i8*), i64 80, i1 false)
  call void @llvm.dbg.declare(metadata %Response.0* %"$ret4", metadata !2242, metadata !DIExpression()), !dbg !2243
  %1 = bitcast { i8*, i64 }* %name to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %1)
  %2 = bitcast { i8*, i64 }* %jsonResp to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %2)
  %3 = bitcast %error.0* %err to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %3)
  %4 = bitcast %IPST.0* %valAsbytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %4)
  %cast.741 = bitcast { i8*, i64 }* %name to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.741, i8* align 8 bitcast ({ i8*, i64 }* @const.116 to i8*), i64 16, i1 false)
  call void @llvm.dbg.declare(metadata { i8*, i64 }* %name, metadata !2244, metadata !DIExpression()), !dbg !2246
  %cast.742 = bitcast { i8*, i64 }* %jsonResp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.742, i8* align 8 bitcast ({ i8*, i64 }* @const.116 to i8*), i64 16, i1 false)
  call void @llvm.dbg.declare(metadata { i8*, i64 }* %jsonResp, metadata !2247, metadata !DIExpression()), !dbg !2248
  %cast.743 = bitcast %error.0* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.743, i8* align 8 bitcast (%error.0* @const.60 to i8*), i64 16, i1 false)
  call void @llvm.dbg.declare(metadata %error.0* %err, metadata !2249, metadata !DIExpression()), !dbg !2250
  %field.214 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 1, !dbg !2251
  %args.field.ld.5 = load i64, i64* %field.214, align 8, !dbg !2251
  %icmp.76 = icmp ne i64 %args.field.ld.5, 1, !dbg !2252
  %zext.76 = zext i1 %icmp.76 to i8, !dbg !2252
  %trunc.57 = trunc i8 %zext.76 to i1, !dbg !2253
  br i1 %trunc.57, label %then.57, label %else.57

then.57:                                          ; preds = %entry
  %ld.92 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.118, i32 0, i32 0), align 8, !dbg !2254
  %ld.93 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.118, i32 0, i32 1), align 8, !dbg !2254
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.69, i8* nest undef, i8* %ld.92, i64 %ld.93), !dbg !2254
  %cast.745 = bitcast %Response.0* %tmpv.141 to i8*
  %cast.746 = bitcast %Response.0* %sret.actual.69 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.745, i8* align 8 %cast.746, i64 80, i1 false)
  %cast.747 = bitcast %Response.0* %"$ret4" to i8*, !dbg !2255
  %cast.748 = bitcast %Response.0* %tmpv.141 to i8*, !dbg !2255
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.747, i8* align 8 %cast.748, i64 80, i1 false), !dbg !2255
  %cast.749 = bitcast %Response.0* %sret.formal.4 to i8*, !dbg !2255
  %cast.750 = bitcast %Response.0* %"$ret4" to i8*, !dbg !2255
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.749, i8* align 8 %cast.750, i64 80, i1 false), !dbg !2255
  %5 = bitcast { i8*, i64 }* %name to i8*, !dbg !2255
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %5), !dbg !2255
  %6 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !2255
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %6), !dbg !2255
  %7 = bitcast %error.0* %err to i8*, !dbg !2255
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %7), !dbg !2255
  %8 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !2255
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %8), !dbg !2255
  %9 = bitcast %Response.0* %"$ret4" to i8*, !dbg !2255
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %9), !dbg !2255
  ret void, !dbg !2255

fallthrough.57:                                   ; preds = %else.57
  %field.215 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 1, !dbg !2256
  %args.field.ld.6 = load i64, i64* %field.215, align 8, !dbg !2256
  store i64 %args.field.ld.6, i64* %tmpv.142, align 8
  %field.216 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 2, !dbg !2256
  %args.field.ld.7 = load i64, i64* %field.216, align 8, !dbg !2256
  store i64 %args.field.ld.7, i64* %tmpv.143, align 8
  %tmpv.142.ld.0 = load i64, i64* %tmpv.142, align 8, !dbg !2257
  %icmp.78 = icmp slt i64 0, %tmpv.142.ld.0, !dbg !2257
  %zext.78 = zext i1 %icmp.78 to i8, !dbg !2257
  %iand.1 = and i8 1, %zext.78, !dbg !2257
  %trunc.58 = trunc i8 %iand.1 to i1, !dbg !2257
  br i1 %trunc.58, label %then.58, label %else.58

else.57:                                          ; preds = %entry
  br label %fallthrough.57

then.58:                                          ; preds = %fallthrough.57
  br label %fallthrough.58

fallthrough.58:                                   ; preds = %then.58
  %field.217 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 0, !dbg !2256
  %args.field.ld.8 = load { i8*, i64 }*, { i8*, i64 }** %field.217, align 8, !dbg !2256
  %ptroff.1 = getelementptr { i8*, i64 }, { i8*, i64 }* %args.field.ld.8, i64 0, !dbg !2257
  %cast.751 = bitcast { i8*, i64 }* %name to i8*, !dbg !2258
  %cast.752 = bitcast { i8*, i64 }* %ptroff.1 to i8*, !dbg !2258
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.751, i8* align 8 %cast.752, i64 16, i1 false), !dbg !2258
  %field.218 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 0, !dbg !2259
  %stub.field.ld.16 = load { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }** %field.218, align 8, !dbg !2259
  %field.219 = getelementptr inbounds { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }* %stub.field.ld.16, i32 0, i32 12, !dbg !2259
  %.field.ld.21 = load void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)** %field.219, align 8, !dbg !2259
  %field.220 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 1, !dbg !2259
  %stub.field.ld.17 = load i8*, i8** %field.220, align 8, !dbg !2259
  %ld.94 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.108, i32 0, i32 0), align 8, !dbg !2259
  %ld.95 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.108, i32 0, i32 1), align 8, !dbg !2259
  %field0.52 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %name, i32 0, i32 0, !dbg !2259
  %ld.96 = load i8*, i8** %field0.52, align 8, !dbg !2259
  %field1.52 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %name, i32 0, i32 1, !dbg !2259
  %ld.97 = load i64, i64* %field1.52, align 8, !dbg !2259
  call void %.field.ld.21({ %IPST.0, %error.0 }* sret({ %IPST.0, %error.0 }) "go_sret" %sret.actual.70, i8* nest undef, i8* %stub.field.ld.17, i8* %ld.94, i64 %ld.95, i8* %ld.96, i64 %ld.97), !dbg !2259
  %cast.755 = bitcast { %IPST.0, %error.0 }* %tmpv.144 to i8*, !dbg !2259
  %cast.756 = bitcast { %IPST.0, %error.0 }* %sret.actual.70 to i8*, !dbg !2259
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.755, i8* align 8 %cast.756, i64 40, i1 false), !dbg !2259
  %field.221 = getelementptr inbounds { %IPST.0, %error.0 }, { %IPST.0, %error.0 }* %tmpv.144, i32 0, i32 0, !dbg !2259
  %cast.757 = bitcast %IPST.0* %tmpv.145 to i8*
  %cast.758 = bitcast %IPST.0* %field.221 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.757, i8* align 8 %cast.758, i64 24, i1 false)
  %cast.759 = bitcast %IPST.0* %valAsbytes to i8*
  %cast.760 = bitcast %IPST.0* %tmpv.145 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.759, i8* align 8 %cast.760, i64 24, i1 false)
  call void @llvm.dbg.declare(metadata %IPST.0* %valAsbytes, metadata !2260, metadata !DIExpression()), !dbg !2261
  %field.222 = getelementptr inbounds { %IPST.0, %error.0 }, { %IPST.0, %error.0 }* %tmpv.144, i32 0, i32 1, !dbg !2259
  %cast.761 = bitcast %error.0* %tmpv.146 to i8*
  %cast.762 = bitcast %error.0* %field.222 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.761, i8* align 8 %cast.762, i64 16, i1 false)
  %cast.763 = bitcast %error.0* %err to i8*, !dbg !2262
  %cast.764 = bitcast %error.0* %tmpv.146 to i8*, !dbg !2262
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.763, i8* align 8 %cast.764, i64 16, i1 false), !dbg !2262
  %field.227 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2263
  %err.field.ld.30 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.227, align 8, !dbg !2263
  %icmp.80 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.30, null, !dbg !2263
  %zext.80 = zext i1 %icmp.80 to i8, !dbg !2263
  %trunc.60 = trunc i8 %zext.80 to i1, !dbg !2264
  br i1 %trunc.60, label %then.59, label %else.59

else.58:                                          ; preds = %fallthrough.57
  %tmpv.142.ld.1 = load i64, i64* %tmpv.142, align 8, !dbg !2257
  call void @runtime.goPanicIndex(i8* nest undef, i64 0, i64 %tmpv.142.ld.1), !dbg !2257
  unreachable

then.59:                                          ; preds = %fallthrough.58
  %field.223 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2265
  %err.field.ld.28 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.223, align 8, !dbg !2265
  %field.224 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.28, i32 0, i32 1, !dbg !2265
  %.field.ld.22 = load { i8*, i64 } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)** %field.224, align 8, !dbg !2265
  %field.225 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !2265
  %err.field.ld.29 = load i8*, i8** %field.225, align 8, !dbg !2265
  %call.40 = call { i8*, i64 } %.field.ld.22(i8* nest undef, i8* %err.field.ld.29), !dbg !2265
  store { i8*, i64 } %call.40, { i8*, i64 }* %sret.actual.71, align 8, !dbg !2265
  %cast.766 = bitcast { i8*, i64 }* %tmpv.147 to i8*
  %cast.767 = bitcast { i8*, i64 }* %sret.actual.71 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.766, i8* align 8 %cast.767, i64 16, i1 false)
  %index.27 = getelementptr [5 x { i8*, i64 }], [5 x { i8*, i64 }]* %tmpv.148, i32 0, i32 0, !dbg !2266
  %cast.768 = bitcast { i8*, i64 }* %index.27 to i8*, !dbg !2266
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.768, i8* align 8 bitcast ({ i8*, i64 }* @const.128 to i8*), i64 16, i1 false), !dbg !2266
  %index.28 = getelementptr [5 x { i8*, i64 }], [5 x { i8*, i64 }]* %tmpv.148, i32 0, i32 1, !dbg !2266
  %cast.769 = bitcast { i8*, i64 }* %index.28 to i8*, !dbg !2266
  %cast.770 = bitcast { i8*, i64 }* %name to i8*, !dbg !2266
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.769, i8* align 8 %cast.770, i64 16, i1 false), !dbg !2266
  %index.29 = getelementptr [5 x { i8*, i64 }], [5 x { i8*, i64 }]* %tmpv.148, i32 0, i32 2, !dbg !2266
  %cast.771 = bitcast { i8*, i64 }* %index.29 to i8*, !dbg !2266
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.771, i8* align 8 bitcast ({ i8*, i64 }* @const.123 to i8*), i64 16, i1 false), !dbg !2266
  %index.30 = getelementptr [5 x { i8*, i64 }], [5 x { i8*, i64 }]* %tmpv.148, i32 0, i32 3, !dbg !2266
  %cast.772 = bitcast { i8*, i64 }* %index.30 to i8*, !dbg !2266
  %cast.773 = bitcast { i8*, i64 }* %tmpv.147 to i8*, !dbg !2266
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.772, i8* align 8 %cast.773, i64 16, i1 false), !dbg !2266
  %index.31 = getelementptr [5 x { i8*, i64 }], [5 x { i8*, i64 }]* %tmpv.148, i32 0, i32 4, !dbg !2266
  %cast.774 = bitcast { i8*, i64 }* %index.31 to i8*, !dbg !2266
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.774, i8* align 8 bitcast ({ i8*, i64 }* @const.124 to i8*), i64 16, i1 false), !dbg !2266
  %cast.775 = bitcast [5 x { i8*, i64 }]* %tmpv.148 to i8*, !dbg !2266
  %call.41 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.775, i64 5), !dbg !2266
  store { i8*, i64 } %call.41, { i8*, i64 }* %sret.actual.72, align 8, !dbg !2266
  %cast.778 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !2267
  %cast.779 = bitcast { i8*, i64 }* %sret.actual.72 to i8*, !dbg !2267
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.778, i8* align 8 %cast.779, i64 16, i1 false), !dbg !2267
  %field0.53 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %jsonResp, i32 0, i32 0, !dbg !2268
  %ld.98 = load i8*, i8** %field0.53, align 8, !dbg !2268
  %field1.53 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %jsonResp, i32 0, i32 1, !dbg !2268
  %ld.99 = load i64, i64* %field1.53, align 8, !dbg !2268
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.73, i8* nest undef, i8* %ld.98, i64 %ld.99), !dbg !2268
  %cast.781 = bitcast %Response.0* %tmpv.149 to i8*
  %cast.782 = bitcast %Response.0* %sret.actual.73 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.781, i8* align 8 %cast.782, i64 80, i1 false)
  %cast.783 = bitcast %Response.0* %"$ret4" to i8*, !dbg !2269
  %cast.784 = bitcast %Response.0* %tmpv.149 to i8*, !dbg !2269
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.783, i8* align 8 %cast.784, i64 80, i1 false), !dbg !2269
  %cast.785 = bitcast %Response.0* %sret.formal.4 to i8*, !dbg !2269
  %cast.786 = bitcast %Response.0* %"$ret4" to i8*, !dbg !2269
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.785, i8* align 8 %cast.786, i64 80, i1 false), !dbg !2269
  %10 = bitcast { i8*, i64 }* %name to i8*, !dbg !2269
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %10), !dbg !2269
  %11 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !2269
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %11), !dbg !2269
  %12 = bitcast %error.0* %err to i8*, !dbg !2269
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %12), !dbg !2269
  %13 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !2269
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %13), !dbg !2269
  %14 = bitcast %Response.0* %"$ret4" to i8*, !dbg !2269
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %14), !dbg !2269
  ret void, !dbg !2269

fallthrough.59:                                   ; preds = %fallthrough.60
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Success(%Response.0* sret(%Response.0) "go_sret" %sret.actual.76, i8* nest undef, %IPST.0* byval(%IPST.0) %valAsbytes), !dbg !2270
  %cast.805 = bitcast %Response.0* %tmpv.152 to i8*
  %cast.806 = bitcast %Response.0* %sret.actual.76 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.805, i8* align 8 %cast.806, i64 80, i1 false)
  %cast.807 = bitcast %Response.0* %"$ret4" to i8*, !dbg !2271
  %cast.808 = bitcast %Response.0* %tmpv.152 to i8*, !dbg !2271
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.807, i8* align 8 %cast.808, i64 80, i1 false), !dbg !2271
  %cast.809 = bitcast %Response.0* %sret.formal.4 to i8*, !dbg !2271
  %cast.810 = bitcast %Response.0* %"$ret4" to i8*, !dbg !2271
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.809, i8* align 8 %cast.810, i64 80, i1 false), !dbg !2271
  %15 = bitcast { i8*, i64 }* %name to i8*, !dbg !2271
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %15), !dbg !2271
  %16 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !2271
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %16), !dbg !2271
  %17 = bitcast %error.0* %err to i8*, !dbg !2271
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %17), !dbg !2271
  %18 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !2271
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %18), !dbg !2271
  %19 = bitcast %Response.0* %"$ret4" to i8*, !dbg !2271
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %19), !dbg !2271
  ret void, !dbg !2271

else.59:                                          ; preds = %fallthrough.58
  %field.226 = getelementptr inbounds %IPST.0, %IPST.0* %valAsbytes, i32 0, i32 0, !dbg !2272
  %valAsbytes.field.ld.1 = load i8*, i8** %field.226, align 8, !dbg !2272
  %icmp.79 = icmp eq i8* %valAsbytes.field.ld.1, null, !dbg !2273
  %zext.79 = zext i1 %icmp.79 to i8, !dbg !2273
  %trunc.59 = trunc i8 %zext.79 to i1, !dbg !2274
  br i1 %trunc.59, label %then.60, label %else.60

then.60:                                          ; preds = %else.59
  %index.32 = getelementptr [3 x { i8*, i64 }], [3 x { i8*, i64 }]* %tmpv.150, i32 0, i32 0, !dbg !2275
  %cast.787 = bitcast { i8*, i64 }* %index.32 to i8*, !dbg !2275
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.787, i8* align 8 bitcast ({ i8*, i64 }* @const.130 to i8*), i64 16, i1 false), !dbg !2275
  %index.33 = getelementptr [3 x { i8*, i64 }], [3 x { i8*, i64 }]* %tmpv.150, i32 0, i32 1, !dbg !2275
  %cast.788 = bitcast { i8*, i64 }* %index.33 to i8*, !dbg !2275
  %cast.789 = bitcast { i8*, i64 }* %name to i8*, !dbg !2275
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.788, i8* align 8 %cast.789, i64 16, i1 false), !dbg !2275
  %index.34 = getelementptr [3 x { i8*, i64 }], [3 x { i8*, i64 }]* %tmpv.150, i32 0, i32 2, !dbg !2275
  %cast.790 = bitcast { i8*, i64 }* %index.34 to i8*, !dbg !2275
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.790, i8* align 8 bitcast ({ i8*, i64 }* @const.124 to i8*), i64 16, i1 false), !dbg !2275
  %cast.791 = bitcast [3 x { i8*, i64 }]* %tmpv.150 to i8*, !dbg !2275
  %call.42 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.791, i64 3), !dbg !2275
  store { i8*, i64 } %call.42, { i8*, i64 }* %sret.actual.74, align 8, !dbg !2275
  %cast.794 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !2276
  %cast.795 = bitcast { i8*, i64 }* %sret.actual.74 to i8*, !dbg !2276
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.794, i8* align 8 %cast.795, i64 16, i1 false), !dbg !2276
  %field0.54 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %jsonResp, i32 0, i32 0, !dbg !2277
  %ld.100 = load i8*, i8** %field0.54, align 8, !dbg !2277
  %field1.54 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %jsonResp, i32 0, i32 1, !dbg !2277
  %ld.101 = load i64, i64* %field1.54, align 8, !dbg !2277
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.75, i8* nest undef, i8* %ld.100, i64 %ld.101), !dbg !2277
  %cast.797 = bitcast %Response.0* %tmpv.151 to i8*
  %cast.798 = bitcast %Response.0* %sret.actual.75 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.797, i8* align 8 %cast.798, i64 80, i1 false)
  %cast.799 = bitcast %Response.0* %"$ret4" to i8*, !dbg !2278
  %cast.800 = bitcast %Response.0* %tmpv.151 to i8*, !dbg !2278
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.799, i8* align 8 %cast.800, i64 80, i1 false), !dbg !2278
  %cast.801 = bitcast %Response.0* %sret.formal.4 to i8*, !dbg !2278
  %cast.802 = bitcast %Response.0* %"$ret4" to i8*, !dbg !2278
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.801, i8* align 8 %cast.802, i64 80, i1 false), !dbg !2278
  %20 = bitcast { i8*, i64 }* %name to i8*, !dbg !2278
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %20), !dbg !2278
  %21 = bitcast { i8*, i64 }* %jsonResp to i8*, !dbg !2278
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %21), !dbg !2278
  %22 = bitcast %error.0* %err to i8*, !dbg !2278
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %22), !dbg !2278
  %23 = bitcast %IPST.0* %valAsbytes to i8*, !dbg !2278
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %23), !dbg !2278
  %24 = bitcast %Response.0* %"$ret4" to i8*, !dbg !2278
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %24), !dbg !2278
  ret void, !dbg !2278

fallthrough.60:                                   ; preds = %else.60
  br label %fallthrough.59

else.60:                                          ; preds = %else.59
  br label %fallthrough.60
}

define void @command_x2dline_x2darguments.MarblesPrivateChaincode.transferMarble(%Response.0* sret(%Response.0) %sret.formal.8, i8* nest %nest.8, %MarblesPrivateChaincode.0* %t, i8* %stub.chunk0, i8* %stub.chunk1, %IPST.7* byval(%IPST.7) %args) #0 !dbg !2279 {
entry:
  %tmp.24 = alloca %IPST.52, align 8
  %tmp.23 = alloca %IPST.3, align 8
  %tmp.22 = alloca %IPST.3, align 8
  %tmp.21 = alloca { i8*, i64 }, align 8
  %tmp.20 = alloca %IPST.3, align 8
  %tmp.19 = alloca %IPST.52, align 8
  %t.addr = alloca %MarblesPrivateChaincode.0*, align 8
  call void @llvm.dbg.declare(metadata %IPST.7* %args, metadata !2280, metadata !DIExpression()), !dbg !2281
  %stub.addr = alloca %ChaincodeStubInterface.0, align 8
  %"$ret8" = alloca %Response.0, align 8
  %transMap = alloca { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, align 8
  %err = alloca %error.0, align 8
  %marbleOwnerJsonBytes = alloca %IPST.0, align 8
  %ok = alloca i8, align 1
  %marbleTransferInput = alloca %.command-line-arguments.marbleTransferTransientInput.0*, align 8
  %marbleAsBytes = alloca %IPST.0, align 8
  %marbleToTransfer = alloca %.command-line-arguments.marble.0*, align 8
  %marbleJSONasBytes = alloca %IPST.0, align 8
  %"sink$0" = alloca %error.0, align 8
  %tmpv.229 = alloca { i64, %error.0 }, align 8
  %tmpv.230 = alloca [1 x %IPST.3], align 8
  %sret.actual.128 = alloca { i64, %error.0 }, align 8
  %tmpv.231 = alloca %Response.0, align 8
  %sret.actual.129 = alloca %Response.0, align 8
  %tmpv.232 = alloca { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }, align 8
  %sret.actual.130 = alloca { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }, align 8
  %tmpv.233 = alloca { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, align 8
  %tmpv.234 = alloca %error.0, align 8
  %tmpv.235 = alloca { i8*, i64 }, align 8
  %sret.actual.131 = alloca { i8*, i64 }, align 8
  %tmpv.236 = alloca [2 x { i8*, i64 }], align 8
  %tmpv.237 = alloca %Response.0, align 8
  %sret.actual.132 = alloca { i8*, i64 }, align 8
  %sret.actual.133 = alloca %Response.0, align 8
  %tmpv.238 = alloca { i8*, i64 }, align 8
  %tmpv.239 = alloca %IPST.0*, align 8
  %tmpv.240 = alloca i8, align 1
  %tmpv.241 = alloca { i8*, i8 }, align 8
  %sret.actual.134 = alloca { i8*, i8 }, align 8
  %tmpv.242 = alloca i8*, align 8
  %tmpv.243 = alloca i8, align 1
  %tmpv.244 = alloca %Response.0, align 8
  %sret.actual.135 = alloca %Response.0, align 8
  %tmpv.245 = alloca %Response.0, align 8
  %sret.actual.136 = alloca %Response.0, align 8
  %tmpv.246 = alloca %.command-line-arguments.marbleTransferTransientInput.0*, align 8
  %tmpv.247 = alloca %error.0, align 8
  %sret.actual.137 = alloca %error.0, align 8
  %tmpv.248 = alloca [2 x { i8*, i64 }], align 8
  %tmpv.249 = alloca %Response.0, align 8
  %sret.actual.138 = alloca { i8*, i64 }, align 8
  %sret.actual.139 = alloca %Response.0, align 8
  %tmpv.250 = alloca %Response.0, align 8
  %sret.actual.140 = alloca %Response.0, align 8
  %tmpv.251 = alloca %Response.0, align 8
  %sret.actual.141 = alloca %Response.0, align 8
  %tmpv.252 = alloca { %IPST.0, %error.0 }, align 8
  %sret.actual.142 = alloca { %IPST.0, %error.0 }, align 8
  %tmpv.253 = alloca %IPST.0, align 8
  %tmpv.254 = alloca %error.0, align 8
  %tmpv.255 = alloca { i8*, i64 }, align 8
  %sret.actual.143 = alloca { i8*, i64 }, align 8
  %tmpv.256 = alloca [2 x { i8*, i64 }], align 8
  %tmpv.257 = alloca %Response.0, align 8
  %sret.actual.144 = alloca { i8*, i64 }, align 8
  %sret.actual.145 = alloca %Response.0, align 8
  %tmpv.258 = alloca [2 x { i8*, i64 }], align 8
  %tmpv.259 = alloca %Response.0, align 8
  %sret.actual.146 = alloca { i8*, i64 }, align 8
  %sret.actual.147 = alloca %Response.0, align 8
  %tmpv.260 = alloca %.command-line-arguments.marble.0*, align 8
  %tmpv.261 = alloca %.command-line-arguments.marble.0*, align 8
  %tmpv.262 = alloca %.command-line-arguments.marble.0, align 8
  %tmpv.263 = alloca %.command-line-arguments.marble.0*, align 8
  %tmpv.264 = alloca %error.0, align 8
  %sret.actual.148 = alloca %error.0, align 8
  %tmpv.265 = alloca { i8*, i64 }, align 8
  %sret.actual.149 = alloca { i8*, i64 }, align 8
  %tmpv.266 = alloca %Response.0, align 8
  %sret.actual.150 = alloca %Response.0, align 8
  %tmpv.267 = alloca { i8*, i64 }*, align 8
  %tmpv.268 = alloca { i8*, i64 }, align 8
  %tmpv.269 = alloca { i8*, i64 }*, align 8
  %tmpv.270 = alloca { i8*, i64 }*, align 8
  %tmpv.271 = alloca { i8*, i64 }*, align 8
  %tmpv.272 = alloca { %IPST.0, %error.0 }, align 8
  %tmpv.273 = alloca %.command-line-arguments.marble.0*, align 8, !go_addrtaken !46
  %tmpv.274 = alloca %.command-line-arguments.marble.0, align 8, !go_addrtaken !46
  %sret.actual.151 = alloca { %IPST.0, %error.0 }, align 8
  %tmpv.275 = alloca %IPST.0, align 8
  %tmpv.276 = alloca %error.0, align 8
  %tmpv.277 = alloca %error.0, align 8
  %sret.actual.152 = alloca %error.0, align 8
  %tmpv.278 = alloca { i8*, i64 }, align 8
  %sret.actual.153 = alloca { i8*, i64 }, align 8
  %tmpv.279 = alloca %Response.0, align 8
  %sret.actual.154 = alloca %Response.0, align 8
  %tmpv.280 = alloca { i64, %error.0 }, align 8
  %tmpv.281 = alloca [1 x %IPST.3], align 8
  %sret.actual.155 = alloca { i64, %error.0 }, align 8
  %tmpv.282 = alloca i8*, align 8
  %tmpv.283 = alloca %Response.0, align 8
  %sret.actual.156 = alloca %Response.0, align 8
  store %MarblesPrivateChaincode.0* %t, %MarblesPrivateChaincode.0** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %MarblesPrivateChaincode.0** %t.addr, metadata !2282, metadata !DIExpression()), !dbg !2283
  %cast.1461 = bitcast %ChaincodeStubInterface.0* %stub.addr to { i8*, i8* }*
  %field0.113 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1461, i32 0, i32 0
  store i8* %stub.chunk0, i8** %field0.113, align 8
  %field1.113 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1461, i32 0, i32 1
  store i8* %stub.chunk1, i8** %field1.113, align 8
  call void @llvm.dbg.declare(metadata %ChaincodeStubInterface.0* %stub.addr, metadata !2284, metadata !DIExpression()), !dbg !2285
  %0 = bitcast %Response.0* %"$ret8" to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* %0)
  %cast.1460 = bitcast %Response.0* %"$ret8" to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1460, i8* align 8 bitcast (%Response.0* @const.44 to i8*), i64 80, i1 false)
  call void @llvm.dbg.declare(metadata %Response.0* %"$ret8", metadata !2286, metadata !DIExpression()), !dbg !2287
  %1 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1)
  %2 = bitcast %error.0* %err to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %2)
  %3 = bitcast %IPST.0* %marbleOwnerJsonBytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %3)
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %ok)
  %4 = bitcast %.command-line-arguments.marbleTransferTransientInput.0** %marbleTransferInput to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4)
  %5 = bitcast %IPST.0* %marbleAsBytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %5)
  %6 = bitcast %.command-line-arguments.marble.0** %marbleToTransfer to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6)
  %7 = bitcast %IPST.0* %marbleJSONasBytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %7)
  %8 = bitcast %error.0* %"sink$0" to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %8)
  %cast.1223 = bitcast [1 x %IPST.3]* %tmpv.230 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1223, i8* align 8 bitcast ([1 x %IPST.3]* @const.159 to i8*), i64 16, i1 false)
  %cast.1224 = bitcast [1 x %IPST.3]* %tmpv.230 to %IPST.3*, !dbg !2288
  %field.332 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.19, i32 0, i32 0, !dbg !2288
  store %IPST.3* %cast.1224, %IPST.3** %field.332, align 8, !dbg !2288
  %field.333 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.19, i32 0, i32 1, !dbg !2288
  store i64 1, i64* %field.333, align 8, !dbg !2288
  %field.334 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.19, i32 0, i32 2, !dbg !2288
  store i64 1, i64* %field.334, align 8, !dbg !2288
  call void @fmt.Println({ i64, %error.0 }* sret({ i64, %error.0 }) "go_sret" %sret.actual.128, i8* nest undef, %IPST.52* byval(%IPST.52) %tmp.19), !dbg !2288
  %cast.1225 = bitcast { i64, %error.0 }* %tmpv.229 to i8*, !dbg !2288
  %cast.1226 = bitcast { i64, %error.0 }* %sret.actual.128 to i8*, !dbg !2288
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1225, i8* align 8 %cast.1226, i64 24, i1 false), !dbg !2288
  %field.335 = getelementptr inbounds %IPST.7, %IPST.7* %args, i32 0, i32 1, !dbg !2290
  %args.field.ld.18 = load i64, i64* %field.335, align 8, !dbg !2290
  %icmp.105 = icmp ne i64 %args.field.ld.18, 0, !dbg !2291
  %zext.105 = zext i1 %icmp.105 to i8, !dbg !2291
  %trunc.83 = trunc i8 %zext.105 to i1, !dbg !2292
  br i1 %trunc.83, label %then.83, label %else.83

then.83:                                          ; preds = %entry
  %ld.172 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.64, i32 0, i32 0), align 8, !dbg !2293
  %ld.173 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.64, i32 0, i32 1), align 8, !dbg !2293
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.129, i8* nest undef, i8* %ld.172, i64 %ld.173), !dbg !2293
  %cast.1228 = bitcast %Response.0* %tmpv.231 to i8*
  %cast.1229 = bitcast %Response.0* %sret.actual.129 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1228, i8* align 8 %cast.1229, i64 80, i1 false)
  %cast.1230 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2294
  %cast.1231 = bitcast %Response.0* %tmpv.231 to i8*, !dbg !2294
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1230, i8* align 8 %cast.1231, i64 80, i1 false), !dbg !2294
  %cast.1232 = bitcast %Response.0* %sret.formal.8 to i8*, !dbg !2294
  %cast.1233 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2294
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1232, i8* align 8 %cast.1233, i64 80, i1 false), !dbg !2294
  %9 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2294
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %9), !dbg !2294
  %10 = bitcast %error.0* %err to i8*, !dbg !2294
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %10), !dbg !2294
  %11 = bitcast %IPST.0* %marbleOwnerJsonBytes to i8*, !dbg !2294
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %11), !dbg !2294
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2294
  %12 = bitcast %.command-line-arguments.marbleTransferTransientInput.0** %marbleTransferInput to i8*, !dbg !2294
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %12), !dbg !2294
  %13 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2294
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %13), !dbg !2294
  %14 = bitcast %.command-line-arguments.marble.0** %marbleToTransfer to i8*, !dbg !2294
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %14), !dbg !2294
  %15 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2294
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %15), !dbg !2294
  %16 = bitcast %error.0* %"sink$0" to i8*, !dbg !2294
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %16), !dbg !2294
  %17 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2294
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %17), !dbg !2294
  ret void, !dbg !2294

fallthrough.83:                                   ; preds = %else.83
  %field.336 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 0, !dbg !2295
  %stub.field.ld.34 = load { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }** %field.336, align 8, !dbg !2295
  %field.337 = getelementptr inbounds { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }* %stub.field.ld.34, i32 0, i32 28, !dbg !2295
  %.field.ld.37 = load void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)** %field.337, align 8, !dbg !2295
  %field.338 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 1, !dbg !2295
  %stub.field.ld.35 = load i8*, i8** %field.338, align 8, !dbg !2295
  call void %.field.ld.37({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }* sret({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }) "go_sret" %sret.actual.130, i8* nest undef, i8* %stub.field.ld.35), !dbg !2295
  %cast.1234 = bitcast { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }* %tmpv.232 to i8*, !dbg !2295
  %cast.1235 = bitcast { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }* %sret.actual.130 to i8*, !dbg !2295
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1234, i8* align 8 %cast.1235, i64 24, i1 false), !dbg !2295
  %field.339 = getelementptr inbounds { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }, { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }* %tmpv.232, i32 0, i32 0, !dbg !2295
  %tmpv.232.field.ld.0 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %field.339, align 8, !dbg !2295
  store { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %tmpv.232.field.ld.0, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %tmpv.233, align 8
  %tmpv.233.ld.0 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %tmpv.233, align 8, !dbg !2295
  store { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %tmpv.233.ld.0, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap, align 8
  call void @llvm.dbg.declare(metadata { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap, metadata !2296, metadata !DIExpression()), !dbg !2297
  %field.340 = getelementptr inbounds { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }, { { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }* %tmpv.232, i32 0, i32 1, !dbg !2295
  %cast.1236 = bitcast %error.0* %tmpv.234 to i8*
  %cast.1237 = bitcast %error.0* %field.340 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1236, i8* align 8 %cast.1237, i64 16, i1 false)
  %cast.1238 = bitcast %error.0* %err to i8*
  %cast.1239 = bitcast %error.0* %tmpv.234 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1238, i8* align 8 %cast.1239, i64 16, i1 false)
  call void @llvm.dbg.declare(metadata %error.0* %err, metadata !2298, metadata !DIExpression()), !dbg !2297
  %field.344 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2299
  %err.field.ld.55 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.344, align 8, !dbg !2299
  %icmp.106 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.55, null, !dbg !2299
  %zext.106 = zext i1 %icmp.106 to i8, !dbg !2299
  %trunc.84 = trunc i8 %zext.106 to i1, !dbg !2300
  br i1 %trunc.84, label %then.84, label %else.84

else.83:                                          ; preds = %entry
  br label %fallthrough.83

then.84:                                          ; preds = %fallthrough.83
  %field.341 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2301
  %err.field.ld.53 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.341, align 8, !dbg !2301
  %field.342 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.53, i32 0, i32 1, !dbg !2301
  %.field.ld.38 = load { i8*, i64 } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)** %field.342, align 8, !dbg !2301
  %field.343 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !2301
  %err.field.ld.54 = load i8*, i8** %field.343, align 8, !dbg !2301
  %call.69 = call { i8*, i64 } %.field.ld.38(i8* nest undef, i8* %err.field.ld.54), !dbg !2301
  store { i8*, i64 } %call.69, { i8*, i64 }* %sret.actual.131, align 8, !dbg !2301
  %cast.1241 = bitcast { i8*, i64 }* %tmpv.235 to i8*
  %cast.1242 = bitcast { i8*, i64 }* %sret.actual.131 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1241, i8* align 8 %cast.1242, i64 16, i1 false)
  %index.65 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.236, i32 0, i32 0, !dbg !2302
  %cast.1243 = bitcast { i8*, i64 }* %index.65 to i8*, !dbg !2302
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1243, i8* align 8 bitcast ({ i8*, i64 }* @const.66 to i8*), i64 16, i1 false), !dbg !2302
  %index.66 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.236, i32 0, i32 1, !dbg !2302
  %cast.1244 = bitcast { i8*, i64 }* %index.66 to i8*, !dbg !2302
  %cast.1245 = bitcast { i8*, i64 }* %tmpv.235 to i8*, !dbg !2302
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1244, i8* align 8 %cast.1245, i64 16, i1 false), !dbg !2302
  %cast.1246 = bitcast [2 x { i8*, i64 }]* %tmpv.236 to i8*, !dbg !2302
  %call.70 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.1246, i64 2), !dbg !2302
  store { i8*, i64 } %call.70, { i8*, i64 }* %sret.actual.132, align 8, !dbg !2302
  %field0.95 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.132, i32 0, i32 0, !dbg !2303
  %ld.174 = load i8*, i8** %field0.95, align 8, !dbg !2303
  %field1.95 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.132, i32 0, i32 1, !dbg !2303
  %ld.175 = load i64, i64* %field1.95, align 8, !dbg !2303
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.133, i8* nest undef, i8* %ld.174, i64 %ld.175), !dbg !2303
  %cast.1250 = bitcast %Response.0* %tmpv.237 to i8*
  %cast.1251 = bitcast %Response.0* %sret.actual.133 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1250, i8* align 8 %cast.1251, i64 80, i1 false)
  %cast.1252 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2304
  %cast.1253 = bitcast %Response.0* %tmpv.237 to i8*, !dbg !2304
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1252, i8* align 8 %cast.1253, i64 80, i1 false), !dbg !2304
  %cast.1254 = bitcast %Response.0* %sret.formal.8 to i8*, !dbg !2304
  %cast.1255 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2304
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1254, i8* align 8 %cast.1255, i64 80, i1 false), !dbg !2304
  %18 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2304
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18), !dbg !2304
  %19 = bitcast %error.0* %err to i8*, !dbg !2304
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %19), !dbg !2304
  %20 = bitcast %IPST.0* %marbleOwnerJsonBytes to i8*, !dbg !2304
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %20), !dbg !2304
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2304
  %21 = bitcast %.command-line-arguments.marbleTransferTransientInput.0** %marbleTransferInput to i8*, !dbg !2304
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %21), !dbg !2304
  %22 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2304
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %22), !dbg !2304
  %23 = bitcast %.command-line-arguments.marble.0** %marbleToTransfer to i8*, !dbg !2304
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %23), !dbg !2304
  %24 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2304
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %24), !dbg !2304
  %25 = bitcast %error.0* %"sink$0" to i8*, !dbg !2304
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %25), !dbg !2304
  %26 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2304
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %26), !dbg !2304
  ret void, !dbg !2304

fallthrough.84:                                   ; preds = %else.84
  %cast.1257 = bitcast %IPST.0* %marbleOwnerJsonBytes to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1257, i8* align 8 bitcast (%IPST.0* @const.43 to i8*), i64 24, i1 false)
  call void @llvm.dbg.declare(metadata %IPST.0* %marbleOwnerJsonBytes, metadata !2305, metadata !DIExpression()), !dbg !2306
  store i8 0, i8* %ok, align 1
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !2307, metadata !DIExpression()), !dbg !2306
  %cast.1258 = bitcast { i8*, i64 }* %tmpv.238 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1258, i8* align 8 bitcast ({ i8*, i64 }* @const.161 to i8*), i64 16, i1 false)
  %transMap.ld.2 = load { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap, align 8, !dbg !2308
  %field0.96 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.238, i32 0, i32 0, !dbg !2309
  %ld.176 = load i8*, i8** %field0.96, align 8, !dbg !2309
  %field1.96 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.238, i32 0, i32 1, !dbg !2309
  %ld.177 = load i64, i64* %field1.96, align 8, !dbg !2309
  %call.71 = call { i8*, i8 } @runtime.mapaccess2__faststr(i8* nest undef, %_type.0* getelementptr inbounds (%MapType.0, %MapType.0* @type..map_6string_7_6_7uint8, i32 0, i32 0), { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* %transMap.ld.2, i8* %ld.176, i64 %ld.177), !dbg !2309
  store { i8*, i8 } %call.71, { i8*, i8 }* %sret.actual.134, align 8, !dbg !2309
  %cast.1262 = bitcast { i8*, i8 }* %tmpv.241 to i8*, !dbg !2309
  %cast.1263 = bitcast { i8*, i8 }* %sret.actual.134 to i8*, !dbg !2309
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1262, i8* align 8 %cast.1263, i64 16, i1 false), !dbg !2309
  %field.345 = getelementptr inbounds { i8*, i8 }, { i8*, i8 }* %tmpv.241, i32 0, i32 0, !dbg !2309
  %tmpv.241.field.ld.0 = load i8*, i8** %field.345, align 8, !dbg !2309
  store i8* %tmpv.241.field.ld.0, i8** %tmpv.242, align 8
  %tmpv.242.ld.0 = load i8*, i8** %tmpv.242, align 8, !dbg !2309
  %cast.1264 = bitcast i8* %tmpv.242.ld.0 to %IPST.0*, !dbg !2309
  store %IPST.0* %cast.1264, %IPST.0** %tmpv.239, align 8, !dbg !2309
  %field.346 = getelementptr inbounds { i8*, i8 }, { i8*, i8 }* %tmpv.241, i32 0, i32 1, !dbg !2309
  %tmpv.241.field.ld.1 = load i8, i8* %field.346, align 1, !dbg !2309
  store i8 %tmpv.241.field.ld.1, i8* %tmpv.243, align 1
  %tmpv.243.ld.0 = load i8, i8* %tmpv.243, align 1, !dbg !2309
  store i8 %tmpv.243.ld.0, i8* %tmpv.240, align 1, !dbg !2309
  %tmpv.239.ld.0 = load %IPST.0*, %IPST.0** %tmpv.239, align 8, !dbg !2309
  %cast.1265 = bitcast %IPST.0* %marbleOwnerJsonBytes to i8*, !dbg !2309
  %cast.1266 = bitcast %IPST.0* %tmpv.239.ld.0 to i8*, !dbg !2309
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1265, i8* align 8 %cast.1266, i64 24, i1 false), !dbg !2309
  %tmpv.240.ld.0 = load i8, i8* %tmpv.240, align 1, !dbg !2309
  store i8 %tmpv.240.ld.0, i8* %ok, align 1, !dbg !2309
  %ok.ld.2 = load i8, i8* %ok, align 1, !dbg !2310
  %icmp.107 = icmp ne i8 %ok.ld.2, 0, !dbg !2311
  %xor.11 = xor i1 %icmp.107, true, !dbg !2311
  %zext.107 = zext i1 %xor.11 to i8, !dbg !2311
  %trunc.85 = trunc i8 %zext.107 to i1, !dbg !2312
  br i1 %trunc.85, label %then.85, label %else.85

else.84:                                          ; preds = %fallthrough.83
  br label %fallthrough.84

then.85:                                          ; preds = %fallthrough.84
  %ld.178 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.163, i32 0, i32 0), align 8, !dbg !2313
  %ld.179 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.163, i32 0, i32 1), align 8, !dbg !2313
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.135, i8* nest undef, i8* %ld.178, i64 %ld.179), !dbg !2313
  %cast.1268 = bitcast %Response.0* %tmpv.244 to i8*
  %cast.1269 = bitcast %Response.0* %sret.actual.135 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1268, i8* align 8 %cast.1269, i64 80, i1 false)
  %cast.1270 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2314
  %cast.1271 = bitcast %Response.0* %tmpv.244 to i8*, !dbg !2314
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1270, i8* align 8 %cast.1271, i64 80, i1 false), !dbg !2314
  %cast.1272 = bitcast %Response.0* %sret.formal.8 to i8*, !dbg !2314
  %cast.1273 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2314
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1272, i8* align 8 %cast.1273, i64 80, i1 false), !dbg !2314
  %27 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2314
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %27), !dbg !2314
  %28 = bitcast %error.0* %err to i8*, !dbg !2314
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %28), !dbg !2314
  %29 = bitcast %IPST.0* %marbleOwnerJsonBytes to i8*, !dbg !2314
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %29), !dbg !2314
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2314
  %30 = bitcast %.command-line-arguments.marbleTransferTransientInput.0** %marbleTransferInput to i8*, !dbg !2314
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30), !dbg !2314
  %31 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2314
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %31), !dbg !2314
  %32 = bitcast %.command-line-arguments.marble.0** %marbleToTransfer to i8*, !dbg !2314
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %32), !dbg !2314
  %33 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2314
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %33), !dbg !2314
  %34 = bitcast %error.0* %"sink$0" to i8*, !dbg !2314
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %34), !dbg !2314
  %35 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2314
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %35), !dbg !2314
  ret void, !dbg !2314

fallthrough.85:                                   ; preds = %else.85
  %field.347 = getelementptr inbounds %IPST.0, %IPST.0* %marbleOwnerJsonBytes, i32 0, i32 1, !dbg !2315
  %marbleOwnerJsonBytes.field.ld.0 = load i64, i64* %field.347, align 8, !dbg !2315
  %icmp.108 = icmp eq i64 %marbleOwnerJsonBytes.field.ld.0, 0, !dbg !2316
  %zext.108 = zext i1 %icmp.108 to i8, !dbg !2316
  %trunc.86 = trunc i8 %zext.108 to i1, !dbg !2317
  br i1 %trunc.86, label %then.86, label %else.86

else.85:                                          ; preds = %fallthrough.84
  br label %fallthrough.85

then.86:                                          ; preds = %fallthrough.85
  %ld.180 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.165, i32 0, i32 0), align 8, !dbg !2318
  %ld.181 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.165, i32 0, i32 1), align 8, !dbg !2318
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.136, i8* nest undef, i8* %ld.180, i64 %ld.181), !dbg !2318
  %cast.1275 = bitcast %Response.0* %tmpv.245 to i8*
  %cast.1276 = bitcast %Response.0* %sret.actual.136 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1275, i8* align 8 %cast.1276, i64 80, i1 false)
  %cast.1277 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2319
  %cast.1278 = bitcast %Response.0* %tmpv.245 to i8*, !dbg !2319
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1277, i8* align 8 %cast.1278, i64 80, i1 false), !dbg !2319
  %cast.1279 = bitcast %Response.0* %sret.formal.8 to i8*, !dbg !2319
  %cast.1280 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2319
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1279, i8* align 8 %cast.1280, i64 80, i1 false), !dbg !2319
  %36 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2319
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %36), !dbg !2319
  %37 = bitcast %error.0* %err to i8*, !dbg !2319
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %37), !dbg !2319
  %38 = bitcast %IPST.0* %marbleOwnerJsonBytes to i8*, !dbg !2319
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %38), !dbg !2319
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2319
  %39 = bitcast %.command-line-arguments.marbleTransferTransientInput.0** %marbleTransferInput to i8*, !dbg !2319
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %39), !dbg !2319
  %40 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2319
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %40), !dbg !2319
  %41 = bitcast %.command-line-arguments.marble.0** %marbleToTransfer to i8*, !dbg !2319
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %41), !dbg !2319
  %42 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2319
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %42), !dbg !2319
  %43 = bitcast %error.0* %"sink$0" to i8*, !dbg !2319
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %43), !dbg !2319
  %44 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2319
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %44), !dbg !2319
  ret void, !dbg !2319

fallthrough.86:                                   ; preds = %else.86
  %call.72 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @command_x2dline_x2darguments_0MarblesPrivateChaincode_0transferMarble_0marbleTransferTransientInput..d, i32 0, i32 0)), !dbg !2320
  %cast.1289 = bitcast i8* %call.72 to %.command-line-arguments.marbleTransferTransientInput.0*, !dbg !2320
  store %.command-line-arguments.marbleTransferTransientInput.0* %cast.1289, %.command-line-arguments.marbleTransferTransientInput.0** %tmpv.246, align 8
  %tmpv.246.ld.0 = load %.command-line-arguments.marbleTransferTransientInput.0*, %.command-line-arguments.marbleTransferTransientInput.0** %tmpv.246, align 8, !dbg !2320
  store %.command-line-arguments.marbleTransferTransientInput.0* %tmpv.246.ld.0, %.command-line-arguments.marbleTransferTransientInput.0** %marbleTransferInput, align 8
  call void @llvm.dbg.declare(metadata %.command-line-arguments.marbleTransferTransientInput.0** %marbleTransferInput, metadata !2321, metadata !DIExpression()), !dbg !2327
  %marbleTransferInput.ld.0 = load %.command-line-arguments.marbleTransferTransientInput.0*, %.command-line-arguments.marbleTransferTransientInput.0** %marbleTransferInput, align 8, !dbg !2328
  %field.348 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.20, i32 0, i32 0, !dbg !2329
  store %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @command_x2dline_x2darguments_0MarblesPrivateChaincode_0transferMarble_0marbleTransferTransientInput..p, i32 0, i32 0), %_type.0** %field.348, align 8, !dbg !2329
  %field.349 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.20, i32 0, i32 1, !dbg !2329
  %cast.1291 = bitcast %.command-line-arguments.marbleTransferTransientInput.0* %marbleTransferInput.ld.0 to i8*, !dbg !2329
  store i8* %cast.1291, i8** %field.349, align 8, !dbg !2329
  %cast.1292 = bitcast %IPST.3* %tmp.20 to { i8*, i8* }*, !dbg !2329
  %field0.99 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1292, i32 0, i32 0, !dbg !2329
  %ld.182 = load i8*, i8** %field0.99, align 8, !dbg !2329
  %field1.99 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1292, i32 0, i32 1, !dbg !2329
  %ld.183 = load i8*, i8** %field1.99, align 8, !dbg !2329
  %call.73 = call { i8*, i8* } @encoding_1json.Unmarshal(i8* nest undef, %IPST.0* byval(%IPST.0) %marbleOwnerJsonBytes, i8* %ld.182, i8* %ld.183), !dbg !2329
  %cast.1293 = bitcast %error.0* %sret.actual.137 to { i8*, i8* }*, !dbg !2329
  store { i8*, i8* } %call.73, { i8*, i8* }* %cast.1293, align 8, !dbg !2329
  %cast.1294 = bitcast %error.0* %tmpv.247 to i8*
  %cast.1295 = bitcast %error.0* %sret.actual.137 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1294, i8* align 8 %cast.1295, i64 16, i1 false)
  %cast.1296 = bitcast %error.0* %err to i8*, !dbg !2330
  %cast.1297 = bitcast %error.0* %tmpv.247 to i8*, !dbg !2330
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1296, i8* align 8 %cast.1297, i64 16, i1 false), !dbg !2330
  %field.354 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2331
  %err.field.ld.56 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.354, align 8, !dbg !2331
  %icmp.109 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.56, null, !dbg !2331
  %zext.109 = zext i1 %icmp.109 to i8, !dbg !2331
  %trunc.87 = trunc i8 %zext.109 to i1, !dbg !2332
  br i1 %trunc.87, label %then.87, label %else.87

else.86:                                          ; preds = %fallthrough.85
  br label %fallthrough.86

then.87:                                          ; preds = %fallthrough.86
  %field.350 = getelementptr inbounds %IPST.0, %IPST.0* %marbleOwnerJsonBytes, i32 0, i32 0, !dbg !2333
  %marbleOwnerJsonBytes.field.ld.1 = load i8*, i8** %field.350, align 8, !dbg !2333
  %field.351 = getelementptr inbounds %IPST.0, %IPST.0* %marbleOwnerJsonBytes, i32 0, i32 1, !dbg !2333
  %marbleOwnerJsonBytes.field.ld.2 = load i64, i64* %field.351, align 8, !dbg !2333
  %field.352 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmp.21, i32 0, i32 0, !dbg !2333
  store i8* %marbleOwnerJsonBytes.field.ld.1, i8** %field.352, align 8, !dbg !2333
  %field.353 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmp.21, i32 0, i32 1, !dbg !2333
  store i64 %marbleOwnerJsonBytes.field.ld.2, i64* %field.353, align 8, !dbg !2333
  %index.67 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.248, i32 0, i32 0, !dbg !2334
  %cast.1298 = bitcast { i8*, i64 }* %index.67 to i8*, !dbg !2334
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1298, i8* align 8 bitcast ({ i8*, i64 }* @const.89 to i8*), i64 16, i1 false), !dbg !2334
  %index.68 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.248, i32 0, i32 1, !dbg !2334
  %cast.1299 = bitcast { i8*, i64 }* %index.68 to i8*, !dbg !2334
  %cast.1300 = bitcast { i8*, i64 }* %tmp.21 to i8*, !dbg !2334
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1299, i8* align 8 %cast.1300, i64 16, i1 false), !dbg !2334
  %cast.1301 = bitcast [2 x { i8*, i64 }]* %tmpv.248 to i8*, !dbg !2334
  %call.74 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.1301, i64 2), !dbg !2334
  store { i8*, i64 } %call.74, { i8*, i64 }* %sret.actual.138, align 8, !dbg !2334
  %field0.100 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.138, i32 0, i32 0, !dbg !2335
  %ld.184 = load i8*, i8** %field0.100, align 8, !dbg !2335
  %field1.100 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.138, i32 0, i32 1, !dbg !2335
  %ld.185 = load i64, i64* %field1.100, align 8, !dbg !2335
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.139, i8* nest undef, i8* %ld.184, i64 %ld.185), !dbg !2335
  %cast.1305 = bitcast %Response.0* %tmpv.249 to i8*
  %cast.1306 = bitcast %Response.0* %sret.actual.139 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1305, i8* align 8 %cast.1306, i64 80, i1 false)
  %cast.1307 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2336
  %cast.1308 = bitcast %Response.0* %tmpv.249 to i8*, !dbg !2336
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1307, i8* align 8 %cast.1308, i64 80, i1 false), !dbg !2336
  %cast.1309 = bitcast %Response.0* %sret.formal.8 to i8*, !dbg !2336
  %cast.1310 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2336
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1309, i8* align 8 %cast.1310, i64 80, i1 false), !dbg !2336
  %45 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2336
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %45), !dbg !2336
  %46 = bitcast %error.0* %err to i8*, !dbg !2336
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %46), !dbg !2336
  %47 = bitcast %IPST.0* %marbleOwnerJsonBytes to i8*, !dbg !2336
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %47), !dbg !2336
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2336
  %48 = bitcast %.command-line-arguments.marbleTransferTransientInput.0** %marbleTransferInput to i8*, !dbg !2336
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %48), !dbg !2336
  %49 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2336
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %49), !dbg !2336
  %50 = bitcast %.command-line-arguments.marble.0** %marbleToTransfer to i8*, !dbg !2336
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %50), !dbg !2336
  %51 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2336
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %51), !dbg !2336
  %52 = bitcast %error.0* %"sink$0" to i8*, !dbg !2336
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %52), !dbg !2336
  %53 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2336
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %53), !dbg !2336
  ret void, !dbg !2336

fallthrough.87:                                   ; preds = %else.87
  %marbleTransferInput.ld.1 = load %.command-line-arguments.marbleTransferTransientInput.0*, %.command-line-arguments.marbleTransferTransientInput.0** %marbleTransferInput, align 8, !dbg !2337
  %field.355 = getelementptr inbounds %.command-line-arguments.marbleTransferTransientInput.0, %.command-line-arguments.marbleTransferTransientInput.0* %marbleTransferInput.ld.1, i32 0, i32 0, !dbg !2338
  %field.356 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %field.355, i32 0, i32 1, !dbg !2339
  %.field.field.ld.4 = load i64, i64* %field.356, align 8, !dbg !2339
  %icmp.110 = icmp eq i64 %.field.field.ld.4, 0, !dbg !2340
  %zext.110 = zext i1 %icmp.110 to i8, !dbg !2340
  %trunc.88 = trunc i8 %zext.110 to i1, !dbg !2341
  br i1 %trunc.88, label %then.88, label %else.88

else.87:                                          ; preds = %fallthrough.86
  br label %fallthrough.87

then.88:                                          ; preds = %fallthrough.87
  %ld.186 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.91, i32 0, i32 0), align 8, !dbg !2342
  %ld.187 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.91, i32 0, i32 1), align 8, !dbg !2342
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.140, i8* nest undef, i8* %ld.186, i64 %ld.187), !dbg !2342
  %cast.1313 = bitcast %Response.0* %tmpv.250 to i8*
  %cast.1314 = bitcast %Response.0* %sret.actual.140 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1313, i8* align 8 %cast.1314, i64 80, i1 false)
  %cast.1315 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2343
  %cast.1316 = bitcast %Response.0* %tmpv.250 to i8*, !dbg !2343
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1315, i8* align 8 %cast.1316, i64 80, i1 false), !dbg !2343
  %cast.1317 = bitcast %Response.0* %sret.formal.8 to i8*, !dbg !2343
  %cast.1318 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2343
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1317, i8* align 8 %cast.1318, i64 80, i1 false), !dbg !2343
  %54 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2343
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %54), !dbg !2343
  %55 = bitcast %error.0* %err to i8*, !dbg !2343
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %55), !dbg !2343
  %56 = bitcast %IPST.0* %marbleOwnerJsonBytes to i8*, !dbg !2343
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %56), !dbg !2343
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2343
  %57 = bitcast %.command-line-arguments.marbleTransferTransientInput.0** %marbleTransferInput to i8*, !dbg !2343
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %57), !dbg !2343
  %58 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2343
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %58), !dbg !2343
  %59 = bitcast %.command-line-arguments.marble.0** %marbleToTransfer to i8*, !dbg !2343
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %59), !dbg !2343
  %60 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2343
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %60), !dbg !2343
  %61 = bitcast %error.0* %"sink$0" to i8*, !dbg !2343
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %61), !dbg !2343
  %62 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2343
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %62), !dbg !2343
  ret void, !dbg !2343

fallthrough.88:                                   ; preds = %else.88
  %marbleTransferInput.ld.2 = load %.command-line-arguments.marbleTransferTransientInput.0*, %.command-line-arguments.marbleTransferTransientInput.0** %marbleTransferInput, align 8, !dbg !2344
  %field.357 = getelementptr inbounds %.command-line-arguments.marbleTransferTransientInput.0, %.command-line-arguments.marbleTransferTransientInput.0* %marbleTransferInput.ld.2, i32 0, i32 1, !dbg !2345
  %field.358 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %field.357, i32 0, i32 1, !dbg !2346
  %.field.field.ld.5 = load i64, i64* %field.358, align 8, !dbg !2346
  %icmp.111 = icmp eq i64 %.field.field.ld.5, 0, !dbg !2347
  %zext.111 = zext i1 %icmp.111 to i8, !dbg !2347
  %trunc.89 = trunc i8 %zext.111 to i1, !dbg !2348
  br i1 %trunc.89, label %then.89, label %else.89

else.88:                                          ; preds = %fallthrough.87
  br label %fallthrough.88

then.89:                                          ; preds = %fallthrough.88
  %ld.188 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.97, i32 0, i32 0), align 8, !dbg !2349
  %ld.189 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.97, i32 0, i32 1), align 8, !dbg !2349
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.141, i8* nest undef, i8* %ld.188, i64 %ld.189), !dbg !2349
  %cast.1320 = bitcast %Response.0* %tmpv.251 to i8*
  %cast.1321 = bitcast %Response.0* %sret.actual.141 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1320, i8* align 8 %cast.1321, i64 80, i1 false)
  %cast.1322 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2350
  %cast.1323 = bitcast %Response.0* %tmpv.251 to i8*, !dbg !2350
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1322, i8* align 8 %cast.1323, i64 80, i1 false), !dbg !2350
  %cast.1324 = bitcast %Response.0* %sret.formal.8 to i8*, !dbg !2350
  %cast.1325 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2350
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1324, i8* align 8 %cast.1325, i64 80, i1 false), !dbg !2350
  %63 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2350
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %63), !dbg !2350
  %64 = bitcast %error.0* %err to i8*, !dbg !2350
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %64), !dbg !2350
  %65 = bitcast %IPST.0* %marbleOwnerJsonBytes to i8*, !dbg !2350
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %65), !dbg !2350
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2350
  %66 = bitcast %.command-line-arguments.marbleTransferTransientInput.0** %marbleTransferInput to i8*, !dbg !2350
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %66), !dbg !2350
  %67 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2350
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %67), !dbg !2350
  %68 = bitcast %.command-line-arguments.marble.0** %marbleToTransfer to i8*, !dbg !2350
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %68), !dbg !2350
  %69 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2350
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %69), !dbg !2350
  %70 = bitcast %error.0* %"sink$0" to i8*, !dbg !2350
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %70), !dbg !2350
  %71 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2350
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %71), !dbg !2350
  ret void, !dbg !2350

fallthrough.89:                                   ; preds = %else.89
  %field.359 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 0, !dbg !2351
  %stub.field.ld.36 = load { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }** %field.359, align 8, !dbg !2351
  %field.360 = getelementptr inbounds { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }* %stub.field.ld.36, i32 0, i32 12, !dbg !2351
  %.field.ld.39 = load void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)** %field.360, align 8, !dbg !2351
  %field.361 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 1, !dbg !2351
  %stub.field.ld.37 = load i8*, i8** %field.361, align 8, !dbg !2351
  %marbleTransferInput.ld.3 = load %.command-line-arguments.marbleTransferTransientInput.0*, %.command-line-arguments.marbleTransferTransientInput.0** %marbleTransferInput, align 8, !dbg !2352
  %field.362 = getelementptr inbounds %.command-line-arguments.marbleTransferTransientInput.0, %.command-line-arguments.marbleTransferTransientInput.0* %marbleTransferInput.ld.3, i32 0, i32 0, !dbg !2353
  %ld.190 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.101, i32 0, i32 0), align 8, !dbg !2351
  %ld.191 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.101, i32 0, i32 1), align 8, !dbg !2351
  %field0.104 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %field.362, i32 0, i32 0, !dbg !2351
  %ld.192 = load i8*, i8** %field0.104, align 8, !dbg !2351
  %field1.104 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %field.362, i32 0, i32 1, !dbg !2351
  %ld.193 = load i64, i64* %field1.104, align 8, !dbg !2351
  call void %.field.ld.39({ %IPST.0, %error.0 }* sret({ %IPST.0, %error.0 }) "go_sret" %sret.actual.142, i8* nest undef, i8* %stub.field.ld.37, i8* %ld.190, i64 %ld.191, i8* %ld.192, i64 %ld.193), !dbg !2351
  %cast.1328 = bitcast { %IPST.0, %error.0 }* %tmpv.252 to i8*, !dbg !2351
  %cast.1329 = bitcast { %IPST.0, %error.0 }* %sret.actual.142 to i8*, !dbg !2351
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1328, i8* align 8 %cast.1329, i64 40, i1 false), !dbg !2351
  %field.363 = getelementptr inbounds { %IPST.0, %error.0 }, { %IPST.0, %error.0 }* %tmpv.252, i32 0, i32 0, !dbg !2351
  %cast.1330 = bitcast %IPST.0* %tmpv.253 to i8*
  %cast.1331 = bitcast %IPST.0* %field.363 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1330, i8* align 8 %cast.1331, i64 24, i1 false)
  %cast.1332 = bitcast %IPST.0* %marbleAsBytes to i8*
  %cast.1333 = bitcast %IPST.0* %tmpv.253 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1332, i8* align 8 %cast.1333, i64 24, i1 false)
  call void @llvm.dbg.declare(metadata %IPST.0* %marbleAsBytes, metadata !2354, metadata !DIExpression()), !dbg !2355
  %field.364 = getelementptr inbounds { %IPST.0, %error.0 }, { %IPST.0, %error.0 }* %tmpv.252, i32 0, i32 1, !dbg !2351
  %cast.1334 = bitcast %error.0* %tmpv.254 to i8*
  %cast.1335 = bitcast %error.0* %field.364 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1334, i8* align 8 %cast.1335, i64 16, i1 false)
  %cast.1336 = bitcast %error.0* %err to i8*, !dbg !2356
  %cast.1337 = bitcast %error.0* %tmpv.254 to i8*, !dbg !2356
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1336, i8* align 8 %cast.1337, i64 16, i1 false), !dbg !2356
  %field.370 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2357
  %err.field.ld.59 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.370, align 8, !dbg !2357
  %icmp.113 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.59, null, !dbg !2357
  %zext.113 = zext i1 %icmp.113 to i8, !dbg !2357
  %trunc.91 = trunc i8 %zext.113 to i1, !dbg !2358
  br i1 %trunc.91, label %then.90, label %else.90

else.89:                                          ; preds = %fallthrough.88
  br label %fallthrough.89

then.90:                                          ; preds = %fallthrough.89
  %field.365 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2359
  %err.field.ld.57 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.365, align 8, !dbg !2359
  %field.366 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.57, i32 0, i32 1, !dbg !2359
  %.field.ld.40 = load { i8*, i64 } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)** %field.366, align 8, !dbg !2359
  %field.367 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !2359
  %err.field.ld.58 = load i8*, i8** %field.367, align 8, !dbg !2359
  %call.75 = call { i8*, i64 } %.field.ld.40(i8* nest undef, i8* %err.field.ld.58), !dbg !2359
  store { i8*, i64 } %call.75, { i8*, i64 }* %sret.actual.143, align 8, !dbg !2359
  %cast.1339 = bitcast { i8*, i64 }* %tmpv.255 to i8*
  %cast.1340 = bitcast { i8*, i64 }* %sret.actual.143 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1339, i8* align 8 %cast.1340, i64 16, i1 false)
  %index.69 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.256, i32 0, i32 0, !dbg !2360
  %cast.1341 = bitcast { i8*, i64 }* %index.69 to i8*, !dbg !2360
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1341, i8* align 8 bitcast ({ i8*, i64 }* @const.170 to i8*), i64 16, i1 false), !dbg !2360
  %index.70 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.256, i32 0, i32 1, !dbg !2360
  %cast.1342 = bitcast { i8*, i64 }* %index.70 to i8*, !dbg !2360
  %cast.1343 = bitcast { i8*, i64 }* %tmpv.255 to i8*, !dbg !2360
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1342, i8* align 8 %cast.1343, i64 16, i1 false), !dbg !2360
  %cast.1344 = bitcast [2 x { i8*, i64 }]* %tmpv.256 to i8*, !dbg !2360
  %call.76 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.1344, i64 2), !dbg !2360
  store { i8*, i64 } %call.76, { i8*, i64 }* %sret.actual.144, align 8, !dbg !2360
  %field0.105 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.144, i32 0, i32 0, !dbg !2361
  %ld.194 = load i8*, i8** %field0.105, align 8, !dbg !2361
  %field1.105 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.144, i32 0, i32 1, !dbg !2361
  %ld.195 = load i64, i64* %field1.105, align 8, !dbg !2361
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.145, i8* nest undef, i8* %ld.194, i64 %ld.195), !dbg !2361
  %cast.1348 = bitcast %Response.0* %tmpv.257 to i8*
  %cast.1349 = bitcast %Response.0* %sret.actual.145 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1348, i8* align 8 %cast.1349, i64 80, i1 false)
  %cast.1350 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2362
  %cast.1351 = bitcast %Response.0* %tmpv.257 to i8*, !dbg !2362
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1350, i8* align 8 %cast.1351, i64 80, i1 false), !dbg !2362
  %cast.1352 = bitcast %Response.0* %sret.formal.8 to i8*, !dbg !2362
  %cast.1353 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2362
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1352, i8* align 8 %cast.1353, i64 80, i1 false), !dbg !2362
  %72 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2362
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %72), !dbg !2362
  %73 = bitcast %error.0* %err to i8*, !dbg !2362
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %73), !dbg !2362
  %74 = bitcast %IPST.0* %marbleOwnerJsonBytes to i8*, !dbg !2362
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %74), !dbg !2362
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2362
  %75 = bitcast %.command-line-arguments.marbleTransferTransientInput.0** %marbleTransferInput to i8*, !dbg !2362
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %75), !dbg !2362
  %76 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2362
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %76), !dbg !2362
  %77 = bitcast %.command-line-arguments.marble.0** %marbleToTransfer to i8*, !dbg !2362
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %77), !dbg !2362
  %78 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2362
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %78), !dbg !2362
  %79 = bitcast %error.0* %"sink$0" to i8*, !dbg !2362
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %79), !dbg !2362
  %80 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2362
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %80), !dbg !2362
  ret void, !dbg !2362

fallthrough.90:                                   ; preds = %fallthrough.91
  %call.78 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @command_x2dline_x2darguments.marble..d, i32 0, i32 0)), !dbg !2363
  %cast.1370 = bitcast i8* %call.78 to %.command-line-arguments.marble.0*, !dbg !2363
  store %.command-line-arguments.marble.0* %cast.1370, %.command-line-arguments.marble.0** %tmpv.260, align 8
  %tmpv.260.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.260, align 8, !dbg !2363
  store %.command-line-arguments.marble.0* %tmpv.260.ld.0, %.command-line-arguments.marble.0** %marbleToTransfer, align 8
  call void @llvm.dbg.declare(metadata %.command-line-arguments.marble.0** %marbleToTransfer, metadata !2364, metadata !DIExpression()), !dbg !2365
  %marbleToTransfer.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %marbleToTransfer, align 8, !dbg !2366
  store %.command-line-arguments.marble.0* %marbleToTransfer.ld.0, %.command-line-arguments.marble.0** %tmpv.261, align 8
  %cast.1371 = bitcast %.command-line-arguments.marble.0* %tmpv.262 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1371, i8* align 8 bitcast (%.command-line-arguments.marble.0* @const.171 to i8*), i64 72, i1 false)
  %deref.ld.7 = load i32, i32* bitcast ({ i8, [3 x i8], i8, i8, i64 }* @runtime.writeBarrier to i32*), align 4, !dbg !2366
  %icmp.115 = icmp eq i32 %deref.ld.7, 0, !dbg !2366
  %zext.115 = zext i1 %icmp.115 to i8, !dbg !2366
  %trunc.93 = trunc i8 %zext.115 to i1, !dbg !2366
  br i1 %trunc.93, label %then.92, label %else.92

else.90:                                          ; preds = %fallthrough.89
  %field.369 = getelementptr inbounds %IPST.0, %IPST.0* %marbleAsBytes, i32 0, i32 0, !dbg !2367
  %marbleAsBytes.field.ld.1 = load i8*, i8** %field.369, align 8, !dbg !2367
  %icmp.112 = icmp eq i8* %marbleAsBytes.field.ld.1, null, !dbg !2368
  %zext.112 = zext i1 %icmp.112 to i8, !dbg !2368
  %trunc.90 = trunc i8 %zext.112 to i1, !dbg !2369
  br i1 %trunc.90, label %then.91, label %else.91

then.91:                                          ; preds = %else.90
  %marbleTransferInput.ld.4 = load %.command-line-arguments.marbleTransferTransientInput.0*, %.command-line-arguments.marbleTransferTransientInput.0** %marbleTransferInput, align 8, !dbg !2370
  %field.368 = getelementptr inbounds %.command-line-arguments.marbleTransferTransientInput.0, %.command-line-arguments.marbleTransferTransientInput.0* %marbleTransferInput.ld.4, i32 0, i32 0, !dbg !2371
  %index.71 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.258, i32 0, i32 0, !dbg !2372
  %cast.1354 = bitcast { i8*, i64 }* %index.71 to i8*, !dbg !2372
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1354, i8* align 8 bitcast ({ i8*, i64 }* @const.155 to i8*), i64 16, i1 false), !dbg !2372
  %index.72 = getelementptr [2 x { i8*, i64 }], [2 x { i8*, i64 }]* %tmpv.258, i32 0, i32 1, !dbg !2372
  %cast.1355 = bitcast { i8*, i64 }* %index.72 to i8*, !dbg !2372
  %cast.1356 = bitcast { i8*, i64 }* %field.368 to i8*, !dbg !2372
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1355, i8* align 8 %cast.1356, i64 16, i1 false), !dbg !2372
  %cast.1357 = bitcast [2 x { i8*, i64 }]* %tmpv.258 to i8*, !dbg !2372
  %call.77 = call { i8*, i64 } @runtime.concatstrings(i8* nest undef, i8* null, i8* %cast.1357, i64 2), !dbg !2372
  store { i8*, i64 } %call.77, { i8*, i64 }* %sret.actual.146, align 8, !dbg !2372
  %field0.106 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.146, i32 0, i32 0, !dbg !2373
  %ld.196 = load i8*, i8** %field0.106, align 8, !dbg !2373
  %field1.106 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %sret.actual.146, i32 0, i32 1, !dbg !2373
  %ld.197 = load i64, i64* %field1.106, align 8, !dbg !2373
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.147, i8* nest undef, i8* %ld.196, i64 %ld.197), !dbg !2373
  %cast.1361 = bitcast %Response.0* %tmpv.259 to i8*
  %cast.1362 = bitcast %Response.0* %sret.actual.147 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1361, i8* align 8 %cast.1362, i64 80, i1 false)
  %cast.1363 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2374
  %cast.1364 = bitcast %Response.0* %tmpv.259 to i8*, !dbg !2374
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1363, i8* align 8 %cast.1364, i64 80, i1 false), !dbg !2374
  %cast.1365 = bitcast %Response.0* %sret.formal.8 to i8*, !dbg !2374
  %cast.1366 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2374
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1365, i8* align 8 %cast.1366, i64 80, i1 false), !dbg !2374
  %81 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2374
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %81), !dbg !2374
  %82 = bitcast %error.0* %err to i8*, !dbg !2374
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %82), !dbg !2374
  %83 = bitcast %IPST.0* %marbleOwnerJsonBytes to i8*, !dbg !2374
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %83), !dbg !2374
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2374
  %84 = bitcast %.command-line-arguments.marbleTransferTransientInput.0** %marbleTransferInput to i8*, !dbg !2374
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %84), !dbg !2374
  %85 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2374
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %85), !dbg !2374
  %86 = bitcast %.command-line-arguments.marble.0** %marbleToTransfer to i8*, !dbg !2374
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %86), !dbg !2374
  %87 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2374
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %87), !dbg !2374
  %88 = bitcast %error.0* %"sink$0" to i8*, !dbg !2374
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %88), !dbg !2374
  %89 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2374
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %89), !dbg !2374
  ret void, !dbg !2374

fallthrough.91:                                   ; preds = %else.91
  br label %fallthrough.90

else.91:                                          ; preds = %else.90
  br label %fallthrough.91

then.92:                                          ; preds = %fallthrough.90
  %tmpv.261.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.261, align 8, !dbg !2366
  %icmp.114 = icmp eq %.command-line-arguments.marble.0* %tmpv.261.ld.0, null, !dbg !2366
  %zext.114 = zext i1 %icmp.114 to i8, !dbg !2366
  %trunc.92 = trunc i8 %zext.114 to i1, !dbg !2366
  br i1 %trunc.92, label %then.93, label %else.93, !make.implicit !46

fallthrough.92:                                   ; preds = %else.92, %fallthrough.93
  %marbleToTransfer.ld.1 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %marbleToTransfer, align 8, !dbg !2375
  %field.371 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.22, i32 0, i32 0, !dbg !2376
  store %_type.0* getelementptr inbounds (%PtrType.0, %PtrType.0* @command_x2dline_x2darguments.marble..p, i32 0, i32 0), %_type.0** %field.371, align 8, !dbg !2376
  %field.372 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.22, i32 0, i32 1, !dbg !2376
  %cast.1381 = bitcast %.command-line-arguments.marble.0* %marbleToTransfer.ld.1 to i8*, !dbg !2376
  store i8* %cast.1381, i8** %field.372, align 8, !dbg !2376
  %cast.1382 = bitcast %IPST.3* %tmp.22 to { i8*, i8* }*, !dbg !2376
  %field0.107 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1382, i32 0, i32 0, !dbg !2376
  %ld.198 = load i8*, i8** %field0.107, align 8, !dbg !2376
  %field1.107 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1382, i32 0, i32 1, !dbg !2376
  %ld.199 = load i8*, i8** %field1.107, align 8, !dbg !2376
  %call.79 = call { i8*, i8* } @encoding_1json.Unmarshal(i8* nest undef, %IPST.0* byval(%IPST.0) %marbleAsBytes, i8* %ld.198, i8* %ld.199), !dbg !2376
  %cast.1383 = bitcast %error.0* %sret.actual.148 to { i8*, i8* }*, !dbg !2376
  store { i8*, i8* } %call.79, { i8*, i8* }* %cast.1383, align 8, !dbg !2376
  %cast.1384 = bitcast %error.0* %tmpv.264 to i8*
  %cast.1385 = bitcast %error.0* %sret.actual.148 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1384, i8* align 8 %cast.1385, i64 16, i1 false)
  %cast.1386 = bitcast %error.0* %err to i8*, !dbg !2377
  %cast.1387 = bitcast %error.0* %tmpv.264 to i8*, !dbg !2377
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1386, i8* align 8 %cast.1387, i64 16, i1 false), !dbg !2377
  %field.376 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2378
  %err.field.ld.62 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.376, align 8, !dbg !2378
  %icmp.116 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.62, null, !dbg !2378
  %zext.116 = zext i1 %icmp.116 to i8, !dbg !2378
  %trunc.94 = trunc i8 %zext.116 to i1, !dbg !2379
  br i1 %trunc.94, label %then.94, label %else.94

else.92:                                          ; preds = %fallthrough.90
  %tmpv.261.ld.1 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.261, align 8, !dbg !2366
  %cast.1376 = bitcast %.command-line-arguments.marble.0* %tmpv.261.ld.1 to i8*, !dbg !2366
  %cast.1377 = bitcast %.command-line-arguments.marble.0* %tmpv.262 to i8*, !dbg !2366
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @command_x2dline_x2darguments.marble..d, i32 0, i32 0), i8* %cast.1376, i8* %cast.1377), !dbg !2366
  br label %fallthrough.92

then.93:                                          ; preds = %then.92
  call void @runtime.panicmem(i8* nest undef), !dbg !2366
  unreachable

fallthrough.93:                                   ; preds = %else.93
  %tmpv.263.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.263, align 8, !dbg !2366
  %cast.1373 = bitcast %.command-line-arguments.marble.0* %tmpv.263.ld.0 to i8*, !dbg !2366
  %cast.1374 = bitcast %.command-line-arguments.marble.0* %tmpv.262 to i8*, !dbg !2366
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1373, i8* align 8 %cast.1374, i64 72, i1 false), !dbg !2366
  br label %fallthrough.92

else.93:                                          ; preds = %then.92
  %.ld.2 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.261, align 8, !dbg !2366
  store %.command-line-arguments.marble.0* %.ld.2, %.command-line-arguments.marble.0** %tmpv.263, align 8
  br label %fallthrough.93

then.94:                                          ; preds = %fallthrough.92
  %field.373 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2380
  %err.field.ld.60 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.373, align 8, !dbg !2380
  %field.374 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.60, i32 0, i32 1, !dbg !2380
  %.field.ld.41 = load { i8*, i64 } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)** %field.374, align 8, !dbg !2380
  %field.375 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !2380
  %err.field.ld.61 = load i8*, i8** %field.375, align 8, !dbg !2380
  %call.80 = call { i8*, i64 } %.field.ld.41(i8* nest undef, i8* %err.field.ld.61), !dbg !2380
  store { i8*, i64 } %call.80, { i8*, i64 }* %sret.actual.149, align 8, !dbg !2380
  %cast.1389 = bitcast { i8*, i64 }* %tmpv.265 to i8*
  %cast.1390 = bitcast { i8*, i64 }* %sret.actual.149 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1389, i8* align 8 %cast.1390, i64 16, i1 false)
  %field0.108 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.265, i32 0, i32 0, !dbg !2381
  %ld.200 = load i8*, i8** %field0.108, align 8, !dbg !2381
  %field1.108 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.265, i32 0, i32 1, !dbg !2381
  %ld.201 = load i64, i64* %field1.108, align 8, !dbg !2381
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.150, i8* nest undef, i8* %ld.200, i64 %ld.201), !dbg !2381
  %cast.1392 = bitcast %Response.0* %tmpv.266 to i8*
  %cast.1393 = bitcast %Response.0* %sret.actual.150 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1392, i8* align 8 %cast.1393, i64 80, i1 false)
  %cast.1394 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2382
  %cast.1395 = bitcast %Response.0* %tmpv.266 to i8*, !dbg !2382
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1394, i8* align 8 %cast.1395, i64 80, i1 false), !dbg !2382
  %cast.1396 = bitcast %Response.0* %sret.formal.8 to i8*, !dbg !2382
  %cast.1397 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2382
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1396, i8* align 8 %cast.1397, i64 80, i1 false), !dbg !2382
  %90 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2382
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %90), !dbg !2382
  %91 = bitcast %error.0* %err to i8*, !dbg !2382
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %91), !dbg !2382
  %92 = bitcast %IPST.0* %marbleOwnerJsonBytes to i8*, !dbg !2382
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %92), !dbg !2382
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2382
  %93 = bitcast %.command-line-arguments.marbleTransferTransientInput.0** %marbleTransferInput to i8*, !dbg !2382
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %93), !dbg !2382
  %94 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2382
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %94), !dbg !2382
  %95 = bitcast %.command-line-arguments.marble.0** %marbleToTransfer to i8*, !dbg !2382
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %95), !dbg !2382
  %96 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2382
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %96), !dbg !2382
  %97 = bitcast %error.0* %"sink$0" to i8*, !dbg !2382
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %97), !dbg !2382
  %98 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2382
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %98), !dbg !2382
  ret void, !dbg !2382

fallthrough.94:                                   ; preds = %else.94
  %marbleToTransfer.ld.2 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %marbleToTransfer, align 8, !dbg !2383
  %field.377 = getelementptr inbounds %.command-line-arguments.marble.0, %.command-line-arguments.marble.0* %marbleToTransfer.ld.2, i32 0, i32 4, !dbg !2384
  store { i8*, i64 }* %field.377, { i8*, i64 }** %tmpv.267, align 8
  %marbleTransferInput.ld.5 = load %.command-line-arguments.marbleTransferTransientInput.0*, %.command-line-arguments.marbleTransferTransientInput.0** %marbleTransferInput, align 8, !dbg !2385
  %field.378 = getelementptr inbounds %.command-line-arguments.marbleTransferTransientInput.0, %.command-line-arguments.marbleTransferTransientInput.0* %marbleTransferInput.ld.5, i32 0, i32 1, !dbg !2386
  %cast.1399 = bitcast { i8*, i64 }* %tmpv.268 to i8*
  %cast.1400 = bitcast { i8*, i64 }* %field.378 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1399, i8* align 8 %cast.1400, i64 16, i1 false)
  %tmpv.267.ld.0 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.267, align 8, !dbg !2387
  %icmp.117 = icmp eq { i8*, i64 }* %tmpv.267.ld.0, null, !dbg !2387
  %zext.117 = zext i1 %icmp.117 to i8, !dbg !2387
  %trunc.95 = trunc i8 %zext.117 to i1, !dbg !2387
  br i1 %trunc.95, label %then.95, label %else.95, !make.implicit !46

else.94:                                          ; preds = %fallthrough.92
  br label %fallthrough.94

then.95:                                          ; preds = %fallthrough.94
  call void @runtime.panicmem(i8* nest undef), !dbg !2387
  unreachable

fallthrough.95:                                   ; preds = %else.95
  %tmpv.269.ld.0 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.269, align 8, !dbg !2387
  %field.379 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.269.ld.0, i32 0, i32 1, !dbg !2387
  %field.380 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.268, i32 0, i32 1, !dbg !2387
  %tmpv.268.field.ld.0 = load i64, i64* %field.380, align 8, !dbg !2387
  store i64 %tmpv.268.field.ld.0, i64* %field.379, align 8, !dbg !2387
  %deref.ld.8 = load i32, i32* bitcast ({ i8, [3 x i8], i8, i8, i64 }* @runtime.writeBarrier to i32*), align 4, !dbg !2387
  %icmp.120 = icmp eq i32 %deref.ld.8, 0, !dbg !2387
  %zext.120 = zext i1 %icmp.120 to i8, !dbg !2387
  %trunc.98 = trunc i8 %zext.120 to i1, !dbg !2387
  br i1 %trunc.98, label %then.96, label %else.96

else.95:                                          ; preds = %fallthrough.94
  %.ld.3 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.267, align 8, !dbg !2387
  store { i8*, i64 }* %.ld.3, { i8*, i64 }** %tmpv.269, align 8
  br label %fallthrough.95

then.96:                                          ; preds = %fallthrough.95
  %tmpv.267.ld.1 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.267, align 8, !dbg !2387
  %icmp.118 = icmp eq { i8*, i64 }* %tmpv.267.ld.1, null, !dbg !2387
  %zext.118 = zext i1 %icmp.118 to i8, !dbg !2387
  %trunc.96 = trunc i8 %zext.118 to i1, !dbg !2387
  br i1 %trunc.96, label %then.97, label %else.97, !make.implicit !46

fallthrough.96:                                   ; preds = %fallthrough.98, %fallthrough.97
  %call.81 = call i8* @runtime.newobject(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @command_x2dline_x2darguments.marble..d, i32 0, i32 0)), !dbg !2388
  %cast.1408 = bitcast i8* %call.81 to %.command-line-arguments.marble.0*, !dbg !2388
  store %.command-line-arguments.marble.0* %cast.1408, %.command-line-arguments.marble.0** %tmpv.273, align 8
  %marbleToTransfer.ld.3 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %marbleToTransfer, align 8, !dbg !2389
  %cast.1409 = bitcast %.command-line-arguments.marble.0* %tmpv.274 to i8*
  %cast.1410 = bitcast %.command-line-arguments.marble.0* %marbleToTransfer.ld.3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1409, i8* align 8 %cast.1410, i64 72, i1 false)
  %deref.ld.9 = load i32, i32* bitcast ({ i8, [3 x i8], i8, i8, i64 }* @runtime.writeBarrier to i32*), align 4, !dbg !2388
  %icmp.121 = icmp eq i32 %deref.ld.9, 0, !dbg !2388
  %zext.121 = zext i1 %icmp.121 to i8, !dbg !2388
  %trunc.99 = trunc i8 %zext.121 to i1, !dbg !2388
  br i1 %trunc.99, label %then.99, label %else.99

else.96:                                          ; preds = %fallthrough.95
  %tmpv.267.ld.2 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.267, align 8, !dbg !2387
  %icmp.119 = icmp eq { i8*, i64 }* %tmpv.267.ld.2, null, !dbg !2387
  %zext.119 = zext i1 %icmp.119 to i8, !dbg !2387
  %trunc.97 = trunc i8 %zext.119 to i1, !dbg !2387
  br i1 %trunc.97, label %then.98, label %else.98, !make.implicit !46

then.97:                                          ; preds = %then.96
  call void @runtime.panicmem(i8* nest undef), !dbg !2387
  unreachable

fallthrough.97:                                   ; preds = %else.97
  %tmpv.270.ld.0 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.270, align 8, !dbg !2387
  %field.381 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.270.ld.0, i32 0, i32 0, !dbg !2387
  %field.382 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.268, i32 0, i32 0, !dbg !2387
  %tmpv.268.field.ld.1 = load i8*, i8** %field.382, align 8, !dbg !2387
  store i8* %tmpv.268.field.ld.1, i8** %field.381, align 8, !dbg !2387
  br label %fallthrough.96

else.97:                                          ; preds = %then.96
  %.ld.4 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.267, align 8, !dbg !2387
  store { i8*, i64 }* %.ld.4, { i8*, i64 }** %tmpv.270, align 8
  br label %fallthrough.97

then.98:                                          ; preds = %else.96
  call void @runtime.panicmem(i8* nest undef), !dbg !2387
  unreachable

fallthrough.98:                                   ; preds = %else.98
  %tmpv.271.ld.0 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.271, align 8, !dbg !2387
  %field.383 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.271.ld.0, i32 0, i32 0, !dbg !2387
  %cast.1404 = bitcast i8** %field.383 to i8*, !dbg !2387
  %field.384 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.268, i32 0, i32 0, !dbg !2387
  %tmpv.268.field.ld.2 = load i8*, i8** %field.384, align 8, !dbg !2387
  %pticast.5 = ptrtoint i8* %tmpv.268.field.ld.2 to i64, !dbg !2387
  call void @runtime.gcWriteBarrier(i8* nest undef, i8* %cast.1404, i64 %pticast.5), !dbg !2387
  br label %fallthrough.96

else.98:                                          ; preds = %else.96
  %.ld.5 = load { i8*, i64 }*, { i8*, i64 }** %tmpv.267, align 8, !dbg !2387
  store { i8*, i64 }* %.ld.5, { i8*, i64 }** %tmpv.271, align 8
  br label %fallthrough.98

then.99:                                          ; preds = %fallthrough.96
  %tmpv.273.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.273, align 8, !dbg !2388
  %cast.1411 = bitcast %.command-line-arguments.marble.0* %tmpv.273.ld.0 to i8*, !dbg !2388
  %cast.1412 = bitcast %.command-line-arguments.marble.0* %tmpv.274 to i8*, !dbg !2388
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1411, i8* align 8 %cast.1412, i64 72, i1 false), !dbg !2388
  br label %fallthrough.99

fallthrough.99:                                   ; preds = %else.99, %then.99
  %tmpv.273.ld.2 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.273, align 8, !dbg !2388
  %field.385 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.23, i32 0, i32 0, !dbg !2388
  store %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @command_x2dline_x2darguments.marble..d, i32 0, i32 0), %_type.0** %field.385, align 8, !dbg !2388
  %field.386 = getelementptr inbounds %IPST.3, %IPST.3* %tmp.23, i32 0, i32 1, !dbg !2388
  %cast.1419 = bitcast %.command-line-arguments.marble.0* %tmpv.273.ld.2 to i8*, !dbg !2388
  store i8* %cast.1419, i8** %field.386, align 8, !dbg !2388
  %cast.1420 = bitcast %IPST.3* %tmp.23 to { i8*, i8* }*, !dbg !2388
  %field0.109 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1420, i32 0, i32 0, !dbg !2388
  %ld.202 = load i8*, i8** %field0.109, align 8, !dbg !2388
  %field1.109 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1420, i32 0, i32 1, !dbg !2388
  %ld.203 = load i8*, i8** %field1.109, align 8, !dbg !2388
  call void @encoding_1json.Marshal({ %IPST.0, %error.0 }* sret({ %IPST.0, %error.0 }) "go_sret" %sret.actual.151, i8* nest undef, i8* %ld.202, i8* %ld.203), !dbg !2388
  %cast.1421 = bitcast { %IPST.0, %error.0 }* %tmpv.272 to i8*, !dbg !2388
  %cast.1422 = bitcast { %IPST.0, %error.0 }* %sret.actual.151 to i8*, !dbg !2388
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1421, i8* align 8 %cast.1422, i64 40, i1 false), !dbg !2388
  %field.387 = getelementptr inbounds { %IPST.0, %error.0 }, { %IPST.0, %error.0 }* %tmpv.272, i32 0, i32 0, !dbg !2388
  %cast.1423 = bitcast %IPST.0* %tmpv.275 to i8*
  %cast.1424 = bitcast %IPST.0* %field.387 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1423, i8* align 8 %cast.1424, i64 24, i1 false)
  %cast.1425 = bitcast %IPST.0* %marbleJSONasBytes to i8*
  %cast.1426 = bitcast %IPST.0* %tmpv.275 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1425, i8* align 8 %cast.1426, i64 24, i1 false)
  call void @llvm.dbg.declare(metadata %IPST.0* %marbleJSONasBytes, metadata !2390, metadata !DIExpression()), !dbg !2391
  %field.388 = getelementptr inbounds { %IPST.0, %error.0 }, { %IPST.0, %error.0 }* %tmpv.272, i32 0, i32 1, !dbg !2388
  %cast.1427 = bitcast %error.0* %tmpv.276 to i8*
  %cast.1428 = bitcast %error.0* %field.388 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1427, i8* align 8 %cast.1428, i64 16, i1 false)
  %cast.1429 = bitcast %error.0* %"sink$0" to i8*
  %cast.1430 = bitcast %error.0* %tmpv.276 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1429, i8* align 8 %cast.1430, i64 16, i1 false)
  call void @llvm.dbg.declare(metadata %error.0* %"sink$0", metadata !2392, metadata !DIExpression()), !dbg !2391
  %field.389 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 0, !dbg !2393
  %stub.field.ld.38 = load { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }*, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }** %field.389, align 8, !dbg !2393
  %field.390 = getelementptr inbounds { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }, { %_type.0*, void ({ { i8*, i64 }, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64)*, void (%IPST.6*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*)*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }* (i8*, i8*)*, void ({ { i8*, i64 }, %IPST.7 }*, i8*, i8*)*, void ({ %HistoryQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i32, { i8*, i64 }*)*, void ({ %SignedProposal.0*, %error.0 }*, i8*, i8*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, %IPST.7*, i32, { i8*, i64 }*)*, void ({ %StateQueryIteratorInterface.0, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64)*, void ({ %StateQueryIteratorInterface.0, %QueryResponseMetadata.0*, %error.0 }*, i8*, i8*, i8*, i64, i8*, i64, i32, { i8*, i64 }*)*, void ({ %IPST.0, %error.0 }*, i8*, i8*, i8*, i64)*, void (%IPST.7*, i8*, i8*)*, void ({ { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, %error.0 }*, i8*, i8*)*, { i8*, i64 } (i8*, i8*)*, void ({ %Timestamp.1*, %error.0 }*, i8*, i8*)*, void (%Response.0*, i8*, i8*, i8*, i64, %IPST.6*, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, %IPST.0*)*, void ({ { i8*, i64 }, %IPST.7, %error.0 }*, i8*, i8*, i8*, i64)* }* %stub.field.ld.38, i32 0, i32 33, !dbg !2393
  %.field.ld.42 = load { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)*, { i8*, i8* } (i8*, i8*, i8*, i64, i8*, i64, %IPST.0*)** %field.390, align 8, !dbg !2393
  %field.391 = getelementptr inbounds %ChaincodeStubInterface.0, %ChaincodeStubInterface.0* %stub.addr, i32 0, i32 1, !dbg !2393
  %stub.field.ld.39 = load i8*, i8** %field.391, align 8, !dbg !2393
  %marbleToTransfer.ld.4 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %marbleToTransfer, align 8, !dbg !2394
  %field.392 = getelementptr inbounds %.command-line-arguments.marble.0, %.command-line-arguments.marble.0* %marbleToTransfer.ld.4, i32 0, i32 1, !dbg !2395
  %ld.204 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.101, i32 0, i32 0), align 8, !dbg !2393
  %ld.205 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.101, i32 0, i32 1), align 8, !dbg !2393
  %field0.111 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %field.392, i32 0, i32 0, !dbg !2393
  %ld.206 = load i8*, i8** %field0.111, align 8, !dbg !2393
  %field1.111 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %field.392, i32 0, i32 1, !dbg !2393
  %ld.207 = load i64, i64* %field1.111, align 8, !dbg !2393
  %call.82 = call { i8*, i8* } %.field.ld.42(i8* nest undef, i8* %stub.field.ld.39, i8* %ld.204, i64 %ld.205, i8* %ld.206, i64 %ld.207, %IPST.0* byval(%IPST.0) %marbleJSONasBytes), !dbg !2393
  %cast.1433 = bitcast %error.0* %sret.actual.152 to { i8*, i8* }*, !dbg !2393
  store { i8*, i8* } %call.82, { i8*, i8* }* %cast.1433, align 8, !dbg !2393
  %cast.1434 = bitcast %error.0* %tmpv.277 to i8*
  %cast.1435 = bitcast %error.0* %sret.actual.152 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1434, i8* align 8 %cast.1435, i64 16, i1 false)
  %cast.1436 = bitcast %error.0* %err to i8*, !dbg !2396
  %cast.1437 = bitcast %error.0* %tmpv.277 to i8*, !dbg !2396
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1436, i8* align 8 %cast.1437, i64 16, i1 false), !dbg !2396
  %field.396 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2397
  %err.field.ld.65 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.396, align 8, !dbg !2397
  %icmp.122 = icmp ne { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.65, null, !dbg !2397
  %zext.122 = zext i1 %icmp.122 to i8, !dbg !2397
  %trunc.100 = trunc i8 %zext.122 to i1, !dbg !2398
  br i1 %trunc.100, label %then.100, label %else.100

else.99:                                          ; preds = %fallthrough.96
  %tmpv.273.ld.1 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.273, align 8, !dbg !2388
  %cast.1414 = bitcast %.command-line-arguments.marble.0* %tmpv.273.ld.1 to i8*, !dbg !2388
  %cast.1415 = bitcast %.command-line-arguments.marble.0* %tmpv.274 to i8*, !dbg !2388
  call void @runtime.typedmemmove(i8* nest undef, %_type.0* getelementptr inbounds (%StructType.0, %StructType.0* @command_x2dline_x2darguments.marble..d, i32 0, i32 0), i8* %cast.1414, i8* %cast.1415), !dbg !2388
  br label %fallthrough.99

then.100:                                         ; preds = %fallthrough.99
  %field.393 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 0, !dbg !2399
  %err.field.ld.63 = load { %_type.0*, { i8*, i64 } (i8*, i8*)* }*, { %_type.0*, { i8*, i64 } (i8*, i8*)* }** %field.393, align 8, !dbg !2399
  %field.394 = getelementptr inbounds { %_type.0*, { i8*, i64 } (i8*, i8*)* }, { %_type.0*, { i8*, i64 } (i8*, i8*)* }* %err.field.ld.63, i32 0, i32 1, !dbg !2399
  %.field.ld.43 = load { i8*, i64 } (i8*, i8*)*, { i8*, i64 } (i8*, i8*)** %field.394, align 8, !dbg !2399
  %field.395 = getelementptr inbounds %error.0, %error.0* %err, i32 0, i32 1, !dbg !2399
  %err.field.ld.64 = load i8*, i8** %field.395, align 8, !dbg !2399
  %call.83 = call { i8*, i64 } %.field.ld.43(i8* nest undef, i8* %err.field.ld.64), !dbg !2399
  store { i8*, i64 } %call.83, { i8*, i64 }* %sret.actual.153, align 8, !dbg !2399
  %cast.1439 = bitcast { i8*, i64 }* %tmpv.278 to i8*
  %cast.1440 = bitcast { i8*, i64 }* %sret.actual.153 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1439, i8* align 8 %cast.1440, i64 16, i1 false)
  %field0.112 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.278, i32 0, i32 0, !dbg !2400
  %ld.208 = load i8*, i8** %field0.112, align 8, !dbg !2400
  %field1.112 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.278, i32 0, i32 1, !dbg !2400
  %ld.209 = load i64, i64* %field1.112, align 8, !dbg !2400
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0* sret(%Response.0) "go_sret" %sret.actual.154, i8* nest undef, i8* %ld.208, i64 %ld.209), !dbg !2400
  %cast.1442 = bitcast %Response.0* %tmpv.279 to i8*
  %cast.1443 = bitcast %Response.0* %sret.actual.154 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1442, i8* align 8 %cast.1443, i64 80, i1 false)
  %cast.1444 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2401
  %cast.1445 = bitcast %Response.0* %tmpv.279 to i8*, !dbg !2401
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1444, i8* align 8 %cast.1445, i64 80, i1 false), !dbg !2401
  %cast.1446 = bitcast %Response.0* %sret.formal.8 to i8*, !dbg !2401
  %cast.1447 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2401
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1446, i8* align 8 %cast.1447, i64 80, i1 false), !dbg !2401
  %99 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2401
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %99), !dbg !2401
  %100 = bitcast %error.0* %err to i8*, !dbg !2401
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %100), !dbg !2401
  %101 = bitcast %IPST.0* %marbleOwnerJsonBytes to i8*, !dbg !2401
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %101), !dbg !2401
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2401
  %102 = bitcast %.command-line-arguments.marbleTransferTransientInput.0** %marbleTransferInput to i8*, !dbg !2401
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %102), !dbg !2401
  %103 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2401
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %103), !dbg !2401
  %104 = bitcast %.command-line-arguments.marble.0** %marbleToTransfer to i8*, !dbg !2401
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %104), !dbg !2401
  %105 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2401
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %105), !dbg !2401
  %106 = bitcast %error.0* %"sink$0" to i8*, !dbg !2401
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %106), !dbg !2401
  %107 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2401
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %107), !dbg !2401
  ret void, !dbg !2401

fallthrough.100:                                  ; preds = %else.100
  %cast.1449 = bitcast [1 x %IPST.3]* %tmpv.281 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1449, i8* align 8 bitcast ([1 x %IPST.3]* @const.173 to i8*), i64 16, i1 false)
  %cast.1450 = bitcast [1 x %IPST.3]* %tmpv.281 to %IPST.3*, !dbg !2402
  %field.397 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.24, i32 0, i32 0, !dbg !2402
  store %IPST.3* %cast.1450, %IPST.3** %field.397, align 8, !dbg !2402
  %field.398 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.24, i32 0, i32 1, !dbg !2402
  store i64 1, i64* %field.398, align 8, !dbg !2402
  %field.399 = getelementptr inbounds %IPST.52, %IPST.52* %tmp.24, i32 0, i32 2, !dbg !2402
  store i64 1, i64* %field.399, align 8, !dbg !2402
  call void @fmt.Println({ i64, %error.0 }* sret({ i64, %error.0 }) "go_sret" %sret.actual.155, i8* nest undef, %IPST.52* byval(%IPST.52) %tmp.24), !dbg !2402
  %cast.1451 = bitcast { i64, %error.0 }* %tmpv.280 to i8*, !dbg !2402
  %cast.1452 = bitcast { i64, %error.0 }* %sret.actual.155 to i8*, !dbg !2402
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1451, i8* align 8 %cast.1452, i64 24, i1 false), !dbg !2402
  store i8* null, i8** %tmpv.282, align 8
  call void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Success(%Response.0* sret(%Response.0) "go_sret" %sret.actual.156, i8* nest undef, %IPST.0* byval(%IPST.0) @const.43), !dbg !2403
  %cast.1454 = bitcast %Response.0* %tmpv.283 to i8*
  %cast.1455 = bitcast %Response.0* %sret.actual.156 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1454, i8* align 8 %cast.1455, i64 80, i1 false)
  %cast.1456 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2404
  %cast.1457 = bitcast %Response.0* %tmpv.283 to i8*, !dbg !2404
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1456, i8* align 8 %cast.1457, i64 80, i1 false), !dbg !2404
  %cast.1458 = bitcast %Response.0* %sret.formal.8 to i8*, !dbg !2404
  %cast.1459 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2404
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1458, i8* align 8 %cast.1459, i64 80, i1 false), !dbg !2404
  %108 = bitcast { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }** %transMap to i8*, !dbg !2404
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %108), !dbg !2404
  %109 = bitcast %error.0* %err to i8*, !dbg !2404
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %109), !dbg !2404
  %110 = bitcast %IPST.0* %marbleOwnerJsonBytes to i8*, !dbg !2404
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %110), !dbg !2404
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ok), !dbg !2404
  %111 = bitcast %.command-line-arguments.marbleTransferTransientInput.0** %marbleTransferInput to i8*, !dbg !2404
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %111), !dbg !2404
  %112 = bitcast %IPST.0* %marbleAsBytes to i8*, !dbg !2404
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %112), !dbg !2404
  %113 = bitcast %.command-line-arguments.marble.0** %marbleToTransfer to i8*, !dbg !2404
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %113), !dbg !2404
  %114 = bitcast %IPST.0* %marbleJSONasBytes to i8*, !dbg !2404
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %114), !dbg !2404
  %115 = bitcast %error.0* %"sink$0" to i8*, !dbg !2404
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %115), !dbg !2404
  %116 = bitcast %Response.0* %"$ret8" to i8*, !dbg !2404
  call void @llvm.lifetime.end.p0i8(i64 80, i8* %116), !dbg !2404
  ret void, !dbg !2404

else.100:                                         ; preds = %fallthrough.99
  br label %fallthrough.100
}

define i8 @command_x2dline_x2darguments.marble..eq(i8* nest %nest.12, i8* %key1, i8* %key2) #0 !dbg !2405 {
entry:
  %key1.addr = alloca i8*, align 8
  %key2.addr = alloca i8*, align 8
  %"$ret12" = alloca i8, align 1
  %tmpv.365 = alloca %.command-line-arguments.marble.0*, align 8
  %tmpv.366 = alloca %.command-line-arguments.marble.0*, align 8
  %tmpv.367 = alloca { i8*, i64 }, align 8
  %tmpv.368 = alloca %.command-line-arguments.marble.0*, align 8
  %tmpv.369 = alloca { i8*, i64 }, align 8
  %tmpv.370 = alloca %.command-line-arguments.marble.0*, align 8
  %tmpv.371 = alloca i8, align 1
  %tmpv.372 = alloca i8, align 1
  %tmpv.373 = alloca { i8*, i64 }, align 8
  %tmpv.374 = alloca %.command-line-arguments.marble.0*, align 8
  %tmpv.375 = alloca { i8*, i64 }, align 8
  %tmpv.376 = alloca %.command-line-arguments.marble.0*, align 8
  %tmpv.377 = alloca i8, align 1
  %tmpv.378 = alloca i8, align 1
  %tmpv.379 = alloca { i8*, i64 }, align 8
  %tmpv.380 = alloca %.command-line-arguments.marble.0*, align 8
  %tmpv.381 = alloca { i8*, i64 }, align 8
  %tmpv.382 = alloca %.command-line-arguments.marble.0*, align 8
  %tmpv.383 = alloca i8, align 1
  %tmpv.384 = alloca i8, align 1
  %tmpv.385 = alloca %.command-line-arguments.marble.0*, align 8
  %tmpv.386 = alloca %.command-line-arguments.marble.0*, align 8
  %tmpv.387 = alloca { i8*, i64 }, align 8
  %tmpv.388 = alloca %.command-line-arguments.marble.0*, align 8
  %tmpv.389 = alloca { i8*, i64 }, align 8
  %tmpv.390 = alloca %.command-line-arguments.marble.0*, align 8
  %tmpv.391 = alloca i8, align 1
  %tmpv.392 = alloca i8, align 1
  store i8* %key1, i8** %key1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key1.addr, metadata !2406, metadata !DIExpression()), !dbg !2407
  store i8* %key2, i8** %key2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key2.addr, metadata !2408, metadata !DIExpression()), !dbg !2407
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %"$ret12")
  store i8 0, i8* %"$ret12", align 1
  call void @llvm.dbg.declare(metadata i8* %"$ret12", metadata !2409, metadata !DIExpression()), !dbg !2407
  %key1.ld.0 = load i8*, i8** %key1.addr, align 8, !dbg !2407
  %cast.1730 = bitcast i8* %key1.ld.0 to %.command-line-arguments.marble.0*, !dbg !2407
  store %.command-line-arguments.marble.0* %cast.1730, %.command-line-arguments.marble.0** %tmpv.365, align 8
  %key2.ld.0 = load i8*, i8** %key2.addr, align 8, !dbg !2407
  %cast.1731 = bitcast i8* %key2.ld.0 to %.command-line-arguments.marble.0*, !dbg !2407
  store %.command-line-arguments.marble.0* %cast.1731, %.command-line-arguments.marble.0** %tmpv.366, align 8
  %tmpv.365.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.365, align 8, !dbg !2407
  %icmp.150 = icmp eq %.command-line-arguments.marble.0* %tmpv.365.ld.0, null, !dbg !2407
  %zext.149 = zext i1 %icmp.150 to i8, !dbg !2407
  %trunc.129 = trunc i8 %zext.149 to i1, !dbg !2407
  br i1 %trunc.129, label %then.129, label %else.129, !make.implicit !46

then.129:                                         ; preds = %entry
  call void @runtime.panicmem(i8* nest undef), !dbg !2407
  unreachable

fallthrough.129:                                  ; preds = %else.129
  %tmpv.368.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.368, align 8, !dbg !2407
  %field.504 = getelementptr inbounds %.command-line-arguments.marble.0, %.command-line-arguments.marble.0* %tmpv.368.ld.0, i32 0, i32 0, !dbg !2407
  %cast.1733 = bitcast { i8*, i64 }* %tmpv.367 to i8*
  %cast.1734 = bitcast { i8*, i64 }* %field.504 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1733, i8* align 8 %cast.1734, i64 16, i1 false)
  %tmpv.366.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.366, align 8, !dbg !2407
  %icmp.151 = icmp eq %.command-line-arguments.marble.0* %tmpv.366.ld.0, null, !dbg !2407
  %zext.150 = zext i1 %icmp.151 to i8, !dbg !2407
  %trunc.130 = trunc i8 %zext.150 to i1, !dbg !2407
  br i1 %trunc.130, label %then.130, label %else.130, !make.implicit !46

else.129:                                         ; preds = %entry
  %.ld.11 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.365, align 8, !dbg !2407
  store %.command-line-arguments.marble.0* %.ld.11, %.command-line-arguments.marble.0** %tmpv.368, align 8
  br label %fallthrough.129

then.130:                                         ; preds = %fallthrough.129
  call void @runtime.panicmem(i8* nest undef), !dbg !2407
  unreachable

fallthrough.130:                                  ; preds = %else.130
  %tmpv.370.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.370, align 8, !dbg !2407
  %field.505 = getelementptr inbounds %.command-line-arguments.marble.0, %.command-line-arguments.marble.0* %tmpv.370.ld.0, i32 0, i32 0, !dbg !2407
  %cast.1736 = bitcast { i8*, i64 }* %tmpv.369 to i8*
  %cast.1737 = bitcast { i8*, i64 }* %field.505 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1736, i8* align 8 %cast.1737, i64 16, i1 false)
  %field.506 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.367, i32 0, i32 1, !dbg !2407
  %tmpv.367.field.ld.0 = load i64, i64* %field.506, align 8, !dbg !2407
  %field.507 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.369, i32 0, i32 1, !dbg !2407
  %tmpv.369.field.ld.0 = load i64, i64* %field.507, align 8, !dbg !2407
  %icmp.152 = icmp eq i64 %tmpv.367.field.ld.0, %tmpv.369.field.ld.0, !dbg !2407
  %zext.151 = zext i1 %icmp.152 to i8, !dbg !2407
  %trunc.132 = trunc i8 %zext.151 to i1, !dbg !2407
  br i1 %trunc.132, label %then.131, label %else.131

else.130:                                         ; preds = %fallthrough.129
  %.ld.12 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.366, align 8, !dbg !2407
  store %.command-line-arguments.marble.0* %.ld.12, %.command-line-arguments.marble.0** %tmpv.370, align 8
  br label %fallthrough.130

then.131:                                         ; preds = %fallthrough.130
  %field.508 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.367, i32 0, i32 0, !dbg !2407
  %tmpv.367.field.ld.1 = load i8*, i8** %field.508, align 8, !dbg !2407
  %field.509 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.369, i32 0, i32 0, !dbg !2407
  %tmpv.369.field.ld.1 = load i8*, i8** %field.509, align 8, !dbg !2407
  %icmp.153 = icmp eq i8* %tmpv.367.field.ld.1, %tmpv.369.field.ld.1, !dbg !2407
  %zext.152 = zext i1 %icmp.153 to i8, !dbg !2407
  %trunc.131 = trunc i8 %zext.152 to i1, !dbg !2407
  br i1 %trunc.131, label %then.132, label %else.132

fallthrough.131:                                  ; preds = %else.131, %fallthrough.132
  %tmpv.372.ld.0 = load i8, i8* %tmpv.372, align 1, !dbg !2407
  %icmp.155 = icmp ne i8 %tmpv.372.ld.0, 1, !dbg !2407
  %zext.154 = zext i1 %icmp.155 to i8, !dbg !2407
  %trunc.133 = trunc i8 %zext.154 to i1, !dbg !2407
  br i1 %trunc.133, label %then.133, label %else.133

else.131:                                         ; preds = %fallthrough.130
  store i8 0, i8* %tmpv.372, align 1, !dbg !2407
  br label %fallthrough.131

then.132:                                         ; preds = %then.131
  store i8 1, i8* %tmpv.371, align 1
  br label %fallthrough.132

fallthrough.132:                                  ; preds = %else.132, %then.132
  %tmpv.371.ld.0 = load i8, i8* %tmpv.371, align 1, !dbg !2407
  store i8 %tmpv.371.ld.0, i8* %tmpv.372, align 1
  br label %fallthrough.131

else.132:                                         ; preds = %then.131
  %field.510 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.367, i32 0, i32 0, !dbg !2407
  %tmpv.367.field.ld.2 = load i8*, i8** %field.510, align 8, !dbg !2407
  %field.511 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.369, i32 0, i32 0, !dbg !2407
  %tmpv.369.field.ld.2 = load i8*, i8** %field.511, align 8, !dbg !2407
  %field.512 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.369, i32 0, i32 1, !dbg !2407
  %tmpv.369.field.ld.3 = load i64, i64* %field.512, align 8, !dbg !2407
  %call.101 = call i32 @memcmp(i8* %tmpv.367.field.ld.2, i8* %tmpv.369.field.ld.2, i64 %tmpv.369.field.ld.3), !dbg !2407
  %icmp.154 = icmp eq i32 %call.101, 0, !dbg !2407
  %zext.153 = zext i1 %icmp.154 to i8, !dbg !2407
  store i8 %zext.153, i8* %tmpv.371, align 1, !dbg !2407
  br label %fallthrough.132

then.133:                                         ; preds = %fallthrough.131
  store i8 0, i8* %"$ret12", align 1, !dbg !2407
  %"$ret12.ld.0" = load i8, i8* %"$ret12", align 1, !dbg !2407
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret12"), !dbg !2407
  ret i8 %"$ret12.ld.0", !dbg !2407

fallthrough.133:                                  ; preds = %else.133
  %tmpv.365.ld.1 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.365, align 8, !dbg !2407
  %icmp.156 = icmp eq %.command-line-arguments.marble.0* %tmpv.365.ld.1, null, !dbg !2407
  %zext.155 = zext i1 %icmp.156 to i8, !dbg !2407
  %trunc.134 = trunc i8 %zext.155 to i1, !dbg !2407
  br i1 %trunc.134, label %then.134, label %else.134, !make.implicit !46

else.133:                                         ; preds = %fallthrough.131
  br label %fallthrough.133

then.134:                                         ; preds = %fallthrough.133
  call void @runtime.panicmem(i8* nest undef), !dbg !2407
  unreachable

fallthrough.134:                                  ; preds = %else.134
  %tmpv.374.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.374, align 8, !dbg !2407
  %field.513 = getelementptr inbounds %.command-line-arguments.marble.0, %.command-line-arguments.marble.0* %tmpv.374.ld.0, i32 0, i32 1, !dbg !2407
  %cast.1739 = bitcast { i8*, i64 }* %tmpv.373 to i8*
  %cast.1740 = bitcast { i8*, i64 }* %field.513 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1739, i8* align 8 %cast.1740, i64 16, i1 false)
  %tmpv.366.ld.1 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.366, align 8, !dbg !2407
  %icmp.157 = icmp eq %.command-line-arguments.marble.0* %tmpv.366.ld.1, null, !dbg !2407
  %zext.156 = zext i1 %icmp.157 to i8, !dbg !2407
  %trunc.135 = trunc i8 %zext.156 to i1, !dbg !2407
  br i1 %trunc.135, label %then.135, label %else.135, !make.implicit !46

else.134:                                         ; preds = %fallthrough.133
  %.ld.13 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.365, align 8, !dbg !2407
  store %.command-line-arguments.marble.0* %.ld.13, %.command-line-arguments.marble.0** %tmpv.374, align 8
  br label %fallthrough.134

then.135:                                         ; preds = %fallthrough.134
  call void @runtime.panicmem(i8* nest undef), !dbg !2407
  unreachable

fallthrough.135:                                  ; preds = %else.135
  %tmpv.376.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.376, align 8, !dbg !2407
  %field.514 = getelementptr inbounds %.command-line-arguments.marble.0, %.command-line-arguments.marble.0* %tmpv.376.ld.0, i32 0, i32 1, !dbg !2407
  %cast.1742 = bitcast { i8*, i64 }* %tmpv.375 to i8*
  %cast.1743 = bitcast { i8*, i64 }* %field.514 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1742, i8* align 8 %cast.1743, i64 16, i1 false)
  %field.515 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.373, i32 0, i32 1, !dbg !2407
  %tmpv.373.field.ld.0 = load i64, i64* %field.515, align 8, !dbg !2407
  %field.516 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.375, i32 0, i32 1, !dbg !2407
  %tmpv.375.field.ld.0 = load i64, i64* %field.516, align 8, !dbg !2407
  %icmp.158 = icmp eq i64 %tmpv.373.field.ld.0, %tmpv.375.field.ld.0, !dbg !2407
  %zext.157 = zext i1 %icmp.158 to i8, !dbg !2407
  %trunc.137 = trunc i8 %zext.157 to i1, !dbg !2407
  br i1 %trunc.137, label %then.136, label %else.136

else.135:                                         ; preds = %fallthrough.134
  %.ld.14 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.366, align 8, !dbg !2407
  store %.command-line-arguments.marble.0* %.ld.14, %.command-line-arguments.marble.0** %tmpv.376, align 8
  br label %fallthrough.135

then.136:                                         ; preds = %fallthrough.135
  %field.517 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.373, i32 0, i32 0, !dbg !2407
  %tmpv.373.field.ld.1 = load i8*, i8** %field.517, align 8, !dbg !2407
  %field.518 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.375, i32 0, i32 0, !dbg !2407
  %tmpv.375.field.ld.1 = load i8*, i8** %field.518, align 8, !dbg !2407
  %icmp.159 = icmp eq i8* %tmpv.373.field.ld.1, %tmpv.375.field.ld.1, !dbg !2407
  %zext.158 = zext i1 %icmp.159 to i8, !dbg !2407
  %trunc.136 = trunc i8 %zext.158 to i1, !dbg !2407
  br i1 %trunc.136, label %then.137, label %else.137

fallthrough.136:                                  ; preds = %else.136, %fallthrough.137
  %tmpv.378.ld.0 = load i8, i8* %tmpv.378, align 1, !dbg !2407
  %icmp.161 = icmp ne i8 %tmpv.378.ld.0, 1, !dbg !2407
  %zext.160 = zext i1 %icmp.161 to i8, !dbg !2407
  %trunc.138 = trunc i8 %zext.160 to i1, !dbg !2407
  br i1 %trunc.138, label %then.138, label %else.138

else.136:                                         ; preds = %fallthrough.135
  store i8 0, i8* %tmpv.378, align 1, !dbg !2407
  br label %fallthrough.136

then.137:                                         ; preds = %then.136
  store i8 1, i8* %tmpv.377, align 1
  br label %fallthrough.137

fallthrough.137:                                  ; preds = %else.137, %then.137
  %tmpv.377.ld.0 = load i8, i8* %tmpv.377, align 1, !dbg !2407
  store i8 %tmpv.377.ld.0, i8* %tmpv.378, align 1
  br label %fallthrough.136

else.137:                                         ; preds = %then.136
  %field.519 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.373, i32 0, i32 0, !dbg !2407
  %tmpv.373.field.ld.2 = load i8*, i8** %field.519, align 8, !dbg !2407
  %field.520 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.375, i32 0, i32 0, !dbg !2407
  %tmpv.375.field.ld.2 = load i8*, i8** %field.520, align 8, !dbg !2407
  %field.521 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.375, i32 0, i32 1, !dbg !2407
  %tmpv.375.field.ld.3 = load i64, i64* %field.521, align 8, !dbg !2407
  %call.102 = call i32 @memcmp(i8* %tmpv.373.field.ld.2, i8* %tmpv.375.field.ld.2, i64 %tmpv.375.field.ld.3), !dbg !2407
  %icmp.160 = icmp eq i32 %call.102, 0, !dbg !2407
  %zext.159 = zext i1 %icmp.160 to i8, !dbg !2407
  store i8 %zext.159, i8* %tmpv.377, align 1, !dbg !2407
  br label %fallthrough.137

then.138:                                         ; preds = %fallthrough.136
  store i8 0, i8* %"$ret12", align 1, !dbg !2407
  %"$ret12.ld.1" = load i8, i8* %"$ret12", align 1, !dbg !2407
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret12"), !dbg !2407
  ret i8 %"$ret12.ld.1", !dbg !2407

fallthrough.138:                                  ; preds = %else.138
  %tmpv.365.ld.2 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.365, align 8, !dbg !2407
  %icmp.162 = icmp eq %.command-line-arguments.marble.0* %tmpv.365.ld.2, null, !dbg !2407
  %zext.161 = zext i1 %icmp.162 to i8, !dbg !2407
  %trunc.139 = trunc i8 %zext.161 to i1, !dbg !2407
  br i1 %trunc.139, label %then.139, label %else.139, !make.implicit !46

else.138:                                         ; preds = %fallthrough.136
  br label %fallthrough.138

then.139:                                         ; preds = %fallthrough.138
  call void @runtime.panicmem(i8* nest undef), !dbg !2407
  unreachable

fallthrough.139:                                  ; preds = %else.139
  %tmpv.380.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.380, align 8, !dbg !2407
  %field.522 = getelementptr inbounds %.command-line-arguments.marble.0, %.command-line-arguments.marble.0* %tmpv.380.ld.0, i32 0, i32 2, !dbg !2407
  %cast.1745 = bitcast { i8*, i64 }* %tmpv.379 to i8*
  %cast.1746 = bitcast { i8*, i64 }* %field.522 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1745, i8* align 8 %cast.1746, i64 16, i1 false)
  %tmpv.366.ld.2 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.366, align 8, !dbg !2407
  %icmp.163 = icmp eq %.command-line-arguments.marble.0* %tmpv.366.ld.2, null, !dbg !2407
  %zext.162 = zext i1 %icmp.163 to i8, !dbg !2407
  %trunc.140 = trunc i8 %zext.162 to i1, !dbg !2407
  br i1 %trunc.140, label %then.140, label %else.140, !make.implicit !46

else.139:                                         ; preds = %fallthrough.138
  %.ld.15 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.365, align 8, !dbg !2407
  store %.command-line-arguments.marble.0* %.ld.15, %.command-line-arguments.marble.0** %tmpv.380, align 8
  br label %fallthrough.139

then.140:                                         ; preds = %fallthrough.139
  call void @runtime.panicmem(i8* nest undef), !dbg !2407
  unreachable

fallthrough.140:                                  ; preds = %else.140
  %tmpv.382.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.382, align 8, !dbg !2407
  %field.523 = getelementptr inbounds %.command-line-arguments.marble.0, %.command-line-arguments.marble.0* %tmpv.382.ld.0, i32 0, i32 2, !dbg !2407
  %cast.1748 = bitcast { i8*, i64 }* %tmpv.381 to i8*
  %cast.1749 = bitcast { i8*, i64 }* %field.523 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1748, i8* align 8 %cast.1749, i64 16, i1 false)
  %field.524 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.379, i32 0, i32 1, !dbg !2407
  %tmpv.379.field.ld.0 = load i64, i64* %field.524, align 8, !dbg !2407
  %field.525 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.381, i32 0, i32 1, !dbg !2407
  %tmpv.381.field.ld.0 = load i64, i64* %field.525, align 8, !dbg !2407
  %icmp.164 = icmp eq i64 %tmpv.379.field.ld.0, %tmpv.381.field.ld.0, !dbg !2407
  %zext.163 = zext i1 %icmp.164 to i8, !dbg !2407
  %trunc.142 = trunc i8 %zext.163 to i1, !dbg !2407
  br i1 %trunc.142, label %then.141, label %else.141

else.140:                                         ; preds = %fallthrough.139
  %.ld.16 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.366, align 8, !dbg !2407
  store %.command-line-arguments.marble.0* %.ld.16, %.command-line-arguments.marble.0** %tmpv.382, align 8
  br label %fallthrough.140

then.141:                                         ; preds = %fallthrough.140
  %field.526 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.379, i32 0, i32 0, !dbg !2407
  %tmpv.379.field.ld.1 = load i8*, i8** %field.526, align 8, !dbg !2407
  %field.527 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.381, i32 0, i32 0, !dbg !2407
  %tmpv.381.field.ld.1 = load i8*, i8** %field.527, align 8, !dbg !2407
  %icmp.165 = icmp eq i8* %tmpv.379.field.ld.1, %tmpv.381.field.ld.1, !dbg !2407
  %zext.164 = zext i1 %icmp.165 to i8, !dbg !2407
  %trunc.141 = trunc i8 %zext.164 to i1, !dbg !2407
  br i1 %trunc.141, label %then.142, label %else.142

fallthrough.141:                                  ; preds = %else.141, %fallthrough.142
  %tmpv.384.ld.0 = load i8, i8* %tmpv.384, align 1, !dbg !2407
  %icmp.167 = icmp ne i8 %tmpv.384.ld.0, 1, !dbg !2407
  %zext.166 = zext i1 %icmp.167 to i8, !dbg !2407
  %trunc.143 = trunc i8 %zext.166 to i1, !dbg !2407
  br i1 %trunc.143, label %then.143, label %else.143

else.141:                                         ; preds = %fallthrough.140
  store i8 0, i8* %tmpv.384, align 1, !dbg !2407
  br label %fallthrough.141

then.142:                                         ; preds = %then.141
  store i8 1, i8* %tmpv.383, align 1
  br label %fallthrough.142

fallthrough.142:                                  ; preds = %else.142, %then.142
  %tmpv.383.ld.0 = load i8, i8* %tmpv.383, align 1, !dbg !2407
  store i8 %tmpv.383.ld.0, i8* %tmpv.384, align 1
  br label %fallthrough.141

else.142:                                         ; preds = %then.141
  %field.528 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.379, i32 0, i32 0, !dbg !2407
  %tmpv.379.field.ld.2 = load i8*, i8** %field.528, align 8, !dbg !2407
  %field.529 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.381, i32 0, i32 0, !dbg !2407
  %tmpv.381.field.ld.2 = load i8*, i8** %field.529, align 8, !dbg !2407
  %field.530 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.381, i32 0, i32 1, !dbg !2407
  %tmpv.381.field.ld.3 = load i64, i64* %field.530, align 8, !dbg !2407
  %call.103 = call i32 @memcmp(i8* %tmpv.379.field.ld.2, i8* %tmpv.381.field.ld.2, i64 %tmpv.381.field.ld.3), !dbg !2407
  %icmp.166 = icmp eq i32 %call.103, 0, !dbg !2407
  %zext.165 = zext i1 %icmp.166 to i8, !dbg !2407
  store i8 %zext.165, i8* %tmpv.383, align 1, !dbg !2407
  br label %fallthrough.142

then.143:                                         ; preds = %fallthrough.141
  store i8 0, i8* %"$ret12", align 1, !dbg !2407
  %"$ret12.ld.2" = load i8, i8* %"$ret12", align 1, !dbg !2407
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret12"), !dbg !2407
  ret i8 %"$ret12.ld.2", !dbg !2407

fallthrough.143:                                  ; preds = %else.143
  %tmpv.365.ld.3 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.365, align 8, !dbg !2407
  %icmp.168 = icmp eq %.command-line-arguments.marble.0* %tmpv.365.ld.3, null, !dbg !2407
  %zext.167 = zext i1 %icmp.168 to i8, !dbg !2407
  %trunc.144 = trunc i8 %zext.167 to i1, !dbg !2407
  br i1 %trunc.144, label %then.144, label %else.144, !make.implicit !46

else.143:                                         ; preds = %fallthrough.141
  br label %fallthrough.143

then.144:                                         ; preds = %fallthrough.143
  call void @runtime.panicmem(i8* nest undef), !dbg !2407
  unreachable

fallthrough.144:                                  ; preds = %else.144
  %tmpv.385.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.385, align 8, !dbg !2407
  %field.531 = getelementptr inbounds %.command-line-arguments.marble.0, %.command-line-arguments.marble.0* %tmpv.385.ld.0, i32 0, i32 3, !dbg !2407
  %.field.ld.54 = load i64, i64* %field.531, align 8, !dbg !2407
  %tmpv.366.ld.3 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.366, align 8, !dbg !2407
  %icmp.169 = icmp eq %.command-line-arguments.marble.0* %tmpv.366.ld.3, null, !dbg !2407
  %zext.168 = zext i1 %icmp.169 to i8, !dbg !2407
  %trunc.145 = trunc i8 %zext.168 to i1, !dbg !2407
  br i1 %trunc.145, label %then.145, label %else.145, !make.implicit !46

else.144:                                         ; preds = %fallthrough.143
  %.ld.17 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.365, align 8, !dbg !2407
  store %.command-line-arguments.marble.0* %.ld.17, %.command-line-arguments.marble.0** %tmpv.385, align 8
  br label %fallthrough.144

then.145:                                         ; preds = %fallthrough.144
  call void @runtime.panicmem(i8* nest undef), !dbg !2407
  unreachable

fallthrough.145:                                  ; preds = %else.145
  %tmpv.386.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.386, align 8, !dbg !2407
  %field.532 = getelementptr inbounds %.command-line-arguments.marble.0, %.command-line-arguments.marble.0* %tmpv.386.ld.0, i32 0, i32 3, !dbg !2407
  %.field.ld.55 = load i64, i64* %field.532, align 8, !dbg !2407
  %icmp.170 = icmp ne i64 %.field.ld.54, %.field.ld.55, !dbg !2407
  %zext.169 = zext i1 %icmp.170 to i8, !dbg !2407
  %trunc.146 = trunc i8 %zext.169 to i1, !dbg !2407
  br i1 %trunc.146, label %then.146, label %else.146

else.145:                                         ; preds = %fallthrough.144
  %.ld.18 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.366, align 8, !dbg !2407
  store %.command-line-arguments.marble.0* %.ld.18, %.command-line-arguments.marble.0** %tmpv.386, align 8
  br label %fallthrough.145

then.146:                                         ; preds = %fallthrough.145
  store i8 0, i8* %"$ret12", align 1, !dbg !2407
  %"$ret12.ld.3" = load i8, i8* %"$ret12", align 1, !dbg !2407
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret12"), !dbg !2407
  ret i8 %"$ret12.ld.3", !dbg !2407

fallthrough.146:                                  ; preds = %else.146
  %tmpv.365.ld.4 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.365, align 8, !dbg !2407
  %icmp.171 = icmp eq %.command-line-arguments.marble.0* %tmpv.365.ld.4, null, !dbg !2407
  %zext.170 = zext i1 %icmp.171 to i8, !dbg !2407
  %trunc.147 = trunc i8 %zext.170 to i1, !dbg !2407
  br i1 %trunc.147, label %then.147, label %else.147, !make.implicit !46

else.146:                                         ; preds = %fallthrough.145
  br label %fallthrough.146

then.147:                                         ; preds = %fallthrough.146
  call void @runtime.panicmem(i8* nest undef), !dbg !2407
  unreachable

fallthrough.147:                                  ; preds = %else.147
  %tmpv.388.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.388, align 8, !dbg !2407
  %field.533 = getelementptr inbounds %.command-line-arguments.marble.0, %.command-line-arguments.marble.0* %tmpv.388.ld.0, i32 0, i32 4, !dbg !2407
  %cast.1753 = bitcast { i8*, i64 }* %tmpv.387 to i8*
  %cast.1754 = bitcast { i8*, i64 }* %field.533 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1753, i8* align 8 %cast.1754, i64 16, i1 false)
  %tmpv.366.ld.4 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.366, align 8, !dbg !2407
  %icmp.172 = icmp eq %.command-line-arguments.marble.0* %tmpv.366.ld.4, null, !dbg !2407
  %zext.171 = zext i1 %icmp.172 to i8, !dbg !2407
  %trunc.148 = trunc i8 %zext.171 to i1, !dbg !2407
  br i1 %trunc.148, label %then.148, label %else.148, !make.implicit !46

else.147:                                         ; preds = %fallthrough.146
  %.ld.19 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.365, align 8, !dbg !2407
  store %.command-line-arguments.marble.0* %.ld.19, %.command-line-arguments.marble.0** %tmpv.388, align 8
  br label %fallthrough.147

then.148:                                         ; preds = %fallthrough.147
  call void @runtime.panicmem(i8* nest undef), !dbg !2407
  unreachable

fallthrough.148:                                  ; preds = %else.148
  %tmpv.390.ld.0 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.390, align 8, !dbg !2407
  %field.534 = getelementptr inbounds %.command-line-arguments.marble.0, %.command-line-arguments.marble.0* %tmpv.390.ld.0, i32 0, i32 4, !dbg !2407
  %cast.1756 = bitcast { i8*, i64 }* %tmpv.389 to i8*
  %cast.1757 = bitcast { i8*, i64 }* %field.534 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1756, i8* align 8 %cast.1757, i64 16, i1 false)
  %field.535 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.387, i32 0, i32 1, !dbg !2407
  %tmpv.387.field.ld.0 = load i64, i64* %field.535, align 8, !dbg !2407
  %field.536 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.389, i32 0, i32 1, !dbg !2407
  %tmpv.389.field.ld.0 = load i64, i64* %field.536, align 8, !dbg !2407
  %icmp.173 = icmp eq i64 %tmpv.387.field.ld.0, %tmpv.389.field.ld.0, !dbg !2407
  %zext.172 = zext i1 %icmp.173 to i8, !dbg !2407
  %trunc.150 = trunc i8 %zext.172 to i1, !dbg !2407
  br i1 %trunc.150, label %then.149, label %else.149

else.148:                                         ; preds = %fallthrough.147
  %.ld.20 = load %.command-line-arguments.marble.0*, %.command-line-arguments.marble.0** %tmpv.366, align 8, !dbg !2407
  store %.command-line-arguments.marble.0* %.ld.20, %.command-line-arguments.marble.0** %tmpv.390, align 8
  br label %fallthrough.148

then.149:                                         ; preds = %fallthrough.148
  %field.537 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.387, i32 0, i32 0, !dbg !2407
  %tmpv.387.field.ld.1 = load i8*, i8** %field.537, align 8, !dbg !2407
  %field.538 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.389, i32 0, i32 0, !dbg !2407
  %tmpv.389.field.ld.1 = load i8*, i8** %field.538, align 8, !dbg !2407
  %icmp.174 = icmp eq i8* %tmpv.387.field.ld.1, %tmpv.389.field.ld.1, !dbg !2407
  %zext.173 = zext i1 %icmp.174 to i8, !dbg !2407
  %trunc.149 = trunc i8 %zext.173 to i1, !dbg !2407
  br i1 %trunc.149, label %then.150, label %else.150

fallthrough.149:                                  ; preds = %else.149, %fallthrough.150
  %tmpv.392.ld.0 = load i8, i8* %tmpv.392, align 1, !dbg !2407
  %icmp.176 = icmp ne i8 %tmpv.392.ld.0, 1, !dbg !2407
  %zext.175 = zext i1 %icmp.176 to i8, !dbg !2407
  %trunc.151 = trunc i8 %zext.175 to i1, !dbg !2407
  br i1 %trunc.151, label %then.151, label %else.151

else.149:                                         ; preds = %fallthrough.148
  store i8 0, i8* %tmpv.392, align 1, !dbg !2407
  br label %fallthrough.149

then.150:                                         ; preds = %then.149
  store i8 1, i8* %tmpv.391, align 1
  br label %fallthrough.150

fallthrough.150:                                  ; preds = %else.150, %then.150
  %tmpv.391.ld.0 = load i8, i8* %tmpv.391, align 1, !dbg !2407
  store i8 %tmpv.391.ld.0, i8* %tmpv.392, align 1
  br label %fallthrough.149

else.150:                                         ; preds = %then.149
  %field.539 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.387, i32 0, i32 0, !dbg !2407
  %tmpv.387.field.ld.2 = load i8*, i8** %field.539, align 8, !dbg !2407
  %field.540 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.389, i32 0, i32 0, !dbg !2407
  %tmpv.389.field.ld.2 = load i8*, i8** %field.540, align 8, !dbg !2407
  %field.541 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.389, i32 0, i32 1, !dbg !2407
  %tmpv.389.field.ld.3 = load i64, i64* %field.541, align 8, !dbg !2407
  %call.104 = call i32 @memcmp(i8* %tmpv.387.field.ld.2, i8* %tmpv.389.field.ld.2, i64 %tmpv.389.field.ld.3), !dbg !2407
  %icmp.175 = icmp eq i32 %call.104, 0, !dbg !2407
  %zext.174 = zext i1 %icmp.175 to i8, !dbg !2407
  store i8 %zext.174, i8* %tmpv.391, align 1, !dbg !2407
  br label %fallthrough.150

then.151:                                         ; preds = %fallthrough.149
  store i8 0, i8* %"$ret12", align 1, !dbg !2407
  %"$ret12.ld.4" = load i8, i8* %"$ret12", align 1, !dbg !2407
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret12"), !dbg !2407
  ret i8 %"$ret12.ld.4", !dbg !2407

fallthrough.151:                                  ; preds = %else.151
  store i8 1, i8* %"$ret12", align 1, !dbg !2407
  %"$ret12.ld.5" = load i8, i8* %"$ret12", align 1, !dbg !2407
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret12"), !dbg !2407
  ret i8 %"$ret12.ld.5", !dbg !2407

else.151:                                         ; preds = %fallthrough.149
  br label %fallthrough.151
}

define i8 @command_x2dline_x2darguments.marblePrivateDetails..eq(i8* nest %nest.13, i8* %key1, i8* %key2) #0 !dbg !2410 {
entry:
  %key1.addr = alloca i8*, align 8
  %key2.addr = alloca i8*, align 8
  %"$ret13" = alloca i8, align 1
  %tmpv.393 = alloca %.command-line-arguments.marblePrivateDetails.0*, align 8
  %tmpv.394 = alloca %.command-line-arguments.marblePrivateDetails.0*, align 8
  %tmpv.395 = alloca { i8*, i64 }, align 8
  %tmpv.396 = alloca %.command-line-arguments.marblePrivateDetails.0*, align 8
  %tmpv.397 = alloca { i8*, i64 }, align 8
  %tmpv.398 = alloca %.command-line-arguments.marblePrivateDetails.0*, align 8
  %tmpv.399 = alloca i8, align 1
  %tmpv.400 = alloca i8, align 1
  %tmpv.401 = alloca { i8*, i64 }, align 8
  %tmpv.402 = alloca %.command-line-arguments.marblePrivateDetails.0*, align 8
  %tmpv.403 = alloca { i8*, i64 }, align 8
  %tmpv.404 = alloca %.command-line-arguments.marblePrivateDetails.0*, align 8
  %tmpv.405 = alloca i8, align 1
  %tmpv.406 = alloca i8, align 1
  %tmpv.407 = alloca %.command-line-arguments.marblePrivateDetails.0*, align 8
  %tmpv.408 = alloca %.command-line-arguments.marblePrivateDetails.0*, align 8
  store i8* %key1, i8** %key1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key1.addr, metadata !2411, metadata !DIExpression()), !dbg !2412
  store i8* %key2, i8** %key2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key2.addr, metadata !2413, metadata !DIExpression()), !dbg !2412
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %"$ret13")
  store i8 0, i8* %"$ret13", align 1
  call void @llvm.dbg.declare(metadata i8* %"$ret13", metadata !2414, metadata !DIExpression()), !dbg !2412
  %key1.ld.1 = load i8*, i8** %key1.addr, align 8, !dbg !2412
  %cast.1758 = bitcast i8* %key1.ld.1 to %.command-line-arguments.marblePrivateDetails.0*, !dbg !2412
  store %.command-line-arguments.marblePrivateDetails.0* %cast.1758, %.command-line-arguments.marblePrivateDetails.0** %tmpv.393, align 8
  %key2.ld.1 = load i8*, i8** %key2.addr, align 8, !dbg !2412
  %cast.1759 = bitcast i8* %key2.ld.1 to %.command-line-arguments.marblePrivateDetails.0*, !dbg !2412
  store %.command-line-arguments.marblePrivateDetails.0* %cast.1759, %.command-line-arguments.marblePrivateDetails.0** %tmpv.394, align 8
  %tmpv.393.ld.0 = load %.command-line-arguments.marblePrivateDetails.0*, %.command-line-arguments.marblePrivateDetails.0** %tmpv.393, align 8, !dbg !2412
  %icmp.177 = icmp eq %.command-line-arguments.marblePrivateDetails.0* %tmpv.393.ld.0, null, !dbg !2412
  %zext.176 = zext i1 %icmp.177 to i8, !dbg !2412
  %trunc.152 = trunc i8 %zext.176 to i1, !dbg !2412
  br i1 %trunc.152, label %then.152, label %else.152, !make.implicit !46

then.152:                                         ; preds = %entry
  call void @runtime.panicmem(i8* nest undef), !dbg !2412
  unreachable

fallthrough.152:                                  ; preds = %else.152
  %tmpv.396.ld.0 = load %.command-line-arguments.marblePrivateDetails.0*, %.command-line-arguments.marblePrivateDetails.0** %tmpv.396, align 8, !dbg !2412
  %field.542 = getelementptr inbounds %.command-line-arguments.marblePrivateDetails.0, %.command-line-arguments.marblePrivateDetails.0* %tmpv.396.ld.0, i32 0, i32 0, !dbg !2412
  %cast.1761 = bitcast { i8*, i64 }* %tmpv.395 to i8*
  %cast.1762 = bitcast { i8*, i64 }* %field.542 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1761, i8* align 8 %cast.1762, i64 16, i1 false)
  %tmpv.394.ld.0 = load %.command-line-arguments.marblePrivateDetails.0*, %.command-line-arguments.marblePrivateDetails.0** %tmpv.394, align 8, !dbg !2412
  %icmp.178 = icmp eq %.command-line-arguments.marblePrivateDetails.0* %tmpv.394.ld.0, null, !dbg !2412
  %zext.177 = zext i1 %icmp.178 to i8, !dbg !2412
  %trunc.153 = trunc i8 %zext.177 to i1, !dbg !2412
  br i1 %trunc.153, label %then.153, label %else.153, !make.implicit !46

else.152:                                         ; preds = %entry
  %.ld.21 = load %.command-line-arguments.marblePrivateDetails.0*, %.command-line-arguments.marblePrivateDetails.0** %tmpv.393, align 8, !dbg !2412
  store %.command-line-arguments.marblePrivateDetails.0* %.ld.21, %.command-line-arguments.marblePrivateDetails.0** %tmpv.396, align 8
  br label %fallthrough.152

then.153:                                         ; preds = %fallthrough.152
  call void @runtime.panicmem(i8* nest undef), !dbg !2412
  unreachable

fallthrough.153:                                  ; preds = %else.153
  %tmpv.398.ld.0 = load %.command-line-arguments.marblePrivateDetails.0*, %.command-line-arguments.marblePrivateDetails.0** %tmpv.398, align 8, !dbg !2412
  %field.543 = getelementptr inbounds %.command-line-arguments.marblePrivateDetails.0, %.command-line-arguments.marblePrivateDetails.0* %tmpv.398.ld.0, i32 0, i32 0, !dbg !2412
  %cast.1764 = bitcast { i8*, i64 }* %tmpv.397 to i8*
  %cast.1765 = bitcast { i8*, i64 }* %field.543 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1764, i8* align 8 %cast.1765, i64 16, i1 false)
  %field.544 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.395, i32 0, i32 1, !dbg !2412
  %tmpv.395.field.ld.0 = load i64, i64* %field.544, align 8, !dbg !2412
  %field.545 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.397, i32 0, i32 1, !dbg !2412
  %tmpv.397.field.ld.0 = load i64, i64* %field.545, align 8, !dbg !2412
  %icmp.179 = icmp eq i64 %tmpv.395.field.ld.0, %tmpv.397.field.ld.0, !dbg !2412
  %zext.178 = zext i1 %icmp.179 to i8, !dbg !2412
  %trunc.155 = trunc i8 %zext.178 to i1, !dbg !2412
  br i1 %trunc.155, label %then.154, label %else.154

else.153:                                         ; preds = %fallthrough.152
  %.ld.22 = load %.command-line-arguments.marblePrivateDetails.0*, %.command-line-arguments.marblePrivateDetails.0** %tmpv.394, align 8, !dbg !2412
  store %.command-line-arguments.marblePrivateDetails.0* %.ld.22, %.command-line-arguments.marblePrivateDetails.0** %tmpv.398, align 8
  br label %fallthrough.153

then.154:                                         ; preds = %fallthrough.153
  %field.546 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.395, i32 0, i32 0, !dbg !2412
  %tmpv.395.field.ld.1 = load i8*, i8** %field.546, align 8, !dbg !2412
  %field.547 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.397, i32 0, i32 0, !dbg !2412
  %tmpv.397.field.ld.1 = load i8*, i8** %field.547, align 8, !dbg !2412
  %icmp.180 = icmp eq i8* %tmpv.395.field.ld.1, %tmpv.397.field.ld.1, !dbg !2412
  %zext.179 = zext i1 %icmp.180 to i8, !dbg !2412
  %trunc.154 = trunc i8 %zext.179 to i1, !dbg !2412
  br i1 %trunc.154, label %then.155, label %else.155

fallthrough.154:                                  ; preds = %else.154, %fallthrough.155
  %tmpv.400.ld.0 = load i8, i8* %tmpv.400, align 1, !dbg !2412
  %icmp.182 = icmp ne i8 %tmpv.400.ld.0, 1, !dbg !2412
  %zext.181 = zext i1 %icmp.182 to i8, !dbg !2412
  %trunc.156 = trunc i8 %zext.181 to i1, !dbg !2412
  br i1 %trunc.156, label %then.156, label %else.156

else.154:                                         ; preds = %fallthrough.153
  store i8 0, i8* %tmpv.400, align 1, !dbg !2412
  br label %fallthrough.154

then.155:                                         ; preds = %then.154
  store i8 1, i8* %tmpv.399, align 1
  br label %fallthrough.155

fallthrough.155:                                  ; preds = %else.155, %then.155
  %tmpv.399.ld.0 = load i8, i8* %tmpv.399, align 1, !dbg !2412
  store i8 %tmpv.399.ld.0, i8* %tmpv.400, align 1
  br label %fallthrough.154

else.155:                                         ; preds = %then.154
  %field.548 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.395, i32 0, i32 0, !dbg !2412
  %tmpv.395.field.ld.2 = load i8*, i8** %field.548, align 8, !dbg !2412
  %field.549 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.397, i32 0, i32 0, !dbg !2412
  %tmpv.397.field.ld.2 = load i8*, i8** %field.549, align 8, !dbg !2412
  %field.550 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.397, i32 0, i32 1, !dbg !2412
  %tmpv.397.field.ld.3 = load i64, i64* %field.550, align 8, !dbg !2412
  %call.105 = call i32 @memcmp(i8* %tmpv.395.field.ld.2, i8* %tmpv.397.field.ld.2, i64 %tmpv.397.field.ld.3), !dbg !2412
  %icmp.181 = icmp eq i32 %call.105, 0, !dbg !2412
  %zext.180 = zext i1 %icmp.181 to i8, !dbg !2412
  store i8 %zext.180, i8* %tmpv.399, align 1, !dbg !2412
  br label %fallthrough.155

then.156:                                         ; preds = %fallthrough.154
  store i8 0, i8* %"$ret13", align 1, !dbg !2412
  %"$ret13.ld.0" = load i8, i8* %"$ret13", align 1, !dbg !2412
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret13"), !dbg !2412
  ret i8 %"$ret13.ld.0", !dbg !2412

fallthrough.156:                                  ; preds = %else.156
  %tmpv.393.ld.1 = load %.command-line-arguments.marblePrivateDetails.0*, %.command-line-arguments.marblePrivateDetails.0** %tmpv.393, align 8, !dbg !2412
  %icmp.183 = icmp eq %.command-line-arguments.marblePrivateDetails.0* %tmpv.393.ld.1, null, !dbg !2412
  %zext.182 = zext i1 %icmp.183 to i8, !dbg !2412
  %trunc.157 = trunc i8 %zext.182 to i1, !dbg !2412
  br i1 %trunc.157, label %then.157, label %else.157, !make.implicit !46

else.156:                                         ; preds = %fallthrough.154
  br label %fallthrough.156

then.157:                                         ; preds = %fallthrough.156
  call void @runtime.panicmem(i8* nest undef), !dbg !2412
  unreachable

fallthrough.157:                                  ; preds = %else.157
  %tmpv.402.ld.0 = load %.command-line-arguments.marblePrivateDetails.0*, %.command-line-arguments.marblePrivateDetails.0** %tmpv.402, align 8, !dbg !2412
  %field.551 = getelementptr inbounds %.command-line-arguments.marblePrivateDetails.0, %.command-line-arguments.marblePrivateDetails.0* %tmpv.402.ld.0, i32 0, i32 1, !dbg !2412
  %cast.1767 = bitcast { i8*, i64 }* %tmpv.401 to i8*
  %cast.1768 = bitcast { i8*, i64 }* %field.551 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1767, i8* align 8 %cast.1768, i64 16, i1 false)
  %tmpv.394.ld.1 = load %.command-line-arguments.marblePrivateDetails.0*, %.command-line-arguments.marblePrivateDetails.0** %tmpv.394, align 8, !dbg !2412
  %icmp.184 = icmp eq %.command-line-arguments.marblePrivateDetails.0* %tmpv.394.ld.1, null, !dbg !2412
  %zext.183 = zext i1 %icmp.184 to i8, !dbg !2412
  %trunc.158 = trunc i8 %zext.183 to i1, !dbg !2412
  br i1 %trunc.158, label %then.158, label %else.158, !make.implicit !46

else.157:                                         ; preds = %fallthrough.156
  %.ld.23 = load %.command-line-arguments.marblePrivateDetails.0*, %.command-line-arguments.marblePrivateDetails.0** %tmpv.393, align 8, !dbg !2412
  store %.command-line-arguments.marblePrivateDetails.0* %.ld.23, %.command-line-arguments.marblePrivateDetails.0** %tmpv.402, align 8
  br label %fallthrough.157

then.158:                                         ; preds = %fallthrough.157
  call void @runtime.panicmem(i8* nest undef), !dbg !2412
  unreachable

fallthrough.158:                                  ; preds = %else.158
  %tmpv.404.ld.0 = load %.command-line-arguments.marblePrivateDetails.0*, %.command-line-arguments.marblePrivateDetails.0** %tmpv.404, align 8, !dbg !2412
  %field.552 = getelementptr inbounds %.command-line-arguments.marblePrivateDetails.0, %.command-line-arguments.marblePrivateDetails.0* %tmpv.404.ld.0, i32 0, i32 1, !dbg !2412
  %cast.1770 = bitcast { i8*, i64 }* %tmpv.403 to i8*
  %cast.1771 = bitcast { i8*, i64 }* %field.552 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1770, i8* align 8 %cast.1771, i64 16, i1 false)
  %field.553 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.401, i32 0, i32 1, !dbg !2412
  %tmpv.401.field.ld.0 = load i64, i64* %field.553, align 8, !dbg !2412
  %field.554 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.403, i32 0, i32 1, !dbg !2412
  %tmpv.403.field.ld.0 = load i64, i64* %field.554, align 8, !dbg !2412
  %icmp.185 = icmp eq i64 %tmpv.401.field.ld.0, %tmpv.403.field.ld.0, !dbg !2412
  %zext.184 = zext i1 %icmp.185 to i8, !dbg !2412
  %trunc.160 = trunc i8 %zext.184 to i1, !dbg !2412
  br i1 %trunc.160, label %then.159, label %else.159

else.158:                                         ; preds = %fallthrough.157
  %.ld.24 = load %.command-line-arguments.marblePrivateDetails.0*, %.command-line-arguments.marblePrivateDetails.0** %tmpv.394, align 8, !dbg !2412
  store %.command-line-arguments.marblePrivateDetails.0* %.ld.24, %.command-line-arguments.marblePrivateDetails.0** %tmpv.404, align 8
  br label %fallthrough.158

then.159:                                         ; preds = %fallthrough.158
  %field.555 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.401, i32 0, i32 0, !dbg !2412
  %tmpv.401.field.ld.1 = load i8*, i8** %field.555, align 8, !dbg !2412
  %field.556 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.403, i32 0, i32 0, !dbg !2412
  %tmpv.403.field.ld.1 = load i8*, i8** %field.556, align 8, !dbg !2412
  %icmp.186 = icmp eq i8* %tmpv.401.field.ld.1, %tmpv.403.field.ld.1, !dbg !2412
  %zext.185 = zext i1 %icmp.186 to i8, !dbg !2412
  %trunc.159 = trunc i8 %zext.185 to i1, !dbg !2412
  br i1 %trunc.159, label %then.160, label %else.160

fallthrough.159:                                  ; preds = %else.159, %fallthrough.160
  %tmpv.406.ld.0 = load i8, i8* %tmpv.406, align 1, !dbg !2412
  %icmp.188 = icmp ne i8 %tmpv.406.ld.0, 1, !dbg !2412
  %zext.187 = zext i1 %icmp.188 to i8, !dbg !2412
  %trunc.161 = trunc i8 %zext.187 to i1, !dbg !2412
  br i1 %trunc.161, label %then.161, label %else.161

else.159:                                         ; preds = %fallthrough.158
  store i8 0, i8* %tmpv.406, align 1, !dbg !2412
  br label %fallthrough.159

then.160:                                         ; preds = %then.159
  store i8 1, i8* %tmpv.405, align 1
  br label %fallthrough.160

fallthrough.160:                                  ; preds = %else.160, %then.160
  %tmpv.405.ld.0 = load i8, i8* %tmpv.405, align 1, !dbg !2412
  store i8 %tmpv.405.ld.0, i8* %tmpv.406, align 1
  br label %fallthrough.159

else.160:                                         ; preds = %then.159
  %field.557 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.401, i32 0, i32 0, !dbg !2412
  %tmpv.401.field.ld.2 = load i8*, i8** %field.557, align 8, !dbg !2412
  %field.558 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.403, i32 0, i32 0, !dbg !2412
  %tmpv.403.field.ld.2 = load i8*, i8** %field.558, align 8, !dbg !2412
  %field.559 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.403, i32 0, i32 1, !dbg !2412
  %tmpv.403.field.ld.3 = load i64, i64* %field.559, align 8, !dbg !2412
  %call.106 = call i32 @memcmp(i8* %tmpv.401.field.ld.2, i8* %tmpv.403.field.ld.2, i64 %tmpv.403.field.ld.3), !dbg !2412
  %icmp.187 = icmp eq i32 %call.106, 0, !dbg !2412
  %zext.186 = zext i1 %icmp.187 to i8, !dbg !2412
  store i8 %zext.186, i8* %tmpv.405, align 1, !dbg !2412
  br label %fallthrough.160

then.161:                                         ; preds = %fallthrough.159
  store i8 0, i8* %"$ret13", align 1, !dbg !2412
  %"$ret13.ld.1" = load i8, i8* %"$ret13", align 1, !dbg !2412
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret13"), !dbg !2412
  ret i8 %"$ret13.ld.1", !dbg !2412

fallthrough.161:                                  ; preds = %else.161
  %tmpv.393.ld.2 = load %.command-line-arguments.marblePrivateDetails.0*, %.command-line-arguments.marblePrivateDetails.0** %tmpv.393, align 8, !dbg !2412
  %icmp.189 = icmp eq %.command-line-arguments.marblePrivateDetails.0* %tmpv.393.ld.2, null, !dbg !2412
  %zext.188 = zext i1 %icmp.189 to i8, !dbg !2412
  %trunc.162 = trunc i8 %zext.188 to i1, !dbg !2412
  br i1 %trunc.162, label %then.162, label %else.162, !make.implicit !46

else.161:                                         ; preds = %fallthrough.159
  br label %fallthrough.161

then.162:                                         ; preds = %fallthrough.161
  call void @runtime.panicmem(i8* nest undef), !dbg !2412
  unreachable

fallthrough.162:                                  ; preds = %else.162
  %tmpv.407.ld.0 = load %.command-line-arguments.marblePrivateDetails.0*, %.command-line-arguments.marblePrivateDetails.0** %tmpv.407, align 8, !dbg !2412
  %field.560 = getelementptr inbounds %.command-line-arguments.marblePrivateDetails.0, %.command-line-arguments.marblePrivateDetails.0* %tmpv.407.ld.0, i32 0, i32 2, !dbg !2412
  %.field.ld.56 = load i64, i64* %field.560, align 8, !dbg !2412
  %tmpv.394.ld.2 = load %.command-line-arguments.marblePrivateDetails.0*, %.command-line-arguments.marblePrivateDetails.0** %tmpv.394, align 8, !dbg !2412
  %icmp.190 = icmp eq %.command-line-arguments.marblePrivateDetails.0* %tmpv.394.ld.2, null, !dbg !2412
  %zext.189 = zext i1 %icmp.190 to i8, !dbg !2412
  %trunc.163 = trunc i8 %zext.189 to i1, !dbg !2412
  br i1 %trunc.163, label %then.163, label %else.163, !make.implicit !46

else.162:                                         ; preds = %fallthrough.161
  %.ld.25 = load %.command-line-arguments.marblePrivateDetails.0*, %.command-line-arguments.marblePrivateDetails.0** %tmpv.393, align 8, !dbg !2412
  store %.command-line-arguments.marblePrivateDetails.0* %.ld.25, %.command-line-arguments.marblePrivateDetails.0** %tmpv.407, align 8
  br label %fallthrough.162

then.163:                                         ; preds = %fallthrough.162
  call void @runtime.panicmem(i8* nest undef), !dbg !2412
  unreachable

fallthrough.163:                                  ; preds = %else.163
  %tmpv.408.ld.0 = load %.command-line-arguments.marblePrivateDetails.0*, %.command-line-arguments.marblePrivateDetails.0** %tmpv.408, align 8, !dbg !2412
  %field.561 = getelementptr inbounds %.command-line-arguments.marblePrivateDetails.0, %.command-line-arguments.marblePrivateDetails.0* %tmpv.408.ld.0, i32 0, i32 2, !dbg !2412
  %.field.ld.57 = load i64, i64* %field.561, align 8, !dbg !2412
  %icmp.191 = icmp ne i64 %.field.ld.56, %.field.ld.57, !dbg !2412
  %zext.190 = zext i1 %icmp.191 to i8, !dbg !2412
  %trunc.164 = trunc i8 %zext.190 to i1, !dbg !2412
  br i1 %trunc.164, label %then.164, label %else.164

else.163:                                         ; preds = %fallthrough.162
  %.ld.26 = load %.command-line-arguments.marblePrivateDetails.0*, %.command-line-arguments.marblePrivateDetails.0** %tmpv.394, align 8, !dbg !2412
  store %.command-line-arguments.marblePrivateDetails.0* %.ld.26, %.command-line-arguments.marblePrivateDetails.0** %tmpv.408, align 8
  br label %fallthrough.163

then.164:                                         ; preds = %fallthrough.163
  store i8 0, i8* %"$ret13", align 1, !dbg !2412
  %"$ret13.ld.2" = load i8, i8* %"$ret13", align 1, !dbg !2412
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret13"), !dbg !2412
  ret i8 %"$ret13.ld.2", !dbg !2412

fallthrough.164:                                  ; preds = %else.164
  store i8 1, i8* %"$ret13", align 1, !dbg !2412
  %"$ret13.ld.3" = load i8, i8* %"$ret13", align 1, !dbg !2412
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret13"), !dbg !2412
  ret i8 %"$ret13.ld.3", !dbg !2412

else.164:                                         ; preds = %fallthrough.163
  br label %fallthrough.164
}

declare void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Success(%Response.0*, i8*, %IPST.0*) #0

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

declare noalias nonnull i8* @runtime.newobject(i8*, %_type.0*) #0

declare { i8*, i64 } @runtime.concatstrings(i8*, i8*, i8*, i64) #0

; Function Attrs: cold
declare void @runtime.typedmemmove(i8*, %_type.0*, i8*, i8*) #4

declare void @fmt.Println({ i64, %error.0 }*, i8*, %IPST.52*) #0

declare i32 @memcmp(i8*, i8*, i64) #0

declare void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.Error(%Response.0*, i8*, i8*, i64) #0

declare { i8*, i8 } @runtime.mapaccess2__faststr(i8*, %_type.0*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, i8*, i64) #0

define i8 @command_x2dline_x2darguments_0MarblesPrivateChaincode_0initMarble_0marbleTransientInput..eq(i8* nest %nest.14, i8* %key1, i8* %key2) #0 !dbg !2415 {
entry:
  %key1.addr = alloca i8*, align 8
  %key2.addr = alloca i8*, align 8
  %"$ret14" = alloca i8, align 1
  %tmpv.409 = alloca %.command-line-arguments.marbleTransientInput.0*, align 8
  %tmpv.410 = alloca %.command-line-arguments.marbleTransientInput.0*, align 8
  %tmpv.411 = alloca { i8*, i64 }, align 8
  %tmpv.412 = alloca %.command-line-arguments.marbleTransientInput.0*, align 8
  %tmpv.413 = alloca { i8*, i64 }, align 8
  %tmpv.414 = alloca %.command-line-arguments.marbleTransientInput.0*, align 8
  %tmpv.415 = alloca i8, align 1
  %tmpv.416 = alloca i8, align 1
  %tmpv.417 = alloca { i8*, i64 }, align 8
  %tmpv.418 = alloca %.command-line-arguments.marbleTransientInput.0*, align 8
  %tmpv.419 = alloca { i8*, i64 }, align 8
  %tmpv.420 = alloca %.command-line-arguments.marbleTransientInput.0*, align 8
  %tmpv.421 = alloca i8, align 1
  %tmpv.422 = alloca i8, align 1
  %tmpv.423 = alloca %.command-line-arguments.marbleTransientInput.0*, align 8
  %tmpv.424 = alloca %.command-line-arguments.marbleTransientInput.0*, align 8
  %tmpv.425 = alloca { i8*, i64 }, align 8
  %tmpv.426 = alloca %.command-line-arguments.marbleTransientInput.0*, align 8
  %tmpv.427 = alloca { i8*, i64 }, align 8
  %tmpv.428 = alloca %.command-line-arguments.marbleTransientInput.0*, align 8
  %tmpv.429 = alloca i8, align 1
  %tmpv.430 = alloca i8, align 1
  %tmpv.431 = alloca %.command-line-arguments.marbleTransientInput.0*, align 8
  %tmpv.432 = alloca %.command-line-arguments.marbleTransientInput.0*, align 8
  store i8* %key1, i8** %key1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key1.addr, metadata !2416, metadata !DIExpression()), !dbg !2417
  store i8* %key2, i8** %key2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key2.addr, metadata !2418, metadata !DIExpression()), !dbg !2417
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %"$ret14")
  store i8 0, i8* %"$ret14", align 1
  call void @llvm.dbg.declare(metadata i8* %"$ret14", metadata !2419, metadata !DIExpression()), !dbg !2417
  %key1.ld.2 = load i8*, i8** %key1.addr, align 8, !dbg !2417
  %cast.1774 = bitcast i8* %key1.ld.2 to %.command-line-arguments.marbleTransientInput.0*, !dbg !2417
  store %.command-line-arguments.marbleTransientInput.0* %cast.1774, %.command-line-arguments.marbleTransientInput.0** %tmpv.409, align 8
  %key2.ld.2 = load i8*, i8** %key2.addr, align 8, !dbg !2417
  %cast.1775 = bitcast i8* %key2.ld.2 to %.command-line-arguments.marbleTransientInput.0*, !dbg !2417
  store %.command-line-arguments.marbleTransientInput.0* %cast.1775, %.command-line-arguments.marbleTransientInput.0** %tmpv.410, align 8
  %tmpv.409.ld.0 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.409, align 8, !dbg !2417
  %icmp.192 = icmp eq %.command-line-arguments.marbleTransientInput.0* %tmpv.409.ld.0, null, !dbg !2417
  %zext.191 = zext i1 %icmp.192 to i8, !dbg !2417
  %trunc.165 = trunc i8 %zext.191 to i1, !dbg !2417
  br i1 %trunc.165, label %then.165, label %else.165, !make.implicit !46

then.165:                                         ; preds = %entry
  call void @runtime.panicmem(i8* nest undef), !dbg !2417
  unreachable

fallthrough.165:                                  ; preds = %else.165
  %tmpv.412.ld.0 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.412, align 8, !dbg !2417
  %field.562 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %tmpv.412.ld.0, i32 0, i32 0, !dbg !2417
  %cast.1777 = bitcast { i8*, i64 }* %tmpv.411 to i8*
  %cast.1778 = bitcast { i8*, i64 }* %field.562 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1777, i8* align 8 %cast.1778, i64 16, i1 false)
  %tmpv.410.ld.0 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.410, align 8, !dbg !2417
  %icmp.193 = icmp eq %.command-line-arguments.marbleTransientInput.0* %tmpv.410.ld.0, null, !dbg !2417
  %zext.192 = zext i1 %icmp.193 to i8, !dbg !2417
  %trunc.166 = trunc i8 %zext.192 to i1, !dbg !2417
  br i1 %trunc.166, label %then.166, label %else.166, !make.implicit !46

else.165:                                         ; preds = %entry
  %.ld.27 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.409, align 8, !dbg !2417
  store %.command-line-arguments.marbleTransientInput.0* %.ld.27, %.command-line-arguments.marbleTransientInput.0** %tmpv.412, align 8
  br label %fallthrough.165

then.166:                                         ; preds = %fallthrough.165
  call void @runtime.panicmem(i8* nest undef), !dbg !2417
  unreachable

fallthrough.166:                                  ; preds = %else.166
  %tmpv.414.ld.0 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.414, align 8, !dbg !2417
  %field.563 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %tmpv.414.ld.0, i32 0, i32 0, !dbg !2417
  %cast.1780 = bitcast { i8*, i64 }* %tmpv.413 to i8*
  %cast.1781 = bitcast { i8*, i64 }* %field.563 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1780, i8* align 8 %cast.1781, i64 16, i1 false)
  %field.564 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.411, i32 0, i32 1, !dbg !2417
  %tmpv.411.field.ld.0 = load i64, i64* %field.564, align 8, !dbg !2417
  %field.565 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.413, i32 0, i32 1, !dbg !2417
  %tmpv.413.field.ld.0 = load i64, i64* %field.565, align 8, !dbg !2417
  %icmp.194 = icmp eq i64 %tmpv.411.field.ld.0, %tmpv.413.field.ld.0, !dbg !2417
  %zext.193 = zext i1 %icmp.194 to i8, !dbg !2417
  %trunc.168 = trunc i8 %zext.193 to i1, !dbg !2417
  br i1 %trunc.168, label %then.167, label %else.167

else.166:                                         ; preds = %fallthrough.165
  %.ld.28 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.410, align 8, !dbg !2417
  store %.command-line-arguments.marbleTransientInput.0* %.ld.28, %.command-line-arguments.marbleTransientInput.0** %tmpv.414, align 8
  br label %fallthrough.166

then.167:                                         ; preds = %fallthrough.166
  %field.566 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.411, i32 0, i32 0, !dbg !2417
  %tmpv.411.field.ld.1 = load i8*, i8** %field.566, align 8, !dbg !2417
  %field.567 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.413, i32 0, i32 0, !dbg !2417
  %tmpv.413.field.ld.1 = load i8*, i8** %field.567, align 8, !dbg !2417
  %icmp.195 = icmp eq i8* %tmpv.411.field.ld.1, %tmpv.413.field.ld.1, !dbg !2417
  %zext.194 = zext i1 %icmp.195 to i8, !dbg !2417
  %trunc.167 = trunc i8 %zext.194 to i1, !dbg !2417
  br i1 %trunc.167, label %then.168, label %else.168

fallthrough.167:                                  ; preds = %else.167, %fallthrough.168
  %tmpv.416.ld.0 = load i8, i8* %tmpv.416, align 1, !dbg !2417
  %icmp.197 = icmp ne i8 %tmpv.416.ld.0, 1, !dbg !2417
  %zext.196 = zext i1 %icmp.197 to i8, !dbg !2417
  %trunc.169 = trunc i8 %zext.196 to i1, !dbg !2417
  br i1 %trunc.169, label %then.169, label %else.169

else.167:                                         ; preds = %fallthrough.166
  store i8 0, i8* %tmpv.416, align 1, !dbg !2417
  br label %fallthrough.167

then.168:                                         ; preds = %then.167
  store i8 1, i8* %tmpv.415, align 1
  br label %fallthrough.168

fallthrough.168:                                  ; preds = %else.168, %then.168
  %tmpv.415.ld.0 = load i8, i8* %tmpv.415, align 1, !dbg !2417
  store i8 %tmpv.415.ld.0, i8* %tmpv.416, align 1
  br label %fallthrough.167

else.168:                                         ; preds = %then.167
  %field.568 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.411, i32 0, i32 0, !dbg !2417
  %tmpv.411.field.ld.2 = load i8*, i8** %field.568, align 8, !dbg !2417
  %field.569 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.413, i32 0, i32 0, !dbg !2417
  %tmpv.413.field.ld.2 = load i8*, i8** %field.569, align 8, !dbg !2417
  %field.570 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.413, i32 0, i32 1, !dbg !2417
  %tmpv.413.field.ld.3 = load i64, i64* %field.570, align 8, !dbg !2417
  %call.107 = call i32 @memcmp(i8* %tmpv.411.field.ld.2, i8* %tmpv.413.field.ld.2, i64 %tmpv.413.field.ld.3), !dbg !2417
  %icmp.196 = icmp eq i32 %call.107, 0, !dbg !2417
  %zext.195 = zext i1 %icmp.196 to i8, !dbg !2417
  store i8 %zext.195, i8* %tmpv.415, align 1, !dbg !2417
  br label %fallthrough.168

then.169:                                         ; preds = %fallthrough.167
  store i8 0, i8* %"$ret14", align 1, !dbg !2417
  %"$ret14.ld.0" = load i8, i8* %"$ret14", align 1, !dbg !2417
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret14"), !dbg !2417
  ret i8 %"$ret14.ld.0", !dbg !2417

fallthrough.169:                                  ; preds = %else.169
  %tmpv.409.ld.1 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.409, align 8, !dbg !2417
  %icmp.198 = icmp eq %.command-line-arguments.marbleTransientInput.0* %tmpv.409.ld.1, null, !dbg !2417
  %zext.197 = zext i1 %icmp.198 to i8, !dbg !2417
  %trunc.170 = trunc i8 %zext.197 to i1, !dbg !2417
  br i1 %trunc.170, label %then.170, label %else.170, !make.implicit !46

else.169:                                         ; preds = %fallthrough.167
  br label %fallthrough.169

then.170:                                         ; preds = %fallthrough.169
  call void @runtime.panicmem(i8* nest undef), !dbg !2417
  unreachable

fallthrough.170:                                  ; preds = %else.170
  %tmpv.418.ld.0 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.418, align 8, !dbg !2417
  %field.571 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %tmpv.418.ld.0, i32 0, i32 1, !dbg !2417
  %cast.1783 = bitcast { i8*, i64 }* %tmpv.417 to i8*
  %cast.1784 = bitcast { i8*, i64 }* %field.571 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1783, i8* align 8 %cast.1784, i64 16, i1 false)
  %tmpv.410.ld.1 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.410, align 8, !dbg !2417
  %icmp.199 = icmp eq %.command-line-arguments.marbleTransientInput.0* %tmpv.410.ld.1, null, !dbg !2417
  %zext.198 = zext i1 %icmp.199 to i8, !dbg !2417
  %trunc.171 = trunc i8 %zext.198 to i1, !dbg !2417
  br i1 %trunc.171, label %then.171, label %else.171, !make.implicit !46

else.170:                                         ; preds = %fallthrough.169
  %.ld.29 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.409, align 8, !dbg !2417
  store %.command-line-arguments.marbleTransientInput.0* %.ld.29, %.command-line-arguments.marbleTransientInput.0** %tmpv.418, align 8
  br label %fallthrough.170

then.171:                                         ; preds = %fallthrough.170
  call void @runtime.panicmem(i8* nest undef), !dbg !2417
  unreachable

fallthrough.171:                                  ; preds = %else.171
  %tmpv.420.ld.0 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.420, align 8, !dbg !2417
  %field.572 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %tmpv.420.ld.0, i32 0, i32 1, !dbg !2417
  %cast.1786 = bitcast { i8*, i64 }* %tmpv.419 to i8*
  %cast.1787 = bitcast { i8*, i64 }* %field.572 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1786, i8* align 8 %cast.1787, i64 16, i1 false)
  %field.573 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.417, i32 0, i32 1, !dbg !2417
  %tmpv.417.field.ld.0 = load i64, i64* %field.573, align 8, !dbg !2417
  %field.574 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.419, i32 0, i32 1, !dbg !2417
  %tmpv.419.field.ld.0 = load i64, i64* %field.574, align 8, !dbg !2417
  %icmp.200 = icmp eq i64 %tmpv.417.field.ld.0, %tmpv.419.field.ld.0, !dbg !2417
  %zext.199 = zext i1 %icmp.200 to i8, !dbg !2417
  %trunc.173 = trunc i8 %zext.199 to i1, !dbg !2417
  br i1 %trunc.173, label %then.172, label %else.172

else.171:                                         ; preds = %fallthrough.170
  %.ld.30 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.410, align 8, !dbg !2417
  store %.command-line-arguments.marbleTransientInput.0* %.ld.30, %.command-line-arguments.marbleTransientInput.0** %tmpv.420, align 8
  br label %fallthrough.171

then.172:                                         ; preds = %fallthrough.171
  %field.575 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.417, i32 0, i32 0, !dbg !2417
  %tmpv.417.field.ld.1 = load i8*, i8** %field.575, align 8, !dbg !2417
  %field.576 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.419, i32 0, i32 0, !dbg !2417
  %tmpv.419.field.ld.1 = load i8*, i8** %field.576, align 8, !dbg !2417
  %icmp.201 = icmp eq i8* %tmpv.417.field.ld.1, %tmpv.419.field.ld.1, !dbg !2417
  %zext.200 = zext i1 %icmp.201 to i8, !dbg !2417
  %trunc.172 = trunc i8 %zext.200 to i1, !dbg !2417
  br i1 %trunc.172, label %then.173, label %else.173

fallthrough.172:                                  ; preds = %else.172, %fallthrough.173
  %tmpv.422.ld.0 = load i8, i8* %tmpv.422, align 1, !dbg !2417
  %icmp.203 = icmp ne i8 %tmpv.422.ld.0, 1, !dbg !2417
  %zext.202 = zext i1 %icmp.203 to i8, !dbg !2417
  %trunc.174 = trunc i8 %zext.202 to i1, !dbg !2417
  br i1 %trunc.174, label %then.174, label %else.174

else.172:                                         ; preds = %fallthrough.171
  store i8 0, i8* %tmpv.422, align 1, !dbg !2417
  br label %fallthrough.172

then.173:                                         ; preds = %then.172
  store i8 1, i8* %tmpv.421, align 1
  br label %fallthrough.173

fallthrough.173:                                  ; preds = %else.173, %then.173
  %tmpv.421.ld.0 = load i8, i8* %tmpv.421, align 1, !dbg !2417
  store i8 %tmpv.421.ld.0, i8* %tmpv.422, align 1
  br label %fallthrough.172

else.173:                                         ; preds = %then.172
  %field.577 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.417, i32 0, i32 0, !dbg !2417
  %tmpv.417.field.ld.2 = load i8*, i8** %field.577, align 8, !dbg !2417
  %field.578 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.419, i32 0, i32 0, !dbg !2417
  %tmpv.419.field.ld.2 = load i8*, i8** %field.578, align 8, !dbg !2417
  %field.579 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.419, i32 0, i32 1, !dbg !2417
  %tmpv.419.field.ld.3 = load i64, i64* %field.579, align 8, !dbg !2417
  %call.108 = call i32 @memcmp(i8* %tmpv.417.field.ld.2, i8* %tmpv.419.field.ld.2, i64 %tmpv.419.field.ld.3), !dbg !2417
  %icmp.202 = icmp eq i32 %call.108, 0, !dbg !2417
  %zext.201 = zext i1 %icmp.202 to i8, !dbg !2417
  store i8 %zext.201, i8* %tmpv.421, align 1, !dbg !2417
  br label %fallthrough.173

then.174:                                         ; preds = %fallthrough.172
  store i8 0, i8* %"$ret14", align 1, !dbg !2417
  %"$ret14.ld.1" = load i8, i8* %"$ret14", align 1, !dbg !2417
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret14"), !dbg !2417
  ret i8 %"$ret14.ld.1", !dbg !2417

fallthrough.174:                                  ; preds = %else.174
  %tmpv.409.ld.2 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.409, align 8, !dbg !2417
  %icmp.204 = icmp eq %.command-line-arguments.marbleTransientInput.0* %tmpv.409.ld.2, null, !dbg !2417
  %zext.203 = zext i1 %icmp.204 to i8, !dbg !2417
  %trunc.175 = trunc i8 %zext.203 to i1, !dbg !2417
  br i1 %trunc.175, label %then.175, label %else.175, !make.implicit !46

else.174:                                         ; preds = %fallthrough.172
  br label %fallthrough.174

then.175:                                         ; preds = %fallthrough.174
  call void @runtime.panicmem(i8* nest undef), !dbg !2417
  unreachable

fallthrough.175:                                  ; preds = %else.175
  %tmpv.423.ld.0 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.423, align 8, !dbg !2417
  %field.580 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %tmpv.423.ld.0, i32 0, i32 2, !dbg !2417
  %.field.ld.58 = load i64, i64* %field.580, align 8, !dbg !2417
  %tmpv.410.ld.2 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.410, align 8, !dbg !2417
  %icmp.205 = icmp eq %.command-line-arguments.marbleTransientInput.0* %tmpv.410.ld.2, null, !dbg !2417
  %zext.204 = zext i1 %icmp.205 to i8, !dbg !2417
  %trunc.176 = trunc i8 %zext.204 to i1, !dbg !2417
  br i1 %trunc.176, label %then.176, label %else.176, !make.implicit !46

else.175:                                         ; preds = %fallthrough.174
  %.ld.31 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.409, align 8, !dbg !2417
  store %.command-line-arguments.marbleTransientInput.0* %.ld.31, %.command-line-arguments.marbleTransientInput.0** %tmpv.423, align 8
  br label %fallthrough.175

then.176:                                         ; preds = %fallthrough.175
  call void @runtime.panicmem(i8* nest undef), !dbg !2417
  unreachable

fallthrough.176:                                  ; preds = %else.176
  %tmpv.424.ld.0 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.424, align 8, !dbg !2417
  %field.581 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %tmpv.424.ld.0, i32 0, i32 2, !dbg !2417
  %.field.ld.59 = load i64, i64* %field.581, align 8, !dbg !2417
  %icmp.206 = icmp ne i64 %.field.ld.58, %.field.ld.59, !dbg !2417
  %zext.205 = zext i1 %icmp.206 to i8, !dbg !2417
  %trunc.177 = trunc i8 %zext.205 to i1, !dbg !2417
  br i1 %trunc.177, label %then.177, label %else.177

else.176:                                         ; preds = %fallthrough.175
  %.ld.32 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.410, align 8, !dbg !2417
  store %.command-line-arguments.marbleTransientInput.0* %.ld.32, %.command-line-arguments.marbleTransientInput.0** %tmpv.424, align 8
  br label %fallthrough.176

then.177:                                         ; preds = %fallthrough.176
  store i8 0, i8* %"$ret14", align 1, !dbg !2417
  %"$ret14.ld.2" = load i8, i8* %"$ret14", align 1, !dbg !2417
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret14"), !dbg !2417
  ret i8 %"$ret14.ld.2", !dbg !2417

fallthrough.177:                                  ; preds = %else.177
  %tmpv.409.ld.3 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.409, align 8, !dbg !2417
  %icmp.207 = icmp eq %.command-line-arguments.marbleTransientInput.0* %tmpv.409.ld.3, null, !dbg !2417
  %zext.206 = zext i1 %icmp.207 to i8, !dbg !2417
  %trunc.178 = trunc i8 %zext.206 to i1, !dbg !2417
  br i1 %trunc.178, label %then.178, label %else.178, !make.implicit !46

else.177:                                         ; preds = %fallthrough.176
  br label %fallthrough.177

then.178:                                         ; preds = %fallthrough.177
  call void @runtime.panicmem(i8* nest undef), !dbg !2417
  unreachable

fallthrough.178:                                  ; preds = %else.178
  %tmpv.426.ld.0 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.426, align 8, !dbg !2417
  %field.582 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %tmpv.426.ld.0, i32 0, i32 3, !dbg !2417
  %cast.1791 = bitcast { i8*, i64 }* %tmpv.425 to i8*
  %cast.1792 = bitcast { i8*, i64 }* %field.582 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1791, i8* align 8 %cast.1792, i64 16, i1 false)
  %tmpv.410.ld.3 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.410, align 8, !dbg !2417
  %icmp.208 = icmp eq %.command-line-arguments.marbleTransientInput.0* %tmpv.410.ld.3, null, !dbg !2417
  %zext.207 = zext i1 %icmp.208 to i8, !dbg !2417
  %trunc.179 = trunc i8 %zext.207 to i1, !dbg !2417
  br i1 %trunc.179, label %then.179, label %else.179, !make.implicit !46

else.178:                                         ; preds = %fallthrough.177
  %.ld.33 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.409, align 8, !dbg !2417
  store %.command-line-arguments.marbleTransientInput.0* %.ld.33, %.command-line-arguments.marbleTransientInput.0** %tmpv.426, align 8
  br label %fallthrough.178

then.179:                                         ; preds = %fallthrough.178
  call void @runtime.panicmem(i8* nest undef), !dbg !2417
  unreachable

fallthrough.179:                                  ; preds = %else.179
  %tmpv.428.ld.0 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.428, align 8, !dbg !2417
  %field.583 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %tmpv.428.ld.0, i32 0, i32 3, !dbg !2417
  %cast.1794 = bitcast { i8*, i64 }* %tmpv.427 to i8*
  %cast.1795 = bitcast { i8*, i64 }* %field.583 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1794, i8* align 8 %cast.1795, i64 16, i1 false)
  %field.584 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.425, i32 0, i32 1, !dbg !2417
  %tmpv.425.field.ld.0 = load i64, i64* %field.584, align 8, !dbg !2417
  %field.585 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.427, i32 0, i32 1, !dbg !2417
  %tmpv.427.field.ld.0 = load i64, i64* %field.585, align 8, !dbg !2417
  %icmp.209 = icmp eq i64 %tmpv.425.field.ld.0, %tmpv.427.field.ld.0, !dbg !2417
  %zext.208 = zext i1 %icmp.209 to i8, !dbg !2417
  %trunc.181 = trunc i8 %zext.208 to i1, !dbg !2417
  br i1 %trunc.181, label %then.180, label %else.180

else.179:                                         ; preds = %fallthrough.178
  %.ld.34 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.410, align 8, !dbg !2417
  store %.command-line-arguments.marbleTransientInput.0* %.ld.34, %.command-line-arguments.marbleTransientInput.0** %tmpv.428, align 8
  br label %fallthrough.179

then.180:                                         ; preds = %fallthrough.179
  %field.586 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.425, i32 0, i32 0, !dbg !2417
  %tmpv.425.field.ld.1 = load i8*, i8** %field.586, align 8, !dbg !2417
  %field.587 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.427, i32 0, i32 0, !dbg !2417
  %tmpv.427.field.ld.1 = load i8*, i8** %field.587, align 8, !dbg !2417
  %icmp.210 = icmp eq i8* %tmpv.425.field.ld.1, %tmpv.427.field.ld.1, !dbg !2417
  %zext.209 = zext i1 %icmp.210 to i8, !dbg !2417
  %trunc.180 = trunc i8 %zext.209 to i1, !dbg !2417
  br i1 %trunc.180, label %then.181, label %else.181

fallthrough.180:                                  ; preds = %else.180, %fallthrough.181
  %tmpv.430.ld.0 = load i8, i8* %tmpv.430, align 1, !dbg !2417
  %icmp.212 = icmp ne i8 %tmpv.430.ld.0, 1, !dbg !2417
  %zext.211 = zext i1 %icmp.212 to i8, !dbg !2417
  %trunc.182 = trunc i8 %zext.211 to i1, !dbg !2417
  br i1 %trunc.182, label %then.182, label %else.182

else.180:                                         ; preds = %fallthrough.179
  store i8 0, i8* %tmpv.430, align 1, !dbg !2417
  br label %fallthrough.180

then.181:                                         ; preds = %then.180
  store i8 1, i8* %tmpv.429, align 1
  br label %fallthrough.181

fallthrough.181:                                  ; preds = %else.181, %then.181
  %tmpv.429.ld.0 = load i8, i8* %tmpv.429, align 1, !dbg !2417
  store i8 %tmpv.429.ld.0, i8* %tmpv.430, align 1
  br label %fallthrough.180

else.181:                                         ; preds = %then.180
  %field.588 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.425, i32 0, i32 0, !dbg !2417
  %tmpv.425.field.ld.2 = load i8*, i8** %field.588, align 8, !dbg !2417
  %field.589 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.427, i32 0, i32 0, !dbg !2417
  %tmpv.427.field.ld.2 = load i8*, i8** %field.589, align 8, !dbg !2417
  %field.590 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.427, i32 0, i32 1, !dbg !2417
  %tmpv.427.field.ld.3 = load i64, i64* %field.590, align 8, !dbg !2417
  %call.109 = call i32 @memcmp(i8* %tmpv.425.field.ld.2, i8* %tmpv.427.field.ld.2, i64 %tmpv.427.field.ld.3), !dbg !2417
  %icmp.211 = icmp eq i32 %call.109, 0, !dbg !2417
  %zext.210 = zext i1 %icmp.211 to i8, !dbg !2417
  store i8 %zext.210, i8* %tmpv.429, align 1, !dbg !2417
  br label %fallthrough.181

then.182:                                         ; preds = %fallthrough.180
  store i8 0, i8* %"$ret14", align 1, !dbg !2417
  %"$ret14.ld.3" = load i8, i8* %"$ret14", align 1, !dbg !2417
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret14"), !dbg !2417
  ret i8 %"$ret14.ld.3", !dbg !2417

fallthrough.182:                                  ; preds = %else.182
  %tmpv.409.ld.4 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.409, align 8, !dbg !2417
  %icmp.213 = icmp eq %.command-line-arguments.marbleTransientInput.0* %tmpv.409.ld.4, null, !dbg !2417
  %zext.212 = zext i1 %icmp.213 to i8, !dbg !2417
  %trunc.183 = trunc i8 %zext.212 to i1, !dbg !2417
  br i1 %trunc.183, label %then.183, label %else.183, !make.implicit !46

else.182:                                         ; preds = %fallthrough.180
  br label %fallthrough.182

then.183:                                         ; preds = %fallthrough.182
  call void @runtime.panicmem(i8* nest undef), !dbg !2417
  unreachable

fallthrough.183:                                  ; preds = %else.183
  %tmpv.431.ld.0 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.431, align 8, !dbg !2417
  %field.591 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %tmpv.431.ld.0, i32 0, i32 4, !dbg !2417
  %.field.ld.60 = load i64, i64* %field.591, align 8, !dbg !2417
  %tmpv.410.ld.4 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.410, align 8, !dbg !2417
  %icmp.214 = icmp eq %.command-line-arguments.marbleTransientInput.0* %tmpv.410.ld.4, null, !dbg !2417
  %zext.213 = zext i1 %icmp.214 to i8, !dbg !2417
  %trunc.184 = trunc i8 %zext.213 to i1, !dbg !2417
  br i1 %trunc.184, label %then.184, label %else.184, !make.implicit !46

else.183:                                         ; preds = %fallthrough.182
  %.ld.35 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.409, align 8, !dbg !2417
  store %.command-line-arguments.marbleTransientInput.0* %.ld.35, %.command-line-arguments.marbleTransientInput.0** %tmpv.431, align 8
  br label %fallthrough.183

then.184:                                         ; preds = %fallthrough.183
  call void @runtime.panicmem(i8* nest undef), !dbg !2417
  unreachable

fallthrough.184:                                  ; preds = %else.184
  %tmpv.432.ld.0 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.432, align 8, !dbg !2417
  %field.592 = getelementptr inbounds %.command-line-arguments.marbleTransientInput.0, %.command-line-arguments.marbleTransientInput.0* %tmpv.432.ld.0, i32 0, i32 4, !dbg !2417
  %.field.ld.61 = load i64, i64* %field.592, align 8, !dbg !2417
  %icmp.215 = icmp ne i64 %.field.ld.60, %.field.ld.61, !dbg !2417
  %zext.214 = zext i1 %icmp.215 to i8, !dbg !2417
  %trunc.185 = trunc i8 %zext.214 to i1, !dbg !2417
  br i1 %trunc.185, label %then.185, label %else.185

else.184:                                         ; preds = %fallthrough.183
  %.ld.36 = load %.command-line-arguments.marbleTransientInput.0*, %.command-line-arguments.marbleTransientInput.0** %tmpv.410, align 8, !dbg !2417
  store %.command-line-arguments.marbleTransientInput.0* %.ld.36, %.command-line-arguments.marbleTransientInput.0** %tmpv.432, align 8
  br label %fallthrough.184

then.185:                                         ; preds = %fallthrough.184
  store i8 0, i8* %"$ret14", align 1, !dbg !2417
  %"$ret14.ld.4" = load i8, i8* %"$ret14", align 1, !dbg !2417
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret14"), !dbg !2417
  ret i8 %"$ret14.ld.4", !dbg !2417

fallthrough.185:                                  ; preds = %else.185
  store i8 1, i8* %"$ret14", align 1, !dbg !2417
  %"$ret14.ld.5" = load i8, i8* %"$ret14", align 1, !dbg !2417
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret14"), !dbg !2417
  ret i8 %"$ret14.ld.5", !dbg !2417

else.185:                                         ; preds = %fallthrough.184
  br label %fallthrough.185
}

declare { i8*, i8* } @encoding_1json.Unmarshal(i8*, %IPST.0*, i8*, i8*) #0

declare void @encoding_1json.Marshal({ %IPST.0, %error.0 }*, i8*, i8*, i8*) #0

; Function Attrs: noreturn
declare void @runtime.panicmem(i8*) #5

; Function Attrs: noreturn
declare void @runtime.goPanicIndex(i8*, i64, i64) #5

define i8 @command_x2dline_x2darguments_0MarblesPrivateChaincode_0delete_0marbleDeleteTransientInput..eq(i8* nest %nest.15, i8* %key1, i8* %key2) #0 !dbg !2420 {
entry:
  %key1.addr = alloca i8*, align 8
  %key2.addr = alloca i8*, align 8
  %"$ret15" = alloca i8, align 1
  %tmpv.433 = alloca %.command-line-arguments.marbleDeleteTransientInput.0*, align 8
  %tmpv.434 = alloca %.command-line-arguments.marbleDeleteTransientInput.0*, align 8
  %tmpv.435 = alloca { i8*, i64 }, align 8
  %tmpv.436 = alloca %.command-line-arguments.marbleDeleteTransientInput.0*, align 8
  %tmpv.437 = alloca { i8*, i64 }, align 8
  %tmpv.438 = alloca %.command-line-arguments.marbleDeleteTransientInput.0*, align 8
  %tmpv.439 = alloca i8, align 1
  %tmpv.440 = alloca i8, align 1
  store i8* %key1, i8** %key1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key1.addr, metadata !2421, metadata !DIExpression()), !dbg !2422
  store i8* %key2, i8** %key2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key2.addr, metadata !2423, metadata !DIExpression()), !dbg !2422
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %"$ret15")
  store i8 0, i8* %"$ret15", align 1
  call void @llvm.dbg.declare(metadata i8* %"$ret15", metadata !2424, metadata !DIExpression()), !dbg !2422
  %key1.ld.3 = load i8*, i8** %key1.addr, align 8, !dbg !2422
  %cast.1798 = bitcast i8* %key1.ld.3 to %.command-line-arguments.marbleDeleteTransientInput.0*, !dbg !2422
  store %.command-line-arguments.marbleDeleteTransientInput.0* %cast.1798, %.command-line-arguments.marbleDeleteTransientInput.0** %tmpv.433, align 8
  %key2.ld.3 = load i8*, i8** %key2.addr, align 8, !dbg !2422
  %cast.1799 = bitcast i8* %key2.ld.3 to %.command-line-arguments.marbleDeleteTransientInput.0*, !dbg !2422
  store %.command-line-arguments.marbleDeleteTransientInput.0* %cast.1799, %.command-line-arguments.marbleDeleteTransientInput.0** %tmpv.434, align 8
  %tmpv.433.ld.0 = load %.command-line-arguments.marbleDeleteTransientInput.0*, %.command-line-arguments.marbleDeleteTransientInput.0** %tmpv.433, align 8, !dbg !2422
  %icmp.216 = icmp eq %.command-line-arguments.marbleDeleteTransientInput.0* %tmpv.433.ld.0, null, !dbg !2422
  %zext.215 = zext i1 %icmp.216 to i8, !dbg !2422
  %trunc.186 = trunc i8 %zext.215 to i1, !dbg !2422
  br i1 %trunc.186, label %then.186, label %else.186, !make.implicit !46

then.186:                                         ; preds = %entry
  call void @runtime.panicmem(i8* nest undef), !dbg !2422
  unreachable

fallthrough.186:                                  ; preds = %else.186
  %tmpv.436.ld.0 = load %.command-line-arguments.marbleDeleteTransientInput.0*, %.command-line-arguments.marbleDeleteTransientInput.0** %tmpv.436, align 8, !dbg !2422
  %field.593 = getelementptr inbounds %.command-line-arguments.marbleDeleteTransientInput.0, %.command-line-arguments.marbleDeleteTransientInput.0* %tmpv.436.ld.0, i32 0, i32 0, !dbg !2422
  %cast.1801 = bitcast { i8*, i64 }* %tmpv.435 to i8*
  %cast.1802 = bitcast { i8*, i64 }* %field.593 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1801, i8* align 8 %cast.1802, i64 16, i1 false)
  %tmpv.434.ld.0 = load %.command-line-arguments.marbleDeleteTransientInput.0*, %.command-line-arguments.marbleDeleteTransientInput.0** %tmpv.434, align 8, !dbg !2422
  %icmp.217 = icmp eq %.command-line-arguments.marbleDeleteTransientInput.0* %tmpv.434.ld.0, null, !dbg !2422
  %zext.216 = zext i1 %icmp.217 to i8, !dbg !2422
  %trunc.187 = trunc i8 %zext.216 to i1, !dbg !2422
  br i1 %trunc.187, label %then.187, label %else.187, !make.implicit !46

else.186:                                         ; preds = %entry
  %.ld.37 = load %.command-line-arguments.marbleDeleteTransientInput.0*, %.command-line-arguments.marbleDeleteTransientInput.0** %tmpv.433, align 8, !dbg !2422
  store %.command-line-arguments.marbleDeleteTransientInput.0* %.ld.37, %.command-line-arguments.marbleDeleteTransientInput.0** %tmpv.436, align 8
  br label %fallthrough.186

then.187:                                         ; preds = %fallthrough.186
  call void @runtime.panicmem(i8* nest undef), !dbg !2422
  unreachable

fallthrough.187:                                  ; preds = %else.187
  %tmpv.438.ld.0 = load %.command-line-arguments.marbleDeleteTransientInput.0*, %.command-line-arguments.marbleDeleteTransientInput.0** %tmpv.438, align 8, !dbg !2422
  %field.594 = getelementptr inbounds %.command-line-arguments.marbleDeleteTransientInput.0, %.command-line-arguments.marbleDeleteTransientInput.0* %tmpv.438.ld.0, i32 0, i32 0, !dbg !2422
  %cast.1804 = bitcast { i8*, i64 }* %tmpv.437 to i8*
  %cast.1805 = bitcast { i8*, i64 }* %field.594 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1804, i8* align 8 %cast.1805, i64 16, i1 false)
  %field.595 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.435, i32 0, i32 1, !dbg !2422
  %tmpv.435.field.ld.0 = load i64, i64* %field.595, align 8, !dbg !2422
  %field.596 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.437, i32 0, i32 1, !dbg !2422
  %tmpv.437.field.ld.0 = load i64, i64* %field.596, align 8, !dbg !2422
  %icmp.218 = icmp eq i64 %tmpv.435.field.ld.0, %tmpv.437.field.ld.0, !dbg !2422
  %zext.217 = zext i1 %icmp.218 to i8, !dbg !2422
  %trunc.189 = trunc i8 %zext.217 to i1, !dbg !2422
  br i1 %trunc.189, label %then.188, label %else.188

else.187:                                         ; preds = %fallthrough.186
  %.ld.38 = load %.command-line-arguments.marbleDeleteTransientInput.0*, %.command-line-arguments.marbleDeleteTransientInput.0** %tmpv.434, align 8, !dbg !2422
  store %.command-line-arguments.marbleDeleteTransientInput.0* %.ld.38, %.command-line-arguments.marbleDeleteTransientInput.0** %tmpv.438, align 8
  br label %fallthrough.187

then.188:                                         ; preds = %fallthrough.187
  %field.597 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.435, i32 0, i32 0, !dbg !2422
  %tmpv.435.field.ld.1 = load i8*, i8** %field.597, align 8, !dbg !2422
  %field.598 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.437, i32 0, i32 0, !dbg !2422
  %tmpv.437.field.ld.1 = load i8*, i8** %field.598, align 8, !dbg !2422
  %icmp.219 = icmp eq i8* %tmpv.435.field.ld.1, %tmpv.437.field.ld.1, !dbg !2422
  %zext.218 = zext i1 %icmp.219 to i8, !dbg !2422
  %trunc.188 = trunc i8 %zext.218 to i1, !dbg !2422
  br i1 %trunc.188, label %then.189, label %else.189

fallthrough.188:                                  ; preds = %else.188, %fallthrough.189
  %tmpv.440.ld.0 = load i8, i8* %tmpv.440, align 1, !dbg !2422
  %icmp.221 = icmp ne i8 %tmpv.440.ld.0, 1, !dbg !2422
  %zext.220 = zext i1 %icmp.221 to i8, !dbg !2422
  %trunc.190 = trunc i8 %zext.220 to i1, !dbg !2422
  br i1 %trunc.190, label %then.190, label %else.190

else.188:                                         ; preds = %fallthrough.187
  store i8 0, i8* %tmpv.440, align 1, !dbg !2422
  br label %fallthrough.188

then.189:                                         ; preds = %then.188
  store i8 1, i8* %tmpv.439, align 1
  br label %fallthrough.189

fallthrough.189:                                  ; preds = %else.189, %then.189
  %tmpv.439.ld.0 = load i8, i8* %tmpv.439, align 1, !dbg !2422
  store i8 %tmpv.439.ld.0, i8* %tmpv.440, align 1
  br label %fallthrough.188

else.189:                                         ; preds = %then.188
  %field.599 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.435, i32 0, i32 0, !dbg !2422
  %tmpv.435.field.ld.2 = load i8*, i8** %field.599, align 8, !dbg !2422
  %field.600 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.437, i32 0, i32 0, !dbg !2422
  %tmpv.437.field.ld.2 = load i8*, i8** %field.600, align 8, !dbg !2422
  %field.601 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.437, i32 0, i32 1, !dbg !2422
  %tmpv.437.field.ld.3 = load i64, i64* %field.601, align 8, !dbg !2422
  %call.110 = call i32 @memcmp(i8* %tmpv.435.field.ld.2, i8* %tmpv.437.field.ld.2, i64 %tmpv.437.field.ld.3), !dbg !2422
  %icmp.220 = icmp eq i32 %call.110, 0, !dbg !2422
  %zext.219 = zext i1 %icmp.220 to i8, !dbg !2422
  store i8 %zext.219, i8* %tmpv.439, align 1, !dbg !2422
  br label %fallthrough.189

then.190:                                         ; preds = %fallthrough.188
  store i8 0, i8* %"$ret15", align 1, !dbg !2422
  %"$ret15.ld.0" = load i8, i8* %"$ret15", align 1, !dbg !2422
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret15"), !dbg !2422
  ret i8 %"$ret15.ld.0", !dbg !2422

fallthrough.190:                                  ; preds = %else.190
  store i8 1, i8* %"$ret15", align 1, !dbg !2422
  %"$ret15.ld.1" = load i8, i8* %"$ret15", align 1, !dbg !2422
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret15"), !dbg !2422
  ret i8 %"$ret15.ld.1", !dbg !2422

else.190:                                         ; preds = %fallthrough.188
  br label %fallthrough.190
}

define i8 @command_x2dline_x2darguments_0MarblesPrivateChaincode_0transferMarble_0marbleTransferTransientInput..eq(i8* nest %nest.16, i8* %key1, i8* %key2) #0 !dbg !2425 {
entry:
  %key1.addr = alloca i8*, align 8
  %key2.addr = alloca i8*, align 8
  %"$ret16" = alloca i8, align 1
  %tmpv.441 = alloca %.command-line-arguments.marbleTransferTransientInput.0*, align 8
  %tmpv.442 = alloca %.command-line-arguments.marbleTransferTransientInput.0*, align 8
  %tmpv.443 = alloca { i8*, i64 }, align 8
  %tmpv.444 = alloca %.command-line-arguments.marbleTransferTransientInput.0*, align 8
  %tmpv.445 = alloca { i8*, i64 }, align 8
  %tmpv.446 = alloca %.command-line-arguments.marbleTransferTransientInput.0*, align 8
  %tmpv.447 = alloca i8, align 1
  %tmpv.448 = alloca i8, align 1
  %tmpv.449 = alloca { i8*, i64 }, align 8
  %tmpv.450 = alloca %.command-line-arguments.marbleTransferTransientInput.0*, align 8
  %tmpv.451 = alloca { i8*, i64 }, align 8
  %tmpv.452 = alloca %.command-line-arguments.marbleTransferTransientInput.0*, align 8
  %tmpv.453 = alloca i8, align 1
  %tmpv.454 = alloca i8, align 1
  store i8* %key1, i8** %key1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key1.addr, metadata !2426, metadata !DIExpression()), !dbg !2427
  store i8* %key2, i8** %key2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key2.addr, metadata !2428, metadata !DIExpression()), !dbg !2427
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %"$ret16")
  store i8 0, i8* %"$ret16", align 1
  call void @llvm.dbg.declare(metadata i8* %"$ret16", metadata !2429, metadata !DIExpression()), !dbg !2427
  %key1.ld.4 = load i8*, i8** %key1.addr, align 8, !dbg !2427
  %cast.1806 = bitcast i8* %key1.ld.4 to %.command-line-arguments.marbleTransferTransientInput.0*, !dbg !2427
  store %.command-line-arguments.marbleTransferTransientInput.0* %cast.1806, %.command-line-arguments.marbleTransferTransientInput.0** %tmpv.441, align 8
  %key2.ld.4 = load i8*, i8** %key2.addr, align 8, !dbg !2427
  %cast.1807 = bitcast i8* %key2.ld.4 to %.command-line-arguments.marbleTransferTransientInput.0*, !dbg !2427
  store %.command-line-arguments.marbleTransferTransientInput.0* %cast.1807, %.command-line-arguments.marbleTransferTransientInput.0** %tmpv.442, align 8
  %tmpv.441.ld.0 = load %.command-line-arguments.marbleTransferTransientInput.0*, %.command-line-arguments.marbleTransferTransientInput.0** %tmpv.441, align 8, !dbg !2427
  %icmp.222 = icmp eq %.command-line-arguments.marbleTransferTransientInput.0* %tmpv.441.ld.0, null, !dbg !2427
  %zext.221 = zext i1 %icmp.222 to i8, !dbg !2427
  %trunc.191 = trunc i8 %zext.221 to i1, !dbg !2427
  br i1 %trunc.191, label %then.191, label %else.191, !make.implicit !46

then.191:                                         ; preds = %entry
  call void @runtime.panicmem(i8* nest undef), !dbg !2427
  unreachable

fallthrough.191:                                  ; preds = %else.191
  %tmpv.444.ld.0 = load %.command-line-arguments.marbleTransferTransientInput.0*, %.command-line-arguments.marbleTransferTransientInput.0** %tmpv.444, align 8, !dbg !2427
  %field.602 = getelementptr inbounds %.command-line-arguments.marbleTransferTransientInput.0, %.command-line-arguments.marbleTransferTransientInput.0* %tmpv.444.ld.0, i32 0, i32 0, !dbg !2427
  %cast.1809 = bitcast { i8*, i64 }* %tmpv.443 to i8*
  %cast.1810 = bitcast { i8*, i64 }* %field.602 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1809, i8* align 8 %cast.1810, i64 16, i1 false)
  %tmpv.442.ld.0 = load %.command-line-arguments.marbleTransferTransientInput.0*, %.command-line-arguments.marbleTransferTransientInput.0** %tmpv.442, align 8, !dbg !2427
  %icmp.223 = icmp eq %.command-line-arguments.marbleTransferTransientInput.0* %tmpv.442.ld.0, null, !dbg !2427
  %zext.222 = zext i1 %icmp.223 to i8, !dbg !2427
  %trunc.192 = trunc i8 %zext.222 to i1, !dbg !2427
  br i1 %trunc.192, label %then.192, label %else.192, !make.implicit !46

else.191:                                         ; preds = %entry
  %.ld.39 = load %.command-line-arguments.marbleTransferTransientInput.0*, %.command-line-arguments.marbleTransferTransientInput.0** %tmpv.441, align 8, !dbg !2427
  store %.command-line-arguments.marbleTransferTransientInput.0* %.ld.39, %.command-line-arguments.marbleTransferTransientInput.0** %tmpv.444, align 8
  br label %fallthrough.191

then.192:                                         ; preds = %fallthrough.191
  call void @runtime.panicmem(i8* nest undef), !dbg !2427
  unreachable

fallthrough.192:                                  ; preds = %else.192
  %tmpv.446.ld.0 = load %.command-line-arguments.marbleTransferTransientInput.0*, %.command-line-arguments.marbleTransferTransientInput.0** %tmpv.446, align 8, !dbg !2427
  %field.603 = getelementptr inbounds %.command-line-arguments.marbleTransferTransientInput.0, %.command-line-arguments.marbleTransferTransientInput.0* %tmpv.446.ld.0, i32 0, i32 0, !dbg !2427
  %cast.1812 = bitcast { i8*, i64 }* %tmpv.445 to i8*
  %cast.1813 = bitcast { i8*, i64 }* %field.603 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1812, i8* align 8 %cast.1813, i64 16, i1 false)
  %field.604 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.443, i32 0, i32 1, !dbg !2427
  %tmpv.443.field.ld.0 = load i64, i64* %field.604, align 8, !dbg !2427
  %field.605 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.445, i32 0, i32 1, !dbg !2427
  %tmpv.445.field.ld.0 = load i64, i64* %field.605, align 8, !dbg !2427
  %icmp.224 = icmp eq i64 %tmpv.443.field.ld.0, %tmpv.445.field.ld.0, !dbg !2427
  %zext.223 = zext i1 %icmp.224 to i8, !dbg !2427
  %trunc.194 = trunc i8 %zext.223 to i1, !dbg !2427
  br i1 %trunc.194, label %then.193, label %else.193

else.192:                                         ; preds = %fallthrough.191
  %.ld.40 = load %.command-line-arguments.marbleTransferTransientInput.0*, %.command-line-arguments.marbleTransferTransientInput.0** %tmpv.442, align 8, !dbg !2427
  store %.command-line-arguments.marbleTransferTransientInput.0* %.ld.40, %.command-line-arguments.marbleTransferTransientInput.0** %tmpv.446, align 8
  br label %fallthrough.192

then.193:                                         ; preds = %fallthrough.192
  %field.606 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.443, i32 0, i32 0, !dbg !2427
  %tmpv.443.field.ld.1 = load i8*, i8** %field.606, align 8, !dbg !2427
  %field.607 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.445, i32 0, i32 0, !dbg !2427
  %tmpv.445.field.ld.1 = load i8*, i8** %field.607, align 8, !dbg !2427
  %icmp.225 = icmp eq i8* %tmpv.443.field.ld.1, %tmpv.445.field.ld.1, !dbg !2427
  %zext.224 = zext i1 %icmp.225 to i8, !dbg !2427
  %trunc.193 = trunc i8 %zext.224 to i1, !dbg !2427
  br i1 %trunc.193, label %then.194, label %else.194

fallthrough.193:                                  ; preds = %else.193, %fallthrough.194
  %tmpv.448.ld.0 = load i8, i8* %tmpv.448, align 1, !dbg !2427
  %icmp.227 = icmp ne i8 %tmpv.448.ld.0, 1, !dbg !2427
  %zext.226 = zext i1 %icmp.227 to i8, !dbg !2427
  %trunc.195 = trunc i8 %zext.226 to i1, !dbg !2427
  br i1 %trunc.195, label %then.195, label %else.195

else.193:                                         ; preds = %fallthrough.192
  store i8 0, i8* %tmpv.448, align 1, !dbg !2427
  br label %fallthrough.193

then.194:                                         ; preds = %then.193
  store i8 1, i8* %tmpv.447, align 1
  br label %fallthrough.194

fallthrough.194:                                  ; preds = %else.194, %then.194
  %tmpv.447.ld.0 = load i8, i8* %tmpv.447, align 1, !dbg !2427
  store i8 %tmpv.447.ld.0, i8* %tmpv.448, align 1
  br label %fallthrough.193

else.194:                                         ; preds = %then.193
  %field.608 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.443, i32 0, i32 0, !dbg !2427
  %tmpv.443.field.ld.2 = load i8*, i8** %field.608, align 8, !dbg !2427
  %field.609 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.445, i32 0, i32 0, !dbg !2427
  %tmpv.445.field.ld.2 = load i8*, i8** %field.609, align 8, !dbg !2427
  %field.610 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.445, i32 0, i32 1, !dbg !2427
  %tmpv.445.field.ld.3 = load i64, i64* %field.610, align 8, !dbg !2427
  %call.111 = call i32 @memcmp(i8* %tmpv.443.field.ld.2, i8* %tmpv.445.field.ld.2, i64 %tmpv.445.field.ld.3), !dbg !2427
  %icmp.226 = icmp eq i32 %call.111, 0, !dbg !2427
  %zext.225 = zext i1 %icmp.226 to i8, !dbg !2427
  store i8 %zext.225, i8* %tmpv.447, align 1, !dbg !2427
  br label %fallthrough.194

then.195:                                         ; preds = %fallthrough.193
  store i8 0, i8* %"$ret16", align 1, !dbg !2427
  %"$ret16.ld.0" = load i8, i8* %"$ret16", align 1, !dbg !2427
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret16"), !dbg !2427
  ret i8 %"$ret16.ld.0", !dbg !2427

fallthrough.195:                                  ; preds = %else.195
  %tmpv.441.ld.1 = load %.command-line-arguments.marbleTransferTransientInput.0*, %.command-line-arguments.marbleTransferTransientInput.0** %tmpv.441, align 8, !dbg !2427
  %icmp.228 = icmp eq %.command-line-arguments.marbleTransferTransientInput.0* %tmpv.441.ld.1, null, !dbg !2427
  %zext.227 = zext i1 %icmp.228 to i8, !dbg !2427
  %trunc.196 = trunc i8 %zext.227 to i1, !dbg !2427
  br i1 %trunc.196, label %then.196, label %else.196, !make.implicit !46

else.195:                                         ; preds = %fallthrough.193
  br label %fallthrough.195

then.196:                                         ; preds = %fallthrough.195
  call void @runtime.panicmem(i8* nest undef), !dbg !2427
  unreachable

fallthrough.196:                                  ; preds = %else.196
  %tmpv.450.ld.0 = load %.command-line-arguments.marbleTransferTransientInput.0*, %.command-line-arguments.marbleTransferTransientInput.0** %tmpv.450, align 8, !dbg !2427
  %field.611 = getelementptr inbounds %.command-line-arguments.marbleTransferTransientInput.0, %.command-line-arguments.marbleTransferTransientInput.0* %tmpv.450.ld.0, i32 0, i32 1, !dbg !2427
  %cast.1815 = bitcast { i8*, i64 }* %tmpv.449 to i8*
  %cast.1816 = bitcast { i8*, i64 }* %field.611 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1815, i8* align 8 %cast.1816, i64 16, i1 false)
  %tmpv.442.ld.1 = load %.command-line-arguments.marbleTransferTransientInput.0*, %.command-line-arguments.marbleTransferTransientInput.0** %tmpv.442, align 8, !dbg !2427
  %icmp.229 = icmp eq %.command-line-arguments.marbleTransferTransientInput.0* %tmpv.442.ld.1, null, !dbg !2427
  %zext.228 = zext i1 %icmp.229 to i8, !dbg !2427
  %trunc.197 = trunc i8 %zext.228 to i1, !dbg !2427
  br i1 %trunc.197, label %then.197, label %else.197, !make.implicit !46

else.196:                                         ; preds = %fallthrough.195
  %.ld.41 = load %.command-line-arguments.marbleTransferTransientInput.0*, %.command-line-arguments.marbleTransferTransientInput.0** %tmpv.441, align 8, !dbg !2427
  store %.command-line-arguments.marbleTransferTransientInput.0* %.ld.41, %.command-line-arguments.marbleTransferTransientInput.0** %tmpv.450, align 8
  br label %fallthrough.196

then.197:                                         ; preds = %fallthrough.196
  call void @runtime.panicmem(i8* nest undef), !dbg !2427
  unreachable

fallthrough.197:                                  ; preds = %else.197
  %tmpv.452.ld.0 = load %.command-line-arguments.marbleTransferTransientInput.0*, %.command-line-arguments.marbleTransferTransientInput.0** %tmpv.452, align 8, !dbg !2427
  %field.612 = getelementptr inbounds %.command-line-arguments.marbleTransferTransientInput.0, %.command-line-arguments.marbleTransferTransientInput.0* %tmpv.452.ld.0, i32 0, i32 1, !dbg !2427
  %cast.1818 = bitcast { i8*, i64 }* %tmpv.451 to i8*
  %cast.1819 = bitcast { i8*, i64 }* %field.612 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1818, i8* align 8 %cast.1819, i64 16, i1 false)
  %field.613 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.449, i32 0, i32 1, !dbg !2427
  %tmpv.449.field.ld.0 = load i64, i64* %field.613, align 8, !dbg !2427
  %field.614 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.451, i32 0, i32 1, !dbg !2427
  %tmpv.451.field.ld.0 = load i64, i64* %field.614, align 8, !dbg !2427
  %icmp.230 = icmp eq i64 %tmpv.449.field.ld.0, %tmpv.451.field.ld.0, !dbg !2427
  %zext.229 = zext i1 %icmp.230 to i8, !dbg !2427
  %trunc.199 = trunc i8 %zext.229 to i1, !dbg !2427
  br i1 %trunc.199, label %then.198, label %else.198

else.197:                                         ; preds = %fallthrough.196
  %.ld.42 = load %.command-line-arguments.marbleTransferTransientInput.0*, %.command-line-arguments.marbleTransferTransientInput.0** %tmpv.442, align 8, !dbg !2427
  store %.command-line-arguments.marbleTransferTransientInput.0* %.ld.42, %.command-line-arguments.marbleTransferTransientInput.0** %tmpv.452, align 8
  br label %fallthrough.197

then.198:                                         ; preds = %fallthrough.197
  %field.615 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.449, i32 0, i32 0, !dbg !2427
  %tmpv.449.field.ld.1 = load i8*, i8** %field.615, align 8, !dbg !2427
  %field.616 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.451, i32 0, i32 0, !dbg !2427
  %tmpv.451.field.ld.1 = load i8*, i8** %field.616, align 8, !dbg !2427
  %icmp.231 = icmp eq i8* %tmpv.449.field.ld.1, %tmpv.451.field.ld.1, !dbg !2427
  %zext.230 = zext i1 %icmp.231 to i8, !dbg !2427
  %trunc.198 = trunc i8 %zext.230 to i1, !dbg !2427
  br i1 %trunc.198, label %then.199, label %else.199

fallthrough.198:                                  ; preds = %else.198, %fallthrough.199
  %tmpv.454.ld.0 = load i8, i8* %tmpv.454, align 1, !dbg !2427
  %icmp.233 = icmp ne i8 %tmpv.454.ld.0, 1, !dbg !2427
  %zext.232 = zext i1 %icmp.233 to i8, !dbg !2427
  %trunc.200 = trunc i8 %zext.232 to i1, !dbg !2427
  br i1 %trunc.200, label %then.200, label %else.200

else.198:                                         ; preds = %fallthrough.197
  store i8 0, i8* %tmpv.454, align 1, !dbg !2427
  br label %fallthrough.198

then.199:                                         ; preds = %then.198
  store i8 1, i8* %tmpv.453, align 1
  br label %fallthrough.199

fallthrough.199:                                  ; preds = %else.199, %then.199
  %tmpv.453.ld.0 = load i8, i8* %tmpv.453, align 1, !dbg !2427
  store i8 %tmpv.453.ld.0, i8* %tmpv.454, align 1
  br label %fallthrough.198

else.199:                                         ; preds = %then.198
  %field.617 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.449, i32 0, i32 0, !dbg !2427
  %tmpv.449.field.ld.2 = load i8*, i8** %field.617, align 8, !dbg !2427
  %field.618 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.451, i32 0, i32 0, !dbg !2427
  %tmpv.451.field.ld.2 = load i8*, i8** %field.618, align 8, !dbg !2427
  %field.619 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.451, i32 0, i32 1, !dbg !2427
  %tmpv.451.field.ld.3 = load i64, i64* %field.619, align 8, !dbg !2427
  %call.112 = call i32 @memcmp(i8* %tmpv.449.field.ld.2, i8* %tmpv.451.field.ld.2, i64 %tmpv.451.field.ld.3), !dbg !2427
  %icmp.232 = icmp eq i32 %call.112, 0, !dbg !2427
  %zext.231 = zext i1 %icmp.232 to i8, !dbg !2427
  store i8 %zext.231, i8* %tmpv.453, align 1, !dbg !2427
  br label %fallthrough.199

then.200:                                         ; preds = %fallthrough.198
  store i8 0, i8* %"$ret16", align 1, !dbg !2427
  %"$ret16.ld.1" = load i8, i8* %"$ret16", align 1, !dbg !2427
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret16"), !dbg !2427
  ret i8 %"$ret16.ld.1", !dbg !2427

fallthrough.200:                                  ; preds = %else.200
  store i8 1, i8* %"$ret16", align 1, !dbg !2427
  %"$ret16.ld.2" = load i8, i8* %"$ret16", align 1, !dbg !2427
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret16"), !dbg !2427
  ret i8 %"$ret16.ld.2", !dbg !2427

else.200:                                         ; preds = %fallthrough.198
  br label %fallthrough.200
}

; Function Attrs: cold
declare void @runtime.gcWriteBarrier(i8*, i8*, i64) #4

; Function Attrs: noinline
define internal i8 @command_x2dline_x2darguments.go..thunk0(i8* nest %nest.11, { %StateQueryIteratorInterface.0 }* %__go_thunk_parameter) #6 !dbg !2430 {
entry:
  %__go_thunk_parameter.addr = alloca { %StateQueryIteratorInterface.0 }*, align 8
  %"$ret11" = alloca i8, align 1
  %tmpv.364 = alloca %StateQueryIteratorInterface.0, align 8
  %sret.actual.184 = alloca %error.0, align 8
  store { %StateQueryIteratorInterface.0 }* %__go_thunk_parameter, { %StateQueryIteratorInterface.0 }** %__go_thunk_parameter.addr, align 8
  call void @llvm.dbg.declare(metadata { %StateQueryIteratorInterface.0 }** %__go_thunk_parameter.addr, metadata !2437, metadata !DIExpression()), !dbg !2438
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %"$ret11")
  store i8 0, i8* %"$ret11", align 1
  call void @llvm.dbg.declare(metadata i8* %"$ret11", metadata !2439, metadata !DIExpression()), !dbg !2438
  %pticast.8 = ptrtoint i8* blockaddress(@command_x2dline_x2darguments.go..thunk0, %label.0) to i64, !dbg !2438
  %call.99 = call i8 @runtime.setdeferretaddr(i8* nest undef, i64 %pticast.8), !dbg !2438
  %trunc.128 = trunc i8 %call.99 to i1, !dbg !2438
  br i1 %trunc.128, label %then.128, label %else.128

then.128:                                         ; preds = %entry
  br label %label.0

fallthrough.128:                                  ; preds = %else.128
  %__go_thunk_parameter.ld.0 = load { %StateQueryIteratorInterface.0 }*, { %StateQueryIteratorInterface.0 }** %__go_thunk_parameter.addr, align 8, !dbg !2438
  %field.500 = getelementptr inbounds { %StateQueryIteratorInterface.0 }, { %StateQueryIteratorInterface.0 }* %__go_thunk_parameter.ld.0, i32 0, i32 0, !dbg !2438
  %cast.1727 = bitcast %StateQueryIteratorInterface.0* %tmpv.364 to i8*
  %cast.1728 = bitcast %StateQueryIteratorInterface.0* %field.500 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1727, i8* align 8 %cast.1728, i64 16, i1 false)
  %field.501 = getelementptr inbounds %StateQueryIteratorInterface.0, %StateQueryIteratorInterface.0* %tmpv.364, i32 0, i32 0, !dbg !2438
  %tmpv.364.field.ld.0 = load { %_type.0*, { i8*, i8* } (i8*, i8*)*, i8 (i8*, i8*)*, void ({ %KV.0*, %error.0 }*, i8*, i8*)* }*, { %_type.0*, { i8*, i8* } (i8*, i8*)*, i8 (i8*, i8*)*, void ({ %KV.0*, %error.0 }*, i8*, i8*)* }** %field.501, align 8, !dbg !2438
  %field.502 = getelementptr inbounds { %_type.0*, { i8*, i8* } (i8*, i8*)*, i8 (i8*, i8*)*, void ({ %KV.0*, %error.0 }*, i8*, i8*)* }, { %_type.0*, { i8*, i8* } (i8*, i8*)*, i8 (i8*, i8*)*, void ({ %KV.0*, %error.0 }*, i8*, i8*)* }* %tmpv.364.field.ld.0, i32 0, i32 1, !dbg !2438
  %.field.ld.53 = load { i8*, i8* } (i8*, i8*)*, { i8*, i8* } (i8*, i8*)** %field.502, align 8, !dbg !2438
  %field.503 = getelementptr inbounds %StateQueryIteratorInterface.0, %StateQueryIteratorInterface.0* %tmpv.364, i32 0, i32 1, !dbg !2438
  %tmpv.364.field.ld.1 = load i8*, i8** %field.503, align 8, !dbg !2438
  %call.100 = call { i8*, i8* } %.field.ld.53(i8* nest undef, i8* %tmpv.364.field.ld.1), !dbg !2438
  %cast.1729 = bitcast %error.0* %sret.actual.184 to { i8*, i8* }*, !dbg !2438
  store { i8*, i8* } %call.100, { i8*, i8* }* %cast.1729, align 8, !dbg !2438
  br label %label.0

else.128:                                         ; preds = %entry
  br label %fallthrough.128

label.0:                                          ; preds = %fallthrough.128, %then.128
  store i8 0, i8* %"$ret11", align 1, !dbg !2438
  %"$ret11.ld.0" = load i8, i8* %"$ret11", align 1, !dbg !2438
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret11"), !dbg !2438
  ret i8 %"$ret11.ld.0", !dbg !2438
}

declare void @runtime.deferprocStack(i8*, i8*, i8*, i64, i8*) #0

declare void @bytes.Buffer.WriteString({ i64, %error.0 }*, i8*, %Buffer.0*, i8*, i64) #0

declare { i8*, i64 } @fmt.Sprintf(i8*, i8*, i64, %IPST.52*) #0

declare { i8*, i64 } @bytes.Buffer.String(i8*, %Buffer.0*) #0

declare void @fmt.Printf({ i64, %error.0 }*, i8*, i8*, i64, %IPST.52*) #0

declare void @bytes.Buffer.Bytes(%IPST.0*, i8*, %Buffer.0*) #0

declare void @runtime.checkdefer(i8*, i8*) #0

declare void @runtime.deferreturn(i8*, i8*) #0

declare i32 @__gccgo_personality_v0(i32, i32, i64, i8*, i8*)

define available_externally void @github_0com_1hyperledger_1fabric_x2dchaincode_x2dgo_1shim.GetMSPID({ { i8*, i64 }, %error.0 }* sret({ { i8*, i64 }, %error.0 }) %sret.formal.11, i8* nest %nest.28) #0 !dbg !2440 {
entry:
  %tmp.38 = alloca { { i8*, i64 }, %error.0 }, align 8
  %tmp.37 = alloca { { i8*, i64 }, %error.0 }, align 8
  %"$ret57" = alloca { i8*, i64 }, align 8
  %"$ret58" = alloca %error.0, align 8
  %mspid = alloca { i8*, i64 }, align 8
  %sret.actual.185 = alloca { i8*, i64 }, align 8
  %tmpv.485 = alloca { i8*, i64 }, align 8
  %tmpv.486 = alloca { i8*, i64 }, align 8
  %tmpv.487 = alloca %error.0, align 8
  %sret.actual.186 = alloca %error.0, align 8
  %tmpv.488 = alloca i8, align 1
  %tmpv.489 = alloca i8, align 1
  %tmpv.490 = alloca { i8*, i64 }, align 8
  %tmpv.491 = alloca %error.0, align 8
  %0 = bitcast { i8*, i64 }* %"$ret57" to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0)
  %1 = bitcast %error.0* %"$ret58" to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %1)
  %cast.1885 = bitcast { i8*, i64 }* %"$ret57" to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1885, i8* align 8 bitcast ({ i8*, i64 }* @const.116 to i8*), i64 16, i1 false)
  call void @llvm.dbg.declare(metadata { i8*, i64 }* %"$ret57", metadata !2448, metadata !DIExpression()), !dbg !2449
  %cast.1886 = bitcast %error.0* %"$ret58" to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1886, i8* align 8 bitcast (%error.0* @const.60 to i8*), i64 16, i1 false)
  call void @llvm.dbg.declare(metadata %error.0* %"$ret58", metadata !2451, metadata !DIExpression()), !dbg !2449
  %2 = bitcast { i8*, i64 }* %mspid to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %2)
  %ld.262 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.197, i32 0, i32 0), align 8, !dbg !2452
  %ld.263 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.197, i32 0, i32 1), align 8, !dbg !2452
  %call.125 = call { i8*, i64 } @os.Getenv(i8* nest undef, i8* %ld.262, i64 %ld.263), !dbg !2452
  store { i8*, i64 } %call.125, { i8*, i64 }* %sret.actual.185, align 8, !dbg !2452
  %cast.1854 = bitcast { i8*, i64 }* %mspid to i8*
  %cast.1855 = bitcast { i8*, i64 }* %sret.actual.185 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1854, i8* align 8 %cast.1855, i64 16, i1 false)
  call void @llvm.dbg.declare(metadata { i8*, i64 }* %mspid, metadata !2454, metadata !DIExpression()), !dbg !2455
  %cast.1856 = bitcast { i8*, i64 }* %tmpv.485 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1856, i8* align 8 bitcast ({ i8*, i64 }* @const.116 to i8*), i64 16, i1 false)
  %field.632 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %mspid, i32 0, i32 1, !dbg !2456
  %mspid.field.ld.0 = load i64, i64* %field.632, align 8, !dbg !2456
  %field.633 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.485, i32 0, i32 1, !dbg !2456
  %tmpv.485.field.ld.0 = load i64, i64* %field.633, align 8, !dbg !2456
  %icmp.252 = icmp eq i64 %mspid.field.ld.0, %tmpv.485.field.ld.0, !dbg !2456
  %zext.251 = zext i1 %icmp.252 to i8, !dbg !2456
  %trunc.220 = trunc i8 %zext.251 to i1, !dbg !2456
  br i1 %trunc.220, label %then.219, label %else.219

then.219:                                         ; preds = %entry
  %field.634 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %mspid, i32 0, i32 0, !dbg !2456
  %mspid.field.ld.1 = load i8*, i8** %field.634, align 8, !dbg !2456
  %field.635 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.485, i32 0, i32 0, !dbg !2456
  %tmpv.485.field.ld.1 = load i8*, i8** %field.635, align 8, !dbg !2456
  %icmp.253 = icmp eq i8* %mspid.field.ld.1, %tmpv.485.field.ld.1, !dbg !2456
  %zext.252 = zext i1 %icmp.253 to i8, !dbg !2456
  %trunc.219 = trunc i8 %zext.252 to i1, !dbg !2456
  br i1 %trunc.219, label %then.220, label %else.220

fallthrough.219:                                  ; preds = %else.219, %fallthrough.220
  %tmpv.489.ld.0 = load i8, i8* %tmpv.489, align 1, !dbg !2456
  %icmp.255 = icmp eq i8 %tmpv.489.ld.0, 1, !dbg !2456
  %zext.254 = zext i1 %icmp.255 to i8, !dbg !2456
  %trunc.221 = trunc i8 %zext.254 to i1, !dbg !2456
  br i1 %trunc.221, label %then.221, label %else.221

else.219:                                         ; preds = %entry
  store i8 0, i8* %tmpv.489, align 1, !dbg !2456
  br label %fallthrough.219

then.220:                                         ; preds = %then.219
  store i8 1, i8* %tmpv.488, align 1
  br label %fallthrough.220

fallthrough.220:                                  ; preds = %else.220, %then.220
  %tmpv.488.ld.0 = load i8, i8* %tmpv.488, align 1, !dbg !2456
  store i8 %tmpv.488.ld.0, i8* %tmpv.489, align 1
  br label %fallthrough.219

else.220:                                         ; preds = %then.219
  %field.636 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %mspid, i32 0, i32 0, !dbg !2456
  %mspid.field.ld.2 = load i8*, i8** %field.636, align 8, !dbg !2456
  %field.637 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.485, i32 0, i32 0, !dbg !2456
  %tmpv.485.field.ld.2 = load i8*, i8** %field.637, align 8, !dbg !2456
  %field.638 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %tmpv.485, i32 0, i32 1, !dbg !2456
  %tmpv.485.field.ld.3 = load i64, i64* %field.638, align 8, !dbg !2456
  %call.127 = call i32 @memcmp(i8* %mspid.field.ld.2, i8* %tmpv.485.field.ld.2, i64 %tmpv.485.field.ld.3), !dbg !2456
  %icmp.254 = icmp eq i32 %call.127, 0, !dbg !2456
  %zext.253 = zext i1 %icmp.254 to i8, !dbg !2456
  store i8 %zext.253, i8* %tmpv.488, align 1, !dbg !2456
  br label %fallthrough.220

then.221:                                         ; preds = %fallthrough.219
  %cast.1857 = bitcast { i8*, i64 }* %tmpv.486 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1857, i8* align 8 bitcast ({ i8*, i64 }* @const.116 to i8*), i64 16, i1 false)
  %ld.264 = load i8*, i8** getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.199, i32 0, i32 0), align 8, !dbg !2457
  %ld.265 = load i64, i64* getelementptr inbounds ({ i8*, i64 }, { i8*, i64 }* @const.199, i32 0, i32 1), align 8, !dbg !2457
  %call.126 = call { i8*, i8* } @errors.New(i8* nest undef, i8* %ld.264, i64 %ld.265), !dbg !2457
  %cast.1859 = bitcast %error.0* %sret.actual.186 to { i8*, i8* }*, !dbg !2457
  store { i8*, i8* } %call.126, { i8*, i8* }* %cast.1859, align 8, !dbg !2457
  %cast.1860 = bitcast %error.0* %tmpv.487 to i8*
  %cast.1861 = bitcast %error.0* %sret.actual.186 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1860, i8* align 8 %cast.1861, i64 16, i1 false)
  %cast.1862 = bitcast { i8*, i64 }* %"$ret57" to i8*, !dbg !2457
  %cast.1863 = bitcast { i8*, i64 }* %tmpv.486 to i8*, !dbg !2457
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1862, i8* align 8 %cast.1863, i64 16, i1 false), !dbg !2457
  %cast.1864 = bitcast %error.0* %"$ret58" to i8*, !dbg !2457
  %cast.1865 = bitcast %error.0* %tmpv.487 to i8*, !dbg !2457
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1864, i8* align 8 %cast.1865, i64 16, i1 false), !dbg !2457
  %field.630 = getelementptr inbounds { { i8*, i64 }, %error.0 }, { { i8*, i64 }, %error.0 }* %tmp.37, i32 0, i32 0, !dbg !2457
  %cast.1866 = bitcast { i8*, i64 }* %field.630 to i8*, !dbg !2457
  %cast.1867 = bitcast { i8*, i64 }* %"$ret57" to i8*, !dbg !2457
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1866, i8* align 8 %cast.1867, i64 16, i1 false), !dbg !2457
  %field.631 = getelementptr inbounds { { i8*, i64 }, %error.0 }, { { i8*, i64 }, %error.0 }* %tmp.37, i32 0, i32 1, !dbg !2457
  %cast.1868 = bitcast %error.0* %field.631 to i8*, !dbg !2457
  %cast.1869 = bitcast %error.0* %"$ret58" to i8*, !dbg !2457
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1868, i8* align 8 %cast.1869, i64 16, i1 false), !dbg !2457
  %cast.1870 = bitcast { { i8*, i64 }, %error.0 }* %sret.formal.11 to i8*, !dbg !2457
  %cast.1871 = bitcast { { i8*, i64 }, %error.0 }* %tmp.37 to i8*, !dbg !2457
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1870, i8* align 8 %cast.1871, i64 32, i1 false), !dbg !2457
  %3 = bitcast { i8*, i64 }* %mspid to i8*, !dbg !2457
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %3), !dbg !2457
  %4 = bitcast { i8*, i64 }* %"$ret57" to i8*, !dbg !2457
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %4), !dbg !2457
  %5 = bitcast %error.0* %"$ret58" to i8*, !dbg !2457
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %5), !dbg !2457
  ret void, !dbg !2457

fallthrough.221:                                  ; preds = %else.221
  %cast.1872 = bitcast { i8*, i64 }* %tmpv.490 to i8*
  %cast.1873 = bitcast { i8*, i64 }* %mspid to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1872, i8* align 8 %cast.1873, i64 16, i1 false)
  %cast.1874 = bitcast %error.0* %tmpv.491 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1874, i8* align 8 bitcast (%error.0* @const.60 to i8*), i64 16, i1 false)
  %cast.1875 = bitcast { i8*, i64 }* %"$ret57" to i8*, !dbg !2458
  %cast.1876 = bitcast { i8*, i64 }* %tmpv.490 to i8*, !dbg !2458
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1875, i8* align 8 %cast.1876, i64 16, i1 false), !dbg !2458
  %cast.1877 = bitcast %error.0* %"$ret58" to i8*, !dbg !2458
  %cast.1878 = bitcast %error.0* %tmpv.491 to i8*, !dbg !2458
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1877, i8* align 8 %cast.1878, i64 16, i1 false), !dbg !2458
  %field.639 = getelementptr inbounds { { i8*, i64 }, %error.0 }, { { i8*, i64 }, %error.0 }* %tmp.38, i32 0, i32 0, !dbg !2458
  %cast.1879 = bitcast { i8*, i64 }* %field.639 to i8*, !dbg !2458
  %cast.1880 = bitcast { i8*, i64 }* %"$ret57" to i8*, !dbg !2458
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1879, i8* align 8 %cast.1880, i64 16, i1 false), !dbg !2458
  %field.640 = getelementptr inbounds { { i8*, i64 }, %error.0 }, { { i8*, i64 }, %error.0 }* %tmp.38, i32 0, i32 1, !dbg !2458
  %cast.1881 = bitcast %error.0* %field.640 to i8*, !dbg !2458
  %cast.1882 = bitcast %error.0* %"$ret58" to i8*, !dbg !2458
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1881, i8* align 8 %cast.1882, i64 16, i1 false), !dbg !2458
  %cast.1883 = bitcast { { i8*, i64 }, %error.0 }* %sret.formal.11 to i8*, !dbg !2458
  %cast.1884 = bitcast { { i8*, i64 }, %error.0 }* %tmp.38 to i8*, !dbg !2458
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %cast.1883, i8* align 8 %cast.1884, i64 32, i1 false), !dbg !2458
  %6 = bitcast { i8*, i64 }* %mspid to i8*, !dbg !2458
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %6), !dbg !2458
  %7 = bitcast { i8*, i64 }* %"$ret57" to i8*, !dbg !2458
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %7), !dbg !2458
  %8 = bitcast %error.0* %"$ret58" to i8*, !dbg !2458
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %8), !dbg !2458
  ret void, !dbg !2458

else.221:                                         ; preds = %fallthrough.219
  br label %fallthrough.221
}

declare noalias nonnull i8* @runtime.makeslice(i8*, %_type.0*, i64, i64) #0

declare void @runtime.mapiterinit(i8*, %_type.0*, { i64, i8, i8, i16, i32, i8*, i8*, i64, i8* }*, i8*) #0

; Function Attrs: cold
declare void @runtime.growslice({ i8**, i64, i64 }*, i8*, %_type.0*, i8*, i64, i64, i64) #7

declare void @runtime.mapiternext(i8*, i8*) #0

declare void @runtime.stringtoslicebyte({ i8**, i64, i64 }*, i8*, i8*, i8*, i64) #0

declare i8 @runtime.setdeferretaddr(i8*, i64) #0

define i8 @command_x2dline_x2darguments._63_7int32..eq(i8* nest %nest.17, i8* %key1, i8* %key2) #0 !dbg !2459 {
entry:
  %key1.addr = alloca i8*, align 8
  %key2.addr = alloca i8*, align 8
  %"$ret17" = alloca i8, align 1
  %tmpv.455 = alloca i8, align 1
  store i8* %key1, i8** %key1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key1.addr, metadata !2460, metadata !DIExpression()), !dbg !2461
  store i8* %key2, i8** %key2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key2.addr, metadata !2462, metadata !DIExpression()), !dbg !2461
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %"$ret17")
  store i8 0, i8* %"$ret17", align 1
  call void @llvm.dbg.declare(metadata i8* %"$ret17", metadata !2463, metadata !DIExpression()), !dbg !2461
  %key1.ld.5 = load i8*, i8** %key1.addr, align 8, !dbg !2461
  %key2.ld.5 = load i8*, i8** %key2.addr, align 8, !dbg !2461
  %call.113 = call i8 @runtime.memequal(i8* nest undef, i8* %key1.ld.5, i8* %key2.ld.5, i64 12), !dbg !2461
  store i8 %call.113, i8* %tmpv.455, align 1
  %tmpv.455.ld.0 = load i8, i8* %tmpv.455, align 1, !dbg !2461
  store i8 %tmpv.455.ld.0, i8* %"$ret17", align 1, !dbg !2461
  %"$ret17.ld.0" = load i8, i8* %"$ret17", align 1, !dbg !2461
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret17"), !dbg !2461
  ret i8 %"$ret17.ld.0", !dbg !2461
}

; Function Attrs: argmemonly readonly
declare i8 @runtime.memequal(i8*, i8*, i8*, i64) #8

define i8 @command_x2dline_x2darguments._628_7uint8..eq(i8* nest %nest.18, i8* %key1, i8* %key2) #0 !dbg !2464 {
entry:
  %key1.addr = alloca i8*, align 8
  %key2.addr = alloca i8*, align 8
  %"$ret18" = alloca i8, align 1
  %tmpv.456 = alloca i8, align 1
  store i8* %key1, i8** %key1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key1.addr, metadata !2465, metadata !DIExpression()), !dbg !2466
  store i8* %key2, i8** %key2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key2.addr, metadata !2467, metadata !DIExpression()), !dbg !2466
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %"$ret18")
  store i8 0, i8* %"$ret18", align 1
  call void @llvm.dbg.declare(metadata i8* %"$ret18", metadata !2468, metadata !DIExpression()), !dbg !2466
  %key1.ld.6 = load i8*, i8** %key1.addr, align 8, !dbg !2466
  %key2.ld.6 = load i8*, i8** %key2.addr, align 8, !dbg !2466
  %call.114 = call i8 @runtime.memequal(i8* nest undef, i8* %key1.ld.6, i8* %key2.ld.6, i64 28), !dbg !2466
  store i8 %call.114, i8* %tmpv.456, align 1
  %tmpv.456.ld.0 = load i8, i8* %tmpv.456, align 1, !dbg !2466
  store i8 %tmpv.456.ld.0, i8* %"$ret18", align 1, !dbg !2466
  %"$ret18.ld.0" = load i8, i8* %"$ret18", align 1, !dbg !2466
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret18"), !dbg !2466
  ret i8 %"$ret18.ld.0", !dbg !2466
}

define i8 @command_x2dline_x2darguments._62_7google_0golang_0org_1protobuf_1reflect_1protoreflect_0EnumNumber..eq(i8* nest %nest.19, i8* %key1, i8* %key2) #0 !dbg !2469 {
entry:
  %key1.addr = alloca i8*, align 8
  %key2.addr = alloca i8*, align 8
  %"$ret19" = alloca i8, align 1
  %tmpv.457 = alloca i8, align 1
  store i8* %key1, i8** %key1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key1.addr, metadata !2470, metadata !DIExpression()), !dbg !2471
  store i8* %key2, i8** %key2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key2.addr, metadata !2472, metadata !DIExpression()), !dbg !2471
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %"$ret19")
  store i8 0, i8* %"$ret19", align 1
  call void @llvm.dbg.declare(metadata i8* %"$ret19", metadata !2473, metadata !DIExpression()), !dbg !2471
  %key1.ld.7 = load i8*, i8** %key1.addr, align 8, !dbg !2471
  %key2.ld.7 = load i8*, i8** %key2.addr, align 8, !dbg !2471
  %call.115 = call i8 @runtime.memequal(i8* nest undef, i8* %key1.ld.7, i8* %key2.ld.7, i64 8), !dbg !2471
  store i8 %call.115, i8* %tmpv.457, align 1
  %tmpv.457.ld.0 = load i8, i8* %tmpv.457, align 1, !dbg !2471
  store i8 %tmpv.457.ld.0, i8* %"$ret19", align 1, !dbg !2471
  %"$ret19.ld.0" = load i8, i8* %"$ret19", align 1, !dbg !2471
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret19"), !dbg !2471
  ret i8 %"$ret19.ld.0", !dbg !2471
}

define i8 @command_x2dline_x2darguments._62_7google_0golang_0org_1protobuf_1encoding_1protowire_0Number..eq(i8* nest %nest.20, i8* %key1, i8* %key2) #0 !dbg !2474 {
entry:
  %key1.addr = alloca i8*, align 8
  %key2.addr = alloca i8*, align 8
  %"$ret20" = alloca i8, align 1
  %tmpv.458 = alloca i8, align 1
  store i8* %key1, i8** %key1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key1.addr, metadata !2475, metadata !DIExpression()), !dbg !2476
  store i8* %key2, i8** %key2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key2.addr, metadata !2477, metadata !DIExpression()), !dbg !2476
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %"$ret20")
  store i8 0, i8* %"$ret20", align 1
  call void @llvm.dbg.declare(metadata i8* %"$ret20", metadata !2478, metadata !DIExpression()), !dbg !2476
  %key1.ld.8 = load i8*, i8** %key1.addr, align 8, !dbg !2476
  %key2.ld.8 = load i8*, i8** %key2.addr, align 8, !dbg !2476
  %call.116 = call i8 @runtime.memequal(i8* nest undef, i8* %key1.ld.8, i8* %key2.ld.8, i64 8), !dbg !2476
  store i8 %call.116, i8* %tmpv.458, align 1
  %tmpv.458.ld.0 = load i8, i8* %tmpv.458, align 1, !dbg !2476
  store i8 %tmpv.458.ld.0, i8* %"$ret20", align 1, !dbg !2476
  %"$ret20.ld.0" = load i8, i8* %"$ret20", align 1, !dbg !2476
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret20"), !dbg !2476
  ret i8 %"$ret20.ld.0", !dbg !2476
}

define i8 @command_x2dline_x2darguments.struct_4google_0golang_0org_1protobuf_1internal_1pragma_0NoUnkeyedLiterals_cMessage_bgoogle_0golang_0org_1protobuf_1reflect_1protoreflect_0Message_cFlags_buint8_5..eq(i8* nest %nest.21, i8* %key1, i8* %key2) #0 !dbg !2479 {
entry:
  %key1.addr = alloca i8*, align 8
  %key2.addr = alloca i8*, align 8
  %"$ret21" = alloca i8, align 1
  %tmpv.459 = alloca { %NoUnkeyedLiterals.0, %Message.3, i8 }*, align 8
  %tmpv.460 = alloca { %NoUnkeyedLiterals.0, %Message.3, i8 }*, align 8
  %tmpv.461 = alloca %NoUnkeyedLiterals.0, align 1
  %tmpv.462 = alloca %NoUnkeyedLiterals.0, align 1
  %tmpv.463 = alloca { %NoUnkeyedLiterals.0, %Message.3, i8 }*, align 8
  %tmpv.464 = alloca { %NoUnkeyedLiterals.0, %Message.3, i8 }*, align 8
  %tmpv.465 = alloca { %NoUnkeyedLiterals.0, %Message.3, i8 }*, align 8
  %tmpv.466 = alloca { %NoUnkeyedLiterals.0, %Message.3, i8 }*, align 8
  store i8* %key1, i8** %key1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key1.addr, metadata !2480, metadata !DIExpression()), !dbg !2481
  store i8* %key2, i8** %key2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key2.addr, metadata !2482, metadata !DIExpression()), !dbg !2481
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %"$ret21")
  store i8 0, i8* %"$ret21", align 1
  call void @llvm.dbg.declare(metadata i8* %"$ret21", metadata !2483, metadata !DIExpression()), !dbg !2481
  %key1.ld.9 = load i8*, i8** %key1.addr, align 8, !dbg !2481
  %cast.1820 = bitcast i8* %key1.ld.9 to { %NoUnkeyedLiterals.0, %Message.3, i8 }*, !dbg !2481
  store { %NoUnkeyedLiterals.0, %Message.3, i8 }* %cast.1820, { %NoUnkeyedLiterals.0, %Message.3, i8 }** %tmpv.459, align 8
  %key2.ld.9 = load i8*, i8** %key2.addr, align 8, !dbg !2481
  %cast.1821 = bitcast i8* %key2.ld.9 to { %NoUnkeyedLiterals.0, %Message.3, i8 }*, !dbg !2481
  store { %NoUnkeyedLiterals.0, %Message.3, i8 }* %cast.1821, { %NoUnkeyedLiterals.0, %Message.3, i8 }** %tmpv.460, align 8
  br i1 false, label %then.201, label %else.201

then.201:                                         ; preds = %entry
  store i8 0, i8* %"$ret21", align 1, !dbg !2481
  %"$ret21.ld.0" = load i8, i8* %"$ret21", align 1, !dbg !2481
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret21"), !dbg !2481
  ret i8 %"$ret21.ld.0", !dbg !2481

fallthrough.201:                                  ; preds = %else.201
  %tmpv.459.ld.0 = load { %NoUnkeyedLiterals.0, %Message.3, i8 }*, { %NoUnkeyedLiterals.0, %Message.3, i8 }** %tmpv.459, align 8, !dbg !2481
  %icmp.235 = icmp eq { %NoUnkeyedLiterals.0, %Message.3, i8 }* %tmpv.459.ld.0, null, !dbg !2481
  %zext.234 = zext i1 %icmp.235 to i8, !dbg !2481
  %trunc.202 = trunc i8 %zext.234 to i1, !dbg !2481
  br i1 %trunc.202, label %then.202, label %else.202, !make.implicit !46

else.201:                                         ; preds = %entry
  br label %fallthrough.201

then.202:                                         ; preds = %fallthrough.201
  call void @runtime.panicmem(i8* nest undef), !dbg !2481
  unreachable

fallthrough.202:                                  ; preds = %else.202
  %tmpv.463.ld.0 = load { %NoUnkeyedLiterals.0, %Message.3, i8 }*, { %NoUnkeyedLiterals.0, %Message.3, i8 }** %tmpv.463, align 8, !dbg !2481
  %field.620 = getelementptr inbounds { %NoUnkeyedLiterals.0, %Message.3, i8 }, { %NoUnkeyedLiterals.0, %Message.3, i8 }* %tmpv.463.ld.0, i32 0, i32 1, !dbg !2481
  %cast.1823 = bitcast %Message.3* %field.620 to %.1*, !dbg !2481
  %tmpv.460.ld.0 = load { %NoUnkeyedLiterals.0, %Message.3, i8 }*, { %NoUnkeyedLiterals.0, %Message.3, i8 }** %tmpv.460, align 8, !dbg !2481
  %icmp.236 = icmp eq { %NoUnkeyedLiterals.0, %Message.3, i8 }* %tmpv.460.ld.0, null, !dbg !2481
  %zext.235 = zext i1 %icmp.236 to i8, !dbg !2481
  %trunc.203 = trunc i8 %zext.235 to i1, !dbg !2481
  br i1 %trunc.203, label %then.203, label %else.203, !make.implicit !46

else.202:                                         ; preds = %fallthrough.201
  %.ld.43 = load { %NoUnkeyedLiterals.0, %Message.3, i8 }*, { %NoUnkeyedLiterals.0, %Message.3, i8 }** %tmpv.459, align 8, !dbg !2481
  store { %NoUnkeyedLiterals.0, %Message.3, i8 }* %.ld.43, { %NoUnkeyedLiterals.0, %Message.3, i8 }** %tmpv.463, align 8
  br label %fallthrough.202

then.203:                                         ; preds = %fallthrough.202
  call void @runtime.panicmem(i8* nest undef), !dbg !2481
  unreachable

fallthrough.203:                                  ; preds = %else.203
  %tmpv.464.ld.0 = load { %NoUnkeyedLiterals.0, %Message.3, i8 }*, { %NoUnkeyedLiterals.0, %Message.3, i8 }** %tmpv.464, align 8, !dbg !2481
  %field.621 = getelementptr inbounds { %NoUnkeyedLiterals.0, %Message.3, i8 }, { %NoUnkeyedLiterals.0, %Message.3, i8 }* %tmpv.464.ld.0, i32 0, i32 1, !dbg !2481
  %cast.1825 = bitcast %Message.3* %field.621 to %.1*, !dbg !2481
  %cast.1826 = bitcast %.1* %cast.1823 to { i8*, i8* }*, !dbg !2481
  %field0.134 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1826, i32 0, i32 0, !dbg !2481
  %ld.246 = load i8*, i8** %field0.134, align 8, !dbg !2481
  %field1.134 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1826, i32 0, i32 1, !dbg !2481
  %ld.247 = load i8*, i8** %field1.134, align 8, !dbg !2481
  %cast.1827 = bitcast %.1* %cast.1825 to { i8*, i8* }*, !dbg !2481
  %field0.135 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1827, i32 0, i32 0, !dbg !2481
  %ld.248 = load i8*, i8** %field0.135, align 8, !dbg !2481
  %field1.135 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1827, i32 0, i32 1, !dbg !2481
  %ld.249 = load i8*, i8** %field1.135, align 8, !dbg !2481
  %call.117 = call i8 @runtime.ifaceeq(i8* nest undef, i8* %ld.246, i8* %ld.247, i8* %ld.248, i8* %ld.249), !dbg !2481
  %icmp.237 = icmp ne i8 %call.117, 1, !dbg !2481
  %zext.236 = zext i1 %icmp.237 to i8, !dbg !2481
  %trunc.204 = trunc i8 %zext.236 to i1, !dbg !2481
  br i1 %trunc.204, label %then.204, label %else.204

else.203:                                         ; preds = %fallthrough.202
  %.ld.44 = load { %NoUnkeyedLiterals.0, %Message.3, i8 }*, { %NoUnkeyedLiterals.0, %Message.3, i8 }** %tmpv.460, align 8, !dbg !2481
  store { %NoUnkeyedLiterals.0, %Message.3, i8 }* %.ld.44, { %NoUnkeyedLiterals.0, %Message.3, i8 }** %tmpv.464, align 8
  br label %fallthrough.203

then.204:                                         ; preds = %fallthrough.203
  store i8 0, i8* %"$ret21", align 1, !dbg !2481
  %"$ret21.ld.1" = load i8, i8* %"$ret21", align 1, !dbg !2481
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret21"), !dbg !2481
  ret i8 %"$ret21.ld.1", !dbg !2481

fallthrough.204:                                  ; preds = %else.204
  %tmpv.459.ld.1 = load { %NoUnkeyedLiterals.0, %Message.3, i8 }*, { %NoUnkeyedLiterals.0, %Message.3, i8 }** %tmpv.459, align 8, !dbg !2481
  %icmp.238 = icmp eq { %NoUnkeyedLiterals.0, %Message.3, i8 }* %tmpv.459.ld.1, null, !dbg !2481
  %zext.237 = zext i1 %icmp.238 to i8, !dbg !2481
  %trunc.205 = trunc i8 %zext.237 to i1, !dbg !2481
  br i1 %trunc.205, label %then.205, label %else.205, !make.implicit !46

else.204:                                         ; preds = %fallthrough.203
  br label %fallthrough.204

then.205:                                         ; preds = %fallthrough.204
  call void @runtime.panicmem(i8* nest undef), !dbg !2481
  unreachable

fallthrough.205:                                  ; preds = %else.205
  %tmpv.465.ld.0 = load { %NoUnkeyedLiterals.0, %Message.3, i8 }*, { %NoUnkeyedLiterals.0, %Message.3, i8 }** %tmpv.465, align 8, !dbg !2481
  %field.622 = getelementptr inbounds { %NoUnkeyedLiterals.0, %Message.3, i8 }, { %NoUnkeyedLiterals.0, %Message.3, i8 }* %tmpv.465.ld.0, i32 0, i32 2, !dbg !2481
  %.field.ld.62 = load i8, i8* %field.622, align 1, !dbg !2481
  %tmpv.460.ld.1 = load { %NoUnkeyedLiterals.0, %Message.3, i8 }*, { %NoUnkeyedLiterals.0, %Message.3, i8 }** %tmpv.460, align 8, !dbg !2481
  %icmp.239 = icmp eq { %NoUnkeyedLiterals.0, %Message.3, i8 }* %tmpv.460.ld.1, null, !dbg !2481
  %zext.238 = zext i1 %icmp.239 to i8, !dbg !2481
  %trunc.206 = trunc i8 %zext.238 to i1, !dbg !2481
  br i1 %trunc.206, label %then.206, label %else.206, !make.implicit !46

else.205:                                         ; preds = %fallthrough.204
  %.ld.45 = load { %NoUnkeyedLiterals.0, %Message.3, i8 }*, { %NoUnkeyedLiterals.0, %Message.3, i8 }** %tmpv.459, align 8, !dbg !2481
  store { %NoUnkeyedLiterals.0, %Message.3, i8 }* %.ld.45, { %NoUnkeyedLiterals.0, %Message.3, i8 }** %tmpv.465, align 8
  br label %fallthrough.205

then.206:                                         ; preds = %fallthrough.205
  call void @runtime.panicmem(i8* nest undef), !dbg !2481
  unreachable

fallthrough.206:                                  ; preds = %else.206
  %tmpv.466.ld.0 = load { %NoUnkeyedLiterals.0, %Message.3, i8 }*, { %NoUnkeyedLiterals.0, %Message.3, i8 }** %tmpv.466, align 8, !dbg !2481
  %field.623 = getelementptr inbounds { %NoUnkeyedLiterals.0, %Message.3, i8 }, { %NoUnkeyedLiterals.0, %Message.3, i8 }* %tmpv.466.ld.0, i32 0, i32 2, !dbg !2481
  %.field.ld.63 = load i8, i8* %field.623, align 1, !dbg !2481
  %icmp.240 = icmp ne i8 %.field.ld.62, %.field.ld.63, !dbg !2481
  %zext.239 = zext i1 %icmp.240 to i8, !dbg !2481
  %trunc.207 = trunc i8 %zext.239 to i1, !dbg !2481
  br i1 %trunc.207, label %then.207, label %else.207

else.206:                                         ; preds = %fallthrough.205
  %.ld.46 = load { %NoUnkeyedLiterals.0, %Message.3, i8 }*, { %NoUnkeyedLiterals.0, %Message.3, i8 }** %tmpv.460, align 8, !dbg !2481
  store { %NoUnkeyedLiterals.0, %Message.3, i8 }* %.ld.46, { %NoUnkeyedLiterals.0, %Message.3, i8 }** %tmpv.466, align 8
  br label %fallthrough.206

then.207:                                         ; preds = %fallthrough.206
  store i8 0, i8* %"$ret21", align 1, !dbg !2481
  %"$ret21.ld.2" = load i8, i8* %"$ret21", align 1, !dbg !2481
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret21"), !dbg !2481
  ret i8 %"$ret21.ld.2", !dbg !2481

fallthrough.207:                                  ; preds = %else.207
  store i8 1, i8* %"$ret21", align 1, !dbg !2481
  %"$ret21.ld.3" = load i8, i8* %"$ret21", align 1, !dbg !2481
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret21"), !dbg !2481
  ret i8 %"$ret21.ld.3", !dbg !2481

else.207:                                         ; preds = %fallthrough.206
  br label %fallthrough.207
}

declare i8 @runtime.ifaceeq(i8*, i8*, i8*, i8*, i8*) #0

define i8 @command_x2dline_x2darguments.struct_4google_0golang_0org_1protobuf_1internal_1pragma_0NoUnkeyedLiterals_cSource_bgoogle_0golang_0org_1protobuf_1reflect_1protoreflect_0Message_cDestination_bgoogle_0golang_0org_1protobuf_1reflect_1protoreflect_0Message_5..eq(i8* nest %nest.22, i8* %key1, i8* %key2) #0 !dbg !2484 {
entry:
  %key1.addr = alloca i8*, align 8
  %key2.addr = alloca i8*, align 8
  %"$ret22" = alloca i8, align 1
  %tmpv.467 = alloca { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }*, align 8
  %tmpv.468 = alloca { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }*, align 8
  %tmpv.469 = alloca %NoUnkeyedLiterals.0, align 1
  %tmpv.470 = alloca %NoUnkeyedLiterals.0, align 1
  %tmpv.471 = alloca { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }*, align 8
  %tmpv.472 = alloca { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }*, align 8
  %tmpv.473 = alloca { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }*, align 8
  %tmpv.474 = alloca { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }*, align 8
  store i8* %key1, i8** %key1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key1.addr, metadata !2485, metadata !DIExpression()), !dbg !2486
  store i8* %key2, i8** %key2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key2.addr, metadata !2487, metadata !DIExpression()), !dbg !2486
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %"$ret22")
  store i8 0, i8* %"$ret22", align 1
  call void @llvm.dbg.declare(metadata i8* %"$ret22", metadata !2488, metadata !DIExpression()), !dbg !2486
  %key1.ld.10 = load i8*, i8** %key1.addr, align 8, !dbg !2486
  %cast.1830 = bitcast i8* %key1.ld.10 to { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }*, !dbg !2486
  store { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }* %cast.1830, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }** %tmpv.467, align 8
  %key2.ld.10 = load i8*, i8** %key2.addr, align 8, !dbg !2486
  %cast.1831 = bitcast i8* %key2.ld.10 to { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }*, !dbg !2486
  store { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }* %cast.1831, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }** %tmpv.468, align 8
  br i1 false, label %then.208, label %else.208

then.208:                                         ; preds = %entry
  store i8 0, i8* %"$ret22", align 1, !dbg !2486
  %"$ret22.ld.0" = load i8, i8* %"$ret22", align 1, !dbg !2486
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret22"), !dbg !2486
  ret i8 %"$ret22.ld.0", !dbg !2486

fallthrough.208:                                  ; preds = %else.208
  %tmpv.467.ld.0 = load { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }*, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }** %tmpv.467, align 8, !dbg !2486
  %icmp.242 = icmp eq { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }* %tmpv.467.ld.0, null, !dbg !2486
  %zext.241 = zext i1 %icmp.242 to i8, !dbg !2486
  %trunc.209 = trunc i8 %zext.241 to i1, !dbg !2486
  br i1 %trunc.209, label %then.209, label %else.209, !make.implicit !46

else.208:                                         ; preds = %entry
  br label %fallthrough.208

then.209:                                         ; preds = %fallthrough.208
  call void @runtime.panicmem(i8* nest undef), !dbg !2486
  unreachable

fallthrough.209:                                  ; preds = %else.209
  %tmpv.471.ld.0 = load { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }*, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }** %tmpv.471, align 8, !dbg !2486
  %field.624 = getelementptr inbounds { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }* %tmpv.471.ld.0, i32 0, i32 1, !dbg !2486
  %cast.1833 = bitcast %Message.3* %field.624 to %.1*, !dbg !2486
  %tmpv.468.ld.0 = load { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }*, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }** %tmpv.468, align 8, !dbg !2486
  %icmp.243 = icmp eq { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }* %tmpv.468.ld.0, null, !dbg !2486
  %zext.242 = zext i1 %icmp.243 to i8, !dbg !2486
  %trunc.210 = trunc i8 %zext.242 to i1, !dbg !2486
  br i1 %trunc.210, label %then.210, label %else.210, !make.implicit !46

else.209:                                         ; preds = %fallthrough.208
  %.ld.47 = load { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }*, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }** %tmpv.467, align 8, !dbg !2486
  store { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }* %.ld.47, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }** %tmpv.471, align 8
  br label %fallthrough.209

then.210:                                         ; preds = %fallthrough.209
  call void @runtime.panicmem(i8* nest undef), !dbg !2486
  unreachable

fallthrough.210:                                  ; preds = %else.210
  %tmpv.472.ld.0 = load { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }*, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }** %tmpv.472, align 8, !dbg !2486
  %field.625 = getelementptr inbounds { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }* %tmpv.472.ld.0, i32 0, i32 1, !dbg !2486
  %cast.1835 = bitcast %Message.3* %field.625 to %.1*, !dbg !2486
  %cast.1836 = bitcast %.1* %cast.1833 to { i8*, i8* }*, !dbg !2486
  %field0.136 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1836, i32 0, i32 0, !dbg !2486
  %ld.250 = load i8*, i8** %field0.136, align 8, !dbg !2486
  %field1.136 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1836, i32 0, i32 1, !dbg !2486
  %ld.251 = load i8*, i8** %field1.136, align 8, !dbg !2486
  %cast.1837 = bitcast %.1* %cast.1835 to { i8*, i8* }*, !dbg !2486
  %field0.137 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1837, i32 0, i32 0, !dbg !2486
  %ld.252 = load i8*, i8** %field0.137, align 8, !dbg !2486
  %field1.137 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1837, i32 0, i32 1, !dbg !2486
  %ld.253 = load i8*, i8** %field1.137, align 8, !dbg !2486
  %call.118 = call i8 @runtime.ifaceeq(i8* nest undef, i8* %ld.250, i8* %ld.251, i8* %ld.252, i8* %ld.253), !dbg !2486
  %icmp.244 = icmp ne i8 %call.118, 1, !dbg !2486
  %zext.243 = zext i1 %icmp.244 to i8, !dbg !2486
  %trunc.211 = trunc i8 %zext.243 to i1, !dbg !2486
  br i1 %trunc.211, label %then.211, label %else.211

else.210:                                         ; preds = %fallthrough.209
  %.ld.48 = load { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }*, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }** %tmpv.468, align 8, !dbg !2486
  store { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }* %.ld.48, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }** %tmpv.472, align 8
  br label %fallthrough.210

then.211:                                         ; preds = %fallthrough.210
  store i8 0, i8* %"$ret22", align 1, !dbg !2486
  %"$ret22.ld.1" = load i8, i8* %"$ret22", align 1, !dbg !2486
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret22"), !dbg !2486
  ret i8 %"$ret22.ld.1", !dbg !2486

fallthrough.211:                                  ; preds = %else.211
  %tmpv.467.ld.1 = load { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }*, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }** %tmpv.467, align 8, !dbg !2486
  %icmp.245 = icmp eq { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }* %tmpv.467.ld.1, null, !dbg !2486
  %zext.244 = zext i1 %icmp.245 to i8, !dbg !2486
  %trunc.212 = trunc i8 %zext.244 to i1, !dbg !2486
  br i1 %trunc.212, label %then.212, label %else.212, !make.implicit !46

else.211:                                         ; preds = %fallthrough.210
  br label %fallthrough.211

then.212:                                         ; preds = %fallthrough.211
  call void @runtime.panicmem(i8* nest undef), !dbg !2486
  unreachable

fallthrough.212:                                  ; preds = %else.212
  %tmpv.473.ld.0 = load { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }*, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }** %tmpv.473, align 8, !dbg !2486
  %field.626 = getelementptr inbounds { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }* %tmpv.473.ld.0, i32 0, i32 2, !dbg !2486
  %cast.1839 = bitcast %Message.3* %field.626 to %.1*, !dbg !2486
  %tmpv.468.ld.1 = load { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }*, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }** %tmpv.468, align 8, !dbg !2486
  %icmp.246 = icmp eq { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }* %tmpv.468.ld.1, null, !dbg !2486
  %zext.245 = zext i1 %icmp.246 to i8, !dbg !2486
  %trunc.213 = trunc i8 %zext.245 to i1, !dbg !2486
  br i1 %trunc.213, label %then.213, label %else.213, !make.implicit !46

else.212:                                         ; preds = %fallthrough.211
  %.ld.49 = load { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }*, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }** %tmpv.467, align 8, !dbg !2486
  store { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }* %.ld.49, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }** %tmpv.473, align 8
  br label %fallthrough.212

then.213:                                         ; preds = %fallthrough.212
  call void @runtime.panicmem(i8* nest undef), !dbg !2486
  unreachable

fallthrough.213:                                  ; preds = %else.213
  %tmpv.474.ld.0 = load { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }*, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }** %tmpv.474, align 8, !dbg !2486
  %field.627 = getelementptr inbounds { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }* %tmpv.474.ld.0, i32 0, i32 2, !dbg !2486
  %cast.1841 = bitcast %Message.3* %field.627 to %.1*, !dbg !2486
  %cast.1842 = bitcast %.1* %cast.1839 to { i8*, i8* }*, !dbg !2486
  %field0.138 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1842, i32 0, i32 0, !dbg !2486
  %ld.254 = load i8*, i8** %field0.138, align 8, !dbg !2486
  %field1.138 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1842, i32 0, i32 1, !dbg !2486
  %ld.255 = load i8*, i8** %field1.138, align 8, !dbg !2486
  %cast.1843 = bitcast %.1* %cast.1841 to { i8*, i8* }*, !dbg !2486
  %field0.139 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1843, i32 0, i32 0, !dbg !2486
  %ld.256 = load i8*, i8** %field0.139, align 8, !dbg !2486
  %field1.139 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1843, i32 0, i32 1, !dbg !2486
  %ld.257 = load i8*, i8** %field1.139, align 8, !dbg !2486
  %call.119 = call i8 @runtime.ifaceeq(i8* nest undef, i8* %ld.254, i8* %ld.255, i8* %ld.256, i8* %ld.257), !dbg !2486
  %icmp.247 = icmp ne i8 %call.119, 1, !dbg !2486
  %zext.246 = zext i1 %icmp.247 to i8, !dbg !2486
  %trunc.214 = trunc i8 %zext.246 to i1, !dbg !2486
  br i1 %trunc.214, label %then.214, label %else.214

else.213:                                         ; preds = %fallthrough.212
  %.ld.50 = load { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }*, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }** %tmpv.468, align 8, !dbg !2486
  store { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }* %.ld.50, { %NoUnkeyedLiterals.0, %Message.3, %Message.3 }** %tmpv.474, align 8
  br label %fallthrough.213

then.214:                                         ; preds = %fallthrough.213
  store i8 0, i8* %"$ret22", align 1, !dbg !2486
  %"$ret22.ld.2" = load i8, i8* %"$ret22", align 1, !dbg !2486
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret22"), !dbg !2486
  ret i8 %"$ret22.ld.2", !dbg !2486

fallthrough.214:                                  ; preds = %else.214
  store i8 1, i8* %"$ret22", align 1, !dbg !2486
  %"$ret22.ld.3" = load i8, i8* %"$ret22", align 1, !dbg !2486
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret22"), !dbg !2486
  ret i8 %"$ret22.ld.3", !dbg !2486

else.214:                                         ; preds = %fallthrough.213
  br label %fallthrough.214
}

define i8 @command_x2dline_x2darguments.struct_4google_0golang_0org_1protobuf_1internal_1pragma_0NoUnkeyedLiterals_cMessage_bgoogle_0golang_0org_1protobuf_1reflect_1protoreflect_0Message_5..eq(i8* nest %nest.23, i8* %key1, i8* %key2) #0 !dbg !2489 {
entry:
  %key1.addr = alloca i8*, align 8
  %key2.addr = alloca i8*, align 8
  %"$ret23" = alloca i8, align 1
  %tmpv.475 = alloca { %NoUnkeyedLiterals.0, %Message.3 }*, align 8
  %tmpv.476 = alloca { %NoUnkeyedLiterals.0, %Message.3 }*, align 8
  %tmpv.477 = alloca %NoUnkeyedLiterals.0, align 1
  %tmpv.478 = alloca %NoUnkeyedLiterals.0, align 1
  %tmpv.479 = alloca { %NoUnkeyedLiterals.0, %Message.3 }*, align 8
  %tmpv.480 = alloca { %NoUnkeyedLiterals.0, %Message.3 }*, align 8
  store i8* %key1, i8** %key1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key1.addr, metadata !2490, metadata !DIExpression()), !dbg !2491
  store i8* %key2, i8** %key2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key2.addr, metadata !2492, metadata !DIExpression()), !dbg !2491
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %"$ret23")
  store i8 0, i8* %"$ret23", align 1
  call void @llvm.dbg.declare(metadata i8* %"$ret23", metadata !2493, metadata !DIExpression()), !dbg !2491
  %key1.ld.11 = load i8*, i8** %key1.addr, align 8, !dbg !2491
  %cast.1844 = bitcast i8* %key1.ld.11 to { %NoUnkeyedLiterals.0, %Message.3 }*, !dbg !2491
  store { %NoUnkeyedLiterals.0, %Message.3 }* %cast.1844, { %NoUnkeyedLiterals.0, %Message.3 }** %tmpv.475, align 8
  %key2.ld.11 = load i8*, i8** %key2.addr, align 8, !dbg !2491
  %cast.1845 = bitcast i8* %key2.ld.11 to { %NoUnkeyedLiterals.0, %Message.3 }*, !dbg !2491
  store { %NoUnkeyedLiterals.0, %Message.3 }* %cast.1845, { %NoUnkeyedLiterals.0, %Message.3 }** %tmpv.476, align 8
  br i1 false, label %then.215, label %else.215

then.215:                                         ; preds = %entry
  store i8 0, i8* %"$ret23", align 1, !dbg !2491
  %"$ret23.ld.0" = load i8, i8* %"$ret23", align 1, !dbg !2491
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret23"), !dbg !2491
  ret i8 %"$ret23.ld.0", !dbg !2491

fallthrough.215:                                  ; preds = %else.215
  %tmpv.475.ld.0 = load { %NoUnkeyedLiterals.0, %Message.3 }*, { %NoUnkeyedLiterals.0, %Message.3 }** %tmpv.475, align 8, !dbg !2491
  %icmp.249 = icmp eq { %NoUnkeyedLiterals.0, %Message.3 }* %tmpv.475.ld.0, null, !dbg !2491
  %zext.248 = zext i1 %icmp.249 to i8, !dbg !2491
  %trunc.216 = trunc i8 %zext.248 to i1, !dbg !2491
  br i1 %trunc.216, label %then.216, label %else.216, !make.implicit !46

else.215:                                         ; preds = %entry
  br label %fallthrough.215

then.216:                                         ; preds = %fallthrough.215
  call void @runtime.panicmem(i8* nest undef), !dbg !2491
  unreachable

fallthrough.216:                                  ; preds = %else.216
  %tmpv.479.ld.0 = load { %NoUnkeyedLiterals.0, %Message.3 }*, { %NoUnkeyedLiterals.0, %Message.3 }** %tmpv.479, align 8, !dbg !2491
  %field.628 = getelementptr inbounds { %NoUnkeyedLiterals.0, %Message.3 }, { %NoUnkeyedLiterals.0, %Message.3 }* %tmpv.479.ld.0, i32 0, i32 1, !dbg !2491
  %cast.1847 = bitcast %Message.3* %field.628 to %.1*, !dbg !2491
  %tmpv.476.ld.0 = load { %NoUnkeyedLiterals.0, %Message.3 }*, { %NoUnkeyedLiterals.0, %Message.3 }** %tmpv.476, align 8, !dbg !2491
  %icmp.250 = icmp eq { %NoUnkeyedLiterals.0, %Message.3 }* %tmpv.476.ld.0, null, !dbg !2491
  %zext.249 = zext i1 %icmp.250 to i8, !dbg !2491
  %trunc.217 = trunc i8 %zext.249 to i1, !dbg !2491
  br i1 %trunc.217, label %then.217, label %else.217, !make.implicit !46

else.216:                                         ; preds = %fallthrough.215
  %.ld.51 = load { %NoUnkeyedLiterals.0, %Message.3 }*, { %NoUnkeyedLiterals.0, %Message.3 }** %tmpv.475, align 8, !dbg !2491
  store { %NoUnkeyedLiterals.0, %Message.3 }* %.ld.51, { %NoUnkeyedLiterals.0, %Message.3 }** %tmpv.479, align 8
  br label %fallthrough.216

then.217:                                         ; preds = %fallthrough.216
  call void @runtime.panicmem(i8* nest undef), !dbg !2491
  unreachable

fallthrough.217:                                  ; preds = %else.217
  %tmpv.480.ld.0 = load { %NoUnkeyedLiterals.0, %Message.3 }*, { %NoUnkeyedLiterals.0, %Message.3 }** %tmpv.480, align 8, !dbg !2491
  %field.629 = getelementptr inbounds { %NoUnkeyedLiterals.0, %Message.3 }, { %NoUnkeyedLiterals.0, %Message.3 }* %tmpv.480.ld.0, i32 0, i32 1, !dbg !2491
  %cast.1849 = bitcast %Message.3* %field.629 to %.1*, !dbg !2491
  %cast.1850 = bitcast %.1* %cast.1847 to { i8*, i8* }*, !dbg !2491
  %field0.140 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1850, i32 0, i32 0, !dbg !2491
  %ld.258 = load i8*, i8** %field0.140, align 8, !dbg !2491
  %field1.140 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1850, i32 0, i32 1, !dbg !2491
  %ld.259 = load i8*, i8** %field1.140, align 8, !dbg !2491
  %cast.1851 = bitcast %.1* %cast.1849 to { i8*, i8* }*, !dbg !2491
  %field0.141 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1851, i32 0, i32 0, !dbg !2491
  %ld.260 = load i8*, i8** %field0.141, align 8, !dbg !2491
  %field1.141 = getelementptr inbounds { i8*, i8* }, { i8*, i8* }* %cast.1851, i32 0, i32 1, !dbg !2491
  %ld.261 = load i8*, i8** %field1.141, align 8, !dbg !2491
  %call.120 = call i8 @runtime.ifaceeq(i8* nest undef, i8* %ld.258, i8* %ld.259, i8* %ld.260, i8* %ld.261), !dbg !2491
  %icmp.251 = icmp ne i8 %call.120, 1, !dbg !2491
  %zext.250 = zext i1 %icmp.251 to i8, !dbg !2491
  %trunc.218 = trunc i8 %zext.250 to i1, !dbg !2491
  br i1 %trunc.218, label %then.218, label %else.218

else.217:                                         ; preds = %fallthrough.216
  %.ld.52 = load { %NoUnkeyedLiterals.0, %Message.3 }*, { %NoUnkeyedLiterals.0, %Message.3 }** %tmpv.476, align 8, !dbg !2491
  store { %NoUnkeyedLiterals.0, %Message.3 }* %.ld.52, { %NoUnkeyedLiterals.0, %Message.3 }** %tmpv.480, align 8
  br label %fallthrough.217

then.218:                                         ; preds = %fallthrough.217
  store i8 0, i8* %"$ret23", align 1, !dbg !2491
  %"$ret23.ld.1" = load i8, i8* %"$ret23", align 1, !dbg !2491
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret23"), !dbg !2491
  ret i8 %"$ret23.ld.1", !dbg !2491

fallthrough.218:                                  ; preds = %else.218
  store i8 1, i8* %"$ret23", align 1, !dbg !2491
  %"$ret23.ld.2" = load i8, i8* %"$ret23", align 1, !dbg !2491
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret23"), !dbg !2491
  ret i8 %"$ret23.ld.2", !dbg !2491

else.218:                                         ; preds = %fallthrough.217
  br label %fallthrough.218
}

define i8 @command_x2dline_x2darguments._68_7uint8..eq(i8* nest %nest.24, i8* %key1, i8* %key2) #0 !dbg !2494 {
entry:
  %key1.addr = alloca i8*, align 8
  %key2.addr = alloca i8*, align 8
  %"$ret24" = alloca i8, align 1
  %tmpv.481 = alloca i8, align 1
  store i8* %key1, i8** %key1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key1.addr, metadata !2495, metadata !DIExpression()), !dbg !2496
  store i8* %key2, i8** %key2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key2.addr, metadata !2497, metadata !DIExpression()), !dbg !2496
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %"$ret24")
  store i8 0, i8* %"$ret24", align 1
  call void @llvm.dbg.declare(metadata i8* %"$ret24", metadata !2498, metadata !DIExpression()), !dbg !2496
  %key1.ld.12 = load i8*, i8** %key1.addr, align 8, !dbg !2496
  %key2.ld.12 = load i8*, i8** %key2.addr, align 8, !dbg !2496
  %call.121 = call i8 @runtime.memequal(i8* nest undef, i8* %key1.ld.12, i8* %key2.ld.12, i64 8), !dbg !2496
  store i8 %call.121, i8* %tmpv.481, align 1
  %tmpv.481.ld.0 = load i8, i8* %tmpv.481, align 1, !dbg !2496
  store i8 %tmpv.481.ld.0, i8* %"$ret24", align 1, !dbg !2496
  %"$ret24.ld.0" = load i8, i8* %"$ret24", align 1, !dbg !2496
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret24"), !dbg !2496
  ret i8 %"$ret24.ld.0", !dbg !2496
}

define i8 @command_x2dline_x2darguments._614_7int8..eq(i8* nest %nest.25, i8* %key1, i8* %key2) #0 !dbg !2499 {
entry:
  %key1.addr = alloca i8*, align 8
  %key2.addr = alloca i8*, align 8
  %"$ret25" = alloca i8, align 1
  %tmpv.482 = alloca i8, align 1
  store i8* %key1, i8** %key1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key1.addr, metadata !2500, metadata !DIExpression()), !dbg !2501
  store i8* %key2, i8** %key2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key2.addr, metadata !2502, metadata !DIExpression()), !dbg !2501
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %"$ret25")
  store i8 0, i8* %"$ret25", align 1
  call void @llvm.dbg.declare(metadata i8* %"$ret25", metadata !2503, metadata !DIExpression()), !dbg !2501
  %key1.ld.13 = load i8*, i8** %key1.addr, align 8, !dbg !2501
  %key2.ld.13 = load i8*, i8** %key2.addr, align 8, !dbg !2501
  %call.122 = call i8 @runtime.memequal(i8* nest undef, i8* %key1.ld.13, i8* %key2.ld.13, i64 14), !dbg !2501
  store i8 %call.122, i8* %tmpv.482, align 1
  %tmpv.482.ld.0 = load i8, i8* %tmpv.482, align 1, !dbg !2501
  store i8 %tmpv.482.ld.0, i8* %"$ret25", align 1, !dbg !2501
  %"$ret25.ld.0" = load i8, i8* %"$ret25", align 1, !dbg !2501
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret25"), !dbg !2501
  ret i8 %"$ret25.ld.0", !dbg !2501
}

define i8 @command_x2dline_x2darguments._696_7int8..eq(i8* nest %nest.26, i8* %key1, i8* %key2) #0 !dbg !2504 {
entry:
  %key1.addr = alloca i8*, align 8
  %key2.addr = alloca i8*, align 8
  %"$ret26" = alloca i8, align 1
  %tmpv.483 = alloca i8, align 1
  store i8* %key1, i8** %key1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key1.addr, metadata !2505, metadata !DIExpression()), !dbg !2506
  store i8* %key2, i8** %key2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key2.addr, metadata !2507, metadata !DIExpression()), !dbg !2506
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %"$ret26")
  store i8 0, i8* %"$ret26", align 1
  call void @llvm.dbg.declare(metadata i8* %"$ret26", metadata !2508, metadata !DIExpression()), !dbg !2506
  %key1.ld.14 = load i8*, i8** %key1.addr, align 8, !dbg !2506
  %key2.ld.14 = load i8*, i8** %key2.addr, align 8, !dbg !2506
  %call.123 = call i8 @runtime.memequal(i8* nest undef, i8* %key1.ld.14, i8* %key2.ld.14, i64 96), !dbg !2506
  store i8 %call.123, i8* %tmpv.483, align 1
  %tmpv.483.ld.0 = load i8, i8* %tmpv.483, align 1, !dbg !2506
  store i8 %tmpv.483.ld.0, i8* %"$ret26", align 1, !dbg !2506
  %"$ret26.ld.0" = load i8, i8* %"$ret26", align 1, !dbg !2506
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret26"), !dbg !2506
  ret i8 %"$ret26.ld.0", !dbg !2506
}

define i8 @command_x2dline_x2darguments._6256_7uint8..eq(i8* nest %nest.27, i8* %key1, i8* %key2) #0 !dbg !2509 {
entry:
  %key1.addr = alloca i8*, align 8
  %key2.addr = alloca i8*, align 8
  %"$ret27" = alloca i8, align 1
  %tmpv.484 = alloca i8, align 1
  store i8* %key1, i8** %key1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key1.addr, metadata !2510, metadata !DIExpression()), !dbg !2511
  store i8* %key2, i8** %key2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key2.addr, metadata !2512, metadata !DIExpression()), !dbg !2511
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %"$ret27")
  store i8 0, i8* %"$ret27", align 1
  call void @llvm.dbg.declare(metadata i8* %"$ret27", metadata !2513, metadata !DIExpression()), !dbg !2511
  %key1.ld.15 = load i8*, i8** %key1.addr, align 8, !dbg !2511
  %key2.ld.15 = load i8*, i8** %key2.addr, align 8, !dbg !2511
  %call.124 = call i8 @runtime.memequal(i8* nest undef, i8* %key1.ld.15, i8* %key2.ld.15, i64 256), !dbg !2511
  store i8 %call.124, i8* %tmpv.484, align 1
  %tmpv.484.ld.0 = load i8, i8* %tmpv.484, align 1, !dbg !2511
  store i8 %tmpv.484.ld.0, i8* %"$ret27", align 1, !dbg !2511
  %"$ret27.ld.0" = load i8, i8* %"$ret27", align 1, !dbg !2511
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %"$ret27"), !dbg !2511
  ret i8 %"$ret27.ld.0", !dbg !2511
}

declare { i8*, i64 } @os.Getenv(i8*, i8*, i64) #0

declare { i8*, i8* } @errors.New(i8*, i8*, i64) #0

attributes #0 = { "disable-tail-calls"="true" "frame-pointer"="none" "null-pointer-is-valid"="true" "split-stack" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #1 = { argmemonly nofree nounwind willreturn }
attributes #2 = { argmemonly nofree nosync nounwind willreturn }
attributes #3 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #4 = { cold "disable-tail-calls"="true" "frame-pointer"="none" "gc-leaf-function" "null-pointer-is-valid"="true" "split-stack" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #5 = { noreturn "disable-tail-calls"="true" "frame-pointer"="none" "null-pointer-is-valid"="true" "split-stack" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #6 = { noinline "disable-tail-calls"="true" "frame-pointer"="none" "null-pointer-is-valid"="true" "split-stack" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #7 = { cold "disable-tail-calls"="true" "frame-pointer"="none" "null-pointer-is-valid"="true" "split-stack" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
attributes #8 = { argmemonly readonly "disable-tail-calls"="true" "frame-pointer"="none" "null-pointer-is-valid"="true" "split-stack" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.dbg.cu = !{!3}

!0 = !{i32 7, !"PIC Level", i32 0}
!1 = !{i32 2, !"Debug Info Version", i32 3}
!2 = !{i32 2, !"Dwarf Version", i32 4}
!3 = distinct !DICompileUnit(language: DW_LANG_Go, file: !4, producer: "llvm-goc", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !5)
!4 = !DIFile(filename: "./36.go", directory: "/home/ming/go/src/chaincode_repo/github/36")
!5 = !{!6}
!6 = !DIGlobalVariableExpression(var: !7, expr: !DIExpression())
!7 = distinct !DIGlobalVariable(name: "runtime.writeBarrier", linkageName: "runtime.writeBarrier", scope: !3, file: !8, line: 1, type: !9, isLocal: false, isDefinition: true)
!8 = !DIFile(filename: "<built-in>", directory: "")
!9 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{bool,[3]uint8,bool,bool,uint64}", file: !10, size: 128, align: 8, elements: !11)
!10 = !DIFile(filename: "", directory: "")
!11 = !{!12, !14, !19, !20, !21}
!12 = !DIDerivedType(tag: DW_TAG_member, name: "enabled", file: !10, line: 1, baseType: !13, size: 8, align: 8)
!13 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_unsigned)
!14 = !DIDerivedType(tag: DW_TAG_member, name: "pad", file: !10, line: 1, baseType: !15, size: 24, align: 8, offset: 8)
!15 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 24, align: 1, elements: !17)
!16 = !DIBasicType(name: "uint8", size: 8, encoding: DW_ATE_unsigned)
!17 = !{!18}
!18 = !DISubrange(count: 3, lowerBound: 0)
!19 = !DIDerivedType(tag: DW_TAG_member, name: "needed", file: !10, line: 1, baseType: !13, size: 8, align: 8, offset: 32)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "cgo", file: !10, line: 1, baseType: !13, size: 8, align: 8, offset: 40)
!21 = !DIDerivedType(tag: DW_TAG_member, name: "alignme", file: !10, line: 1, baseType: !22, size: 64, align: 64, offset: 64)
!22 = !DIBasicType(name: "uint64", size: 64, encoding: DW_ATE_unsigned)
!23 = distinct !DISubprogram(name: "command-line-arguments.MarblesPrivateChaincode.Init", linkageName: "command_x2dline_x2darguments.MarblesPrivateChaincode.Init", scope: null, file: !24, line: 37, type: !25, scopeLine: 37, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!24 = !DIFile(filename: "36.go", directory: ".")
!25 = !DISubroutineType(types: !26)
!26 = !{!27, !49, !49, !51}
!27 = !DICompositeType(tag: DW_TAG_structure_type, name: "Response", file: !24, line: 14, size: 640, align: 8, elements: !28)
!28 = !{!29, !31, !38, !44, !47, !48}
!29 = !DIDerivedType(tag: DW_TAG_member, name: "Status", file: !24, line: 14, baseType: !30, size: 32, align: 32)
!30 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed)
!31 = !DIDerivedType(tag: DW_TAG_member, name: "Message", file: !24, line: 14, baseType: !32, size: 128, align: 64, offset: 64)
!32 = !DICompositeType(tag: DW_TAG_structure_type, name: "string", file: !8, line: 1, size: 128, align: 8, elements: !33)
!33 = !{!34, !36}
!34 = !DIDerivedType(tag: DW_TAG_member, name: "__data", file: !8, line: 1, baseType: !35, size: 64, align: 64)
!35 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64)
!36 = !DIDerivedType(tag: DW_TAG_member, name: "__length", file: !8, line: 1, baseType: !37, size: 64, align: 64, offset: 64)
!37 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!38 = !DIDerivedType(tag: DW_TAG_member, name: "Payload", file: !24, line: 14, baseType: !39, size: 192, align: 64, offset: 192)
!39 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*uint8,int,int}", file: !10, size: 192, align: 8, elements: !40)
!40 = !{!41, !42, !43}
!41 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !10, line: 1, baseType: !35, size: 64, align: 64)
!42 = !DIDerivedType(tag: DW_TAG_member, name: "__count", file: !10, line: 1, baseType: !37, size: 64, align: 64, offset: 64)
!43 = !DIDerivedType(tag: DW_TAG_member, name: "__capacity", file: !10, line: 1, baseType: !37, size: 64, align: 64, offset: 128)
!44 = !DIDerivedType(tag: DW_TAG_member, name: "XXX_NoUnkeyedLiteral", file: !24, line: 14, baseType: !45, align: 8, offset: 384)
!45 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_channel", file: !8, line: 1, align: 1, elements: !46)
!46 = !{}
!47 = !DIDerivedType(tag: DW_TAG_member, name: "XXX_unrecognized", file: !24, line: 14, baseType: !39, size: 192, align: 64, offset: 384)
!48 = !DIDerivedType(tag: DW_TAG_member, name: "XXX_sizecache", file: !24, line: 14, baseType: !30, size: 32, align: 32, offset: 576)
!49 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !50, size: 64)
!50 = !DICompositeType(tag: DW_TAG_structure_type, name: "MarblesPrivateChaincode", file: !24, line: 19, align: 1, elements: !46)
!51 = !DICompositeType(tag: DW_TAG_structure_type, name: "ChaincodeStubInterface", file: !24, line: 14, size: 128, align: 8, elements: !52)
!52 = !{!53, !401}
!53 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !54, size: 64, align: 64)
!54 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !55, size: 64)
!55 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void,string,struct{*string,int,int})struct{string,error},*func(*void,string,string)error,*func(*void,string)error,*func(*void)struct{*struct{*uint8,int,int},int,int},*func(*void)struct{struct{*uint8,int,int},error},*func(*void)struct{struct{*uint8,int,int},error},*func(*void)string,*func(*void)struct{struct{*uint8,int,int},error},*func(*void)Values,*func(*void)struct{string,struct{*string,int,int}},*func(*void,string)struct{HistoryQueryIteratorInterface,error},*func(*void,string,string)struct{struct{*uint8,int,int},error},*func(*void,string,string,struct{*string,int,int})struct{StateQueryIteratorInterface,error},*func(*void,string,string,string)struct{StateQueryIteratorInterface,error},*func(*void,string,string)struct{struct{*uint8,int,int},error},*func(*void,string,string)struct{StateQueryIteratorInterface,error},*func(*void,string,string)struct{struct{*uint8,int,int},error},*func(*void,string)struct{StateQueryIteratorInterface,error},*func(*void,string,int32,string)struct{StateQueryIteratorInterface,*QueryResponseMetadata,error},*func(*void)struct{*SignedProposal,error},*func(*void,string)struct{struct{*uint8,int,int},error},*func(*void,string,struct{*string,int,int})struct{StateQueryIteratorInterface,error},*func(*void,string,struct{*string,int,int},int32,string)struct{StateQueryIteratorInterface,*QueryResponseMetadata,error},*func(*void,string,string)struct{StateQueryIteratorInterface,error},*func(*void,string,string,int32,string)struct{StateQueryIteratorInterface,*QueryResponseMetadata,error},*func(*void,string)struct{struct{*uint8,int,int},error},*func(*void)struct{*string,int,int},*func(*void)struct{Values,error},*func(*void)string,*func(*void)struct{*Timestamp,error},*func(*void,string,struct{*struct{*uint8,int,int},int,int},string)Response,*func(*void,string,string)error,*func(*void,string,string,struct{*uint8,int,int})error,*func(*void,string,struct{*uint8,int,int})error,*func(*void,string,struct{*uint8,int,int})error,*func(*void,string,string,struct{*uint8,int,int})error,*func(*void,string,struct{*uint8,int,int})error,*func(*void,string)struct{string,struct{*string,int,int},error}}", file: !10, size: 2496, align: 8, elements: !56)
!56 = !{!57, !100, !123, !127, !131, !139, !147, !148, !149, !150, !167, !174, !1418, !1422, !1449, !1453, !1454, !1458, !1459, !1463, !1478, !1490, !1494, !1498, !1502, !1503, !1507, !1508, !1512, !1519, !1520, !1527, !1531, !1532, !1536, !1540, !1541, !1542, !1543}
!57 = !DIDerivedType(tag: DW_TAG_member, name: "__type_descriptor", file: !10, line: 14, baseType: !58, size: 64, align: 64)
!58 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !59, size: 64)
!59 = !DICompositeType(tag: DW_TAG_structure_type, name: "_type", file: !8, line: 1, size: 512, align: 8, elements: !60)
!60 = !{!61, !63, !64, !66, !67, !68, !69, !70, !80, !81, !83, !99}
!61 = !DIDerivedType(tag: DW_TAG_member, name: "size", file: !8, line: 1, baseType: !62, size: 64, align: 64)
!62 = !DIBasicType(name: "uintptr", size: 64, encoding: DW_ATE_unsigned)
!63 = !DIDerivedType(tag: DW_TAG_member, name: "ptrdata", file: !8, line: 1, baseType: !62, size: 64, align: 64, offset: 64)
!64 = !DIDerivedType(tag: DW_TAG_member, name: "hash", file: !8, line: 1, baseType: !65, size: 32, align: 32, offset: 128)
!65 = !DIBasicType(name: "uint32", size: 32, encoding: DW_ATE_unsigned)
!66 = !DIDerivedType(tag: DW_TAG_member, name: "tflag", file: !8, line: 1, baseType: !16, size: 8, align: 8, offset: 160)
!67 = !DIDerivedType(tag: DW_TAG_member, name: "align", file: !8, line: 1, baseType: !16, size: 8, align: 8, offset: 168)
!68 = !DIDerivedType(tag: DW_TAG_member, name: "fieldAlign", file: !8, line: 1, baseType: !16, size: 8, align: 8, offset: 176)
!69 = !DIDerivedType(tag: DW_TAG_member, name: "kind", file: !8, line: 1, baseType: !16, size: 8, align: 8, offset: 184)
!70 = !DIDerivedType(tag: DW_TAG_member, name: "equal", file: !8, line: 1, baseType: !71, size: 64, align: 64, offset: 192)
!71 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !72, size: 64)
!72 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !8, line: 1, size: 64, align: 8, elements: !73)
!73 = !{!74}
!74 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !8, line: 1, baseType: !75, size: 64, align: 64)
!75 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !76, size: 64)
!76 = !DISubroutineType(types: !77)
!77 = !{!13, !78, !78}
!78 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !79, size: 64)
!79 = !DIBasicType(name: "void")
!80 = !DIDerivedType(tag: DW_TAG_member, name: "gcdata", file: !8, line: 1, baseType: !35, size: 64, align: 64, offset: 256)
!81 = !DIDerivedType(tag: DW_TAG_member, name: "string", file: !8, line: 1, baseType: !82, size: 64, align: 64, offset: 320)
!82 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !32, size: 64)
!83 = !DIDerivedType(tag: DW_TAG_member, name: "uncommonType", file: !8, line: 1, baseType: !84, size: 64, align: 64, offset: 384)
!84 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !85, size: 64)
!85 = !DICompositeType(tag: DW_TAG_structure_type, name: "uncommonType", file: !8, line: 1, size: 320, align: 8, elements: !86)
!86 = !{!87, !88, !89}
!87 = !DIDerivedType(tag: DW_TAG_member, name: "name", file: !8, line: 1, baseType: !82, size: 64, align: 64)
!88 = !DIDerivedType(tag: DW_TAG_member, name: "pkgPath", file: !8, line: 1, baseType: !82, size: 64, align: 64, offset: 64)
!89 = !DIDerivedType(tag: DW_TAG_member, name: "methods", file: !8, line: 1, baseType: !90, size: 192, align: 64, offset: 128)
!90 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*method,int,int}", file: !10, size: 192, align: 8, elements: !91)
!91 = !{!92, !42, !43}
!92 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !10, line: 1, baseType: !93, size: 64, align: 64)
!93 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !94, size: 64)
!94 = !DICompositeType(tag: DW_TAG_structure_type, name: "method", file: !8, line: 1, size: 320, align: 8, elements: !95)
!95 = !{!87, !88, !96, !97, !98}
!96 = !DIDerivedType(tag: DW_TAG_member, name: "mtyp", file: !8, line: 1, baseType: !78, size: 64, align: 64, offset: 128)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "typ", file: !8, line: 1, baseType: !78, size: 64, align: 64, offset: 192)
!98 = !DIDerivedType(tag: DW_TAG_member, name: "tfn", file: !8, line: 1, baseType: !78, size: 64, align: 64, offset: 256)
!99 = !DIDerivedType(tag: DW_TAG_member, name: "ptrToThis", file: !8, line: 1, baseType: !78, size: 64, align: 64, offset: 448)
!100 = !DIDerivedType(tag: DW_TAG_member, name: "CreateCompositeKey", file: !10, line: 14, baseType: !101, size: 64, align: 64, offset: 64)
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !102, size: 64)
!102 = !DISubroutineType(types: !103)
!103 = !{!104, !78, !32, !120}
!104 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{string,error}", file: !10, size: 256, align: 8, elements: !105)
!105 = !{!106, !107}
!106 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 14, baseType: !32, size: 128, align: 64)
!107 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 14, baseType: !108, size: 128, align: 64, offset: 128)
!108 = !DICompositeType(tag: DW_TAG_structure_type, name: "error", file: !8, line: 1, size: 128, align: 8, elements: !109)
!109 = !{!110, !119}
!110 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !8, line: 1, baseType: !111, size: 64, align: 64)
!111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !112, size: 64)
!112 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void)string}", file: !10, size: 128, align: 8, elements: !113)
!113 = !{!114, !115}
!114 = !DIDerivedType(tag: DW_TAG_member, name: "__type_descriptor", file: !10, line: 1, baseType: !58, size: 64, align: 64)
!115 = !DIDerivedType(tag: DW_TAG_member, name: "Error", file: !10, line: 1, baseType: !116, size: 64, align: 64, offset: 64)
!116 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !117, size: 64)
!117 = !DISubroutineType(types: !118)
!118 = !{!32, !78}
!119 = !DIDerivedType(tag: DW_TAG_member, name: "__object", file: !8, line: 1, baseType: !78, size: 64, align: 64, offset: 64)
!120 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*string,int,int}", file: !10, size: 192, align: 8, elements: !121)
!121 = !{!122, !42, !43}
!122 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !10, line: 1, baseType: !82, size: 64, align: 64)
!123 = !DIDerivedType(tag: DW_TAG_member, name: "DelPrivateData", file: !10, line: 14, baseType: !124, size: 64, align: 64, offset: 128)
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !125, size: 64)
!125 = !DISubroutineType(types: !126)
!126 = !{!108, !78, !32, !32}
!127 = !DIDerivedType(tag: DW_TAG_member, name: "DelState", file: !10, line: 14, baseType: !128, size: 64, align: 64, offset: 192)
!128 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !129, size: 64)
!129 = !DISubroutineType(types: !130)
!130 = !{!108, !78, !32}
!131 = !DIDerivedType(tag: DW_TAG_member, name: "GetArgs", file: !10, line: 14, baseType: !132, size: 64, align: 64, offset: 256)
!132 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !133, size: 64)
!133 = !DISubroutineType(types: !134)
!134 = !{!135, !78}
!135 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*struct{*uint8,int,int},int,int}", file: !10, size: 192, align: 8, elements: !136)
!136 = !{!137, !42, !43}
!137 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !10, line: 1, baseType: !138, size: 64, align: 64)
!138 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !39, size: 64)
!139 = !DIDerivedType(tag: DW_TAG_member, name: "GetArgsSlice", file: !10, line: 14, baseType: !140, size: 64, align: 64, offset: 320)
!140 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !141, size: 64)
!141 = !DISubroutineType(types: !142)
!142 = !{!143, !78}
!143 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{struct{*uint8,int,int},error}", file: !10, size: 320, align: 8, elements: !144)
!144 = !{!145, !146}
!145 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 15, baseType: !39, size: 192, align: 64)
!146 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 15, baseType: !108, size: 128, align: 64, offset: 192)
!147 = !DIDerivedType(tag: DW_TAG_member, name: "GetBinding", file: !10, line: 14, baseType: !140, size: 64, align: 64, offset: 384)
!148 = !DIDerivedType(tag: DW_TAG_member, name: "GetChannelID", file: !10, line: 14, baseType: !116, size: 64, align: 64, offset: 448)
!149 = !DIDerivedType(tag: DW_TAG_member, name: "GetCreator", file: !10, line: 14, baseType: !140, size: 64, align: 64, offset: 512)
!150 = !DIDerivedType(tag: DW_TAG_member, name: "GetDecorations", file: !10, line: 14, baseType: !151, size: 64, align: 64, offset: 576)
!151 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!152 = !DISubroutineType(types: !153)
!153 = !{!154, !78}
!154 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !155, size: 64)
!155 = !DICompositeType(tag: DW_TAG_structure_type, name: "runtime.hmap", file: !8, line: 1, size: 384, align: 8, elements: !156)
!156 = !{!157, !158, !159, !160, !162, !163, !164, !165, !166}
!157 = !DIDerivedType(tag: DW_TAG_member, name: "count", file: !8, line: 1, baseType: !37, size: 64, align: 64)
!158 = !DIDerivedType(tag: DW_TAG_member, name: "flags", file: !8, line: 1, baseType: !16, size: 8, align: 8, offset: 64)
!159 = !DIDerivedType(tag: DW_TAG_member, name: "B", file: !8, line: 1, baseType: !16, size: 8, align: 8, offset: 72)
!160 = !DIDerivedType(tag: DW_TAG_member, name: "noverflow", file: !8, line: 1, baseType: !161, size: 16, align: 16, offset: 80)
!161 = !DIBasicType(name: "uint16", size: 16, encoding: DW_ATE_unsigned)
!162 = !DIDerivedType(tag: DW_TAG_member, name: "hash0", file: !8, line: 1, baseType: !65, size: 32, align: 32, offset: 96)
!163 = !DIDerivedType(tag: DW_TAG_member, name: "buckets", file: !8, line: 1, baseType: !78, size: 64, align: 64, offset: 128)
!164 = !DIDerivedType(tag: DW_TAG_member, name: "oldbuckets", file: !8, line: 1, baseType: !78, size: 64, align: 64, offset: 192)
!165 = !DIDerivedType(tag: DW_TAG_member, name: "nevacuate", file: !8, line: 1, baseType: !62, size: 64, align: 64, offset: 256)
!166 = !DIDerivedType(tag: DW_TAG_member, name: "extra", file: !8, line: 1, baseType: !78, size: 64, align: 64, offset: 320)
!167 = !DIDerivedType(tag: DW_TAG_member, name: "GetFunctionAndParameters", file: !10, line: 14, baseType: !168, size: 64, align: 64, offset: 640)
!168 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !169, size: 64)
!169 = !DISubroutineType(types: !170)
!170 = !{!171, !78}
!171 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{string,struct{*string,int,int}}", file: !10, size: 320, align: 8, elements: !172)
!172 = !{!106, !173}
!173 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 14, baseType: !120, size: 192, align: 64, offset: 128)
!174 = !DIDerivedType(tag: DW_TAG_member, name: "GetHistoryForKey", file: !10, line: 14, baseType: !175, size: 64, align: 64, offset: 704)
!175 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !176, size: 64)
!176 = !DISubroutineType(types: !177)
!177 = !{!178, !78, !32}
!178 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{HistoryQueryIteratorInterface,error}", file: !10, size: 256, align: 8, elements: !179)
!179 = !{!180, !107}
!180 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 14, baseType: !181, size: 128, align: 64)
!181 = !DICompositeType(tag: DW_TAG_structure_type, name: "HistoryQueryIteratorInterface", file: !24, line: 14, size: 128, align: 8, elements: !182)
!182 = !{!183, !401}
!183 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !184, size: 64, align: 64)
!184 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !185, size: 64)
!185 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void)error,*func(*void)bool,*func(*void)struct{*KeyModification,error}}", file: !10, size: 256, align: 8, elements: !186)
!186 = !{!57, !187, !191, !195}
!187 = !DIDerivedType(tag: DW_TAG_member, name: "Close", file: !10, line: 14, baseType: !188, size: 64, align: 64, offset: 64)
!188 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !189, size: 64)
!189 = !DISubroutineType(types: !190)
!190 = !{!108, !78}
!191 = !DIDerivedType(tag: DW_TAG_member, name: "HasNext", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 128)
!192 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !193, size: 64)
!193 = !DISubroutineType(types: !194)
!194 = !{!13, !78}
!195 = !DIDerivedType(tag: DW_TAG_member, name: "Next", file: !10, line: 14, baseType: !196, size: 64, align: 64, offset: 192)
!196 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !197, size: 64)
!197 = !DISubroutineType(types: !198)
!198 = !{!199, !78}
!199 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*KeyModification,error}", file: !10, size: 192, align: 8, elements: !200)
!200 = !{!201, !901}
!201 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 14, baseType: !202, size: 64, align: 64)
!202 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !203, size: 64)
!203 = !DICompositeType(tag: DW_TAG_structure_type, name: "KeyModification", file: !24, line: 14, size: 704, align: 8, elements: !204)
!204 = !{!205, !206, !207, !1414, !1415, !1416, !1417}
!205 = !DIDerivedType(tag: DW_TAG_member, name: "TxId", file: !24, line: 14, baseType: !32, size: 128, align: 64)
!206 = !DIDerivedType(tag: DW_TAG_member, name: "Value", file: !24, line: 14, baseType: !39, size: 192, align: 64, offset: 128)
!207 = !DIDerivedType(tag: DW_TAG_member, name: "Timestamp", file: !24, line: 14, baseType: !208, size: 64, align: 64, offset: 320)
!208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !209, size: 64)
!209 = !DICompositeType(tag: DW_TAG_structure_type, name: "Timestamp", file: !24, line: 14, size: 448, align: 8, elements: !210)
!210 = !{!211, !1409, !1410, !1411, !1413}
!211 = !DIDerivedType(tag: DW_TAG_member, name: "state", file: !24, line: 14, baseType: !212, size: 64, align: 64)
!212 = !DICompositeType(tag: DW_TAG_structure_type, name: "MessageState", file: !24, line: 14, size: 64, align: 8, elements: !213)
!213 = !{!214, !216, !227, !233}
!214 = !DIDerivedType(tag: DW_TAG_member, name: "NoUnkeyedLiterals", file: !24, line: 14, baseType: !215, align: 8)
!215 = !DICompositeType(tag: DW_TAG_structure_type, name: "NoUnkeyedLiterals", file: !24, line: 14, align: 1, elements: !46)
!216 = !DIDerivedType(tag: DW_TAG_member, name: "DoNotCompare", file: !24, line: 14, baseType: !217, align: 64)
!217 = !DICompositeType(tag: DW_TAG_array_type, baseType: !218, align: 8, elements: !225)
!218 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !219, size: 64)
!219 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 14, size: 64, align: 8, elements: !220)
!220 = !{!221}
!221 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 14, baseType: !222, size: 64, align: 64)
!222 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !223, size: 64)
!223 = !DISubroutineType(types: !224)
!224 = !{!79}
!225 = !{!226}
!226 = !DISubrange(count: 0, lowerBound: 0)
!227 = !DIDerivedType(tag: DW_TAG_member, name: "DoNotCopy", file: !24, line: 14, baseType: !228, align: 32)
!228 = !DICompositeType(tag: DW_TAG_array_type, baseType: !229, align: 4, elements: !225)
!229 = !DICompositeType(tag: DW_TAG_structure_type, name: "Mutex", file: !24, line: 14, size: 64, align: 4, elements: !230)
!230 = !{!231, !232}
!231 = !DIDerivedType(tag: DW_TAG_member, name: "state", file: !24, line: 14, baseType: !30, size: 32, align: 32)
!232 = !DIDerivedType(tag: DW_TAG_member, name: "sema", file: !24, line: 14, baseType: !65, size: 32, align: 32, offset: 32)
!233 = !DIDerivedType(tag: DW_TAG_member, name: "atomicMessageInfo", file: !24, line: 14, baseType: !234, size: 64, align: 64)
!234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !235, size: 64)
!235 = !DICompositeType(tag: DW_TAG_structure_type, name: "MessageInfo", file: !24, line: 14, size: 2624, align: 8, elements: !236)
!236 = !{!237, !402, !1201, !1209, !1214, !1215, !1216, !1311}
!237 = !DIDerivedType(tag: DW_TAG_member, name: "GoReflectType", file: !24, line: 14, baseType: !238, size: 128, align: 64)
!238 = !DICompositeType(tag: DW_TAG_structure_type, name: "Type", file: !24, line: 11, size: 128, align: 8, elements: !239)
!239 = !{!240, !401}
!240 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 11, baseType: !241, size: 64, align: 64)
!241 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !242, size: 64)
!242 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void)int,*func(*void,Type)bool,*func(*void)int,*func(*void)ChanDir,*func(*void)bool,*func(*void,Type)bool,*func(*void)Type,*func(*void,int)StructField,*func(*void)int,*func(*void,struct{*int,int,int})StructField,*func(*void,string)struct{StructField,bool},*func(*void,*__go_descriptor)struct{StructField,bool},*func(*void,Type)bool,*func(*void,int)Type,*func(*void)bool,*func(*void)Type,*func(*void)Kind,*func(*void)int,*func(*void,int)Method,*func(*void,string)struct{Method,bool},*func(*void)string,*func(*void)int,*func(*void)int,*func(*void)int,*func(*void)int,*func(*void,int)Type,*func(*void)string,*func(*void)uintptr,*func(*void)string,*func(*void)*.reflect.rtype,*func(*void)string,*func(*void)*.reflect.uncommonType}", file: !10, size: 2112, align: 8, elements: !243)
!243 = !{!244, !245, !249, !253, !254, !259, !260, !261, !265, !286, !287, !291, !299, !310, !311, !315, !316, !317, !322, !323, !372, !380, !381, !382, !383, !384, !385, !386, !387, !391, !392, !396, !397}
!244 = !DIDerivedType(tag: DW_TAG_member, name: "__type_descriptor", file: !10, line: 11, baseType: !58, size: 64, align: 64)
!245 = !DIDerivedType(tag: DW_TAG_member, name: "Align", file: !10, line: 11, baseType: !246, size: 64, align: 64, offset: 64)
!246 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !247, size: 64)
!247 = !DISubroutineType(types: !248)
!248 = !{!37, !78}
!249 = !DIDerivedType(tag: DW_TAG_member, name: "AssignableTo", file: !10, line: 11, baseType: !250, size: 64, align: 64, offset: 128)
!250 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !251, size: 64)
!251 = !DISubroutineType(types: !252)
!252 = !{!13, !78, !238}
!253 = !DIDerivedType(tag: DW_TAG_member, name: "Bits", file: !10, line: 11, baseType: !246, size: 64, align: 64, offset: 192)
!254 = !DIDerivedType(tag: DW_TAG_member, name: "ChanDir", file: !10, line: 11, baseType: !255, size: 64, align: 64, offset: 256)
!255 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !256, size: 64)
!256 = !DISubroutineType(types: !257)
!257 = !{!258, !78}
!258 = !DIBasicType(name: "ChanDir", size: 64, encoding: DW_ATE_signed)
!259 = !DIDerivedType(tag: DW_TAG_member, name: "Comparable", file: !10, line: 11, baseType: !192, size: 64, align: 64, offset: 320)
!260 = !DIDerivedType(tag: DW_TAG_member, name: "ConvertibleTo", file: !10, line: 11, baseType: !250, size: 64, align: 64, offset: 384)
!261 = !DIDerivedType(tag: DW_TAG_member, name: "Elem", file: !10, line: 11, baseType: !262, size: 64, align: 64, offset: 448)
!262 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !263, size: 64)
!263 = !DISubroutineType(types: !264)
!264 = !{!238, !78}
!265 = !DIDerivedType(tag: DW_TAG_member, name: "Field", file: !10, line: 11, baseType: !266, size: 64, align: 64, offset: 512)
!266 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !267, size: 64)
!267 = !DISubroutineType(types: !268)
!268 = !{!269, !78, !37}
!269 = !DICompositeType(tag: DW_TAG_structure_type, name: "StructField", file: !24, line: 11, size: 832, align: 8, elements: !270)
!270 = !{!271, !272, !273, !274, !279, !280, !285}
!271 = !DIDerivedType(tag: DW_TAG_member, name: "Name", file: !24, line: 11, baseType: !32, size: 128, align: 64)
!272 = !DIDerivedType(tag: DW_TAG_member, name: "PkgPath", file: !24, line: 11, baseType: !32, size: 128, align: 64, offset: 128)
!273 = !DIDerivedType(tag: DW_TAG_member, name: "Type", file: !24, line: 11, baseType: !238, size: 128, align: 64, offset: 256)
!274 = !DIDerivedType(tag: DW_TAG_member, name: "Tag", file: !24, line: 11, baseType: !275, size: 128, align: 64, offset: 384)
!275 = !DICompositeType(tag: DW_TAG_structure_type, name: "StructTag", file: !24, line: 11, size: 128, align: 8, elements: !276)
!276 = !{!277, !278}
!277 = !DIDerivedType(tag: DW_TAG_member, name: "__data", file: !24, line: 1, baseType: !35, size: 64, align: 64)
!278 = !DIDerivedType(tag: DW_TAG_member, name: "__length", file: !24, line: 1, baseType: !37, size: 64, align: 64, offset: 64)
!279 = !DIDerivedType(tag: DW_TAG_member, name: "Offset", file: !24, line: 11, baseType: !62, size: 64, align: 64, offset: 512)
!280 = !DIDerivedType(tag: DW_TAG_member, name: "Index", file: !24, line: 11, baseType: !281, size: 192, align: 64, offset: 576)
!281 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*int,int,int}", file: !10, size: 192, align: 8, elements: !282)
!282 = !{!283, !42, !43}
!283 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !10, line: 1, baseType: !284, size: 64, align: 64)
!284 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !37, size: 64)
!285 = !DIDerivedType(tag: DW_TAG_member, name: "Anonymous", file: !24, line: 11, baseType: !13, size: 8, align: 8, offset: 768)
!286 = !DIDerivedType(tag: DW_TAG_member, name: "FieldAlign", file: !10, line: 11, baseType: !246, size: 64, align: 64, offset: 576)
!287 = !DIDerivedType(tag: DW_TAG_member, name: "FieldByIndex", file: !10, line: 11, baseType: !288, size: 64, align: 64, offset: 640)
!288 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !289, size: 64)
!289 = !DISubroutineType(types: !290)
!290 = !{!269, !78, !281}
!291 = !DIDerivedType(tag: DW_TAG_member, name: "FieldByName", file: !10, line: 11, baseType: !292, size: 64, align: 64, offset: 704)
!292 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !293, size: 64)
!293 = !DISubroutineType(types: !294)
!294 = !{!295, !78, !32}
!295 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{StructField,bool}", file: !10, size: 896, align: 8, elements: !296)
!296 = !{!297, !298}
!297 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 11, baseType: !269, size: 832, align: 64)
!298 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 11, baseType: !13, size: 8, align: 8, offset: 832)
!299 = !DIDerivedType(tag: DW_TAG_member, name: "FieldByNameFunc", file: !10, line: 11, baseType: !300, size: 64, align: 64, offset: 768)
!300 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !301, size: 64)
!301 = !DISubroutineType(types: !302)
!302 = !{!295, !78, !303}
!303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !304, size: 64)
!304 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 11, size: 64, align: 8, elements: !305)
!305 = !{!306}
!306 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 11, baseType: !307, size: 64, align: 64)
!307 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !308, size: 64)
!308 = !DISubroutineType(types: !309)
!309 = !{!13, !32}
!310 = !DIDerivedType(tag: DW_TAG_member, name: "Implements", file: !10, line: 11, baseType: !250, size: 64, align: 64, offset: 832)
!311 = !DIDerivedType(tag: DW_TAG_member, name: "In", file: !10, line: 11, baseType: !312, size: 64, align: 64, offset: 896)
!312 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !313, size: 64)
!313 = !DISubroutineType(types: !314)
!314 = !{!238, !78, !37}
!315 = !DIDerivedType(tag: DW_TAG_member, name: "IsVariadic", file: !10, line: 11, baseType: !192, size: 64, align: 64, offset: 960)
!316 = !DIDerivedType(tag: DW_TAG_member, name: "Key", file: !10, line: 11, baseType: !262, size: 64, align: 64, offset: 1024)
!317 = !DIDerivedType(tag: DW_TAG_member, name: "Kind", file: !10, line: 11, baseType: !318, size: 64, align: 64, offset: 1088)
!318 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !319, size: 64)
!319 = !DISubroutineType(types: !320)
!320 = !{!321, !78}
!321 = !DIBasicType(name: "Kind", size: 64, encoding: DW_ATE_unsigned)
!322 = !DIDerivedType(tag: DW_TAG_member, name: "Len", file: !10, line: 11, baseType: !246, size: 64, align: 64, offset: 1152)
!323 = !DIDerivedType(tag: DW_TAG_member, name: "Method", file: !10, line: 11, baseType: !324, size: 64, align: 64, offset: 1216)
!324 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !325, size: 64)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !78, !37}
!327 = !DICompositeType(tag: DW_TAG_structure_type, name: "Method", file: !24, line: 11, size: 640, align: 8, elements: !328)
!328 = !{!271, !272, !273, !329, !371}
!329 = !DIDerivedType(tag: DW_TAG_member, name: "Func", file: !24, line: 11, baseType: !330, size: 192, align: 64, offset: 384)
!330 = !DICompositeType(tag: DW_TAG_structure_type, name: "Value", file: !24, line: 11, size: 192, align: 8, elements: !331)
!331 = !{!332, !368, !369}
!332 = !DIDerivedType(tag: DW_TAG_member, name: "typ", file: !24, line: 11, baseType: !333, size: 64, align: 64)
!333 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !334, size: 64)
!334 = !DICompositeType(tag: DW_TAG_structure_type, name: ".reflect.rtype", file: !24, line: 11, size: 512, align: 8, elements: !335)
!335 = !{!336, !337, !338, !339, !341, !342, !343, !344, !349, !350, !351, !367}
!336 = !DIDerivedType(tag: DW_TAG_member, name: "size", file: !24, line: 11, baseType: !62, size: 64, align: 64)
!337 = !DIDerivedType(tag: DW_TAG_member, name: "ptrdata", file: !24, line: 11, baseType: !62, size: 64, align: 64, offset: 64)
!338 = !DIDerivedType(tag: DW_TAG_member, name: "hash", file: !24, line: 11, baseType: !65, size: 32, align: 32, offset: 128)
!339 = !DIDerivedType(tag: DW_TAG_member, name: "tflag", file: !24, line: 11, baseType: !340, size: 8, align: 8, offset: 160)
!340 = !DIBasicType(name: ".reflect.tflag", size: 8, encoding: DW_ATE_unsigned)
!341 = !DIDerivedType(tag: DW_TAG_member, name: "align", file: !24, line: 11, baseType: !16, size: 8, align: 8, offset: 168)
!342 = !DIDerivedType(tag: DW_TAG_member, name: "fieldAlign", file: !24, line: 11, baseType: !16, size: 8, align: 8, offset: 176)
!343 = !DIDerivedType(tag: DW_TAG_member, name: "kind", file: !24, line: 11, baseType: !16, size: 8, align: 8, offset: 184)
!344 = !DIDerivedType(tag: DW_TAG_member, name: "equal", file: !24, line: 11, baseType: !345, size: 64, align: 64, offset: 192)
!345 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !346, size: 64)
!346 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 11, size: 64, align: 8, elements: !347)
!347 = !{!348}
!348 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 11, baseType: !75, size: 64, align: 64)
!349 = !DIDerivedType(tag: DW_TAG_member, name: "gcdata", file: !24, line: 11, baseType: !35, size: 64, align: 64, offset: 256)
!350 = !DIDerivedType(tag: DW_TAG_member, name: "string", file: !24, line: 11, baseType: !82, size: 64, align: 64, offset: 320)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "uncommonType", file: !24, line: 11, baseType: !352, size: 64, align: 64, offset: 384)
!352 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !353, size: 64)
!353 = !DICompositeType(tag: DW_TAG_structure_type, name: ".reflect.uncommonType", file: !24, line: 11, size: 320, align: 8, elements: !354)
!354 = !{!355, !356, !357}
!355 = !DIDerivedType(tag: DW_TAG_member, name: "name", file: !24, line: 11, baseType: !82, size: 64, align: 64)
!356 = !DIDerivedType(tag: DW_TAG_member, name: "pkgPath", file: !24, line: 11, baseType: !82, size: 64, align: 64, offset: 64)
!357 = !DIDerivedType(tag: DW_TAG_member, name: "methods", file: !24, line: 11, baseType: !358, size: 192, align: 64, offset: 128)
!358 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*.reflect.method,int,int}", file: !10, size: 192, align: 8, elements: !359)
!359 = !{!360, !42, !43}
!360 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !10, line: 1, baseType: !361, size: 64, align: 64)
!361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !362, size: 64)
!362 = !DICompositeType(tag: DW_TAG_structure_type, name: ".reflect.method", file: !24, line: 11, size: 320, align: 8, elements: !363)
!363 = !{!355, !356, !364, !365, !366}
!364 = !DIDerivedType(tag: DW_TAG_member, name: "mtyp", file: !24, line: 11, baseType: !78, size: 64, align: 64, offset: 128)
!365 = !DIDerivedType(tag: DW_TAG_member, name: "typ", file: !24, line: 11, baseType: !78, size: 64, align: 64, offset: 192)
!366 = !DIDerivedType(tag: DW_TAG_member, name: "tfn", file: !24, line: 11, baseType: !78, size: 64, align: 64, offset: 256)
!367 = !DIDerivedType(tag: DW_TAG_member, name: "ptrToThis", file: !24, line: 11, baseType: !78, size: 64, align: 64, offset: 448)
!368 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", file: !24, line: 11, baseType: !78, size: 64, align: 64, offset: 64)
!369 = !DIDerivedType(tag: DW_TAG_member, name: "flag", file: !24, line: 11, baseType: !370, size: 64, align: 64, offset: 128)
!370 = !DIBasicType(name: ".reflect.flag", size: 64, encoding: DW_ATE_unsigned)
!371 = !DIDerivedType(tag: DW_TAG_member, name: "Index", file: !24, line: 11, baseType: !37, size: 64, align: 64, offset: 576)
!372 = !DIDerivedType(tag: DW_TAG_member, name: "MethodByName", file: !10, line: 11, baseType: !373, size: 64, align: 64, offset: 1280)
!373 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !374, size: 64)
!374 = !DISubroutineType(types: !375)
!375 = !{!376, !78, !32}
!376 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{Method,bool}", file: !10, size: 704, align: 8, elements: !377)
!377 = !{!378, !379}
!378 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 11, baseType: !327, size: 640, align: 64)
!379 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 11, baseType: !13, size: 8, align: 8, offset: 640)
!380 = !DIDerivedType(tag: DW_TAG_member, name: "Name", file: !10, line: 11, baseType: !116, size: 64, align: 64, offset: 1344)
!381 = !DIDerivedType(tag: DW_TAG_member, name: "NumField", file: !10, line: 11, baseType: !246, size: 64, align: 64, offset: 1408)
!382 = !DIDerivedType(tag: DW_TAG_member, name: "NumIn", file: !10, line: 11, baseType: !246, size: 64, align: 64, offset: 1472)
!383 = !DIDerivedType(tag: DW_TAG_member, name: "NumMethod", file: !10, line: 11, baseType: !246, size: 64, align: 64, offset: 1536)
!384 = !DIDerivedType(tag: DW_TAG_member, name: "NumOut", file: !10, line: 11, baseType: !246, size: 64, align: 64, offset: 1600)
!385 = !DIDerivedType(tag: DW_TAG_member, name: "Out", file: !10, line: 11, baseType: !312, size: 64, align: 64, offset: 1664)
!386 = !DIDerivedType(tag: DW_TAG_member, name: "PkgPath", file: !10, line: 11, baseType: !116, size: 64, align: 64, offset: 1728)
!387 = !DIDerivedType(tag: DW_TAG_member, name: "Size", file: !10, line: 11, baseType: !388, size: 64, align: 64, offset: 1792)
!388 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !389, size: 64)
!389 = !DISubroutineType(types: !390)
!390 = !{!62, !78}
!391 = !DIDerivedType(tag: DW_TAG_member, name: "String", file: !10, line: 11, baseType: !116, size: 64, align: 64, offset: 1856)
!392 = !DIDerivedType(tag: DW_TAG_member, name: "common", file: !10, line: 11, baseType: !393, size: 64, align: 64, offset: 1920)
!393 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !394, size: 64)
!394 = !DISubroutineType(types: !395)
!395 = !{!333, !78}
!396 = !DIDerivedType(tag: DW_TAG_member, name: "rawString", file: !10, line: 11, baseType: !116, size: 64, align: 64, offset: 1984)
!397 = !DIDerivedType(tag: DW_TAG_member, name: "uncommon", file: !10, line: 11, baseType: !398, size: 64, align: 64, offset: 2048)
!398 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !399, size: 64)
!399 = !DISubroutineType(types: !400)
!400 = !{!352, !78}
!401 = !DIDerivedType(tag: DW_TAG_member, name: "__object", file: !24, line: 1, baseType: !78, size: 64, align: 64, offset: 64)
!402 = !DIDerivedType(tag: DW_TAG_member, name: "Desc", file: !24, line: 14, baseType: !403, size: 128, align: 64, offset: 128)
!403 = !DICompositeType(tag: DW_TAG_structure_type, name: "MessageDescriptor", file: !24, line: 14, size: 128, align: 8, elements: !404)
!404 = !{!405, !401}
!405 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !406, size: 64, align: 64)
!406 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !407, size: 64)
!407 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void)EnumDescriptors,*func(*void,int)ProtoMessage,*func(*void)FieldRanges,*func(*void)ExtensionDescriptors,*func(*void)FieldDescriptors,*func(*void)FullName,*func(*void)int,*func(*void)bool,*func(*void)bool,*func(*void)MessageDescriptors,*func(*void)Name,*func(*void)OneofDescriptors,*func(*void)ProtoMessage,*func(*void)Descriptor,*func(*void)FileDescriptor,*func(*void,DoNotImplement)void,*func(*void,MessageDescriptor)void,*func(*void)FieldNumbers,*func(*void)Names,*func(*void)FieldRanges,*func(*void)Syntax}", file: !10, size: 1408, align: 8, elements: !408)
!408 = !{!57, !409, !1127, !1131, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1176, !1177, !1178, !1179, !1180, !1184, !1198, !1199, !1200}
!409 = !DIDerivedType(tag: DW_TAG_member, name: "Enums", file: !10, line: 14, baseType: !410, size: 64, align: 64, offset: 64)
!410 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !411, size: 64)
!411 = !DISubroutineType(types: !412)
!412 = !{!413, !78}
!413 = !DICompositeType(tag: DW_TAG_structure_type, name: "EnumDescriptors", file: !24, line: 14, size: 128, align: 8, elements: !414)
!414 = !{!415, !401}
!415 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !416, size: 64, align: 64)
!416 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !417, size: 64)
!417 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void,Name)EnumDescriptor,*func(*void,int)EnumDescriptor,*func(*void)int,*func(*void,DoNotImplement)void}", file: !10, size: 320, align: 8, elements: !418)
!418 = !{!57, !419, !1123, !571, !572}
!419 = !DIDerivedType(tag: DW_TAG_member, name: "ByName", file: !10, line: 14, baseType: !420, size: 64, align: 64, offset: 64)
!420 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !421, size: 64)
!421 = !DISubroutineType(types: !422)
!422 = !{!423, !78, !440}
!423 = !DICompositeType(tag: DW_TAG_structure_type, name: "EnumDescriptor", file: !24, line: 14, size: 128, align: 8, elements: !424)
!424 = !{!425, !401}
!425 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !426, size: 64, align: 64)
!426 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !427, size: 64)
!427 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void)FullName,*func(*void)int,*func(*void)bool,*func(*void)Name,*func(*void)ProtoMessage,*func(*void)Descriptor,*func(*void)FileDescriptor,*func(*void,DoNotImplement)void,*func(*void,EnumDescriptor)void,*func(*void)Names,*func(*void)EnumRanges,*func(*void)Syntax,*func(*void)EnumValueDescriptors}", file: !10, size: 896, align: 8, elements: !428)
!428 = !{!57, !429, !434, !435, !436, !441, !1057, !548, !744, !1058, !1062, !1080, !752, !1101}
!429 = !DIDerivedType(tag: DW_TAG_member, name: "FullName", file: !10, line: 14, baseType: !430, size: 64, align: 64, offset: 64)
!430 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !431, size: 64)
!431 = !DISubroutineType(types: !432)
!432 = !{!433, !78}
!433 = !DICompositeType(tag: DW_TAG_structure_type, name: "FullName", file: !24, line: 14, size: 128, align: 8, elements: !276)
!434 = !DIDerivedType(tag: DW_TAG_member, name: "Index", file: !10, line: 14, baseType: !246, size: 64, align: 64, offset: 128)
!435 = !DIDerivedType(tag: DW_TAG_member, name: "IsPlaceholder", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 192)
!436 = !DIDerivedType(tag: DW_TAG_member, name: "Name", file: !10, line: 14, baseType: !437, size: 64, align: 64, offset: 256)
!437 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !438, size: 64)
!438 = !DISubroutineType(types: !439)
!439 = !{!440, !78}
!440 = !DICompositeType(tag: DW_TAG_structure_type, name: "Name", file: !24, line: 14, size: 128, align: 8, elements: !276)
!441 = !DIDerivedType(tag: DW_TAG_member, name: "Options", file: !10, line: 14, baseType: !442, size: 64, align: 64, offset: 320)
!442 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !443, size: 64)
!443 = !DISubroutineType(types: !444)
!444 = !{!445, !78}
!445 = !DICompositeType(tag: DW_TAG_structure_type, name: "ProtoMessage", file: !24, line: 14, size: 128, align: 8, elements: !446)
!446 = !{!447, !401}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !448, size: 64, align: 64)
!448 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !449, size: 64)
!449 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void)Message}", file: !10, size: 128, align: 8, elements: !450)
!450 = !{!57, !451}
!451 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoReflect", file: !10, line: 14, baseType: !452, size: 64, align: 64, offset: 64)
!452 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !453, size: 64)
!453 = !DISubroutineType(types: !454)
!454 = !{!455, !78}
!455 = !DICompositeType(tag: DW_TAG_structure_type, name: "Message", file: !24, line: 14, size: 128, align: 8, elements: !456)
!456 = !{!457, !401}
!457 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !458, size: 64, align: 64)
!458 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !459, size: 64)
!459 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void,FieldDescriptor)void,*func(*void)MessageDescriptor,*func(*void,FieldDescriptor)Value,*func(*void)RawFields,*func(*void,FieldDescriptor)bool,*func(*void)ProtoMessage,*func(*void)bool,*func(*void,FieldDescriptor)Value,*func(*void)Message,*func(*void,FieldDescriptor)Value,*func(*void)*struct{NoUnkeyedLiterals,uint64,*__go_descriptor,*__go_descriptor,*__go_descriptor,*__go_descriptor,*__go_descriptor},*func(*void,*__go_descriptor)void,*func(*void,FieldDescriptor,Value)void,*func(*void,RawFields)void,*func(*void)MessageType,*func(*void,OneofDescriptor)FieldDescriptor}", file: !10, size: 1088, align: 8, elements: !460)
!460 = !{!57, !461, !823, !824, !828, !835, !839, !840, !841, !842, !843, !844, !1021, !1032, !1036, !1040, !1053}
!461 = !DIDerivedType(tag: DW_TAG_member, name: "Clear", file: !10, line: 14, baseType: !462, size: 64, align: 64, offset: 64)
!462 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !463, size: 64)
!463 = !DISubroutineType(types: !464)
!464 = !{!79, !78, !465}
!465 = !DICompositeType(tag: DW_TAG_structure_type, name: "FieldDescriptor", file: !24, line: 14, size: 128, align: 8, elements: !466)
!466 = !{!467, !401}
!467 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !468, size: 64, align: 64)
!468 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !469, size: 64)
!469 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void)Cardinality,*func(*void)MessageDescriptor,*func(*void)OneofDescriptor,*func(*void)Value,*func(*void)EnumValueDescriptor,*func(*void)EnumDescriptor,*func(*void)FullName,*func(*void)bool,*func(*void)bool,*func(*void)bool,*func(*void)bool,*func(*void)int,*func(*void)bool,*func(*void)bool,*func(*void)bool,*func(*void)bool,*func(*void)bool,*func(*void)bool,*func(*void)string,*func(*void)Kind,*func(*void)FieldDescriptor,*func(*void)FieldDescriptor,*func(*void)MessageDescriptor,*func(*void)Name,*func(*void)Number,*func(*void)ProtoMessage,*func(*void)Descriptor,*func(*void)FileDescriptor,*func(*void,DoNotImplement)void,*func(*void,FieldDescriptor)void,*func(*void)Syntax,*func(*void)string}", file: !10, size: 2112, align: 8, elements: !470)
!470 = !{!57, !471, !476, !480, !753, !762, !783, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !805, !809, !810, !811, !812, !816, !817, !818, !819, !820, !821, !822}
!471 = !DIDerivedType(tag: DW_TAG_member, name: "Cardinality", file: !10, line: 14, baseType: !472, size: 64, align: 64, offset: 64)
!472 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !473, size: 64)
!473 = !DISubroutineType(types: !474)
!474 = !{!475, !78}
!475 = !DIBasicType(name: "Cardinality", size: 8, encoding: DW_ATE_signed)
!476 = !DIDerivedType(tag: DW_TAG_member, name: "ContainingMessage", file: !10, line: 14, baseType: !477, size: 64, align: 64, offset: 128)
!477 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !478, size: 64)
!478 = !DISubroutineType(types: !479)
!479 = !{!403, !78}
!480 = !DIDerivedType(tag: DW_TAG_member, name: "ContainingOneof", file: !10, line: 14, baseType: !481, size: 64, align: 64, offset: 192)
!481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !482, size: 64)
!482 = !DISubroutineType(types: !483)
!483 = !{!484, !78}
!484 = !DICompositeType(tag: DW_TAG_structure_type, name: "OneofDescriptor", file: !24, line: 14, size: 128, align: 8, elements: !485)
!485 = !{!486, !401}
!486 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !487, size: 64, align: 64)
!487 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !488, size: 64)
!488 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void)FieldDescriptors,*func(*void)FullName,*func(*void)int,*func(*void)bool,*func(*void)bool,*func(*void)Name,*func(*void)ProtoMessage,*func(*void)Descriptor,*func(*void)FileDescriptor,*func(*void,DoNotImplement)void,*func(*void,OneofDescriptor)void,*func(*void)Syntax}", file: !10, size: 832, align: 8, elements: !489)
!489 = !{!57, !490, !530, !531, !532, !533, !534, !535, !536, !746, !747, !748, !752}
!490 = !DIDerivedType(tag: DW_TAG_member, name: "Fields", file: !10, line: 14, baseType: !491, size: 64, align: 64, offset: 64)
!491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !492, size: 64)
!492 = !DISubroutineType(types: !493)
!493 = !{!494, !78}
!494 = !DICompositeType(tag: DW_TAG_structure_type, name: "FieldDescriptors", file: !24, line: 14, size: 128, align: 8, elements: !495)
!495 = !{!496, !401}
!496 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !497, size: 64, align: 64)
!497 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !498, size: 64)
!498 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void,string)FieldDescriptor,*func(*void,Name)FieldDescriptor,*func(*void,Number)FieldDescriptor,*func(*void,string)FieldDescriptor,*func(*void,int)FieldDescriptor,*func(*void)int,*func(*void,DoNotImplement)void}", file: !10, size: 512, align: 8, elements: !499)
!499 = !{!57, !500, !504, !508, !513, !514, !518, !519}
!500 = !DIDerivedType(tag: DW_TAG_member, name: "ByJSONName", file: !10, line: 14, baseType: !501, size: 64, align: 64, offset: 64)
!501 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !502, size: 64)
!502 = !DISubroutineType(types: !503)
!503 = !{!465, !78, !32}
!504 = !DIDerivedType(tag: DW_TAG_member, name: "ByName", file: !10, line: 14, baseType: !505, size: 64, align: 64, offset: 128)
!505 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !506, size: 64)
!506 = !DISubroutineType(types: !507)
!507 = !{!465, !78, !440}
!508 = !DIDerivedType(tag: DW_TAG_member, name: "ByNumber", file: !10, line: 14, baseType: !509, size: 64, align: 64, offset: 192)
!509 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !510, size: 64)
!510 = !DISubroutineType(types: !511)
!511 = !{!465, !78, !512}
!512 = !DIBasicType(name: "Number", size: 32, encoding: DW_ATE_signed)
!513 = !DIDerivedType(tag: DW_TAG_member, name: "ByTextName", file: !10, line: 14, baseType: !501, size: 64, align: 64, offset: 256)
!514 = !DIDerivedType(tag: DW_TAG_member, name: "Get", file: !10, line: 14, baseType: !515, size: 64, align: 64, offset: 320)
!515 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !516, size: 64)
!516 = !DISubroutineType(types: !517)
!517 = !{!465, !78, !37}
!518 = !DIDerivedType(tag: DW_TAG_member, name: "Len", file: !10, line: 14, baseType: !246, size: 64, align: 64, offset: 384)
!519 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoInternal", file: !10, line: 14, baseType: !520, size: 64, align: 64, offset: 448)
!520 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !521, size: 64)
!521 = !DISubroutineType(types: !522)
!522 = !{!79, !78, !523}
!523 = !DICompositeType(tag: DW_TAG_structure_type, name: "DoNotImplement", file: !24, line: 14, size: 128, align: 8, elements: !524)
!524 = !{!525, !401}
!525 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !526, size: 64, align: 64)
!526 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !527, size: 64)
!527 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void,DoNotImplement)void}", file: !10, size: 128, align: 8, elements: !528)
!528 = !{!57, !529}
!529 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoInternal", file: !10, line: 14, baseType: !78, size: 64, align: 64, offset: 64)
!530 = !DIDerivedType(tag: DW_TAG_member, name: "FullName", file: !10, line: 14, baseType: !430, size: 64, align: 64, offset: 128)
!531 = !DIDerivedType(tag: DW_TAG_member, name: "Index", file: !10, line: 14, baseType: !246, size: 64, align: 64, offset: 192)
!532 = !DIDerivedType(tag: DW_TAG_member, name: "IsPlaceholder", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 256)
!533 = !DIDerivedType(tag: DW_TAG_member, name: "IsSynthetic", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 320)
!534 = !DIDerivedType(tag: DW_TAG_member, name: "Name", file: !10, line: 14, baseType: !437, size: 64, align: 64, offset: 384)
!535 = !DIDerivedType(tag: DW_TAG_member, name: "Options", file: !10, line: 14, baseType: !78, size: 64, align: 64, offset: 448)
!536 = !DIDerivedType(tag: DW_TAG_member, name: "Parent", file: !10, line: 14, baseType: !537, size: 64, align: 64, offset: 512)
!537 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !538, size: 64)
!538 = !DISubroutineType(types: !539)
!539 = !{!540, !78}
!540 = !DICompositeType(tag: DW_TAG_structure_type, name: "Descriptor", file: !24, line: 14, size: 128, align: 8, elements: !541)
!541 = !{!542, !401}
!542 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !543, size: 64, align: 64)
!543 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !544, size: 64)
!544 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void)FullName,*func(*void)int,*func(*void)bool,*func(*void)Name,*func(*void)ProtoMessage,*func(*void)Descriptor,*func(*void)FileDescriptor,*func(*void,DoNotImplement)void,*func(*void)Syntax}", file: !10, size: 640, align: 8, elements: !545)
!545 = !{!57, !429, !434, !435, !436, !546, !547, !548, !744, !745}
!546 = !DIDerivedType(tag: DW_TAG_member, name: "Options", file: !10, line: 14, baseType: !78, size: 64, align: 64, offset: 320)
!547 = !DIDerivedType(tag: DW_TAG_member, name: "Parent", file: !10, line: 14, baseType: !78, size: 64, align: 64, offset: 384)
!548 = !DIDerivedType(tag: DW_TAG_member, name: "ParentFile", file: !10, line: 14, baseType: !549, size: 64, align: 64, offset: 448)
!549 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !550, size: 64)
!550 = !DISubroutineType(types: !551)
!551 = !{!552, !78}
!552 = !DICompositeType(tag: DW_TAG_structure_type, name: "FileDescriptor", file: !24, line: 14, size: 128, align: 8, elements: !553)
!553 = !{!554, !401}
!554 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !555, size: 64, align: 64)
!555 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !556, size: 64)
!556 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void)EnumDescriptors,*func(*void)ExtensionDescriptors,*func(*void)FullName,*func(*void)FileImports,*func(*void)int,*func(*void)bool,*func(*void)MessageDescriptors,*func(*void)Name,*func(*void)ProtoMessage,*func(*void)FullName,*func(*void)Descriptor,*func(*void)FileDescriptor,*func(*void)string,*func(*void,DoNotImplement)void,*func(*void,FileDescriptor)void,*func(*void)ServiceDescriptors,*func(*void)SourceLocations,*func(*void)Syntax}", file: !10, size: 1216, align: 8, elements: !557)
!557 = !{!57, !558, !559, !573, !574, !595, !596, !597, !615, !616, !617, !618, !619, !620, !621, !622, !626, !702, !743}
!558 = !DIDerivedType(tag: DW_TAG_member, name: "Enums", file: !10, line: 14, baseType: !78, size: 64, align: 64, offset: 64)
!559 = !DIDerivedType(tag: DW_TAG_member, name: "Extensions", file: !10, line: 14, baseType: !560, size: 64, align: 64, offset: 128)
!560 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !561, size: 64)
!561 = !DISubroutineType(types: !562)
!562 = !{!563, !78}
!563 = !DICompositeType(tag: DW_TAG_structure_type, name: "ExtensionDescriptors", file: !24, line: 14, size: 128, align: 8, elements: !564)
!564 = !{!565, !401}
!565 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !566, size: 64, align: 64)
!566 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !567, size: 64)
!567 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void,Name)FieldDescriptor,*func(*void,int)FieldDescriptor,*func(*void)int,*func(*void,DoNotImplement)void}", file: !10, size: 320, align: 8, elements: !568)
!568 = !{!57, !569, !570, !571, !572}
!569 = !DIDerivedType(tag: DW_TAG_member, name: "ByName", file: !10, line: 14, baseType: !505, size: 64, align: 64, offset: 64)
!570 = !DIDerivedType(tag: DW_TAG_member, name: "Get", file: !10, line: 14, baseType: !515, size: 64, align: 64, offset: 128)
!571 = !DIDerivedType(tag: DW_TAG_member, name: "Len", file: !10, line: 14, baseType: !246, size: 64, align: 64, offset: 192)
!572 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoInternal", file: !10, line: 14, baseType: !520, size: 64, align: 64, offset: 256)
!573 = !DIDerivedType(tag: DW_TAG_member, name: "FullName", file: !10, line: 14, baseType: !430, size: 64, align: 64, offset: 192)
!574 = !DIDerivedType(tag: DW_TAG_member, name: "Imports", file: !10, line: 14, baseType: !575, size: 64, align: 64, offset: 256)
!575 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !576, size: 64)
!576 = !DISubroutineType(types: !577)
!577 = !{!578, !78}
!578 = !DICompositeType(tag: DW_TAG_structure_type, name: "FileImports", file: !24, line: 14, size: 128, align: 8, elements: !579)
!579 = !{!580, !401}
!580 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !581, size: 64, align: 64)
!581 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !582, size: 64)
!582 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void,int)FileImport,*func(*void)int,*func(*void,DoNotImplement)void}", file: !10, size: 256, align: 8, elements: !583)
!583 = !{!57, !584, !593, !594}
!584 = !DIDerivedType(tag: DW_TAG_member, name: "Get", file: !10, line: 14, baseType: !585, size: 64, align: 64, offset: 64)
!585 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !586, size: 64)
!586 = !DISubroutineType(types: !587)
!587 = !{!588, !78, !37}
!588 = !DICompositeType(tag: DW_TAG_structure_type, name: "FileImport", file: !24, line: 14, size: 192, align: 8, elements: !589)
!589 = !{!590, !591, !592}
!590 = !DIDerivedType(tag: DW_TAG_member, name: "FileDescriptor", file: !24, line: 14, baseType: !552, size: 128, align: 64)
!591 = !DIDerivedType(tag: DW_TAG_member, name: "IsPublic", file: !24, line: 14, baseType: !13, size: 8, align: 8, offset: 128)
!592 = !DIDerivedType(tag: DW_TAG_member, name: "IsWeak", file: !24, line: 14, baseType: !13, size: 8, align: 8, offset: 136)
!593 = !DIDerivedType(tag: DW_TAG_member, name: "Len", file: !10, line: 14, baseType: !246, size: 64, align: 64, offset: 128)
!594 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoInternal", file: !10, line: 14, baseType: !520, size: 64, align: 64, offset: 192)
!595 = !DIDerivedType(tag: DW_TAG_member, name: "Index", file: !10, line: 14, baseType: !246, size: 64, align: 64, offset: 320)
!596 = !DIDerivedType(tag: DW_TAG_member, name: "IsPlaceholder", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 384)
!597 = !DIDerivedType(tag: DW_TAG_member, name: "Messages", file: !10, line: 14, baseType: !598, size: 64, align: 64, offset: 448)
!598 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !599, size: 64)
!599 = !DISubroutineType(types: !600)
!600 = !{!601, !78}
!601 = !DICompositeType(tag: DW_TAG_structure_type, name: "MessageDescriptors", file: !24, line: 14, size: 128, align: 8, elements: !602)
!602 = !{!603, !401}
!603 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !604, size: 64, align: 64)
!604 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !605, size: 64)
!605 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void,Name)MessageDescriptor,*func(*void,int)MessageDescriptor,*func(*void)int,*func(*void,DoNotImplement)void}", file: !10, size: 320, align: 8, elements: !606)
!606 = !{!57, !607, !611, !571, !572}
!607 = !DIDerivedType(tag: DW_TAG_member, name: "ByName", file: !10, line: 14, baseType: !608, size: 64, align: 64, offset: 64)
!608 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !609, size: 64)
!609 = !DISubroutineType(types: !610)
!610 = !{!403, !78, !440}
!611 = !DIDerivedType(tag: DW_TAG_member, name: "Get", file: !10, line: 14, baseType: !612, size: 64, align: 64, offset: 128)
!612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !613, size: 64)
!613 = !DISubroutineType(types: !614)
!614 = !{!403, !78, !37}
!615 = !DIDerivedType(tag: DW_TAG_member, name: "Name", file: !10, line: 14, baseType: !437, size: 64, align: 64, offset: 512)
!616 = !DIDerivedType(tag: DW_TAG_member, name: "Options", file: !10, line: 14, baseType: !78, size: 64, align: 64, offset: 576)
!617 = !DIDerivedType(tag: DW_TAG_member, name: "Package", file: !10, line: 14, baseType: !430, size: 64, align: 64, offset: 640)
!618 = !DIDerivedType(tag: DW_TAG_member, name: "Parent", file: !10, line: 14, baseType: !78, size: 64, align: 64, offset: 704)
!619 = !DIDerivedType(tag: DW_TAG_member, name: "ParentFile", file: !10, line: 14, baseType: !78, size: 64, align: 64, offset: 768)
!620 = !DIDerivedType(tag: DW_TAG_member, name: "Path", file: !10, line: 14, baseType: !116, size: 64, align: 64, offset: 832)
!621 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoInternal", file: !10, line: 14, baseType: !520, size: 64, align: 64, offset: 896)
!622 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoType", file: !10, line: 14, baseType: !623, size: 64, align: 64, offset: 960)
!623 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !624, size: 64)
!624 = !DISubroutineType(types: !625)
!625 = !{!79, !78, !552}
!626 = !DIDerivedType(tag: DW_TAG_member, name: "Services", file: !10, line: 14, baseType: !627, size: 64, align: 64, offset: 1024)
!627 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !628, size: 64)
!628 = !DISubroutineType(types: !629)
!629 = !{!630, !78}
!630 = !DICompositeType(tag: DW_TAG_structure_type, name: "ServiceDescriptors", file: !24, line: 14, size: 128, align: 8, elements: !631)
!631 = !{!632, !401}
!632 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !633, size: 64, align: 64)
!633 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !634, size: 64)
!634 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void,Name)ServiceDescriptor,*func(*void,int)ServiceDescriptor,*func(*void)int,*func(*void,DoNotImplement)void}", file: !10, size: 320, align: 8, elements: !635)
!635 = !{!57, !636, !698, !571, !572}
!636 = !DIDerivedType(tag: DW_TAG_member, name: "ByName", file: !10, line: 14, baseType: !637, size: 64, align: 64, offset: 64)
!637 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !638, size: 64)
!638 = !DISubroutineType(types: !639)
!639 = !{!640, !78, !440}
!640 = !DICompositeType(tag: DW_TAG_structure_type, name: "ServiceDescriptor", file: !24, line: 14, size: 128, align: 8, elements: !641)
!641 = !{!642, !401}
!642 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !643, size: 64, align: 64)
!643 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !644, size: 64)
!644 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void)FullName,*func(*void)int,*func(*void)bool,*func(*void)MethodDescriptors,*func(*void)Name,*func(*void)ProtoMessage,*func(*void)Descriptor,*func(*void)FileDescriptor,*func(*void,DoNotImplement)void,*func(*void,ServiceDescriptor)void,*func(*void)Syntax}", file: !10, size: 768, align: 8, elements: !645)
!645 = !{!57, !429, !434, !435, !646, !688, !689, !690, !691, !692, !693, !697}
!646 = !DIDerivedType(tag: DW_TAG_member, name: "Methods", file: !10, line: 14, baseType: !647, size: 64, align: 64, offset: 256)
!647 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !648, size: 64)
!648 = !DISubroutineType(types: !649)
!649 = !{!650, !78}
!650 = !DICompositeType(tag: DW_TAG_structure_type, name: "MethodDescriptors", file: !24, line: 14, size: 128, align: 8, elements: !651)
!651 = !{!652, !401}
!652 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !653, size: 64, align: 64)
!653 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !654, size: 64)
!654 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void,Name)MethodDescriptor,*func(*void,int)MethodDescriptor,*func(*void)int,*func(*void,DoNotImplement)void}", file: !10, size: 320, align: 8, elements: !655)
!655 = !{!57, !656, !684, !571, !572}
!656 = !DIDerivedType(tag: DW_TAG_member, name: "ByName", file: !10, line: 14, baseType: !657, size: 64, align: 64, offset: 64)
!657 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !658, size: 64)
!658 = !DISubroutineType(types: !659)
!659 = !{!660, !78, !440}
!660 = !DICompositeType(tag: DW_TAG_structure_type, name: "MethodDescriptor", file: !24, line: 14, size: 128, align: 8, elements: !661)
!661 = !{!662, !401}
!662 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !663, size: 64, align: 64)
!663 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !664, size: 64)
!664 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void)FullName,*func(*void)int,*func(*void)MessageDescriptor,*func(*void)bool,*func(*void)bool,*func(*void)bool,*func(*void)Name,*func(*void)ProtoMessage,*func(*void)MessageDescriptor,*func(*void)Descriptor,*func(*void)FileDescriptor,*func(*void,DoNotImplement)void,*func(*void,MethodDescriptor)void,*func(*void)Syntax}", file: !10, size: 960, align: 8, elements: !665)
!665 = !{!57, !429, !434, !666, !532, !667, !668, !669, !670, !671, !672, !673, !674, !675, !679}
!666 = !DIDerivedType(tag: DW_TAG_member, name: "Input", file: !10, line: 14, baseType: !477, size: 64, align: 64, offset: 192)
!667 = !DIDerivedType(tag: DW_TAG_member, name: "IsStreamingClient", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 320)
!668 = !DIDerivedType(tag: DW_TAG_member, name: "IsStreamingServer", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 384)
!669 = !DIDerivedType(tag: DW_TAG_member, name: "Name", file: !10, line: 14, baseType: !437, size: 64, align: 64, offset: 448)
!670 = !DIDerivedType(tag: DW_TAG_member, name: "Options", file: !10, line: 14, baseType: !78, size: 64, align: 64, offset: 512)
!671 = !DIDerivedType(tag: DW_TAG_member, name: "Output", file: !10, line: 14, baseType: !477, size: 64, align: 64, offset: 576)
!672 = !DIDerivedType(tag: DW_TAG_member, name: "Parent", file: !10, line: 14, baseType: !78, size: 64, align: 64, offset: 640)
!673 = !DIDerivedType(tag: DW_TAG_member, name: "ParentFile", file: !10, line: 14, baseType: !78, size: 64, align: 64, offset: 704)
!674 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoInternal", file: !10, line: 14, baseType: !520, size: 64, align: 64, offset: 768)
!675 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoType", file: !10, line: 14, baseType: !676, size: 64, align: 64, offset: 832)
!676 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !677, size: 64)
!677 = !DISubroutineType(types: !678)
!678 = !{!79, !78, !660}
!679 = !DIDerivedType(tag: DW_TAG_member, name: "Syntax", file: !10, line: 14, baseType: !680, size: 64, align: 64, offset: 896)
!680 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !681, size: 64)
!681 = !DISubroutineType(types: !682)
!682 = !{!683, !78}
!683 = !DIBasicType(name: "Syntax", size: 8, encoding: DW_ATE_signed)
!684 = !DIDerivedType(tag: DW_TAG_member, name: "Get", file: !10, line: 14, baseType: !685, size: 64, align: 64, offset: 128)
!685 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !686, size: 64)
!686 = !DISubroutineType(types: !687)
!687 = !{!660, !78, !37}
!688 = !DIDerivedType(tag: DW_TAG_member, name: "Name", file: !10, line: 14, baseType: !437, size: 64, align: 64, offset: 320)
!689 = !DIDerivedType(tag: DW_TAG_member, name: "Options", file: !10, line: 14, baseType: !78, size: 64, align: 64, offset: 384)
!690 = !DIDerivedType(tag: DW_TAG_member, name: "Parent", file: !10, line: 14, baseType: !78, size: 64, align: 64, offset: 448)
!691 = !DIDerivedType(tag: DW_TAG_member, name: "ParentFile", file: !10, line: 14, baseType: !78, size: 64, align: 64, offset: 512)
!692 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoInternal", file: !10, line: 14, baseType: !520, size: 64, align: 64, offset: 576)
!693 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoType", file: !10, line: 14, baseType: !694, size: 64, align: 64, offset: 640)
!694 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !695, size: 64)
!695 = !DISubroutineType(types: !696)
!696 = !{!79, !78, !640}
!697 = !DIDerivedType(tag: DW_TAG_member, name: "Syntax", file: !10, line: 14, baseType: !680, size: 64, align: 64, offset: 704)
!698 = !DIDerivedType(tag: DW_TAG_member, name: "Get", file: !10, line: 14, baseType: !699, size: 64, align: 64, offset: 128)
!699 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !700, size: 64)
!700 = !DISubroutineType(types: !701)
!701 = !{!640, !78, !37}
!702 = !DIDerivedType(tag: DW_TAG_member, name: "SourceLocations", file: !10, line: 14, baseType: !703, size: 64, align: 64, offset: 1088)
!703 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!704 = !DISubroutineType(types: !705)
!705 = !{!706, !78}
!706 = !DICompositeType(tag: DW_TAG_structure_type, name: "SourceLocations", file: !24, line: 14, size: 128, align: 8, elements: !707)
!707 = !{!708, !401}
!708 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !709, size: 64, align: 64)
!709 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !710, size: 64)
!710 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void,Descriptor)SourceLocation,*func(*void,SourcePath)SourceLocation,*func(*void,int)SourceLocation,*func(*void)int,*func(*void,DoNotImplement)void}", file: !10, size: 384, align: 8, elements: !711)
!711 = !{!57, !712, !733, !737, !741, !742}
!712 = !DIDerivedType(tag: DW_TAG_member, name: "ByDescriptor", file: !10, line: 14, baseType: !713, size: 64, align: 64, offset: 64)
!713 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !714, size: 64)
!714 = !DISubroutineType(types: !715)
!715 = !{!716, !78, !540}
!716 = !DICompositeType(tag: DW_TAG_structure_type, name: "SourceLocation", file: !24, line: 14, size: 960, align: 8, elements: !717)
!717 = !{!718, !725, !726, !727, !728, !729, !730, !731, !732}
!718 = !DIDerivedType(tag: DW_TAG_member, name: "Path", file: !24, line: 14, baseType: !719, size: 192, align: 64)
!719 = !DICompositeType(tag: DW_TAG_structure_type, name: "SourcePath", file: !24, line: 14, size: 192, align: 8, elements: !720)
!720 = !{!721, !723, !724}
!721 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !24, line: 1, baseType: !722, size: 64, align: 64)
!722 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !30, size: 64)
!723 = !DIDerivedType(tag: DW_TAG_member, name: "__count", file: !24, line: 1, baseType: !37, size: 64, align: 64, offset: 64)
!724 = !DIDerivedType(tag: DW_TAG_member, name: "__capacity", file: !24, line: 1, baseType: !37, size: 64, align: 64, offset: 128)
!725 = !DIDerivedType(tag: DW_TAG_member, name: "StartLine", file: !24, line: 14, baseType: !37, size: 64, align: 64, offset: 192)
!726 = !DIDerivedType(tag: DW_TAG_member, name: "StartColumn", file: !24, line: 14, baseType: !37, size: 64, align: 64, offset: 256)
!727 = !DIDerivedType(tag: DW_TAG_member, name: "EndLine", file: !24, line: 14, baseType: !37, size: 64, align: 64, offset: 320)
!728 = !DIDerivedType(tag: DW_TAG_member, name: "EndColumn", file: !24, line: 14, baseType: !37, size: 64, align: 64, offset: 384)
!729 = !DIDerivedType(tag: DW_TAG_member, name: "LeadingDetachedComments", file: !24, line: 14, baseType: !120, size: 192, align: 64, offset: 448)
!730 = !DIDerivedType(tag: DW_TAG_member, name: "LeadingComments", file: !24, line: 14, baseType: !32, size: 128, align: 64, offset: 640)
!731 = !DIDerivedType(tag: DW_TAG_member, name: "TrailingComments", file: !24, line: 14, baseType: !32, size: 128, align: 64, offset: 768)
!732 = !DIDerivedType(tag: DW_TAG_member, name: "Next", file: !24, line: 14, baseType: !37, size: 64, align: 64, offset: 896)
!733 = !DIDerivedType(tag: DW_TAG_member, name: "ByPath", file: !10, line: 14, baseType: !734, size: 64, align: 64, offset: 128)
!734 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !735, size: 64)
!735 = !DISubroutineType(types: !736)
!736 = !{!716, !78, !719}
!737 = !DIDerivedType(tag: DW_TAG_member, name: "Get", file: !10, line: 14, baseType: !738, size: 64, align: 64, offset: 192)
!738 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !739, size: 64)
!739 = !DISubroutineType(types: !740)
!740 = !{!716, !78, !37}
!741 = !DIDerivedType(tag: DW_TAG_member, name: "Len", file: !10, line: 14, baseType: !246, size: 64, align: 64, offset: 256)
!742 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoInternal", file: !10, line: 14, baseType: !520, size: 64, align: 64, offset: 320)
!743 = !DIDerivedType(tag: DW_TAG_member, name: "Syntax", file: !10, line: 14, baseType: !680, size: 64, align: 64, offset: 1152)
!744 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoInternal", file: !10, line: 14, baseType: !520, size: 64, align: 64, offset: 512)
!745 = !DIDerivedType(tag: DW_TAG_member, name: "Syntax", file: !10, line: 14, baseType: !680, size: 64, align: 64, offset: 576)
!746 = !DIDerivedType(tag: DW_TAG_member, name: "ParentFile", file: !10, line: 14, baseType: !549, size: 64, align: 64, offset: 576)
!747 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoInternal", file: !10, line: 14, baseType: !520, size: 64, align: 64, offset: 640)
!748 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoType", file: !10, line: 14, baseType: !749, size: 64, align: 64, offset: 704)
!749 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !750, size: 64)
!750 = !DISubroutineType(types: !751)
!751 = !{!79, !78, !484}
!752 = !DIDerivedType(tag: DW_TAG_member, name: "Syntax", file: !10, line: 14, baseType: !680, size: 64, align: 64, offset: 768)
!753 = !DIDerivedType(tag: DW_TAG_member, name: "Default", file: !10, line: 14, baseType: !754, size: 64, align: 64, offset: 256)
!754 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !755, size: 64)
!755 = !DISubroutineType(types: !756)
!756 = !{!757, !78}
!757 = !DICompositeType(tag: DW_TAG_structure_type, name: "Value", file: !24, line: 14, size: 192, align: 8, elements: !758)
!758 = !{!216, !759, !760, !761}
!759 = !DIDerivedType(tag: DW_TAG_member, name: "typ", file: !24, line: 14, baseType: !78, size: 64, align: 64)
!760 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", file: !24, line: 14, baseType: !78, size: 64, align: 64, offset: 64)
!761 = !DIDerivedType(tag: DW_TAG_member, name: "num", file: !24, line: 14, baseType: !22, size: 64, align: 64, offset: 128)
!762 = !DIDerivedType(tag: DW_TAG_member, name: "DefaultEnumValue", file: !10, line: 14, baseType: !763, size: 64, align: 64, offset: 320)
!763 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !764, size: 64)
!764 = !DISubroutineType(types: !765)
!765 = !{!766, !78}
!766 = !DICompositeType(tag: DW_TAG_structure_type, name: "EnumValueDescriptor", file: !24, line: 14, size: 128, align: 8, elements: !767)
!767 = !{!768, !401}
!768 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !769, size: 64, align: 64)
!769 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !770, size: 64)
!770 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void)FullName,*func(*void)int,*func(*void)bool,*func(*void)Name,*func(*void)EnumNumber,*func(*void)ProtoMessage,*func(*void)Descriptor,*func(*void)FileDescriptor,*func(*void,DoNotImplement)void,*func(*void,EnumValueDescriptor)void,*func(*void)Syntax}", file: !10, size: 768, align: 8, elements: !771)
!771 = !{!57, !429, !434, !435, !436, !772, !689, !777, !778, !692, !779, !697}
!772 = !DIDerivedType(tag: DW_TAG_member, name: "Number", file: !10, line: 14, baseType: !773, size: 64, align: 64, offset: 320)
!773 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !774, size: 64)
!774 = !DISubroutineType(types: !775)
!775 = !{!776, !78}
!776 = !DIBasicType(name: "EnumNumber", size: 32, encoding: DW_ATE_signed)
!777 = !DIDerivedType(tag: DW_TAG_member, name: "Parent", file: !10, line: 14, baseType: !537, size: 64, align: 64, offset: 448)
!778 = !DIDerivedType(tag: DW_TAG_member, name: "ParentFile", file: !10, line: 14, baseType: !549, size: 64, align: 64, offset: 512)
!779 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoType", file: !10, line: 14, baseType: !780, size: 64, align: 64, offset: 640)
!780 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !781, size: 64)
!781 = !DISubroutineType(types: !782)
!782 = !{!79, !78, !766}
!783 = !DIDerivedType(tag: DW_TAG_member, name: "Enum", file: !10, line: 14, baseType: !784, size: 64, align: 64, offset: 384)
!784 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !785, size: 64)
!785 = !DISubroutineType(types: !786)
!786 = !{!423, !78}
!787 = !DIDerivedType(tag: DW_TAG_member, name: "FullName", file: !10, line: 14, baseType: !430, size: 64, align: 64, offset: 448)
!788 = !DIDerivedType(tag: DW_TAG_member, name: "HasDefault", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 512)
!789 = !DIDerivedType(tag: DW_TAG_member, name: "HasJSONName", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 576)
!790 = !DIDerivedType(tag: DW_TAG_member, name: "HasOptionalKeyword", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 640)
!791 = !DIDerivedType(tag: DW_TAG_member, name: "HasPresence", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 704)
!792 = !DIDerivedType(tag: DW_TAG_member, name: "Index", file: !10, line: 14, baseType: !246, size: 64, align: 64, offset: 768)
!793 = !DIDerivedType(tag: DW_TAG_member, name: "IsExtension", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 832)
!794 = !DIDerivedType(tag: DW_TAG_member, name: "IsList", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 896)
!795 = !DIDerivedType(tag: DW_TAG_member, name: "IsMap", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 960)
!796 = !DIDerivedType(tag: DW_TAG_member, name: "IsPacked", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 1024)
!797 = !DIDerivedType(tag: DW_TAG_member, name: "IsPlaceholder", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 1088)
!798 = !DIDerivedType(tag: DW_TAG_member, name: "IsWeak", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 1152)
!799 = !DIDerivedType(tag: DW_TAG_member, name: "JSONName", file: !10, line: 14, baseType: !116, size: 64, align: 64, offset: 1216)
!800 = !DIDerivedType(tag: DW_TAG_member, name: "Kind", file: !10, line: 14, baseType: !801, size: 64, align: 64, offset: 1280)
!801 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !802, size: 64)
!802 = !DISubroutineType(types: !803)
!803 = !{!804, !78}
!804 = !DIBasicType(name: "Kind", size: 8, encoding: DW_ATE_signed)
!805 = !DIDerivedType(tag: DW_TAG_member, name: "MapKey", file: !10, line: 14, baseType: !806, size: 64, align: 64, offset: 1344)
!806 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !807, size: 64)
!807 = !DISubroutineType(types: !808)
!808 = !{!465, !78}
!809 = !DIDerivedType(tag: DW_TAG_member, name: "MapValue", file: !10, line: 14, baseType: !806, size: 64, align: 64, offset: 1408)
!810 = !DIDerivedType(tag: DW_TAG_member, name: "Message", file: !10, line: 14, baseType: !477, size: 64, align: 64, offset: 1472)
!811 = !DIDerivedType(tag: DW_TAG_member, name: "Name", file: !10, line: 14, baseType: !437, size: 64, align: 64, offset: 1536)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "Number", file: !10, line: 14, baseType: !813, size: 64, align: 64, offset: 1600)
!813 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !814, size: 64)
!814 = !DISubroutineType(types: !815)
!815 = !{!512, !78}
!816 = !DIDerivedType(tag: DW_TAG_member, name: "Options", file: !10, line: 14, baseType: !78, size: 64, align: 64, offset: 1664)
!817 = !DIDerivedType(tag: DW_TAG_member, name: "Parent", file: !10, line: 14, baseType: !537, size: 64, align: 64, offset: 1728)
!818 = !DIDerivedType(tag: DW_TAG_member, name: "ParentFile", file: !10, line: 14, baseType: !549, size: 64, align: 64, offset: 1792)
!819 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoInternal", file: !10, line: 14, baseType: !520, size: 64, align: 64, offset: 1856)
!820 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoType", file: !10, line: 14, baseType: !78, size: 64, align: 64, offset: 1920)
!821 = !DIDerivedType(tag: DW_TAG_member, name: "Syntax", file: !10, line: 14, baseType: !680, size: 64, align: 64, offset: 1984)
!822 = !DIDerivedType(tag: DW_TAG_member, name: "TextName", file: !10, line: 14, baseType: !116, size: 64, align: 64, offset: 2048)
!823 = !DIDerivedType(tag: DW_TAG_member, name: "Descriptor", file: !10, line: 14, baseType: !477, size: 64, align: 64, offset: 128)
!824 = !DIDerivedType(tag: DW_TAG_member, name: "Get", file: !10, line: 14, baseType: !825, size: 64, align: 64, offset: 192)
!825 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !826, size: 64)
!826 = !DISubroutineType(types: !827)
!827 = !{!757, !78, !465}
!828 = !DIDerivedType(tag: DW_TAG_member, name: "GetUnknown", file: !10, line: 14, baseType: !829, size: 64, align: 64, offset: 256)
!829 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !830, size: 64)
!830 = !DISubroutineType(types: !831)
!831 = !{!832, !78}
!832 = !DICompositeType(tag: DW_TAG_structure_type, name: "RawFields", file: !24, line: 14, size: 192, align: 8, elements: !833)
!833 = !{!834, !723, !724}
!834 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !24, line: 1, baseType: !35, size: 64, align: 64)
!835 = !DIDerivedType(tag: DW_TAG_member, name: "Has", file: !10, line: 14, baseType: !836, size: 64, align: 64, offset: 320)
!836 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !837, size: 64)
!837 = !DISubroutineType(types: !838)
!838 = !{!13, !78, !465}
!839 = !DIDerivedType(tag: DW_TAG_member, name: "Interface", file: !10, line: 14, baseType: !78, size: 64, align: 64, offset: 384)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "IsValid", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 448)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "Mutable", file: !10, line: 14, baseType: !825, size: 64, align: 64, offset: 512)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "New", file: !10, line: 14, baseType: !78, size: 64, align: 64, offset: 576)
!843 = !DIDerivedType(tag: DW_TAG_member, name: "NewField", file: !10, line: 14, baseType: !825, size: 64, align: 64, offset: 640)
!844 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoMethods", file: !10, line: 14, baseType: !845, size: 64, align: 64, offset: 704)
!845 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !846, size: 64)
!846 = !DISubroutineType(types: !847)
!847 = !{!848, !78}
!848 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !849, size: 64)
!849 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{NoUnkeyedLiterals,uint64,*__go_descriptor,*__go_descriptor,*__go_descriptor,*__go_descriptor,*__go_descriptor}", file: !10, size: 384, align: 8, elements: !850)
!850 = !{!851, !852, !853, !868, !887, !993, !1005}
!851 = !DIDerivedType(tag: DW_TAG_member, name: "NoUnkeyedLiterals", file: !10, line: 14, baseType: !215, align: 8)
!852 = !DIDerivedType(tag: DW_TAG_member, name: "Flags", file: !10, line: 14, baseType: !22, size: 64, align: 64)
!853 = !DIDerivedType(tag: DW_TAG_member, name: "Size", file: !10, line: 14, baseType: !854, size: 64, align: 64, offset: 64)
!854 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !855, size: 64)
!855 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 14, size: 64, align: 8, elements: !856)
!856 = !{!857}
!857 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 14, baseType: !858, size: 64, align: 64)
!858 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !859, size: 64)
!859 = !DISubroutineType(types: !860)
!860 = !{!861, !864}
!861 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{NoUnkeyedLiterals,int}", file: !10, size: 64, align: 8, elements: !862)
!862 = !{!851, !863}
!863 = !DIDerivedType(tag: DW_TAG_member, name: "Size", file: !10, line: 14, baseType: !37, size: 64, align: 64)
!864 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{NoUnkeyedLiterals,Message,uint8}", file: !10, size: 192, align: 8, elements: !865)
!865 = !{!851, !866, !867}
!866 = !DIDerivedType(tag: DW_TAG_member, name: "Message", file: !10, line: 14, baseType: !455, size: 128, align: 64)
!867 = !DIDerivedType(tag: DW_TAG_member, name: "Flags", file: !10, line: 14, baseType: !16, size: 8, align: 8, offset: 128)
!868 = !DIDerivedType(tag: DW_TAG_member, name: "Marshal", file: !10, line: 14, baseType: !869, size: 64, align: 64, offset: 128)
!869 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !870, size: 64)
!870 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 14, size: 64, align: 8, elements: !871)
!871 = !{!872}
!872 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 14, baseType: !873, size: 64, align: 64)
!873 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !874, size: 64)
!874 = !DISubroutineType(types: !875)
!875 = !{!876, !883}
!876 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{struct{NoUnkeyedLiterals,struct{*uint8,int,int}},error}", file: !10, size: 320, align: 8, elements: !877)
!877 = !{!878, !882}
!878 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 14, baseType: !879, size: 192, align: 64)
!879 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{NoUnkeyedLiterals,struct{*uint8,int,int}}", file: !10, size: 192, align: 8, elements: !880)
!880 = !{!851, !881}
!881 = !DIDerivedType(tag: DW_TAG_member, name: "Buf", file: !10, line: 14, baseType: !39, size: 192, align: 64)
!882 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 14, baseType: !108, size: 128, align: 64, offset: 192)
!883 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{NoUnkeyedLiterals,Message,struct{*uint8,int,int},uint8}", file: !10, size: 384, align: 8, elements: !884)
!884 = !{!851, !866, !885, !886}
!885 = !DIDerivedType(tag: DW_TAG_member, name: "Buf", file: !10, line: 14, baseType: !39, size: 192, align: 64, offset: 128)
!886 = !DIDerivedType(tag: DW_TAG_member, name: "Flags", file: !10, line: 14, baseType: !16, size: 8, align: 8, offset: 320)
!887 = !DIDerivedType(tag: DW_TAG_member, name: "Unmarshal", file: !10, line: 14, baseType: !888, size: 64, align: 64, offset: 192)
!888 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !889, size: 64)
!889 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 14, size: 64, align: 8, elements: !890)
!890 = !{!891}
!891 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 14, baseType: !892, size: 64, align: 64)
!892 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !893, size: 64)
!893 = !DISubroutineType(types: !894)
!894 = !{!895, !902}
!895 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{struct{NoUnkeyedLiterals,uint8},error}", file: !10, size: 192, align: 8, elements: !896)
!896 = !{!897, !901}
!897 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 14, baseType: !898, size: 8, align: 8)
!898 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{NoUnkeyedLiterals,uint8}", file: !10, size: 8, align: 1, elements: !899)
!899 = !{!851, !900}
!900 = !DIDerivedType(tag: DW_TAG_member, name: "Flags", file: !10, line: 14, baseType: !16, size: 8, align: 8)
!901 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 14, baseType: !108, size: 128, align: 64, offset: 64)
!902 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{NoUnkeyedLiterals,Message,struct{*uint8,int,int},uint8,struct{*struct{*_type,*func(*void,FullName)struct{ExtensionType,error},*func(*void,FullName,Number)struct{ExtensionType,error}},*void},int}", file: !10, size: 576, align: 8, elements: !903)
!903 = !{!851, !866, !885, !886, !904, !992}
!904 = !DIDerivedType(tag: DW_TAG_member, name: "Resolver", file: !10, line: 14, baseType: !905, size: 128, align: 64, offset: 384)
!905 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*struct{*_type,*func(*void,FullName)struct{ExtensionType,error},*func(*void,FullName,Number)struct{ExtensionType,error}},*void}", file: !10, size: 128, align: 8, elements: !906)
!906 = !{!907, !991}
!907 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !10, line: 14, baseType: !908, size: 64, align: 64)
!908 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !909, size: 64)
!909 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void,FullName)struct{ExtensionType,error},*func(*void,FullName,Number)struct{ExtensionType,error}}", file: !10, size: 192, align: 8, elements: !910)
!910 = !{!57, !911, !987}
!911 = !DIDerivedType(tag: DW_TAG_member, name: "FindExtensionByName", file: !10, line: 14, baseType: !912, size: 64, align: 64, offset: 64)
!912 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !913, size: 64)
!913 = !DISubroutineType(types: !914)
!914 = !{!915, !78, !433}
!915 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{ExtensionType,error}", file: !10, size: 256, align: 8, elements: !916)
!916 = !{!917, !107}
!917 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 14, baseType: !918, size: 128, align: 64)
!918 = !DICompositeType(tag: DW_TAG_structure_type, name: "ExtensionType", file: !24, line: 14, size: 128, align: 8, elements: !919)
!919 = !{!920, !401}
!920 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !921, size: 64, align: 64)
!921 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !922, size: 64)
!922 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void,Value)any,*func(*void,any)bool,*func(*void,Value)bool,*func(*void)Value,*func(*void)ExtensionTypeDescriptor,*func(*void,any)Value,*func(*void)Value}", file: !10, size: 512, align: 8, elements: !923)
!923 = !{!57, !924, !931, !935, !939, !940, !982, !986}
!924 = !DIDerivedType(tag: DW_TAG_member, name: "InterfaceOf", file: !10, line: 14, baseType: !925, size: 64, align: 64, offset: 64)
!925 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !926, size: 64)
!926 = !DISubroutineType(types: !927)
!927 = !{!928, !78, !757}
!928 = !DICompositeType(tag: DW_TAG_structure_type, name: "any", file: !24, line: 15, size: 128, align: 8, elements: !929)
!929 = !{!930, !401}
!930 = !DIDerivedType(tag: DW_TAG_member, name: "__type_descriptor", file: !24, line: 1, baseType: !58, size: 64, align: 64)
!931 = !DIDerivedType(tag: DW_TAG_member, name: "IsValidInterface", file: !10, line: 14, baseType: !932, size: 64, align: 64, offset: 128)
!932 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !933, size: 64)
!933 = !DISubroutineType(types: !934)
!934 = !{!13, !78, !928}
!935 = !DIDerivedType(tag: DW_TAG_member, name: "IsValidValue", file: !10, line: 14, baseType: !936, size: 64, align: 64, offset: 192)
!936 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !937, size: 64)
!937 = !DISubroutineType(types: !938)
!938 = !{!13, !78, !757}
!939 = !DIDerivedType(tag: DW_TAG_member, name: "New", file: !10, line: 14, baseType: !754, size: 64, align: 64, offset: 256)
!940 = !DIDerivedType(tag: DW_TAG_member, name: "TypeDescriptor", file: !10, line: 14, baseType: !941, size: 64, align: 64, offset: 320)
!941 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !942, size: 64)
!942 = !DISubroutineType(types: !943)
!943 = !{!944, !78}
!944 = !DICompositeType(tag: DW_TAG_structure_type, name: "ExtensionTypeDescriptor", file: !24, line: 14, size: 128, align: 8, elements: !945)
!945 = !{!946, !401}
!946 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !947, size: 64, align: 64)
!947 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !948, size: 64)
!948 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void)Cardinality,*func(*void)MessageDescriptor,*func(*void)OneofDescriptor,*func(*void)Value,*func(*void)EnumValueDescriptor,*func(*void)FieldDescriptor,*func(*void)EnumDescriptor,*func(*void)FullName,*func(*void)bool,*func(*void)bool,*func(*void)bool,*func(*void)bool,*func(*void)int,*func(*void)bool,*func(*void)bool,*func(*void)bool,*func(*void)bool,*func(*void)bool,*func(*void)bool,*func(*void)string,*func(*void)Kind,*func(*void)FieldDescriptor,*func(*void)FieldDescriptor,*func(*void)MessageDescriptor,*func(*void)Name,*func(*void)Number,*func(*void)ProtoMessage,*func(*void)Descriptor,*func(*void)FileDescriptor,*func(*void,DoNotImplement)void,*func(*void,FieldDescriptor)void,*func(*void)Syntax,*func(*void)string,*func(*void)ExtensionType}", file: !10, size: 2240, align: 8, elements: !949)
!949 = !{!57, !471, !476, !480, !753, !762, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978}
!950 = !DIDerivedType(tag: DW_TAG_member, name: "Descriptor", file: !10, line: 14, baseType: !806, size: 64, align: 64, offset: 384)
!951 = !DIDerivedType(tag: DW_TAG_member, name: "Enum", file: !10, line: 14, baseType: !784, size: 64, align: 64, offset: 448)
!952 = !DIDerivedType(tag: DW_TAG_member, name: "FullName", file: !10, line: 14, baseType: !430, size: 64, align: 64, offset: 512)
!953 = !DIDerivedType(tag: DW_TAG_member, name: "HasDefault", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 576)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "HasJSONName", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 640)
!955 = !DIDerivedType(tag: DW_TAG_member, name: "HasOptionalKeyword", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 704)
!956 = !DIDerivedType(tag: DW_TAG_member, name: "HasPresence", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 768)
!957 = !DIDerivedType(tag: DW_TAG_member, name: "Index", file: !10, line: 14, baseType: !246, size: 64, align: 64, offset: 832)
!958 = !DIDerivedType(tag: DW_TAG_member, name: "IsExtension", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 896)
!959 = !DIDerivedType(tag: DW_TAG_member, name: "IsList", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 960)
!960 = !DIDerivedType(tag: DW_TAG_member, name: "IsMap", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 1024)
!961 = !DIDerivedType(tag: DW_TAG_member, name: "IsPacked", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 1088)
!962 = !DIDerivedType(tag: DW_TAG_member, name: "IsPlaceholder", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 1152)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "IsWeak", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 1216)
!964 = !DIDerivedType(tag: DW_TAG_member, name: "JSONName", file: !10, line: 14, baseType: !116, size: 64, align: 64, offset: 1280)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "Kind", file: !10, line: 14, baseType: !801, size: 64, align: 64, offset: 1344)
!966 = !DIDerivedType(tag: DW_TAG_member, name: "MapKey", file: !10, line: 14, baseType: !806, size: 64, align: 64, offset: 1408)
!967 = !DIDerivedType(tag: DW_TAG_member, name: "MapValue", file: !10, line: 14, baseType: !806, size: 64, align: 64, offset: 1472)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "Message", file: !10, line: 14, baseType: !477, size: 64, align: 64, offset: 1536)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "Name", file: !10, line: 14, baseType: !437, size: 64, align: 64, offset: 1600)
!970 = !DIDerivedType(tag: DW_TAG_member, name: "Number", file: !10, line: 14, baseType: !813, size: 64, align: 64, offset: 1664)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "Options", file: !10, line: 14, baseType: !78, size: 64, align: 64, offset: 1728)
!972 = !DIDerivedType(tag: DW_TAG_member, name: "Parent", file: !10, line: 14, baseType: !537, size: 64, align: 64, offset: 1792)
!973 = !DIDerivedType(tag: DW_TAG_member, name: "ParentFile", file: !10, line: 14, baseType: !549, size: 64, align: 64, offset: 1856)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoInternal", file: !10, line: 14, baseType: !520, size: 64, align: 64, offset: 1920)
!975 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoType", file: !10, line: 14, baseType: !462, size: 64, align: 64, offset: 1984)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "Syntax", file: !10, line: 14, baseType: !680, size: 64, align: 64, offset: 2048)
!977 = !DIDerivedType(tag: DW_TAG_member, name: "TextName", file: !10, line: 14, baseType: !116, size: 64, align: 64, offset: 2112)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "Type", file: !10, line: 14, baseType: !979, size: 64, align: 64, offset: 2176)
!979 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !980, size: 64)
!980 = !DISubroutineType(types: !981)
!981 = !{!918, !78}
!982 = !DIDerivedType(tag: DW_TAG_member, name: "ValueOf", file: !10, line: 14, baseType: !983, size: 64, align: 64, offset: 384)
!983 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !984, size: 64)
!984 = !DISubroutineType(types: !985)
!985 = !{!757, !78, !928}
!986 = !DIDerivedType(tag: DW_TAG_member, name: "Zero", file: !10, line: 14, baseType: !754, size: 64, align: 64, offset: 448)
!987 = !DIDerivedType(tag: DW_TAG_member, name: "FindExtensionByNumber", file: !10, line: 14, baseType: !988, size: 64, align: 64, offset: 128)
!988 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !989, size: 64)
!989 = !DISubroutineType(types: !990)
!990 = !{!915, !78, !433, !512}
!991 = !DIDerivedType(tag: DW_TAG_member, name: "__object", file: !10, line: 1, baseType: !78, size: 64, align: 64, offset: 64)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "Depth", file: !10, line: 14, baseType: !37, size: 64, align: 64, offset: 512)
!993 = !DIDerivedType(tag: DW_TAG_member, name: "Merge", file: !10, line: 14, baseType: !994, size: 64, align: 64, offset: 256)
!994 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !995, size: 64)
!995 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 14, size: 64, align: 8, elements: !996)
!996 = !{!997}
!997 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 14, baseType: !998, size: 64, align: 64)
!998 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !999, size: 64)
!999 = !DISubroutineType(types: !1000)
!1000 = !{!898, !1001}
!1001 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{NoUnkeyedLiterals,Message,Message}", file: !10, size: 256, align: 8, elements: !1002)
!1002 = !{!851, !1003, !1004}
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "Source", file: !10, line: 14, baseType: !455, size: 128, align: 64)
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "Destination", file: !10, line: 14, baseType: !455, size: 128, align: 64, offset: 128)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "CheckInitialized", file: !10, line: 14, baseType: !1006, size: 64, align: 64, offset: 320)
!1006 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1007, size: 64)
!1007 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 14, size: 64, align: 8, elements: !1008)
!1008 = !{!1009}
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 14, baseType: !1010, size: 64, align: 64)
!1010 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1011, size: 64)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!1013, !1019}
!1013 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{struct{NoUnkeyedLiterals},error}", file: !10, size: 128, align: 8, elements: !1014)
!1014 = !{!1015, !1018}
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 14, baseType: !1016, align: 8)
!1016 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{NoUnkeyedLiterals}", file: !10, align: 1, elements: !1017)
!1017 = !{!851}
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 14, baseType: !108, size: 128, align: 64)
!1019 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{NoUnkeyedLiterals,Message}", file: !10, size: 128, align: 8, elements: !1020)
!1020 = !{!851, !866}
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "Range", file: !10, line: 14, baseType: !1022, size: 64, align: 64, offset: 768)
!1022 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1023, size: 64)
!1023 = !DISubroutineType(types: !1024)
!1024 = !{!79, !78, !1025}
!1025 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1026, size: 64)
!1026 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 14, size: 64, align: 8, elements: !1027)
!1027 = !{!1028}
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 14, baseType: !1029, size: 64, align: 64)
!1029 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1030, size: 64)
!1030 = !DISubroutineType(types: !1031)
!1031 = !{!13, !465, !757}
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "Set", file: !10, line: 14, baseType: !1033, size: 64, align: 64, offset: 832)
!1033 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1034, size: 64)
!1034 = !DISubroutineType(types: !1035)
!1035 = !{!79, !78, !465, !757}
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "SetUnknown", file: !10, line: 14, baseType: !1037, size: 64, align: 64, offset: 896)
!1037 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1038, size: 64)
!1038 = !DISubroutineType(types: !1039)
!1039 = !{!79, !78, !832}
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "Type", file: !10, line: 14, baseType: !1041, size: 64, align: 64, offset: 960)
!1041 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1042, size: 64)
!1042 = !DISubroutineType(types: !1043)
!1043 = !{!1044, !78}
!1044 = !DICompositeType(tag: DW_TAG_structure_type, name: "MessageType", file: !24, line: 14, size: 128, align: 8, elements: !1045)
!1045 = !{!1046, !401}
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !1047, size: 64, align: 64)
!1047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1048, size: 64)
!1048 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void)MessageDescriptor,*func(*void)Message,*func(*void)Message}", file: !10, size: 256, align: 8, elements: !1049)
!1049 = !{!57, !1050, !1051, !1052}
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "Descriptor", file: !10, line: 14, baseType: !477, size: 64, align: 64, offset: 64)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "New", file: !10, line: 14, baseType: !78, size: 64, align: 64, offset: 128)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "Zero", file: !10, line: 14, baseType: !78, size: 64, align: 64, offset: 192)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "WhichOneof", file: !10, line: 14, baseType: !1054, size: 64, align: 64, offset: 1024)
!1054 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1055, size: 64)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!465, !78, !484}
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "Parent", file: !10, line: 14, baseType: !537, size: 64, align: 64, offset: 384)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoType", file: !10, line: 14, baseType: !1059, size: 64, align: 64, offset: 576)
!1059 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1060, size: 64)
!1060 = !DISubroutineType(types: !1061)
!1061 = !{!79, !78, !423}
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "ReservedNames", file: !10, line: 14, baseType: !1063, size: 64, align: 64, offset: 640)
!1063 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1064, size: 64)
!1064 = !DISubroutineType(types: !1065)
!1065 = !{!1066, !78}
!1066 = !DICompositeType(tag: DW_TAG_structure_type, name: "Names", file: !24, line: 14, size: 128, align: 8, elements: !1067)
!1067 = !{!1068, !401}
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !1069, size: 64, align: 64)
!1069 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1070, size: 64)
!1070 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void,int)Name,*func(*void,Name)bool,*func(*void)int,*func(*void,DoNotImplement)void}", file: !10, size: 320, align: 8, elements: !1071)
!1071 = !{!57, !1072, !1076, !571, !572}
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "Get", file: !10, line: 14, baseType: !1073, size: 64, align: 64, offset: 64)
!1073 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1074, size: 64)
!1074 = !DISubroutineType(types: !1075)
!1075 = !{!440, !78, !37}
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "Has", file: !10, line: 14, baseType: !1077, size: 64, align: 64, offset: 128)
!1077 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1078, size: 64)
!1078 = !DISubroutineType(types: !1079)
!1079 = !{!13, !78, !440}
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "ReservedRanges", file: !10, line: 14, baseType: !1081, size: 64, align: 64, offset: 704)
!1081 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1082, size: 64)
!1082 = !DISubroutineType(types: !1083)
!1083 = !{!1084, !78}
!1084 = !DICompositeType(tag: DW_TAG_structure_type, name: "EnumRanges", file: !24, line: 14, size: 128, align: 8, elements: !1085)
!1085 = !{!1086, !401}
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !1087, size: 64, align: 64)
!1087 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1088, size: 64)
!1088 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void,int)[2]EnumNumber,*func(*void,EnumNumber)bool,*func(*void)int,*func(*void,DoNotImplement)void}", file: !10, size: 320, align: 8, elements: !1089)
!1089 = !{!57, !1090, !1097, !571, !572}
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "Get", file: !10, line: 14, baseType: !1091, size: 64, align: 64, offset: 64)
!1091 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1092, size: 64)
!1092 = !DISubroutineType(types: !1093)
!1093 = !{!1094, !78, !37}
!1094 = !DICompositeType(tag: DW_TAG_array_type, baseType: !776, size: 64, align: 4, elements: !1095)
!1095 = !{!1096}
!1096 = !DISubrange(count: 2, lowerBound: 0)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "Has", file: !10, line: 14, baseType: !1098, size: 64, align: 64, offset: 128)
!1098 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1099, size: 64)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!13, !78, !776}
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "Values", file: !10, line: 14, baseType: !1102, size: 64, align: 64, offset: 832)
!1102 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1103, size: 64)
!1103 = !DISubroutineType(types: !1104)
!1104 = !{!1105, !78}
!1105 = !DICompositeType(tag: DW_TAG_structure_type, name: "EnumValueDescriptors", file: !24, line: 14, size: 128, align: 8, elements: !1106)
!1106 = !{!1107, !401}
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !1108, size: 64, align: 64)
!1108 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1109, size: 64)
!1109 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void,Name)EnumValueDescriptor,*func(*void,EnumNumber)EnumValueDescriptor,*func(*void,int)EnumValueDescriptor,*func(*void)int,*func(*void,DoNotImplement)void}", file: !10, size: 384, align: 8, elements: !1110)
!1110 = !{!57, !1111, !1115, !1119, !741, !742}
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "ByName", file: !10, line: 14, baseType: !1112, size: 64, align: 64, offset: 64)
!1112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1113, size: 64)
!1113 = !DISubroutineType(types: !1114)
!1114 = !{!766, !78, !440}
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "ByNumber", file: !10, line: 14, baseType: !1116, size: 64, align: 64, offset: 128)
!1116 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1117, size: 64)
!1117 = !DISubroutineType(types: !1118)
!1118 = !{!766, !78, !776}
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "Get", file: !10, line: 14, baseType: !1120, size: 64, align: 64, offset: 192)
!1120 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1121, size: 64)
!1121 = !DISubroutineType(types: !1122)
!1122 = !{!766, !78, !37}
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "Get", file: !10, line: 14, baseType: !1124, size: 64, align: 64, offset: 128)
!1124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1125, size: 64)
!1125 = !DISubroutineType(types: !1126)
!1126 = !{!423, !78, !37}
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "ExtensionRangeOptions", file: !10, line: 14, baseType: !1128, size: 64, align: 64, offset: 128)
!1128 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1129, size: 64)
!1129 = !DISubroutineType(types: !1130)
!1130 = !{!445, !78, !37}
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "ExtensionRanges", file: !10, line: 14, baseType: !1132, size: 64, align: 64, offset: 192)
!1132 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1133, size: 64)
!1133 = !DISubroutineType(types: !1134)
!1134 = !{!1135, !78}
!1135 = !DICompositeType(tag: DW_TAG_structure_type, name: "FieldRanges", file: !24, line: 14, size: 128, align: 8, elements: !1136)
!1136 = !{!1137, !401}
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !1138, size: 64, align: 64)
!1138 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1139, size: 64)
!1139 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void,int)[2]Number,*func(*void,Number)bool,*func(*void)int,*func(*void,DoNotImplement)void}", file: !10, size: 320, align: 8, elements: !1140)
!1140 = !{!57, !1141, !1146, !571, !572}
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "Get", file: !10, line: 14, baseType: !1142, size: 64, align: 64, offset: 64)
!1142 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1143, size: 64)
!1143 = !DISubroutineType(types: !1144)
!1144 = !{!1145, !78, !37}
!1145 = !DICompositeType(tag: DW_TAG_array_type, baseType: !512, size: 64, align: 4, elements: !1095)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "Has", file: !10, line: 14, baseType: !1147, size: 64, align: 64, offset: 128)
!1147 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1148, size: 64)
!1148 = !DISubroutineType(types: !1149)
!1149 = !{!13, !78, !512}
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "Extensions", file: !10, line: 14, baseType: !560, size: 64, align: 64, offset: 256)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "Fields", file: !10, line: 14, baseType: !491, size: 64, align: 64, offset: 320)
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "FullName", file: !10, line: 14, baseType: !430, size: 64, align: 64, offset: 384)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "Index", file: !10, line: 14, baseType: !246, size: 64, align: 64, offset: 448)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "IsMapEntry", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 512)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "IsPlaceholder", file: !10, line: 14, baseType: !192, size: 64, align: 64, offset: 576)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "Messages", file: !10, line: 14, baseType: !598, size: 64, align: 64, offset: 640)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "Name", file: !10, line: 14, baseType: !437, size: 64, align: 64, offset: 704)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "Oneofs", file: !10, line: 14, baseType: !1159, size: 64, align: 64, offset: 768)
!1159 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1160, size: 64)
!1160 = !DISubroutineType(types: !1161)
!1161 = !{!1162, !78}
!1162 = !DICompositeType(tag: DW_TAG_structure_type, name: "OneofDescriptors", file: !24, line: 14, size: 128, align: 8, elements: !1163)
!1163 = !{!1164, !401}
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !1165, size: 64, align: 64)
!1165 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1166, size: 64)
!1166 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void,Name)OneofDescriptor,*func(*void,int)OneofDescriptor,*func(*void)int,*func(*void,DoNotImplement)void}", file: !10, size: 320, align: 8, elements: !1167)
!1167 = !{!57, !1168, !1172, !571, !572}
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "ByName", file: !10, line: 14, baseType: !1169, size: 64, align: 64, offset: 64)
!1169 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1170, size: 64)
!1170 = !DISubroutineType(types: !1171)
!1171 = !{!484, !78, !440}
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "Get", file: !10, line: 14, baseType: !1173, size: 64, align: 64, offset: 128)
!1173 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1174, size: 64)
!1174 = !DISubroutineType(types: !1175)
!1175 = !{!484, !78, !37}
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "Options", file: !10, line: 14, baseType: !442, size: 64, align: 64, offset: 832)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "Parent", file: !10, line: 14, baseType: !537, size: 64, align: 64, offset: 896)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "ParentFile", file: !10, line: 14, baseType: !549, size: 64, align: 64, offset: 960)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoInternal", file: !10, line: 14, baseType: !520, size: 64, align: 64, offset: 1024)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "ProtoType", file: !10, line: 14, baseType: !1181, size: 64, align: 64, offset: 1088)
!1181 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1182, size: 64)
!1182 = !DISubroutineType(types: !1183)
!1183 = !{!79, !78, !403}
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "RequiredNumbers", file: !10, line: 14, baseType: !1185, size: 64, align: 64, offset: 1152)
!1185 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1186, size: 64)
!1186 = !DISubroutineType(types: !1187)
!1187 = !{!1188, !78}
!1188 = !DICompositeType(tag: DW_TAG_structure_type, name: "FieldNumbers", file: !24, line: 14, size: 128, align: 8, elements: !1189)
!1189 = !{!1190, !401}
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !1191, size: 64, align: 64)
!1191 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1192, size: 64)
!1192 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void,int)Number,*func(*void,Number)bool,*func(*void)int,*func(*void,DoNotImplement)void}", file: !10, size: 320, align: 8, elements: !1193)
!1193 = !{!57, !1194, !1146, !571, !572}
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "Get", file: !10, line: 14, baseType: !1195, size: 64, align: 64, offset: 64)
!1195 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1196, size: 64)
!1196 = !DISubroutineType(types: !1197)
!1197 = !{!512, !78, !37}
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "ReservedNames", file: !10, line: 14, baseType: !1063, size: 64, align: 64, offset: 1216)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "ReservedRanges", file: !10, line: 14, baseType: !1132, size: 64, align: 64, offset: 1280)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "Syntax", file: !10, line: 14, baseType: !680, size: 64, align: 64, offset: 1344)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "Exporter", file: !24, line: 14, baseType: !1202, size: 64, align: 64, offset: 256)
!1202 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1203, size: 64)
!1203 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 14, size: 64, align: 8, elements: !1204)
!1204 = !{!1205}
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 14, baseType: !1206, size: 64, align: 64)
!1206 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1207, size: 64)
!1207 = !DISubroutineType(types: !1208)
!1208 = !{!928, !928, !37}
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "OneofWrappers", file: !24, line: 14, baseType: !1210, size: 192, align: 64, offset: 320)
!1210 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*any,int,int}", file: !10, size: 192, align: 8, elements: !1211)
!1211 = !{!1212, !42, !43}
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !10, line: 1, baseType: !1213, size: 64, align: 64)
!1213 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !928, size: 64)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "initMu", file: !24, line: 14, baseType: !229, size: 64, align: 32, offset: 512)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "initDone", file: !24, line: 14, baseType: !65, size: 32, align: 32, offset: 576)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "reflectMessageInfo", file: !24, line: 14, baseType: !1217, size: 832, align: 64, offset: 640)
!1217 = !DICompositeType(tag: DW_TAG_structure_type, name: ".google.golang.org/protobuf/internal/impl.reflectMessageInfo", file: !24, line: 14, size: 832, align: 8, elements: !1218)
!1218 = !{!1219, !1220, !1221, !1222, !1283, !1284, !1292, !1300, !1309}
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "fields", file: !24, line: 14, baseType: !154, size: 64, align: 64)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "oneofs", file: !24, line: 14, baseType: !154, size: 64, align: 64, offset: 64)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "fieldTypes", file: !24, line: 14, baseType: !154, size: 64, align: 64, offset: 128)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "denseFields", file: !24, line: 14, baseType: !1223, size: 192, align: 64, offset: 192)
!1223 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{**.google.golang.org/protobuf/internal/impl.fieldInfo,int,int}", file: !10, size: 192, align: 8, elements: !1224)
!1224 = !{!1225, !42, !43}
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !10, line: 1, baseType: !1226, size: 64, align: 64)
!1226 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1227, size: 64)
!1227 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1228, size: 64)
!1228 = !DICompositeType(tag: DW_TAG_structure_type, name: ".google.golang.org/protobuf/internal/impl.fieldInfo", file: !24, line: 14, size: 576, align: 8, elements: !1229)
!1229 = !{!1230, !1231, !1242, !1250, !1258, !1266, !1267, !1275}
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "fieldDesc", file: !24, line: 14, baseType: !465, size: 128, align: 64)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "has", file: !24, line: 14, baseType: !1232, size: 64, align: 64, offset: 128)
!1232 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1233, size: 64)
!1233 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 14, size: 64, align: 8, elements: !1234)
!1234 = !{!1235}
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 14, baseType: !1236, size: 64, align: 64)
!1236 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1237, size: 64)
!1237 = !DISubroutineType(types: !1238)
!1238 = !{!13, !1239}
!1239 = !DICompositeType(tag: DW_TAG_structure_type, name: ".google.golang.org/protobuf/internal/impl.pointer", file: !24, line: 14, size: 64, align: 8, elements: !1240)
!1240 = !{!1241}
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "p", file: !24, line: 14, baseType: !78, size: 64, align: 64)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "clear", file: !24, line: 14, baseType: !1243, size: 64, align: 64, offset: 192)
!1243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1244, size: 64)
!1244 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 14, size: 64, align: 8, elements: !1245)
!1245 = !{!1246}
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 14, baseType: !1247, size: 64, align: 64)
!1247 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1248, size: 64)
!1248 = !DISubroutineType(types: !1249)
!1249 = !{!79, !1239}
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "get", file: !24, line: 14, baseType: !1251, size: 64, align: 64, offset: 256)
!1251 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1252, size: 64)
!1252 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 14, size: 64, align: 8, elements: !1253)
!1253 = !{!1254}
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 14, baseType: !1255, size: 64, align: 64)
!1255 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1256, size: 64)
!1256 = !DISubroutineType(types: !1257)
!1257 = !{!757, !1239}
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "set", file: !24, line: 14, baseType: !1259, size: 64, align: 64, offset: 320)
!1259 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1260, size: 64)
!1260 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 14, size: 64, align: 8, elements: !1261)
!1261 = !{!1262}
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 14, baseType: !1263, size: 64, align: 64)
!1263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1264, size: 64)
!1264 = !DISubroutineType(types: !1265)
!1265 = !{!79, !1239, !757}
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "mutable", file: !24, line: 14, baseType: !1251, size: 64, align: 64, offset: 384)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "newMessage", file: !24, line: 14, baseType: !1268, size: 64, align: 64, offset: 448)
!1268 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1269, size: 64)
!1269 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 14, size: 64, align: 8, elements: !1270)
!1270 = !{!1271}
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 14, baseType: !1272, size: 64, align: 64)
!1272 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1273, size: 64)
!1273 = !DISubroutineType(types: !1274)
!1274 = !{!455}
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "newField", file: !24, line: 14, baseType: !1276, size: 64, align: 64, offset: 512)
!1276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1277, size: 64)
!1277 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 14, size: 64, align: 8, elements: !1278)
!1278 = !{!1279}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 14, baseType: !1280, size: 64, align: 64)
!1280 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1281, size: 64)
!1281 = !DISubroutineType(types: !1282)
!1282 = !{!757}
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "rangeInfos", file: !24, line: 14, baseType: !1210, size: 192, align: 64, offset: 384)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "getUnknown", file: !24, line: 14, baseType: !1285, size: 64, align: 64, offset: 576)
!1285 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1286, size: 64)
!1286 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 14, size: 64, align: 8, elements: !1287)
!1287 = !{!1288}
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 14, baseType: !1289, size: 64, align: 64)
!1289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1290, size: 64)
!1290 = !DISubroutineType(types: !1291)
!1291 = !{!832, !1239}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "setUnknown", file: !24, line: 14, baseType: !1293, size: 64, align: 64, offset: 640)
!1293 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1294, size: 64)
!1294 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 14, size: 64, align: 8, elements: !1295)
!1295 = !{!1296}
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 14, baseType: !1297, size: 64, align: 64)
!1297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1298, size: 64)
!1298 = !DISubroutineType(types: !1299)
!1299 = !{!79, !1239, !832}
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "extensionMap", file: !24, line: 14, baseType: !1301, size: 64, align: 64, offset: 704)
!1301 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1302, size: 64)
!1302 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 14, size: 64, align: 8, elements: !1303)
!1303 = !{!1304}
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 14, baseType: !1305, size: 64, align: 64)
!1305 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1306, size: 64)
!1306 = !DISubroutineType(types: !1307)
!1307 = !{!1308, !1239}
!1308 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !154, size: 64)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "nilMessage", file: !24, line: 14, baseType: !1310, size: 64, align: 64, offset: 768)
!1310 = !DICompositeType(tag: DW_TAG_structure_type, name: ".google.golang.org/protobuf/internal/impl.atomicNilMessage", file: !24, line: 14, size: 64, align: 8, elements: !1240)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "coderMessageInfo", file: !24, line: 14, baseType: !1312, size: 1152, align: 64, offset: 1472)
!1312 = !DICompositeType(tag: DW_TAG_structure_type, name: ".google.golang.org/protobuf/internal/impl.coderMessageInfo", file: !24, line: 14, size: 1152, align: 8, elements: !1313)
!1313 = !{!1314, !1315, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408}
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "methods", file: !24, line: 14, baseType: !849, size: 384, align: 64)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "orderedCoderFields", file: !24, line: 14, baseType: !1316, size: 192, align: 64, offset: 384)
!1316 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{**.google.golang.org/protobuf/internal/impl.coderFieldInfo,int,int}", file: !10, size: 192, align: 8, elements: !1317)
!1317 = !{!1318, !42, !43}
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "__values", file: !10, line: 1, baseType: !1319, size: 64, align: 64)
!1319 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1320, size: 64)
!1320 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1321, size: 64)
!1321 = !DICompositeType(tag: DW_TAG_structure_type, name: ".google.golang.org/protobuf/internal/impl.coderFieldInfo", file: !24, line: 14, size: 1088, align: 8, elements: !1322)
!1322 = !{!1323, !1383, !1384, !1385, !1393, !1394, !1396, !1397, !1398, !1399}
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "funcs", file: !24, line: 14, baseType: !1324, size: 384, align: 64)
!1324 = !DICompositeType(tag: DW_TAG_structure_type, name: ".google.golang.org/protobuf/internal/impl.pointerCoderFuncs", file: !24, line: 14, size: 384, align: 8, elements: !1325)
!1325 = !{!1326, !1327, !1338, !1346, !1366, !1374}
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "mi", file: !24, line: 14, baseType: !78, size: 64, align: 64)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "size", file: !24, line: 14, baseType: !1328, size: 64, align: 64, offset: 64)
!1328 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1329, size: 64)
!1329 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 14, size: 64, align: 8, elements: !1330)
!1330 = !{!1331}
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 14, baseType: !1332, size: 64, align: 64)
!1332 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1333, size: 64)
!1333 = !DISubroutineType(types: !1334)
!1334 = !{!37, !1239, !78, !1335}
!1335 = !DICompositeType(tag: DW_TAG_structure_type, name: ".google.golang.org/protobuf/internal/impl.marshalOptions", file: !24, line: 14, size: 8, align: 1, elements: !1336)
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "flags", file: !24, line: 14, baseType: !16, size: 8, align: 8)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "marshal", file: !24, line: 14, baseType: !1339, size: 64, align: 64, offset: 128)
!1339 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1340, size: 64)
!1340 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 14, size: 64, align: 8, elements: !1341)
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 14, baseType: !1343, size: 64, align: 64)
!1343 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1344, size: 64)
!1344 = !DISubroutineType(types: !1345)
!1345 = !{!143, !39, !1239, !78, !1335}
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "unmarshal", file: !24, line: 14, baseType: !1347, size: 64, align: 64, offset: 192)
!1347 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1348, size: 64)
!1348 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 14, size: 64, align: 8, elements: !1349)
!1349 = !{!1350}
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 14, baseType: !1351, size: 64, align: 64)
!1351 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1352, size: 64)
!1352 = !DISubroutineType(types: !1353)
!1353 = !{!1354, !39, !1239, !1361, !78, !1362}
!1354 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{.google.golang.org/protobuf/internal/impl.unmarshalOutput,error}", file: !10, size: 256, align: 8, elements: !1355)
!1355 = !{!1356, !107}
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 14, baseType: !1357, size: 128, align: 64)
!1357 = !DICompositeType(tag: DW_TAG_structure_type, name: ".google.golang.org/protobuf/internal/impl.unmarshalOutput", file: !24, line: 14, size: 128, align: 8, elements: !1358)
!1358 = !{!1359, !1360}
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "n", file: !24, line: 14, baseType: !37, size: 64, align: 64)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "initialized", file: !24, line: 14, baseType: !13, size: 8, align: 8, offset: 64)
!1361 = !DIBasicType(name: "Type", size: 8, encoding: DW_ATE_signed)
!1362 = !DICompositeType(tag: DW_TAG_structure_type, name: ".google.golang.org/protobuf/internal/impl.unmarshalOptions", file: !24, line: 14, size: 256, align: 8, elements: !1363)
!1363 = !{!1337, !1364, !1365}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "resolver", file: !24, line: 14, baseType: !905, size: 128, align: 64, offset: 64)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "depth", file: !24, line: 14, baseType: !37, size: 64, align: 64, offset: 192)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "isInit", file: !24, line: 14, baseType: !1367, size: 64, align: 64, offset: 256)
!1367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1368, size: 64)
!1368 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 14, size: 64, align: 8, elements: !1369)
!1369 = !{!1370}
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 14, baseType: !1371, size: 64, align: 64)
!1371 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1372, size: 64)
!1372 = !DISubroutineType(types: !1373)
!1373 = !{!108, !1239, !78}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "merge", file: !24, line: 14, baseType: !1375, size: 64, align: 64, offset: 320)
!1375 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1376, size: 64)
!1376 = !DICompositeType(tag: DW_TAG_structure_type, name: "__go_descriptor", file: !24, line: 14, size: 64, align: 8, elements: !1377)
!1377 = !{!1378}
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "code", file: !24, line: 14, baseType: !1379, size: 64, align: 64)
!1379 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1380, size: 64)
!1380 = !DISubroutineType(types: !1381)
!1381 = !{!79, !1239, !1239, !78, !1382}
!1382 = !DICompositeType(tag: DW_TAG_structure_type, name: ".google.golang.org/protobuf/internal/impl.mergeOptions", file: !24, line: 14, align: 1, elements: !46)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "mi", file: !24, line: 14, baseType: !78, size: 64, align: 64, offset: 384)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "ft", file: !24, line: 14, baseType: !238, size: 128, align: 64, offset: 448)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "validation", file: !24, line: 14, baseType: !1386, size: 192, align: 64, offset: 576)
!1386 = !DICompositeType(tag: DW_TAG_structure_type, name: ".google.golang.org/protobuf/internal/impl.validationInfo", file: !24, line: 14, size: 192, align: 8, elements: !1387)
!1387 = !{!1326, !1388, !1390, !1391, !1392}
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "typ", file: !24, line: 14, baseType: !1389, size: 8, align: 8, offset: 64)
!1389 = !DIBasicType(name: ".google.golang.org/protobuf/internal/impl.validationType", size: 8, encoding: DW_ATE_unsigned)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "keyType", file: !24, line: 14, baseType: !1389, size: 8, align: 8, offset: 72)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "valType", file: !24, line: 14, baseType: !1389, size: 8, align: 8, offset: 80)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "requiredBit", file: !24, line: 14, baseType: !22, size: 64, align: 64, offset: 128)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "num", file: !24, line: 14, baseType: !512, size: 32, align: 32, offset: 768)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "offset", file: !24, line: 14, baseType: !1395, size: 64, align: 64, offset: 832)
!1395 = !DIBasicType(name: ".google.golang.org/protobuf/internal/impl.offset", size: 64, encoding: DW_ATE_unsigned)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "wiretag", file: !24, line: 14, baseType: !22, size: 64, align: 64, offset: 896)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "tagsize", file: !24, line: 14, baseType: !37, size: 64, align: 64, offset: 960)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "isPointer", file: !24, line: 14, baseType: !13, size: 8, align: 8, offset: 1024)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "isRequired", file: !24, line: 14, baseType: !13, size: 8, align: 8, offset: 1032)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "denseCoderFields", file: !24, line: 14, baseType: !1316, size: 192, align: 64, offset: 576)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "coderFields", file: !24, line: 14, baseType: !154, size: 64, align: 64, offset: 768)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "sizecacheOffset", file: !24, line: 14, baseType: !1395, size: 64, align: 64, offset: 832)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "unknownOffset", file: !24, line: 14, baseType: !1395, size: 64, align: 64, offset: 896)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "unknownPtrKind", file: !24, line: 14, baseType: !13, size: 8, align: 8, offset: 960)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "extensionOffset", file: !24, line: 14, baseType: !1395, size: 64, align: 64, offset: 1024)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "needsInitCheck", file: !24, line: 14, baseType: !13, size: 8, align: 8, offset: 1088)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "isMessageSet", file: !24, line: 14, baseType: !13, size: 8, align: 8, offset: 1096)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "numRequiredFields", file: !24, line: 14, baseType: !16, size: 8, align: 8, offset: 1104)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "sizeCache", file: !24, line: 14, baseType: !30, size: 32, align: 32, offset: 64)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "unknownFields", file: !24, line: 14, baseType: !39, size: 192, align: 64, offset: 128)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "Seconds", file: !24, line: 14, baseType: !1412, size: 64, align: 64, offset: 320)
!1412 = !DIBasicType(name: "int64", size: 64, encoding: DW_ATE_signed)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "Nanos", file: !24, line: 14, baseType: !30, size: 32, align: 32, offset: 384)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "IsDelete", file: !24, line: 14, baseType: !13, size: 8, align: 8, offset: 384)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "XXX_NoUnkeyedLiteral", file: !24, line: 14, baseType: !45, align: 8, offset: 392)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "XXX_unrecognized", file: !24, line: 14, baseType: !39, size: 192, align: 64, offset: 448)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "XXX_sizecache", file: !24, line: 14, baseType: !30, size: 32, align: 32, offset: 640)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "GetPrivateData", file: !10, line: 14, baseType: !1419, size: 64, align: 64, offset: 768)
!1419 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1420, size: 64)
!1420 = !DISubroutineType(types: !1421)
!1421 = !{!143, !78, !32, !32}
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "GetPrivateDataByPartialCompositeKey", file: !10, line: 14, baseType: !1423, size: 64, align: 64, offset: 832)
!1423 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1424, size: 64)
!1424 = !DISubroutineType(types: !1425)
!1425 = !{!1426, !78, !32, !32, !120}
!1426 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{StateQueryIteratorInterface,error}", file: !10, size: 256, align: 8, elements: !1427)
!1427 = !{!1428, !107}
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 14, baseType: !1429, size: 128, align: 64)
!1429 = !DICompositeType(tag: DW_TAG_structure_type, name: "StateQueryIteratorInterface", file: !24, line: 14, size: 128, align: 8, elements: !1430)
!1430 = !{!1431, !401}
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "__methods", file: !24, line: 14, baseType: !1432, size: 64, align: 64)
!1432 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1433, size: 64)
!1433 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*_type,*func(*void)error,*func(*void)bool,*func(*void)struct{*KV,error}}", file: !10, size: 256, align: 8, elements: !1434)
!1434 = !{!57, !187, !191, !1435}
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "Next", file: !10, line: 14, baseType: !1436, size: 64, align: 64, offset: 192)
!1436 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1437, size: 64)
!1437 = !DISubroutineType(types: !1438)
!1438 = !{!1439, !78}
!1439 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*KV,error}", file: !10, size: 192, align: 8, elements: !1440)
!1440 = !{!1441, !901}
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 14, baseType: !1442, size: 64, align: 64)
!1442 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1443, size: 64)
!1443 = !DICompositeType(tag: DW_TAG_structure_type, name: "KV", file: !24, line: 14, size: 704, align: 8, elements: !1444)
!1444 = !{!1445, !1446, !1447, !1448, !1416, !1417}
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "Namespace", file: !24, line: 14, baseType: !32, size: 128, align: 64)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "Key", file: !24, line: 14, baseType: !32, size: 128, align: 64, offset: 128)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "Value", file: !24, line: 14, baseType: !39, size: 192, align: 64, offset: 256)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "XXX_NoUnkeyedLiteral", file: !24, line: 14, baseType: !45, align: 8, offset: 448)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "GetPrivateDataByRange", file: !10, line: 14, baseType: !1450, size: 64, align: 64, offset: 896)
!1450 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1451, size: 64)
!1451 = !DISubroutineType(types: !1452)
!1452 = !{!1426, !78, !32, !32, !32}
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "GetPrivateDataHash", file: !10, line: 14, baseType: !1419, size: 64, align: 64, offset: 960)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "GetPrivateDataQueryResult", file: !10, line: 14, baseType: !1455, size: 64, align: 64, offset: 1024)
!1455 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1456, size: 64)
!1456 = !DISubroutineType(types: !1457)
!1457 = !{!1426, !78, !32, !32}
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "GetPrivateDataValidationParameter", file: !10, line: 14, baseType: !1419, size: 64, align: 64, offset: 1088)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "GetQueryResult", file: !10, line: 14, baseType: !1460, size: 64, align: 64, offset: 1152)
!1460 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1461, size: 64)
!1461 = !DISubroutineType(types: !1462)
!1462 = !{!1426, !78, !32}
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "GetQueryResultWithPagination", file: !10, line: 14, baseType: !1464, size: 64, align: 64, offset: 1216)
!1464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1465, size: 64)
!1465 = !DISubroutineType(types: !1466)
!1466 = !{!1467, !78, !32, !30, !32}
!1467 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{StateQueryIteratorInterface,*QueryResponseMetadata,error}", file: !10, size: 320, align: 8, elements: !1468)
!1468 = !{!1428, !1469, !882}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 14, baseType: !1470, size: 64, align: 64, offset: 128)
!1470 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1471, size: 64)
!1471 = !DICompositeType(tag: DW_TAG_structure_type, name: "QueryResponseMetadata", file: !24, line: 14, size: 448, align: 8, elements: !1472)
!1472 = !{!1473, !1474, !1475, !1476, !1477}
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "FetchedRecordsCount", file: !24, line: 14, baseType: !30, size: 32, align: 32)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "Bookmark", file: !24, line: 14, baseType: !32, size: 128, align: 64, offset: 64)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "XXX_NoUnkeyedLiteral", file: !24, line: 14, baseType: !45, align: 8, offset: 192)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "XXX_unrecognized", file: !24, line: 14, baseType: !39, size: 192, align: 64, offset: 192)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "XXX_sizecache", file: !24, line: 14, baseType: !30, size: 32, align: 32, offset: 384)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "GetSignedProposal", file: !10, line: 14, baseType: !1479, size: 64, align: 64, offset: 1280)
!1479 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1480, size: 64)
!1480 = !DISubroutineType(types: !1481)
!1481 = !{!1482, !78}
!1482 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*SignedProposal,error}", file: !10, size: 192, align: 8, elements: !1483)
!1483 = !{!1484, !901}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 14, baseType: !1485, size: 64, align: 64)
!1485 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1486, size: 64)
!1486 = !DICompositeType(tag: DW_TAG_structure_type, name: "SignedProposal", file: !24, line: 14, size: 640, align: 8, elements: !1487)
!1487 = !{!1488, !1489, !44, !47, !48}
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "ProposalBytes", file: !24, line: 14, baseType: !39, size: 192, align: 64)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "Signature", file: !24, line: 14, baseType: !39, size: 192, align: 64, offset: 192)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "GetState", file: !10, line: 14, baseType: !1491, size: 64, align: 64, offset: 1344)
!1491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1492, size: 64)
!1492 = !DISubroutineType(types: !1493)
!1493 = !{!143, !78, !32}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "GetStateByPartialCompositeKey", file: !10, line: 14, baseType: !1495, size: 64, align: 64, offset: 1408)
!1495 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1496, size: 64)
!1496 = !DISubroutineType(types: !1497)
!1497 = !{!1426, !78, !32, !120}
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "GetStateByPartialCompositeKeyWithPagination", file: !10, line: 14, baseType: !1499, size: 64, align: 64, offset: 1472)
!1499 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1500, size: 64)
!1500 = !DISubroutineType(types: !1501)
!1501 = !{!1467, !78, !32, !120, !30, !32}
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "GetStateByRange", file: !10, line: 14, baseType: !1455, size: 64, align: 64, offset: 1536)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "GetStateByRangeWithPagination", file: !10, line: 14, baseType: !1504, size: 64, align: 64, offset: 1600)
!1504 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1505, size: 64)
!1505 = !DISubroutineType(types: !1506)
!1506 = !{!1467, !78, !32, !32, !30, !32}
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "GetStateValidationParameter", file: !10, line: 14, baseType: !1491, size: 64, align: 64, offset: 1664)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "GetStringArgs", file: !10, line: 14, baseType: !1509, size: 64, align: 64, offset: 1728)
!1509 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1510, size: 64)
!1510 = !DISubroutineType(types: !1511)
!1511 = !{!120, !78}
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "GetTransient", file: !10, line: 14, baseType: !1513, size: 64, align: 64, offset: 1792)
!1513 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1514, size: 64)
!1514 = !DISubroutineType(types: !1515)
!1515 = !{!1516, !78}
!1516 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{Values,error}", file: !10, size: 192, align: 8, elements: !1517)
!1517 = !{!1518, !901}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 14, baseType: !154, size: 64, align: 64)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "GetTxID", file: !10, line: 14, baseType: !116, size: 64, align: 64, offset: 1856)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "GetTxTimestamp", file: !10, line: 14, baseType: !1521, size: 64, align: 64, offset: 1920)
!1521 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1522, size: 64)
!1522 = !DISubroutineType(types: !1523)
!1523 = !{!1524, !78}
!1524 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{*Timestamp,error}", file: !10, size: 192, align: 8, elements: !1525)
!1525 = !{!1526, !901}
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 14, baseType: !208, size: 64, align: 64)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "InvokeChaincode", file: !10, line: 14, baseType: !1528, size: 64, align: 64, offset: 1984)
!1528 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1529, size: 64)
!1529 = !DISubroutineType(types: !1530)
!1530 = !{!27, !78, !32, !135, !32}
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "PurgePrivateData", file: !10, line: 14, baseType: !124, size: 64, align: 64, offset: 2048)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "PutPrivateData", file: !10, line: 14, baseType: !1533, size: 64, align: 64, offset: 2112)
!1533 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1534, size: 64)
!1534 = !DISubroutineType(types: !1535)
!1535 = !{!108, !78, !32, !32, !39}
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "PutState", file: !10, line: 14, baseType: !1537, size: 64, align: 64, offset: 2176)
!1537 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1538, size: 64)
!1538 = !DISubroutineType(types: !1539)
!1539 = !{!108, !78, !32, !39}
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "SetEvent", file: !10, line: 14, baseType: !1537, size: 64, align: 64, offset: 2240)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "SetPrivateDataValidationParameter", file: !10, line: 14, baseType: !1533, size: 64, align: 64, offset: 2304)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "SetStateValidationParameter", file: !10, line: 14, baseType: !1537, size: 64, align: 64, offset: 2368)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "SplitCompositeKey", file: !10, line: 14, baseType: !1544, size: 64, align: 64, offset: 2432)
!1544 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1545, size: 64)
!1545 = !DISubroutineType(types: !1546)
!1546 = !{!1547, !78, !32}
!1547 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{string,struct{*string,int,int},error}", file: !10, size: 448, align: 8, elements: !1548)
!1548 = !{!106, !173, !1549}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "UNNAMED", file: !10, line: 14, baseType: !108, size: 128, align: 64, offset: 320)
!1550 = !DILocalVariable(name: "t", arg: 1, scope: !23, file: !24, line: 37, type: !49)
!1551 = !DILocation(line: 37, column: 1, scope: !23)
!1552 = !DILocalVariable(name: "stub", arg: 2, scope: !23, file: !24, line: 37, type: !51)
!1553 = !DILocation(line: 37, column: 40, scope: !23)
!1554 = !DILocalVariable(name: "$ret0", scope: !23, file: !24, line: 37, type: !27)
!1555 = !DILocation(line: 37, column: 74, scope: !23)
!1556 = !DILocation(line: 38, column: 14, scope: !23)
!1557 = !DILocation(line: 38, column: 2, scope: !23)
!1558 = distinct !DISubprogram(name: "command-line-arguments.MarblesPrivateChaincode.Invoke", linkageName: "command_x2dline_x2darguments.MarblesPrivateChaincode.Invoke", scope: null, file: !24, line: 43, type: !25, scopeLine: 43, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!1559 = !DILocalVariable(name: "t", arg: 1, scope: !1558, file: !24, line: 43, type: !49)
!1560 = !DILocation(line: 43, column: 1, scope: !1558)
!1561 = !DILocalVariable(name: "stub", arg: 2, scope: !1558, file: !24, line: 43, type: !51)
!1562 = !DILocation(line: 43, column: 42, scope: !1558)
!1563 = !DILocalVariable(name: "$ret1", scope: !1558, file: !24, line: 43, type: !27)
!1564 = !DILocation(line: 43, column: 76, scope: !1558)
!1565 = !DILocation(line: 44, column: 24, scope: !1566)
!1566 = distinct !DILexicalBlock(scope: !1558, file: !24, line: 43, column: 1)
!1567 = !DILocalVariable(name: "function", scope: !1566, file: !24, line: 44, type: !32)
!1568 = !DILocation(line: 44, column: 2, scope: !1558)
!1569 = !DILocalVariable(name: "args", scope: !1566, file: !24, line: 44, type: !120)
!1570 = !DILocation(line: 45, column: 32, scope: !1566)
!1571 = !DILocation(line: 45, column: 6, scope: !1566)
!1572 = !DILocation(line: 49, column: 2, scope: !1566)
!1573 = !DILocation(line: 51, column: 10, scope: !1566)
!1574 = !DILocation(line: 51, column: 11, scope: !1566)
!1575 = !DILocation(line: 51, column: 3, scope: !1566)
!1576 = !DILocation(line: 52, column: 2, scope: !1566)
!1577 = !DILocation(line: 54, column: 10, scope: !1566)
!1578 = !DILocation(line: 54, column: 11, scope: !1566)
!1579 = !DILocation(line: 54, column: 3, scope: !1566)
!1580 = !DILocation(line: 55, column: 2, scope: !1566)
!1581 = !DILocation(line: 57, column: 10, scope: !1566)
!1582 = !DILocation(line: 57, column: 11, scope: !1566)
!1583 = !DILocation(line: 57, column: 3, scope: !1566)
!1584 = !DILocation(line: 58, column: 2, scope: !1566)
!1585 = !DILocation(line: 60, column: 10, scope: !1566)
!1586 = !DILocation(line: 60, column: 11, scope: !1566)
!1587 = !DILocation(line: 60, column: 3, scope: !1566)
!1588 = !DILocation(line: 61, column: 2, scope: !1566)
!1589 = !DILocation(line: 63, column: 10, scope: !1566)
!1590 = !DILocation(line: 63, column: 11, scope: !1566)
!1591 = !DILocation(line: 63, column: 3, scope: !1566)
!1592 = !DILocation(line: 64, column: 2, scope: !1566)
!1593 = !DILocation(line: 66, column: 10, scope: !1566)
!1594 = !DILocation(line: 66, column: 11, scope: !1566)
!1595 = !DILocation(line: 66, column: 3, scope: !1566)
!1596 = !DILocation(line: 67, column: 2, scope: !1566)
!1597 = !DILocation(line: 69, column: 10, scope: !1566)
!1598 = !DILocation(line: 69, column: 11, scope: !1566)
!1599 = !DILocation(line: 69, column: 3, scope: !1566)
!1600 = !DILocation(line: 70, column: 2, scope: !1566)
!1601 = !DILocation(line: 72, column: 10, scope: !1566)
!1602 = !DILocation(line: 72, column: 11, scope: !1566)
!1603 = !DILocation(line: 72, column: 3, scope: !1566)
!1604 = !DILocation(line: 73, column: 2, scope: !1566)
!1605 = !DILocation(line: 75, column: 10, scope: !1566)
!1606 = !DILocation(line: 75, column: 11, scope: !1566)
!1607 = !DILocation(line: 75, column: 3, scope: !1566)
!1608 = !DILocation(line: 78, column: 41, scope: !1566)
!1609 = !DILocation(line: 78, column: 7, scope: !1566)
!1610 = !DILocation(line: 79, column: 15, scope: !1566)
!1611 = !DILocation(line: 79, column: 3, scope: !1566)
!1612 = distinct !DISubprogram(name: "command-line-arguments.MarblesPrivateChaincode.checkEndorsingOrg", linkageName: "command_x2dline_x2darguments.MarblesPrivateChaincode.checkEndorsingOrg", scope: null, file: !24, line: 502, type: !25, scopeLine: 502, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!1613 = !DILocalVariable(name: "expectedMSPs", scope: !1614, file: !24, line: 517, type: !120)
!1614 = distinct !DILexicalBlock(scope: !1615, file: !24, line: 516, column: 4)
!1615 = distinct !DILexicalBlock(scope: !1616, file: !24, line: 514, column: 2)
!1616 = distinct !DILexicalBlock(scope: !1612, file: !24, line: 502, column: 1)
!1617 = !DILocation(line: 517, column: 3, scope: !1615)
!1618 = !DILocalVariable(name: "t", arg: 1, scope: !1612, file: !24, line: 502, type: !49)
!1619 = !DILocation(line: 502, column: 1, scope: !1612)
!1620 = !DILocalVariable(name: "stub", arg: 2, scope: !1612, file: !24, line: 502, type: !51)
!1621 = !DILocation(line: 502, column: 53, scope: !1612)
!1622 = !DILocalVariable(name: "$ret10", scope: !1612, file: !24, line: 502, type: !27)
!1623 = !DILocation(line: 502, column: 87, scope: !1612)
!1624 = !DILocation(line: 503, column: 24, scope: !1616)
!1625 = !DILocalVariable(name: "transient", scope: !1616, file: !24, line: 503, type: !154)
!1626 = !DILocation(line: 503, column: 2, scope: !1612)
!1627 = !DILocalVariable(name: "err", scope: !1616, file: !24, line: 503, type: !108)
!1628 = !DILocation(line: 504, column: 9, scope: !1616)
!1629 = !DILocation(line: 504, column: 2, scope: !1616)
!1630 = !DILocation(line: 505, column: 69, scope: !1616)
!1631 = !DILocation(line: 508, column: 26, scope: !1616)
!1632 = !DILocalVariable(name: "peerOrgMSP", scope: !1616, file: !24, line: 508, type: !32)
!1633 = !DILocation(line: 508, column: 2, scope: !1612)
!1634 = !DILocation(line: 508, column: 2, scope: !1616)
!1635 = !DILocation(line: 509, column: 9, scope: !1616)
!1636 = !DILocation(line: 509, column: 2, scope: !1616)
!1637 = !DILocation(line: 505, column: 25, scope: !1616)
!1638 = !DILocation(line: 505, column: 15, scope: !1616)
!1639 = !DILocation(line: 505, column: 3, scope: !1616)
!1640 = !DILocation(line: 510, column: 70, scope: !1616)
!1641 = !DILocalVariable(name: "result", scope: !1616, file: !24, line: 513, type: !32)
!1642 = !DILocation(line: 513, column: 6, scope: !1612)
!1643 = !DILocalVariable(name: "ok", scope: !1615, file: !24, line: 514, type: !13)
!1644 = !DILocation(line: 514, column: 5, scope: !1616)
!1645 = !DILocation(line: 514, column: 14, scope: !1615)
!1646 = !DILocation(line: 514, column: 5, scope: !1615)
!1647 = !DILocation(line: 514, column: 37, scope: !1615)
!1648 = !DILocation(line: 514, column: 2, scope: !1615)
!1649 = !DILocation(line: 510, column: 25, scope: !1616)
!1650 = !DILocation(line: 510, column: 15, scope: !1616)
!1651 = !DILocation(line: 510, column: 3, scope: !1616)
!1652 = !DILocation(line: 515, column: 10, scope: !1615)
!1653 = !DILocation(line: 525, column: 28, scope: !1616)
!1654 = !DILocation(line: 525, column: 14, scope: !1616)
!1655 = !DILocation(line: 525, column: 2, scope: !1616)
!1656 = !DILocation(line: 517, column: 41, scope: !1614)
!1657 = !DILocation(line: 517, column: 37, scope: !1614)
!1658 = !DILocation(line: 517, column: 19, scope: !1614)
!1659 = !DILocalVariable(name: "k", scope: !1660, file: !24, line: 518, type: !32)
!1660 = distinct !DILexicalBlock(scope: !1614, file: !24, line: 518, column: 3)
!1661 = !DILocation(line: 518, column: 7, scope: !1614)
!1662 = !DILocation(line: 518, column: 3, scope: !1660)
!1663 = !DILocation(line: 519, column: 19, scope: !1660)
!1664 = !DILocation(line: 522, column: 16, scope: !1614)
!1665 = !DILocation(line: 522, column: 10, scope: !1614)
!1666 = distinct !DISubprogram(name: "command-line-arguments.MarblesPrivateChaincode.delete", linkageName: "command_x2dline_x2darguments.MarblesPrivateChaincode.delete", scope: null, file: !24, line: 305, type: !1667, scopeLine: 305, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!1667 = !DISubroutineType(types: !1668)
!1668 = !{!27, !49, !49, !51, !120}
!1669 = !DILocalVariable(name: "args", arg: 3, scope: !1666, file: !24, line: 305, type: !120)
!1670 = !DILocation(line: 305, column: 76, scope: !1666)
!1671 = !DILocalVariable(name: "t", arg: 1, scope: !1666, file: !24, line: 305, type: !49)
!1672 = !DILocation(line: 305, column: 1, scope: !1666)
!1673 = !DILocalVariable(name: "stub", arg: 2, scope: !1666, file: !24, line: 305, type: !51)
!1674 = !DILocation(line: 305, column: 42, scope: !1666)
!1675 = !DILocalVariable(name: "$ret7", scope: !1666, file: !24, line: 305, type: !27)
!1676 = !DILocation(line: 305, column: 91, scope: !1666)
!1677 = !DILocation(line: 306, column: 6, scope: !1678)
!1678 = distinct !DILexicalBlock(scope: !1666, file: !24, line: 305, column: 1)
!1679 = !DILocation(line: 312, column: 9, scope: !1678)
!1680 = !DILocation(line: 312, column: 15, scope: !1678)
!1681 = !DILocation(line: 312, column: 2, scope: !1678)
!1682 = !DILocation(line: 313, column: 15, scope: !1678)
!1683 = !DILocation(line: 313, column: 3, scope: !1678)
!1684 = !DILocation(line: 316, column: 23, scope: !1678)
!1685 = !DILocalVariable(name: "transMap", scope: !1678, file: !24, line: 316, type: !154)
!1686 = !DILocation(line: 316, column: 2, scope: !1666)
!1687 = !DILocalVariable(name: "err", scope: !1678, file: !24, line: 316, type: !108)
!1688 = !DILocation(line: 317, column: 9, scope: !1678)
!1689 = !DILocation(line: 317, column: 2, scope: !1678)
!1690 = !DILocation(line: 318, column: 54, scope: !1678)
!1691 = !DILocation(line: 318, column: 46, scope: !1678)
!1692 = !DILocation(line: 318, column: 15, scope: !1678)
!1693 = !DILocation(line: 318, column: 3, scope: !1678)
!1694 = !DILocalVariable(name: "marbleDeleteJsonBytes", scope: !1678, file: !24, line: 321, type: !39)
!1695 = !DILocation(line: 321, column: 2, scope: !1666)
!1696 = !DILocalVariable(name: "ok", scope: !1678, file: !24, line: 321, type: !13)
!1697 = !DILocation(line: 321, column: 31, scope: !1678)
!1698 = !DILocation(line: 321, column: 2, scope: !1678)
!1699 = !DILocation(line: 322, column: 6, scope: !1678)
!1700 = !DILocation(line: 322, column: 5, scope: !1678)
!1701 = !DILocation(line: 322, column: 2, scope: !1678)
!1702 = !DILocation(line: 323, column: 15, scope: !1678)
!1703 = !DILocation(line: 323, column: 3, scope: !1678)
!1704 = !DILocation(line: 326, column: 9, scope: !1678)
!1705 = !DILocation(line: 326, column: 32, scope: !1678)
!1706 = !DILocation(line: 326, column: 2, scope: !1678)
!1707 = !DILocation(line: 327, column: 15, scope: !1678)
!1708 = !DILocation(line: 327, column: 3, scope: !1678)
!1709 = !DILocation(line: 330, column: 6, scope: !1678)
!1710 = !DILocalVariable(name: "marbleDeleteInput", scope: !1678, file: !24, line: 330, type: !1711)
!1711 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1712, size: 64)
!1712 = !DICompositeType(tag: DW_TAG_structure_type, name: ".command-line-arguments.marbleDeleteTransientInput", file: !24, line: 308, size: 128, align: 8, elements: !1713)
!1713 = !{!1714}
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "Name", file: !24, line: 309, baseType: !32, size: 128, align: 64)
!1715 = !DILocation(line: 330, column: 6, scope: !1666)
!1716 = !DILocation(line: 331, column: 47, scope: !1678)
!1717 = !DILocation(line: 331, column: 13, scope: !1678)
!1718 = !DILocation(line: 331, column: 6, scope: !1678)
!1719 = !DILocation(line: 332, column: 9, scope: !1678)
!1720 = !DILocation(line: 332, column: 2, scope: !1678)
!1721 = !DILocation(line: 333, column: 52, scope: !1678)
!1722 = !DILocation(line: 333, column: 47, scope: !1678)
!1723 = !DILocation(line: 333, column: 15, scope: !1678)
!1724 = !DILocation(line: 333, column: 3, scope: !1678)
!1725 = !DILocation(line: 336, column: 9, scope: !1678)
!1726 = !DILocation(line: 336, column: 26, scope: !1678)
!1727 = !DILocation(line: 336, column: 5, scope: !1678)
!1728 = !DILocation(line: 336, column: 33, scope: !1678)
!1729 = !DILocation(line: 336, column: 2, scope: !1678)
!1730 = !DILocation(line: 337, column: 15, scope: !1678)
!1731 = !DILocation(line: 337, column: 3, scope: !1678)
!1732 = !DILocation(line: 341, column: 25, scope: !1678)
!1733 = !DILocation(line: 341, column: 62, scope: !1678)
!1734 = !DILocation(line: 341, column: 79, scope: !1678)
!1735 = !DILocalVariable(name: "valAsbytes", scope: !1678, file: !24, line: 341, type: !39)
!1736 = !DILocation(line: 341, column: 2, scope: !1666)
!1737 = !DILocation(line: 341, column: 2, scope: !1678)
!1738 = !DILocation(line: 342, column: 9, scope: !1678)
!1739 = !DILocation(line: 342, column: 2, scope: !1678)
!1740 = !DILocation(line: 343, column: 50, scope: !1678)
!1741 = !DILocation(line: 343, column: 67, scope: !1678)
!1742 = !DILocation(line: 343, column: 45, scope: !1678)
!1743 = !DILocation(line: 343, column: 15, scope: !1678)
!1744 = !DILocation(line: 343, column: 3, scope: !1678)
!1745 = !DILocation(line: 348, column: 6, scope: !1678)
!1746 = !DILocalVariable(name: "marbleToDelete", scope: !1678, file: !24, line: 348, type: !1747)
!1747 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1748, size: 64)
!1748 = !DICompositeType(tag: DW_TAG_structure_type, name: ".command-line-arguments.marble", file: !24, line: 21, size: 576, align: 8, elements: !1749)
!1749 = !{!1750, !1751, !1752, !1753, !1754}
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "ObjectType", file: !24, line: 22, baseType: !32, size: 128, align: 64)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "Name", file: !24, line: 23, baseType: !32, size: 128, align: 64, offset: 128)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "Color", file: !24, line: 24, baseType: !32, size: 128, align: 64, offset: 256)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "Size", file: !24, line: 25, baseType: !37, size: 64, align: 64, offset: 384)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "Owner", file: !24, line: 26, baseType: !32, size: 128, align: 64, offset: 448)
!1755 = !DILocation(line: 348, column: 6, scope: !1666)
!1756 = !DILocation(line: 349, column: 44, scope: !1678)
!1757 = !DILocation(line: 349, column: 13, scope: !1678)
!1758 = !DILocation(line: 349, column: 6, scope: !1678)
!1759 = !DILocation(line: 350, column: 9, scope: !1678)
!1760 = !DILocation(line: 350, column: 2, scope: !1678)
!1761 = !DILocation(line: 344, column: 12, scope: !1678)
!1762 = !DILocation(line: 344, column: 23, scope: !1678)
!1763 = !DILocation(line: 344, column: 9, scope: !1678)
!1764 = !DILocation(line: 345, column: 49, scope: !1678)
!1765 = !DILocation(line: 345, column: 66, scope: !1678)
!1766 = !DILocation(line: 345, column: 44, scope: !1678)
!1767 = !DILocation(line: 345, column: 15, scope: !1678)
!1768 = !DILocation(line: 345, column: 3, scope: !1678)
!1769 = !DILocation(line: 351, column: 52, scope: !1678)
!1770 = !DILocation(line: 351, column: 47, scope: !1678)
!1771 = !DILocation(line: 351, column: 15, scope: !1678)
!1772 = !DILocation(line: 351, column: 3, scope: !1678)
!1773 = !DILocation(line: 355, column: 12, scope: !1678)
!1774 = !DILocation(line: 355, column: 49, scope: !1678)
!1775 = !DILocation(line: 355, column: 66, scope: !1678)
!1776 = !DILocation(line: 355, column: 6, scope: !1678)
!1777 = !DILocation(line: 356, column: 9, scope: !1678)
!1778 = !DILocation(line: 356, column: 2, scope: !1678)
!1779 = !DILocation(line: 357, column: 52, scope: !1678)
!1780 = !DILocation(line: 357, column: 44, scope: !1678)
!1781 = !DILocation(line: 357, column: 15, scope: !1678)
!1782 = !DILocation(line: 357, column: 3, scope: !1678)
!1783 = !DILocalVariable(name: "indexName", scope: !1678, file: !24, line: 361, type: !32)
!1784 = !DILocation(line: 361, column: 2, scope: !1666)
!1785 = !DILocation(line: 362, column: 32, scope: !1678)
!1786 = !DILocation(line: 362, column: 63, scope: !1678)
!1787 = !DILocation(line: 362, column: 72, scope: !1678)
!1788 = !DILocation(line: 362, column: 86, scope: !1678)
!1789 = !DILocation(line: 362, column: 94, scope: !1678)
!1790 = !DILocation(line: 362, column: 108, scope: !1678)
!1791 = !DILocalVariable(name: "colorNameIndexKey", scope: !1678, file: !24, line: 362, type: !32)
!1792 = !DILocation(line: 362, column: 2, scope: !1666)
!1793 = !DILocation(line: 362, column: 2, scope: !1678)
!1794 = !DILocation(line: 363, column: 9, scope: !1678)
!1795 = !DILocation(line: 363, column: 2, scope: !1678)
!1796 = !DILocation(line: 364, column: 24, scope: !1678)
!1797 = !DILocation(line: 364, column: 15, scope: !1678)
!1798 = !DILocation(line: 364, column: 3, scope: !1678)
!1799 = !DILocation(line: 366, column: 12, scope: !1678)
!1800 = !DILocation(line: 366, column: 6, scope: !1678)
!1801 = !DILocation(line: 367, column: 9, scope: !1678)
!1802 = !DILocation(line: 367, column: 2, scope: !1678)
!1803 = !DILocation(line: 368, column: 52, scope: !1678)
!1804 = !DILocation(line: 368, column: 44, scope: !1678)
!1805 = !DILocation(line: 368, column: 15, scope: !1678)
!1806 = !DILocation(line: 368, column: 3, scope: !1678)
!1807 = !DILocation(line: 372, column: 12, scope: !1678)
!1808 = !DILocation(line: 372, column: 62, scope: !1678)
!1809 = !DILocation(line: 372, column: 79, scope: !1678)
!1810 = !DILocation(line: 372, column: 6, scope: !1678)
!1811 = !DILocation(line: 373, column: 9, scope: !1678)
!1812 = !DILocation(line: 373, column: 2, scope: !1678)
!1813 = !DILocation(line: 374, column: 24, scope: !1678)
!1814 = !DILocation(line: 374, column: 15, scope: !1678)
!1815 = !DILocation(line: 374, column: 3, scope: !1678)
!1816 = !DILocation(line: 377, column: 14, scope: !1678)
!1817 = !DILocation(line: 377, column: 2, scope: !1678)
!1818 = distinct !DISubprogram(name: "command-line-arguments.MarblesPrivateChaincode.getMarbleHash", linkageName: "command_x2dline_x2darguments.MarblesPrivateChaincode.getMarbleHash", scope: null, file: !24, line: 257, type: !1667, scopeLine: 257, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!1819 = !DILocalVariable(name: "args", arg: 3, scope: !1818, file: !24, line: 257, type: !120)
!1820 = !DILocation(line: 257, column: 83, scope: !1818)
!1821 = !DILocalVariable(name: "t", arg: 1, scope: !1818, file: !24, line: 257, type: !49)
!1822 = !DILocation(line: 257, column: 1, scope: !1818)
!1823 = !DILocalVariable(name: "stub", arg: 2, scope: !1818, file: !24, line: 257, type: !51)
!1824 = !DILocation(line: 257, column: 49, scope: !1818)
!1825 = !DILocalVariable(name: "$ret5", scope: !1818, file: !24, line: 257, type: !27)
!1826 = !DILocation(line: 257, column: 98, scope: !1818)
!1827 = !DILocalVariable(name: "name", scope: !1828, file: !24, line: 258, type: !32)
!1828 = distinct !DILexicalBlock(scope: !1818, file: !24, line: 257, column: 1)
!1829 = !DILocation(line: 258, column: 6, scope: !1818)
!1830 = !DILocalVariable(name: "jsonResp", scope: !1828, file: !24, line: 258, type: !32)
!1831 = !DILocation(line: 258, column: 12, scope: !1818)
!1832 = !DILocalVariable(name: "err", scope: !1828, file: !24, line: 259, type: !108)
!1833 = !DILocation(line: 259, column: 6, scope: !1818)
!1834 = !DILocation(line: 261, column: 9, scope: !1828)
!1835 = !DILocation(line: 261, column: 15, scope: !1828)
!1836 = !DILocation(line: 261, column: 2, scope: !1828)
!1837 = !DILocation(line: 262, column: 15, scope: !1828)
!1838 = !DILocation(line: 262, column: 3, scope: !1828)
!1839 = !DILocation(line: 265, column: 9, scope: !1828)
!1840 = !DILocation(line: 265, column: 13, scope: !1828)
!1841 = !DILocation(line: 265, column: 7, scope: !1828)
!1842 = !DILocation(line: 266, column: 25, scope: !1828)
!1843 = !DILocalVariable(name: "valAsbytes", scope: !1828, file: !24, line: 266, type: !39)
!1844 = !DILocation(line: 266, column: 2, scope: !1818)
!1845 = !DILocation(line: 266, column: 2, scope: !1828)
!1846 = !DILocation(line: 267, column: 9, scope: !1828)
!1847 = !DILocation(line: 267, column: 2, scope: !1828)
!1848 = !DILocation(line: 268, column: 70, scope: !1828)
!1849 = !DILocation(line: 268, column: 12, scope: !1828)
!1850 = !DILocation(line: 269, column: 15, scope: !1828)
!1851 = !DILocation(line: 269, column: 3, scope: !1828)
!1852 = !DILocation(line: 275, column: 14, scope: !1828)
!1853 = !DILocation(line: 275, column: 2, scope: !1828)
!1854 = !DILocation(line: 270, column: 12, scope: !1828)
!1855 = !DILocation(line: 270, column: 23, scope: !1828)
!1856 = !DILocation(line: 270, column: 9, scope: !1828)
!1857 = !DILocation(line: 271, column: 75, scope: !1828)
!1858 = !DILocation(line: 271, column: 12, scope: !1828)
!1859 = !DILocation(line: 272, column: 15, scope: !1828)
!1860 = !DILocation(line: 272, column: 3, scope: !1828)
!1861 = distinct !DISubprogram(name: "command-line-arguments.MarblesPrivateChaincode.getMarblePrivateDetailsHash", linkageName: "command_x2dline_x2darguments.MarblesPrivateChaincode.getMarblePrivateDetailsHash", scope: null, file: !24, line: 281, type: !1667, scopeLine: 281, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!1862 = !DILocalVariable(name: "args", arg: 3, scope: !1861, file: !24, line: 281, type: !120)
!1863 = !DILocation(line: 281, column: 97, scope: !1861)
!1864 = !DILocalVariable(name: "t", arg: 1, scope: !1861, file: !24, line: 281, type: !49)
!1865 = !DILocation(line: 281, column: 1, scope: !1861)
!1866 = !DILocalVariable(name: "stub", arg: 2, scope: !1861, file: !24, line: 281, type: !51)
!1867 = !DILocation(line: 281, column: 63, scope: !1861)
!1868 = !DILocalVariable(name: "$ret6", scope: !1861, file: !24, line: 281, type: !27)
!1869 = !DILocation(line: 281, column: 112, scope: !1861)
!1870 = !DILocalVariable(name: "name", scope: !1871, file: !24, line: 282, type: !32)
!1871 = distinct !DILexicalBlock(scope: !1861, file: !24, line: 281, column: 1)
!1872 = !DILocation(line: 282, column: 6, scope: !1861)
!1873 = !DILocalVariable(name: "jsonResp", scope: !1871, file: !24, line: 282, type: !32)
!1874 = !DILocation(line: 282, column: 12, scope: !1861)
!1875 = !DILocalVariable(name: "err", scope: !1871, file: !24, line: 283, type: !108)
!1876 = !DILocation(line: 283, column: 6, scope: !1861)
!1877 = !DILocation(line: 285, column: 9, scope: !1871)
!1878 = !DILocation(line: 285, column: 15, scope: !1871)
!1879 = !DILocation(line: 285, column: 2, scope: !1871)
!1880 = !DILocation(line: 286, column: 15, scope: !1871)
!1881 = !DILocation(line: 286, column: 3, scope: !1871)
!1882 = !DILocation(line: 289, column: 9, scope: !1871)
!1883 = !DILocation(line: 289, column: 13, scope: !1871)
!1884 = !DILocation(line: 289, column: 7, scope: !1871)
!1885 = !DILocation(line: 290, column: 25, scope: !1871)
!1886 = !DILocalVariable(name: "valAsbytes", scope: !1871, file: !24, line: 290, type: !39)
!1887 = !DILocation(line: 290, column: 2, scope: !1861)
!1888 = !DILocation(line: 290, column: 2, scope: !1871)
!1889 = !DILocation(line: 291, column: 9, scope: !1871)
!1890 = !DILocation(line: 291, column: 2, scope: !1871)
!1891 = !DILocation(line: 292, column: 95, scope: !1871)
!1892 = !DILocation(line: 292, column: 73, scope: !1871)
!1893 = !DILocation(line: 292, column: 12, scope: !1871)
!1894 = !DILocation(line: 293, column: 15, scope: !1871)
!1895 = !DILocation(line: 293, column: 3, scope: !1871)
!1896 = !DILocation(line: 299, column: 14, scope: !1871)
!1897 = !DILocation(line: 299, column: 2, scope: !1871)
!1898 = !DILocation(line: 294, column: 12, scope: !1871)
!1899 = !DILocation(line: 294, column: 23, scope: !1871)
!1900 = !DILocation(line: 294, column: 9, scope: !1871)
!1901 = !DILocation(line: 295, column: 71, scope: !1871)
!1902 = !DILocation(line: 295, column: 12, scope: !1871)
!1903 = !DILocation(line: 296, column: 15, scope: !1871)
!1904 = !DILocation(line: 296, column: 3, scope: !1871)
!1905 = distinct !DISubprogram(name: "command-line-arguments.MarblesPrivateChaincode.getMarblesByRange", linkageName: "command_x2dline_x2darguments.MarblesPrivateChaincode.getMarblesByRange", scope: null, file: !24, line: 457, type: !1667, scopeLine: 457, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!1906 = !DILocalVariable(name: "args", arg: 3, scope: !1905, file: !24, line: 457, type: !120)
!1907 = !DILocation(line: 457, column: 87, scope: !1905)
!1908 = !DILocalVariable(name: "t", arg: 1, scope: !1905, file: !24, line: 457, type: !49)
!1909 = !DILocation(line: 457, column: 1, scope: !1905)
!1910 = !DILocalVariable(name: "stub", arg: 2, scope: !1905, file: !24, line: 457, type: !51)
!1911 = !DILocation(line: 457, column: 53, scope: !1905)
!1912 = !DILocalVariable(name: "$ret9", scope: !1905, file: !24, line: 457, type: !27)
!1913 = !DILocation(line: 457, column: 102, scope: !1905)
!1914 = !DILocation(line: 458, column: 9, scope: !1915)
!1915 = distinct !DILexicalBlock(scope: !1905, file: !24, line: 457, column: 1)
!1916 = !DILocation(line: 458, column: 15, scope: !1915)
!1917 = !DILocation(line: 458, column: 2, scope: !1915)
!1918 = !DILocation(line: 499, column: 1, scope: !1905)
!1919 = !DILocation(line: 459, column: 15, scope: !1915)
!1920 = !DILocation(line: 462, column: 14, scope: !1915)
!1921 = !DILocation(line: 462, column: 18, scope: !1915)
!1922 = !DILocation(line: 459, column: 3, scope: !1915)
!1923 = !DILocalVariable(name: "startKey", scope: !1915, file: !24, line: 462, type: !32)
!1924 = !DILocation(line: 462, column: 2, scope: !1905)
!1925 = !DILocation(line: 463, column: 12, scope: !1915)
!1926 = !DILocation(line: 463, column: 16, scope: !1915)
!1927 = !DILocalVariable(name: "endKey", scope: !1915, file: !24, line: 463, type: !32)
!1928 = !DILocation(line: 463, column: 2, scope: !1905)
!1929 = !DILocation(line: 465, column: 30, scope: !1915)
!1930 = !DILocalVariable(name: "resultsIterator", scope: !1915, file: !24, line: 465, type: !1429)
!1931 = !DILocation(line: 465, column: 2, scope: !1905)
!1932 = !DILocalVariable(name: "err", scope: !1915, file: !24, line: 465, type: !108)
!1933 = !DILocation(line: 466, column: 9, scope: !1915)
!1934 = !DILocation(line: 466, column: 2, scope: !1915)
!1935 = !DILocation(line: 467, column: 24, scope: !1915)
!1936 = !DILocation(line: 469, column: 2, scope: !1915)
!1937 = !DILocation(line: 467, column: 15, scope: !1915)
!1938 = !DILocation(line: 467, column: 3, scope: !1915)
!1939 = !DILocalVariable(name: "buffer", scope: !1915, file: !24, line: 472, type: !1940)
!1940 = !DICompositeType(tag: DW_TAG_structure_type, name: "Buffer", file: !24, line: 10, size: 320, align: 8, elements: !1941)
!1941 = !{!1942, !1943, !1944}
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "buf", file: !24, line: 10, baseType: !39, size: 192, align: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "off", file: !24, line: 10, baseType: !37, size: 64, align: 64, offset: 192)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "lastRead", file: !24, line: 10, baseType: !1945, size: 8, align: 8, offset: 256)
!1945 = !DIBasicType(name: ".bytes.readOp", size: 8, encoding: DW_ATE_signed)
!1946 = !DILocation(line: 472, column: 6, scope: !1905)
!1947 = !DILocation(line: 473, column: 8, scope: !1915)
!1948 = !DILocalVariable(name: "bArrayMemberAlreadyWritten", scope: !1915, file: !24, line: 475, type: !13)
!1949 = !DILocation(line: 475, column: 2, scope: !1905)
!1950 = !DILocation(line: 476, column: 21, scope: !1915)
!1951 = !DILocation(line: 477, column: 40, scope: !1952)
!1952 = distinct !DILexicalBlock(scope: !1915, file: !24, line: 476, column: 32)
!1953 = !DILocalVariable(name: "queryResponse", scope: !1952, file: !24, line: 477, type: !1442)
!1954 = !DILocation(line: 477, column: 3, scope: !1915)
!1955 = !DILocalVariable(name: "err", scope: !1952, file: !24, line: 477, type: !108)
!1956 = !DILocation(line: 478, column: 10, scope: !1952)
!1957 = !DILocation(line: 478, column: 3, scope: !1952)
!1958 = !DILocation(line: 479, column: 25, scope: !1952)
!1959 = !DILocation(line: 482, column: 6, scope: !1952)
!1960 = !DILocation(line: 482, column: 3, scope: !1952)
!1961 = !DILocation(line: 479, column: 16, scope: !1952)
!1962 = !DILocation(line: 479, column: 4, scope: !1952)
!1963 = !DILocation(line: 483, column: 10, scope: !1952)
!1964 = !DILocation(line: 487, column: 8, scope: !1952)
!1965 = !DILocation(line: 489, column: 5, scope: !1952)
!1966 = !DILocation(line: 489, column: 18, scope: !1952)
!1967 = !DILocation(line: 489, column: 24, scope: !1952)
!1968 = !DILocation(line: 489, column: 37, scope: !1952)
!1969 = !DILocation(line: 486, column: 9, scope: !1952)
!1970 = !DILocation(line: 492, column: 30, scope: !1952)
!1971 = !DILocation(line: 494, column: 8, scope: !1915)
!1972 = !DILocation(line: 496, column: 61, scope: !1915)
!1973 = !DILocation(line: 496, column: 6, scope: !1915)
!1974 = !DILocation(line: 498, column: 28, scope: !1915)
!1975 = !DILocation(line: 498, column: 14, scope: !1915)
!1976 = !DILocation(line: 498, column: 2, scope: !1915)
!1977 = !DILocation(line: 459, column: 3, scope: !1905)
!1978 = distinct !DISubprogram(name: "command-line-arguments.MarblesPrivateChaincode.initMarble", linkageName: "command_x2dline_x2darguments.MarblesPrivateChaincode.initMarble", scope: null, file: !24, line: 86, type: !1667, scopeLine: 86, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!1979 = !DILocalVariable(name: "args", arg: 3, scope: !1978, file: !24, line: 86, type: !120)
!1980 = !DILocation(line: 86, column: 80, scope: !1978)
!1981 = !DILocalVariable(name: "value", scope: !1982, file: !24, line: 195, type: !39)
!1982 = distinct !DILexicalBlock(scope: !1978, file: !24, line: 86, column: 1)
!1983 = !DILocation(line: 195, column: 2, scope: !1978)
!1984 = !DILocalVariable(name: "t", arg: 1, scope: !1978, file: !24, line: 86, type: !49)
!1985 = !DILocation(line: 86, column: 1, scope: !1978)
!1986 = !DILocalVariable(name: "stub", arg: 2, scope: !1978, file: !24, line: 86, type: !51)
!1987 = !DILocation(line: 86, column: 46, scope: !1978)
!1988 = !DILocalVariable(name: "$ret2", scope: !1978, file: !24, line: 86, type: !27)
!1989 = !DILocation(line: 86, column: 95, scope: !1978)
!1990 = !DILocalVariable(name: "err", scope: !1982, file: !24, line: 87, type: !108)
!1991 = !DILocation(line: 87, column: 6, scope: !1978)
!1992 = !DILocation(line: 98, column: 6, scope: !1982)
!1993 = !DILocation(line: 100, column: 9, scope: !1982)
!1994 = !DILocation(line: 100, column: 15, scope: !1982)
!1995 = !DILocation(line: 100, column: 2, scope: !1982)
!1996 = !DILocation(line: 101, column: 15, scope: !1982)
!1997 = !DILocation(line: 101, column: 3, scope: !1982)
!1998 = !DILocation(line: 104, column: 23, scope: !1982)
!1999 = !DILocalVariable(name: "transMap", scope: !1982, file: !24, line: 104, type: !154)
!2000 = !DILocation(line: 104, column: 2, scope: !1978)
!2001 = !DILocation(line: 104, column: 2, scope: !1982)
!2002 = !DILocation(line: 105, column: 9, scope: !1982)
!2003 = !DILocation(line: 105, column: 2, scope: !1982)
!2004 = !DILocation(line: 106, column: 54, scope: !1982)
!2005 = !DILocation(line: 106, column: 46, scope: !1982)
!2006 = !DILocation(line: 106, column: 15, scope: !1982)
!2007 = !DILocation(line: 106, column: 3, scope: !1982)
!2008 = !DILocalVariable(name: "marbleJsonBytes", scope: !1982, file: !24, line: 109, type: !39)
!2009 = !DILocation(line: 109, column: 2, scope: !1978)
!2010 = !DILocalVariable(name: "ok", scope: !1982, file: !24, line: 109, type: !13)
!2011 = !DILocation(line: 109, column: 25, scope: !1982)
!2012 = !DILocation(line: 109, column: 2, scope: !1982)
!2013 = !DILocation(line: 110, column: 6, scope: !1982)
!2014 = !DILocation(line: 110, column: 5, scope: !1982)
!2015 = !DILocation(line: 110, column: 2, scope: !1982)
!2016 = !DILocation(line: 111, column: 15, scope: !1982)
!2017 = !DILocation(line: 111, column: 3, scope: !1982)
!2018 = !DILocation(line: 114, column: 9, scope: !1982)
!2019 = !DILocation(line: 114, column: 26, scope: !1982)
!2020 = !DILocation(line: 114, column: 2, scope: !1982)
!2021 = !DILocation(line: 115, column: 15, scope: !1982)
!2022 = !DILocation(line: 115, column: 3, scope: !1982)
!2023 = !DILocation(line: 118, column: 6, scope: !1982)
!2024 = !DILocalVariable(name: "marbleInput", scope: !1982, file: !24, line: 118, type: !2025)
!2025 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2026, size: 64)
!2026 = !DICompositeType(tag: DW_TAG_structure_type, name: ".command-line-arguments.marbleTransientInput", file: !24, line: 89, size: 512, align: 8, elements: !2027)
!2027 = !{!2028, !2029, !2030, !2031, !2032}
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "Name", file: !24, line: 90, baseType: !32, size: 128, align: 64)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "Color", file: !24, line: 91, baseType: !32, size: 128, align: 64, offset: 128)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "Size", file: !24, line: 92, baseType: !37, size: 64, align: 64, offset: 256)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "Owner", file: !24, line: 93, baseType: !32, size: 128, align: 64, offset: 320)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "Price", file: !24, line: 94, baseType: !37, size: 64, align: 64, offset: 448)
!2033 = !DILocation(line: 118, column: 6, scope: !1978)
!2034 = !DILocation(line: 119, column: 41, scope: !1982)
!2035 = !DILocation(line: 119, column: 13, scope: !1982)
!2036 = !DILocation(line: 119, column: 6, scope: !1982)
!2037 = !DILocation(line: 120, column: 9, scope: !1982)
!2038 = !DILocation(line: 120, column: 2, scope: !1982)
!2039 = !DILocation(line: 121, column: 52, scope: !1982)
!2040 = !DILocation(line: 121, column: 47, scope: !1982)
!2041 = !DILocation(line: 121, column: 15, scope: !1982)
!2042 = !DILocation(line: 121, column: 3, scope: !1982)
!2043 = !DILocation(line: 124, column: 9, scope: !1982)
!2044 = !DILocation(line: 124, column: 20, scope: !1982)
!2045 = !DILocation(line: 124, column: 5, scope: !1982)
!2046 = !DILocation(line: 124, column: 27, scope: !1982)
!2047 = !DILocation(line: 124, column: 2, scope: !1982)
!2048 = !DILocation(line: 125, column: 15, scope: !1982)
!2049 = !DILocation(line: 125, column: 3, scope: !1982)
!2050 = !DILocation(line: 127, column: 9, scope: !1982)
!2051 = !DILocation(line: 127, column: 20, scope: !1982)
!2052 = !DILocation(line: 127, column: 5, scope: !1982)
!2053 = !DILocation(line: 127, column: 28, scope: !1982)
!2054 = !DILocation(line: 127, column: 2, scope: !1982)
!2055 = !DILocation(line: 128, column: 15, scope: !1982)
!2056 = !DILocation(line: 128, column: 3, scope: !1982)
!2057 = !DILocation(line: 130, column: 5, scope: !1982)
!2058 = !DILocation(line: 130, column: 16, scope: !1982)
!2059 = !DILocation(line: 130, column: 22, scope: !1982)
!2060 = !DILocation(line: 130, column: 2, scope: !1982)
!2061 = !DILocation(line: 131, column: 15, scope: !1982)
!2062 = !DILocation(line: 131, column: 3, scope: !1982)
!2063 = !DILocation(line: 133, column: 9, scope: !1982)
!2064 = !DILocation(line: 133, column: 20, scope: !1982)
!2065 = !DILocation(line: 133, column: 5, scope: !1982)
!2066 = !DILocation(line: 133, column: 28, scope: !1982)
!2067 = !DILocation(line: 133, column: 2, scope: !1982)
!2068 = !DILocation(line: 134, column: 15, scope: !1982)
!2069 = !DILocation(line: 134, column: 3, scope: !1982)
!2070 = !DILocation(line: 136, column: 5, scope: !1982)
!2071 = !DILocation(line: 136, column: 16, scope: !1982)
!2072 = !DILocation(line: 136, column: 23, scope: !1982)
!2073 = !DILocation(line: 136, column: 2, scope: !1982)
!2074 = !DILocation(line: 137, column: 15, scope: !1982)
!2075 = !DILocation(line: 137, column: 3, scope: !1982)
!2076 = !DILocation(line: 141, column: 28, scope: !1982)
!2077 = !DILocation(line: 141, column: 65, scope: !1982)
!2078 = !DILocation(line: 141, column: 76, scope: !1982)
!2079 = !DILocalVariable(name: "marbleAsBytes", scope: !1982, file: !24, line: 141, type: !39)
!2080 = !DILocation(line: 141, column: 2, scope: !1978)
!2081 = !DILocation(line: 141, column: 2, scope: !1982)
!2082 = !DILocation(line: 142, column: 9, scope: !1982)
!2083 = !DILocation(line: 142, column: 2, scope: !1982)
!2084 = !DILocation(line: 143, column: 51, scope: !1982)
!2085 = !DILocation(line: 143, column: 43, scope: !1982)
!2086 = !DILocation(line: 143, column: 15, scope: !1982)
!2087 = !DILocation(line: 143, column: 3, scope: !1982)
!2088 = !DILocation(line: 150, column: 12, scope: !1982)
!2089 = !DILocation(line: 152, column: 15, scope: !1982)
!2090 = !DILocation(line: 152, column: 26, scope: !1982)
!2091 = !DILocation(line: 153, column: 15, scope: !1982)
!2092 = !DILocation(line: 153, column: 26, scope: !1982)
!2093 = !DILocation(line: 154, column: 15, scope: !1982)
!2094 = !DILocation(line: 154, column: 26, scope: !1982)
!2095 = !DILocation(line: 155, column: 15, scope: !1982)
!2096 = !DILocation(line: 155, column: 26, scope: !1982)
!2097 = !DILocation(line: 150, column: 13, scope: !1982)
!2098 = !DILocation(line: 144, column: 12, scope: !1982)
!2099 = !DILocation(line: 144, column: 26, scope: !1982)
!2100 = !DILocation(line: 144, column: 9, scope: !1982)
!2101 = !DILocation(line: 145, column: 48, scope: !1982)
!2102 = !DILocation(line: 145, column: 59, scope: !1982)
!2103 = !DILocation(line: 145, column: 43, scope: !1982)
!2104 = !DILocation(line: 145, column: 7, scope: !1982)
!2105 = !DILocation(line: 146, column: 54, scope: !1982)
!2106 = !DILocation(line: 146, column: 65, scope: !1982)
!2107 = !DILocation(line: 146, column: 49, scope: !1982)
!2108 = !DILocation(line: 146, column: 15, scope: !1982)
!2109 = !DILocation(line: 146, column: 3, scope: !1982)
!2110 = !DILocalVariable(name: "marble", scope: !1982, file: !24, line: 150, type: !1747)
!2111 = !DILocation(line: 150, column: 2, scope: !1978)
!2112 = !DILocation(line: 157, column: 41, scope: !1982)
!2113 = !DILocation(line: 157, column: 33, scope: !1982)
!2114 = !DILocalVariable(name: "marbleJSONasBytes", scope: !1982, file: !24, line: 157, type: !39)
!2115 = !DILocation(line: 157, column: 2, scope: !1978)
!2116 = !DILocation(line: 157, column: 2, scope: !1982)
!2117 = !DILocation(line: 158, column: 9, scope: !1982)
!2118 = !DILocation(line: 158, column: 2, scope: !1982)
!2119 = !DILocation(line: 159, column: 24, scope: !1982)
!2120 = !DILocation(line: 159, column: 15, scope: !1982)
!2121 = !DILocation(line: 159, column: 3, scope: !1982)
!2122 = !DILocation(line: 163, column: 12, scope: !1982)
!2123 = !DILocation(line: 163, column: 49, scope: !1982)
!2124 = !DILocation(line: 163, column: 60, scope: !1982)
!2125 = !DILocation(line: 163, column: 6, scope: !1982)
!2126 = !DILocation(line: 164, column: 9, scope: !1982)
!2127 = !DILocation(line: 164, column: 2, scope: !1982)
!2128 = !DILocation(line: 165, column: 24, scope: !1982)
!2129 = !DILocation(line: 165, column: 15, scope: !1982)
!2130 = !DILocation(line: 165, column: 3, scope: !1982)
!2131 = !DILocation(line: 169, column: 26, scope: !1982)
!2132 = !DILocation(line: 171, column: 15, scope: !1982)
!2133 = !DILocation(line: 171, column: 26, scope: !1982)
!2134 = !DILocation(line: 172, column: 15, scope: !1982)
!2135 = !DILocation(line: 172, column: 26, scope: !1982)
!2136 = !DILocation(line: 169, column: 27, scope: !1982)
!2137 = !DILocalVariable(name: "marblePrivateDetails", scope: !1982, file: !24, line: 169, type: !2138)
!2138 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2139, size: 64)
!2139 = !DICompositeType(tag: DW_TAG_structure_type, name: ".command-line-arguments.marblePrivateDetails", file: !24, line: 29, size: 320, align: 8, elements: !2140)
!2140 = !{!2141, !2142, !2143}
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "ObjectType", file: !24, line: 30, baseType: !32, size: 128, align: 64)
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "Name", file: !24, line: 31, baseType: !32, size: 128, align: 64, offset: 128)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "Price", file: !24, line: 32, baseType: !37, size: 64, align: 64, offset: 256)
!2144 = !DILocation(line: 169, column: 2, scope: !1978)
!2145 = !DILocation(line: 174, column: 49, scope: !1982)
!2146 = !DILocation(line: 174, column: 41, scope: !1982)
!2147 = !DILocalVariable(name: "marblePrivateDetailsBytes", scope: !1982, file: !24, line: 174, type: !39)
!2148 = !DILocation(line: 174, column: 2, scope: !1978)
!2149 = !DILocation(line: 174, column: 2, scope: !1982)
!2150 = !DILocation(line: 175, column: 9, scope: !1982)
!2151 = !DILocation(line: 175, column: 2, scope: !1982)
!2152 = !DILocation(line: 176, column: 24, scope: !1982)
!2153 = !DILocation(line: 176, column: 15, scope: !1982)
!2154 = !DILocation(line: 176, column: 3, scope: !1982)
!2155 = !DILocation(line: 178, column: 12, scope: !1982)
!2156 = !DILocation(line: 178, column: 62, scope: !1982)
!2157 = !DILocation(line: 178, column: 73, scope: !1982)
!2158 = !DILocation(line: 178, column: 6, scope: !1982)
!2159 = !DILocation(line: 179, column: 9, scope: !1982)
!2160 = !DILocation(line: 179, column: 2, scope: !1982)
!2161 = !DILocation(line: 180, column: 24, scope: !1982)
!2162 = !DILocation(line: 180, column: 15, scope: !1982)
!2163 = !DILocation(line: 180, column: 3, scope: !1982)
!2164 = !DILocalVariable(name: "indexName", scope: !1982, file: !24, line: 188, type: !32)
!2165 = !DILocation(line: 188, column: 2, scope: !1978)
!2166 = !DILocation(line: 189, column: 32, scope: !1982)
!2167 = !DILocation(line: 189, column: 63, scope: !1982)
!2168 = !DILocation(line: 189, column: 72, scope: !1982)
!2169 = !DILocation(line: 189, column: 78, scope: !1982)
!2170 = !DILocation(line: 189, column: 86, scope: !1982)
!2171 = !DILocation(line: 189, column: 92, scope: !1982)
!2172 = !DILocalVariable(name: "colorNameIndexKey", scope: !1982, file: !24, line: 189, type: !32)
!2173 = !DILocation(line: 189, column: 2, scope: !1978)
!2174 = !DILocation(line: 189, column: 2, scope: !1982)
!2175 = !DILocation(line: 190, column: 9, scope: !1982)
!2176 = !DILocation(line: 190, column: 2, scope: !1982)
!2177 = !DILocation(line: 191, column: 24, scope: !1982)
!2178 = !DILocation(line: 191, column: 15, scope: !1982)
!2179 = !DILocation(line: 191, column: 3, scope: !1982)
!2180 = !DILocation(line: 195, column: 11, scope: !1982)
!2181 = !DILocation(line: 196, column: 12, scope: !1982)
!2182 = !DILocation(line: 196, column: 6, scope: !1982)
!2183 = !DILocation(line: 197, column: 9, scope: !1982)
!2184 = !DILocation(line: 197, column: 2, scope: !1982)
!2185 = !DILocation(line: 198, column: 24, scope: !1982)
!2186 = !DILocation(line: 198, column: 15, scope: !1982)
!2187 = !DILocation(line: 198, column: 3, scope: !1982)
!2188 = !DILocation(line: 202, column: 6, scope: !1982)
!2189 = !DILocation(line: 203, column: 14, scope: !1982)
!2190 = !DILocation(line: 203, column: 2, scope: !1982)
!2191 = distinct !DISubprogram(name: "command-line-arguments.MarblesPrivateChaincode.readMarble", linkageName: "command_x2dline_x2darguments.MarblesPrivateChaincode.readMarble", scope: null, file: !24, line: 209, type: !1667, scopeLine: 209, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!2192 = !DILocalVariable(name: "args", arg: 3, scope: !2191, file: !24, line: 209, type: !120)
!2193 = !DILocation(line: 209, column: 80, scope: !2191)
!2194 = !DILocalVariable(name: "t", arg: 1, scope: !2191, file: !24, line: 209, type: !49)
!2195 = !DILocation(line: 209, column: 1, scope: !2191)
!2196 = !DILocalVariable(name: "stub", arg: 2, scope: !2191, file: !24, line: 209, type: !51)
!2197 = !DILocation(line: 209, column: 46, scope: !2191)
!2198 = !DILocalVariable(name: "$ret3", scope: !2191, file: !24, line: 209, type: !27)
!2199 = !DILocation(line: 209, column: 95, scope: !2191)
!2200 = !DILocalVariable(name: "name", scope: !2201, file: !24, line: 210, type: !32)
!2201 = distinct !DILexicalBlock(scope: !2191, file: !24, line: 209, column: 1)
!2202 = !DILocation(line: 210, column: 6, scope: !2191)
!2203 = !DILocalVariable(name: "jsonResp", scope: !2201, file: !24, line: 210, type: !32)
!2204 = !DILocation(line: 210, column: 12, scope: !2191)
!2205 = !DILocalVariable(name: "err", scope: !2201, file: !24, line: 211, type: !108)
!2206 = !DILocation(line: 211, column: 6, scope: !2191)
!2207 = !DILocation(line: 213, column: 9, scope: !2201)
!2208 = !DILocation(line: 213, column: 15, scope: !2201)
!2209 = !DILocation(line: 213, column: 2, scope: !2201)
!2210 = !DILocation(line: 214, column: 15, scope: !2201)
!2211 = !DILocation(line: 214, column: 3, scope: !2201)
!2212 = !DILocation(line: 217, column: 9, scope: !2201)
!2213 = !DILocation(line: 217, column: 13, scope: !2201)
!2214 = !DILocation(line: 217, column: 7, scope: !2201)
!2215 = !DILocation(line: 218, column: 25, scope: !2201)
!2216 = !DILocalVariable(name: "valAsbytes", scope: !2201, file: !24, line: 218, type: !39)
!2217 = !DILocation(line: 218, column: 2, scope: !2191)
!2218 = !DILocation(line: 218, column: 2, scope: !2201)
!2219 = !DILocation(line: 219, column: 9, scope: !2201)
!2220 = !DILocation(line: 219, column: 2, scope: !2201)
!2221 = !DILocation(line: 220, column: 73, scope: !2201)
!2222 = !DILocation(line: 220, column: 51, scope: !2201)
!2223 = !DILocation(line: 220, column: 12, scope: !2201)
!2224 = !DILocation(line: 221, column: 15, scope: !2201)
!2225 = !DILocation(line: 221, column: 3, scope: !2201)
!2226 = !DILocation(line: 227, column: 14, scope: !2201)
!2227 = !DILocation(line: 227, column: 2, scope: !2201)
!2228 = !DILocation(line: 222, column: 12, scope: !2201)
!2229 = !DILocation(line: 222, column: 23, scope: !2201)
!2230 = !DILocation(line: 222, column: 9, scope: !2201)
!2231 = !DILocation(line: 223, column: 50, scope: !2201)
!2232 = !DILocation(line: 223, column: 12, scope: !2201)
!2233 = !DILocation(line: 224, column: 15, scope: !2201)
!2234 = !DILocation(line: 224, column: 3, scope: !2201)
!2235 = distinct !DISubprogram(name: "command-line-arguments.MarblesPrivateChaincode.readMarblePrivateDetails", linkageName: "command_x2dline_x2darguments.MarblesPrivateChaincode.readMarblePrivateDetails", scope: null, file: !24, line: 233, type: !1667, scopeLine: 233, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!2236 = !DILocalVariable(name: "args", arg: 3, scope: !2235, file: !24, line: 233, type: !120)
!2237 = !DILocation(line: 233, column: 94, scope: !2235)
!2238 = !DILocalVariable(name: "t", arg: 1, scope: !2235, file: !24, line: 233, type: !49)
!2239 = !DILocation(line: 233, column: 1, scope: !2235)
!2240 = !DILocalVariable(name: "stub", arg: 2, scope: !2235, file: !24, line: 233, type: !51)
!2241 = !DILocation(line: 233, column: 60, scope: !2235)
!2242 = !DILocalVariable(name: "$ret4", scope: !2235, file: !24, line: 233, type: !27)
!2243 = !DILocation(line: 233, column: 109, scope: !2235)
!2244 = !DILocalVariable(name: "name", scope: !2245, file: !24, line: 234, type: !32)
!2245 = distinct !DILexicalBlock(scope: !2235, file: !24, line: 233, column: 1)
!2246 = !DILocation(line: 234, column: 6, scope: !2235)
!2247 = !DILocalVariable(name: "jsonResp", scope: !2245, file: !24, line: 234, type: !32)
!2248 = !DILocation(line: 234, column: 12, scope: !2235)
!2249 = !DILocalVariable(name: "err", scope: !2245, file: !24, line: 235, type: !108)
!2250 = !DILocation(line: 235, column: 6, scope: !2235)
!2251 = !DILocation(line: 237, column: 9, scope: !2245)
!2252 = !DILocation(line: 237, column: 15, scope: !2245)
!2253 = !DILocation(line: 237, column: 2, scope: !2245)
!2254 = !DILocation(line: 238, column: 15, scope: !2245)
!2255 = !DILocation(line: 238, column: 3, scope: !2245)
!2256 = !DILocation(line: 241, column: 9, scope: !2245)
!2257 = !DILocation(line: 241, column: 13, scope: !2245)
!2258 = !DILocation(line: 241, column: 7, scope: !2245)
!2259 = !DILocation(line: 242, column: 25, scope: !2245)
!2260 = !DILocalVariable(name: "valAsbytes", scope: !2245, file: !24, line: 242, type: !39)
!2261 = !DILocation(line: 242, column: 2, scope: !2235)
!2262 = !DILocation(line: 242, column: 2, scope: !2245)
!2263 = !DILocation(line: 243, column: 9, scope: !2245)
!2264 = !DILocation(line: 243, column: 2, scope: !2245)
!2265 = !DILocation(line: 244, column: 83, scope: !2245)
!2266 = !DILocation(line: 244, column: 61, scope: !2245)
!2267 = !DILocation(line: 244, column: 12, scope: !2245)
!2268 = !DILocation(line: 245, column: 15, scope: !2245)
!2269 = !DILocation(line: 245, column: 3, scope: !2245)
!2270 = !DILocation(line: 251, column: 14, scope: !2245)
!2271 = !DILocation(line: 251, column: 2, scope: !2245)
!2272 = !DILocation(line: 246, column: 12, scope: !2245)
!2273 = !DILocation(line: 246, column: 23, scope: !2245)
!2274 = !DILocation(line: 246, column: 9, scope: !2245)
!2275 = !DILocation(line: 247, column: 66, scope: !2245)
!2276 = !DILocation(line: 247, column: 12, scope: !2245)
!2277 = !DILocation(line: 248, column: 15, scope: !2245)
!2278 = !DILocation(line: 248, column: 3, scope: !2245)
!2279 = distinct !DISubprogram(name: "command-line-arguments.MarblesPrivateChaincode.transferMarble", linkageName: "command_x2dline_x2darguments.MarblesPrivateChaincode.transferMarble", scope: null, file: !24, line: 383, type: !1667, scopeLine: 383, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!2280 = !DILocalVariable(name: "args", arg: 3, scope: !2279, file: !24, line: 383, type: !120)
!2281 = !DILocation(line: 383, column: 84, scope: !2279)
!2282 = !DILocalVariable(name: "t", arg: 1, scope: !2279, file: !24, line: 383, type: !49)
!2283 = !DILocation(line: 383, column: 1, scope: !2279)
!2284 = !DILocalVariable(name: "stub", arg: 2, scope: !2279, file: !24, line: 383, type: !51)
!2285 = !DILocation(line: 383, column: 50, scope: !2279)
!2286 = !DILocalVariable(name: "$ret8", scope: !2279, file: !24, line: 383, type: !27)
!2287 = !DILocation(line: 383, column: 99, scope: !2279)
!2288 = !DILocation(line: 384, column: 6, scope: !2289)
!2289 = distinct !DILexicalBlock(scope: !2279, file: !24, line: 383, column: 1)
!2290 = !DILocation(line: 391, column: 9, scope: !2289)
!2291 = !DILocation(line: 391, column: 15, scope: !2289)
!2292 = !DILocation(line: 391, column: 2, scope: !2289)
!2293 = !DILocation(line: 392, column: 15, scope: !2289)
!2294 = !DILocation(line: 392, column: 3, scope: !2289)
!2295 = !DILocation(line: 395, column: 23, scope: !2289)
!2296 = !DILocalVariable(name: "transMap", scope: !2289, file: !24, line: 395, type: !154)
!2297 = !DILocation(line: 395, column: 2, scope: !2279)
!2298 = !DILocalVariable(name: "err", scope: !2289, file: !24, line: 395, type: !108)
!2299 = !DILocation(line: 396, column: 9, scope: !2289)
!2300 = !DILocation(line: 396, column: 2, scope: !2289)
!2301 = !DILocation(line: 397, column: 54, scope: !2289)
!2302 = !DILocation(line: 397, column: 46, scope: !2289)
!2303 = !DILocation(line: 397, column: 15, scope: !2289)
!2304 = !DILocation(line: 397, column: 3, scope: !2289)
!2305 = !DILocalVariable(name: "marbleOwnerJsonBytes", scope: !2289, file: !24, line: 400, type: !39)
!2306 = !DILocation(line: 400, column: 2, scope: !2279)
!2307 = !DILocalVariable(name: "ok", scope: !2289, file: !24, line: 400, type: !13)
!2308 = !DILocation(line: 400, column: 30, scope: !2289)
!2309 = !DILocation(line: 400, column: 2, scope: !2289)
!2310 = !DILocation(line: 401, column: 6, scope: !2289)
!2311 = !DILocation(line: 401, column: 5, scope: !2289)
!2312 = !DILocation(line: 401, column: 2, scope: !2289)
!2313 = !DILocation(line: 402, column: 15, scope: !2289)
!2314 = !DILocation(line: 402, column: 3, scope: !2289)
!2315 = !DILocation(line: 405, column: 9, scope: !2289)
!2316 = !DILocation(line: 405, column: 31, scope: !2289)
!2317 = !DILocation(line: 405, column: 2, scope: !2289)
!2318 = !DILocation(line: 406, column: 15, scope: !2289)
!2319 = !DILocation(line: 406, column: 3, scope: !2289)
!2320 = !DILocation(line: 409, column: 6, scope: !2289)
!2321 = !DILocalVariable(name: "marbleTransferInput", scope: !2289, file: !24, line: 409, type: !2322)
!2322 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2323, size: 64)
!2323 = !DICompositeType(tag: DW_TAG_structure_type, name: ".command-line-arguments.marbleTransferTransientInput", file: !24, line: 386, size: 256, align: 8, elements: !2324)
!2324 = !{!2325, !2326}
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "Name", file: !24, line: 387, baseType: !32, size: 128, align: 64)
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "Owner", file: !24, line: 388, baseType: !32, size: 128, align: 64, offset: 128)
!2327 = !DILocation(line: 409, column: 6, scope: !2279)
!2328 = !DILocation(line: 410, column: 46, scope: !2289)
!2329 = !DILocation(line: 410, column: 13, scope: !2289)
!2330 = !DILocation(line: 410, column: 6, scope: !2289)
!2331 = !DILocation(line: 411, column: 9, scope: !2289)
!2332 = !DILocation(line: 411, column: 2, scope: !2289)
!2333 = !DILocation(line: 412, column: 52, scope: !2289)
!2334 = !DILocation(line: 412, column: 47, scope: !2289)
!2335 = !DILocation(line: 412, column: 15, scope: !2289)
!2336 = !DILocation(line: 412, column: 3, scope: !2289)
!2337 = !DILocation(line: 415, column: 9, scope: !2289)
!2338 = !DILocation(line: 415, column: 28, scope: !2289)
!2339 = !DILocation(line: 415, column: 5, scope: !2289)
!2340 = !DILocation(line: 415, column: 35, scope: !2289)
!2341 = !DILocation(line: 415, column: 2, scope: !2289)
!2342 = !DILocation(line: 416, column: 15, scope: !2289)
!2343 = !DILocation(line: 416, column: 3, scope: !2289)
!2344 = !DILocation(line: 418, column: 9, scope: !2289)
!2345 = !DILocation(line: 418, column: 28, scope: !2289)
!2346 = !DILocation(line: 418, column: 5, scope: !2289)
!2347 = !DILocation(line: 418, column: 36, scope: !2289)
!2348 = !DILocation(line: 418, column: 2, scope: !2289)
!2349 = !DILocation(line: 419, column: 15, scope: !2289)
!2350 = !DILocation(line: 419, column: 3, scope: !2289)
!2351 = !DILocation(line: 422, column: 28, scope: !2289)
!2352 = !DILocation(line: 422, column: 65, scope: !2289)
!2353 = !DILocation(line: 422, column: 84, scope: !2289)
!2354 = !DILocalVariable(name: "marbleAsBytes", scope: !2289, file: !24, line: 422, type: !39)
!2355 = !DILocation(line: 422, column: 2, scope: !2279)
!2356 = !DILocation(line: 422, column: 2, scope: !2289)
!2357 = !DILocation(line: 423, column: 9, scope: !2289)
!2358 = !DILocation(line: 423, column: 2, scope: !2289)
!2359 = !DILocation(line: 424, column: 50, scope: !2289)
!2360 = !DILocation(line: 424, column: 42, scope: !2289)
!2361 = !DILocation(line: 424, column: 15, scope: !2289)
!2362 = !DILocation(line: 424, column: 3, scope: !2289)
!2363 = !DILocation(line: 429, column: 2, scope: !2289)
!2364 = !DILocalVariable(name: "marbleToTransfer", scope: !2289, file: !24, line: 429, type: !1747)
!2365 = !DILocation(line: 429, column: 2, scope: !2279)
!2366 = !DILocation(line: 429, column: 22, scope: !2289)
!2367 = !DILocation(line: 425, column: 12, scope: !2289)
!2368 = !DILocation(line: 425, column: 26, scope: !2289)
!2369 = !DILocation(line: 425, column: 9, scope: !2289)
!2370 = !DILocation(line: 426, column: 49, scope: !2289)
!2371 = !DILocation(line: 426, column: 68, scope: !2289)
!2372 = !DILocation(line: 426, column: 44, scope: !2289)
!2373 = !DILocation(line: 426, column: 15, scope: !2289)
!2374 = !DILocation(line: 426, column: 3, scope: !2289)
!2375 = !DILocation(line: 430, column: 39, scope: !2289)
!2376 = !DILocation(line: 430, column: 13, scope: !2289)
!2377 = !DILocation(line: 430, column: 6, scope: !2289)
!2378 = !DILocation(line: 431, column: 9, scope: !2289)
!2379 = !DILocation(line: 431, column: 2, scope: !2289)
!2380 = !DILocation(line: 432, column: 24, scope: !2289)
!2381 = !DILocation(line: 432, column: 15, scope: !2289)
!2382 = !DILocation(line: 432, column: 3, scope: !2289)
!2383 = !DILocation(line: 434, column: 2, scope: !2289)
!2384 = !DILocation(line: 434, column: 18, scope: !2289)
!2385 = !DILocation(line: 434, column: 27, scope: !2289)
!2386 = !DILocation(line: 434, column: 46, scope: !2289)
!2387 = !DILocation(line: 434, column: 25, scope: !2289)
!2388 = !DILocation(line: 436, column: 31, scope: !2289)
!2389 = !DILocation(line: 436, column: 39, scope: !2289)
!2390 = !DILocalVariable(name: "marbleJSONasBytes", scope: !2289, file: !24, line: 436, type: !39)
!2391 = !DILocation(line: 436, column: 2, scope: !2279)
!2392 = !DILocalVariable(name: "sink$0", scope: !2289, file: !24, line: 436, type: !108)
!2393 = !DILocation(line: 437, column: 12, scope: !2289)
!2394 = !DILocation(line: 437, column: 49, scope: !2289)
!2395 = !DILocation(line: 437, column: 65, scope: !2289)
!2396 = !DILocation(line: 437, column: 6, scope: !2289)
!2397 = !DILocation(line: 438, column: 9, scope: !2289)
!2398 = !DILocation(line: 438, column: 2, scope: !2289)
!2399 = !DILocation(line: 439, column: 24, scope: !2289)
!2400 = !DILocation(line: 439, column: 15, scope: !2289)
!2401 = !DILocation(line: 439, column: 3, scope: !2289)
!2402 = !DILocation(line: 442, column: 6, scope: !2289)
!2403 = !DILocation(line: 443, column: 14, scope: !2289)
!2404 = !DILocation(line: 443, column: 2, scope: !2289)
!2405 = distinct !DISubprogram(name: "command_x2dline_x2darguments.marble..eq", scope: null, file: !8, line: 1, type: !76, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!2406 = !DILocalVariable(name: "key1", arg: 1, scope: !2405, file: !8, line: 1, type: !78)
!2407 = !DILocation(line: 1, column: 1, scope: !2405)
!2408 = !DILocalVariable(name: "key2", arg: 2, scope: !2405, file: !8, line: 1, type: !78)
!2409 = !DILocalVariable(name: "$ret12", scope: !2405, file: !8, line: 1, type: !13)
!2410 = distinct !DISubprogram(name: "command_x2dline_x2darguments.marblePrivateDetails..eq", scope: null, file: !8, line: 1, type: !76, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!2411 = !DILocalVariable(name: "key1", arg: 1, scope: !2410, file: !8, line: 1, type: !78)
!2412 = !DILocation(line: 1, column: 1, scope: !2410)
!2413 = !DILocalVariable(name: "key2", arg: 2, scope: !2410, file: !8, line: 1, type: !78)
!2414 = !DILocalVariable(name: "$ret13", scope: !2410, file: !8, line: 1, type: !13)
!2415 = distinct !DISubprogram(name: "command_x2dline_x2darguments_0MarblesPrivateChaincode_0initMarble_0marbleTransientInput..eq", scope: null, file: !8, line: 1, type: !76, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!2416 = !DILocalVariable(name: "key1", arg: 1, scope: !2415, file: !8, line: 1, type: !78)
!2417 = !DILocation(line: 1, column: 1, scope: !2415)
!2418 = !DILocalVariable(name: "key2", arg: 2, scope: !2415, file: !8, line: 1, type: !78)
!2419 = !DILocalVariable(name: "$ret14", scope: !2415, file: !8, line: 1, type: !13)
!2420 = distinct !DISubprogram(name: "command_x2dline_x2darguments_0MarblesPrivateChaincode_0delete_0marbleDeleteTransientInput..eq", scope: null, file: !8, line: 1, type: !76, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!2421 = !DILocalVariable(name: "key1", arg: 1, scope: !2420, file: !8, line: 1, type: !78)
!2422 = !DILocation(line: 1, column: 1, scope: !2420)
!2423 = !DILocalVariable(name: "key2", arg: 2, scope: !2420, file: !8, line: 1, type: !78)
!2424 = !DILocalVariable(name: "$ret15", scope: !2420, file: !8, line: 1, type: !13)
!2425 = distinct !DISubprogram(name: "command_x2dline_x2darguments_0MarblesPrivateChaincode_0transferMarble_0marbleTransferTransientInput..eq", scope: null, file: !8, line: 1, type: !76, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!2426 = !DILocalVariable(name: "key1", arg: 1, scope: !2425, file: !8, line: 1, type: !78)
!2427 = !DILocation(line: 1, column: 1, scope: !2425)
!2428 = !DILocalVariable(name: "key2", arg: 2, scope: !2425, file: !8, line: 1, type: !78)
!2429 = !DILocalVariable(name: "$ret16", scope: !2425, file: !8, line: 1, type: !13)
!2430 = distinct !DISubprogram(name: "command-line-arguments.go..thunk0", scope: null, file: !24, line: 469, type: !2431, scopeLine: 469, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3, retainedNodes: !46)
!2431 = !DISubroutineType(types: !2432)
!2432 = !{!13, !2433}
!2433 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2434, size: 64)
!2434 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{StateQueryIteratorInterface}", file: !10, size: 128, align: 8, elements: !2435)
!2435 = !{!2436}
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "object", file: !10, line: 469, baseType: !1429, size: 128, align: 64)
!2437 = !DILocalVariable(name: "__go_thunk_parameter", arg: 1, scope: !2430, file: !24, line: 469, type: !2433)
!2438 = !DILocation(line: 469, column: 2, scope: !2430)
!2439 = !DILocalVariable(name: "$ret11", scope: !2430, file: !24, line: 469, type: !13)
!2440 = distinct !DISubprogram(name: "github.com/hyperledger/fabric-chaincode-go/shim.GetMSPID", scope: null, file: !2441, line: 138, type: !2442, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3, retainedNodes: !46)
!2441 = !DIFile(filename: "stub.go", directory: " /home/ming/go/pkg/mod/github.com/hyperledger/fabric-chaincode-go@v0.0.0-20220920210243-7bc6fa0dd58b/shim")
!2442 = !DISubroutineType(types: !2443)
!2443 = !{!2444}
!2444 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct{string,error}", file: !10, size: 256, align: 8, elements: !2445)
!2445 = !{!2446, !2447}
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "$ret57", file: !10, line: 14, baseType: !32, size: 128, align: 64)
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "$ret58", file: !10, line: 14, baseType: !108, size: 128, align: 64, offset: 128)
!2448 = !DILocalVariable(name: "$ret57", scope: !2440, file: !24, line: 14, type: !32)
!2449 = !DILocation(line: 14, column: 49, scope: !2450)
!2450 = !DILexicalBlockFile(scope: !2440, file: !24, discriminator: 0)
!2451 = !DILocalVariable(name: "$ret58", scope: !2440, file: !24, line: 14, type: !108)
!2452 = !DILocation(line: 139, scope: !2453)
!2453 = distinct !DILexicalBlock(scope: !2440, file: !2441, line: 138)
!2454 = !DILocalVariable(name: "mspid", scope: !2453, file: !2441, line: 139, type: !32)
!2455 = !DILocation(line: 139, scope: !2440)
!2456 = !DILocation(line: 141, scope: !2453)
!2457 = !DILocation(line: 142, scope: !2453)
!2458 = !DILocation(line: 145, scope: !2453)
!2459 = distinct !DISubprogram(name: "command_x2dline_x2darguments._63_7int32..eq", scope: null, file: !8, line: 1, type: !76, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!2460 = !DILocalVariable(name: "key1", arg: 1, scope: !2459, file: !8, line: 1, type: !78)
!2461 = !DILocation(line: 1, column: 1, scope: !2459)
!2462 = !DILocalVariable(name: "key2", arg: 2, scope: !2459, file: !8, line: 1, type: !78)
!2463 = !DILocalVariable(name: "$ret17", scope: !2459, file: !8, line: 1, type: !13)
!2464 = distinct !DISubprogram(name: "command_x2dline_x2darguments._628_7uint8..eq", scope: null, file: !8, line: 1, type: !76, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!2465 = !DILocalVariable(name: "key1", arg: 1, scope: !2464, file: !8, line: 1, type: !78)
!2466 = !DILocation(line: 1, column: 1, scope: !2464)
!2467 = !DILocalVariable(name: "key2", arg: 2, scope: !2464, file: !8, line: 1, type: !78)
!2468 = !DILocalVariable(name: "$ret18", scope: !2464, file: !8, line: 1, type: !13)
!2469 = distinct !DISubprogram(name: "command_x2dline_x2darguments._62_7google_0golang_0org_1protobuf_1reflect_1protoreflect_0EnumNumber..eq", scope: null, file: !8, line: 1, type: !76, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!2470 = !DILocalVariable(name: "key1", arg: 1, scope: !2469, file: !8, line: 1, type: !78)
!2471 = !DILocation(line: 1, column: 1, scope: !2469)
!2472 = !DILocalVariable(name: "key2", arg: 2, scope: !2469, file: !8, line: 1, type: !78)
!2473 = !DILocalVariable(name: "$ret19", scope: !2469, file: !8, line: 1, type: !13)
!2474 = distinct !DISubprogram(name: "command_x2dline_x2darguments._62_7google_0golang_0org_1protobuf_1encoding_1protowire_0Number..eq", scope: null, file: !8, line: 1, type: !76, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!2475 = !DILocalVariable(name: "key1", arg: 1, scope: !2474, file: !8, line: 1, type: !78)
!2476 = !DILocation(line: 1, column: 1, scope: !2474)
!2477 = !DILocalVariable(name: "key2", arg: 2, scope: !2474, file: !8, line: 1, type: !78)
!2478 = !DILocalVariable(name: "$ret20", scope: !2474, file: !8, line: 1, type: !13)
!2479 = distinct !DISubprogram(name: "command_x2dline_x2darguments.struct_4google_0golang_0org_1protobuf_1internal_1pragma_0NoUnkeyedLiterals_cMessage_bgoogle_0golang_0org_1protobuf_1reflect_1protoreflect_0Message_cFlags_buint8_5..eq", scope: null, file: !8, line: 1, type: !76, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!2480 = !DILocalVariable(name: "key1", arg: 1, scope: !2479, file: !8, line: 1, type: !78)
!2481 = !DILocation(line: 1, column: 1, scope: !2479)
!2482 = !DILocalVariable(name: "key2", arg: 2, scope: !2479, file: !8, line: 1, type: !78)
!2483 = !DILocalVariable(name: "$ret21", scope: !2479, file: !8, line: 1, type: !13)
!2484 = distinct !DISubprogram(name: "command_x2dline_x2darguments.struct_4google_0golang_0org_1protobuf_1internal_1pragma_0NoUnkeyedLiterals_cSource_bgoogle_0golang_0org_1protobuf_1reflect_1protoreflect_0Message_cDestination_bgoogle_0golang_0org_1protobuf_1reflect_1protoreflect_0Message_5..eq", scope: null, file: !8, line: 1, type: !76, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!2485 = !DILocalVariable(name: "key1", arg: 1, scope: !2484, file: !8, line: 1, type: !78)
!2486 = !DILocation(line: 1, column: 1, scope: !2484)
!2487 = !DILocalVariable(name: "key2", arg: 2, scope: !2484, file: !8, line: 1, type: !78)
!2488 = !DILocalVariable(name: "$ret22", scope: !2484, file: !8, line: 1, type: !13)
!2489 = distinct !DISubprogram(name: "command_x2dline_x2darguments.struct_4google_0golang_0org_1protobuf_1internal_1pragma_0NoUnkeyedLiterals_cMessage_bgoogle_0golang_0org_1protobuf_1reflect_1protoreflect_0Message_5..eq", scope: null, file: !8, line: 1, type: !76, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!2490 = !DILocalVariable(name: "key1", arg: 1, scope: !2489, file: !8, line: 1, type: !78)
!2491 = !DILocation(line: 1, column: 1, scope: !2489)
!2492 = !DILocalVariable(name: "key2", arg: 2, scope: !2489, file: !8, line: 1, type: !78)
!2493 = !DILocalVariable(name: "$ret23", scope: !2489, file: !8, line: 1, type: !13)
!2494 = distinct !DISubprogram(name: "command_x2dline_x2darguments._68_7uint8..eq", scope: null, file: !8, line: 1, type: !76, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!2495 = !DILocalVariable(name: "key1", arg: 1, scope: !2494, file: !8, line: 1, type: !78)
!2496 = !DILocation(line: 1, column: 1, scope: !2494)
!2497 = !DILocalVariable(name: "key2", arg: 2, scope: !2494, file: !8, line: 1, type: !78)
!2498 = !DILocalVariable(name: "$ret24", scope: !2494, file: !8, line: 1, type: !13)
!2499 = distinct !DISubprogram(name: "command_x2dline_x2darguments._614_7int8..eq", scope: null, file: !8, line: 1, type: !76, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!2500 = !DILocalVariable(name: "key1", arg: 1, scope: !2499, file: !8, line: 1, type: !78)
!2501 = !DILocation(line: 1, column: 1, scope: !2499)
!2502 = !DILocalVariable(name: "key2", arg: 2, scope: !2499, file: !8, line: 1, type: !78)
!2503 = !DILocalVariable(name: "$ret25", scope: !2499, file: !8, line: 1, type: !13)
!2504 = distinct !DISubprogram(name: "command_x2dline_x2darguments._696_7int8..eq", scope: null, file: !8, line: 1, type: !76, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!2505 = !DILocalVariable(name: "key1", arg: 1, scope: !2504, file: !8, line: 1, type: !78)
!2506 = !DILocation(line: 1, column: 1, scope: !2504)
!2507 = !DILocalVariable(name: "key2", arg: 2, scope: !2504, file: !8, line: 1, type: !78)
!2508 = !DILocalVariable(name: "$ret26", scope: !2504, file: !8, line: 1, type: !13)
!2509 = distinct !DISubprogram(name: "command_x2dline_x2darguments._6256_7uint8..eq", scope: null, file: !8, line: 1, type: !76, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !3, retainedNodes: !46)
!2510 = !DILocalVariable(name: "key1", arg: 1, scope: !2509, file: !8, line: 1, type: !78)
!2511 = !DILocation(line: 1, column: 1, scope: !2509)
!2512 = !DILocalVariable(name: "key2", arg: 2, scope: !2509, file: !8, line: 1, type: !78)
!2513 = !DILocalVariable(name: "$ret27", scope: !2509, file: !8, line: 1, type: !13)
